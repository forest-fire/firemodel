{"version":3,"file":"firemodel.min.js","sources":["../lib/decorators/property.js","../node_modules/reflect-metadata/Reflect.js","../lib/decorators/decorator.js","../lib/decorators/relationship.js","../lib/decorators/schema.js","../lib/base-schema.js","../lib/model.js","../lib/record.js","../lib/list.js","../node_modules/firebase-key/dist/esm5/key-milliseconds.js","../node_modules/firebase-key/dist/esm5/text-repeat.js","../node_modules/firebase-key/dist/esm5/key-key.js","../node_modules/firebase-key/dist/esm5/key-date.js","../node_modules/firebase-key/dist/esm5/key-decode.js","../node_modules/firebase-key/dist/esm5/key-decode-lexicographic.js","../node_modules/firebase-key/dist/esm5/key-decrement.js","../node_modules/firebase-key/dist/esm5/key-encode.js","../node_modules/firebase-key/dist/esm5/key-encode-lexicographic.js","../node_modules/firebase-key/dist/esm5/key-increment.js","../node_modules/firebase-key/dist/esm5/text-random-string.js","../lib/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"reflect-metadata\");\nconst decorator_1 = require(\"./decorator\");\nfunction constrainedProperty(options = {}) {\n    return decorator_1.propertyDecorator(Object.assign({}, options, { isRelationship: false, isProperty: true }), \"property\");\n}\nexports.constrainedProperty = constrainedProperty;\n/** allows the introduction of a new constraint to the metadata of a property */\nfunction constrain(prop, value) {\n    return decorator_1.propertyDecorator({ [prop]: value });\n}\nexports.constrain = constrain;\nfunction desc(value) {\n    return decorator_1.propertyDecorator({ desc: value });\n}\nexports.desc = desc;\nfunction min(value) {\n    return decorator_1.propertyDecorator({ min: value });\n}\nexports.min = min;\nfunction max(value) {\n    return decorator_1.propertyDecorator({ max: value });\n}\nexports.max = max;\nfunction length(value) {\n    return decorator_1.propertyDecorator({ length: value });\n}\nexports.length = length;\nexports.property = decorator_1.propertyDecorator({\n    isRelationship: false,\n    isProperty: true\n}, \"property\");\nexports.pushKey = decorator_1.propertyDecorator({\n    pushKey: true\n}, \"property\");\n//# sourceMappingURL=property.js.map","/*! *****************************************************************************\r\nCopyright (C) Microsoft. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\nvar Reflect;\r\n(function (Reflect) {\r\n    // Metadata Proposal\r\n    // https://rbuckton.github.io/reflect-metadata/\r\n    (function (factory) {\r\n        var root = typeof global === \"object\" ? global :\r\n            typeof self === \"object\" ? self :\r\n                typeof this === \"object\" ? this :\r\n                    Function(\"return this;\")();\r\n        var exporter = makeExporter(Reflect);\r\n        if (typeof root.Reflect === \"undefined\") {\r\n            root.Reflect = Reflect;\r\n        }\r\n        else {\r\n            exporter = makeExporter(root.Reflect, exporter);\r\n        }\r\n        factory(exporter);\r\n        function makeExporter(target, previous) {\r\n            return function (key, value) {\r\n                if (typeof target[key] !== \"function\") {\r\n                    Object.defineProperty(target, key, { configurable: true, writable: true, value: value });\r\n                }\r\n                if (previous)\r\n                    previous(key, value);\r\n            };\r\n        }\r\n    })(function (exporter) {\r\n        var hasOwn = Object.prototype.hasOwnProperty;\r\n        // feature test for Symbol support\r\n        var supportsSymbol = typeof Symbol === \"function\";\r\n        var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== \"undefined\" ? Symbol.toPrimitive : \"@@toPrimitive\";\r\n        var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== \"undefined\" ? Symbol.iterator : \"@@iterator\";\r\n        var supportsCreate = typeof Object.create === \"function\"; // feature test for Object.create support\r\n        var supportsProto = { __proto__: [] } instanceof Array; // feature test for __proto__ support\r\n        var downLevel = !supportsCreate && !supportsProto;\r\n        var HashMap = {\r\n            // create an object in dictionary mode (a.k.a. \"slow\" mode in v8)\r\n            create: supportsCreate\r\n                ? function () { return MakeDictionary(Object.create(null)); }\r\n                : supportsProto\r\n                    ? function () { return MakeDictionary({ __proto__: null }); }\r\n                    : function () { return MakeDictionary({}); },\r\n            has: downLevel\r\n                ? function (map, key) { return hasOwn.call(map, key); }\r\n                : function (map, key) { return key in map; },\r\n            get: downLevel\r\n                ? function (map, key) { return hasOwn.call(map, key) ? map[key] : undefined; }\r\n                : function (map, key) { return map[key]; },\r\n        };\r\n        // Load global or shim versions of Map, Set, and WeakMap\r\n        var functionPrototype = Object.getPrototypeOf(Function);\r\n        var usePolyfill = typeof process === \"object\" && process.env && process.env[\"REFLECT_METADATA_USE_MAP_POLYFILL\"] === \"true\";\r\n        var _Map = !usePolyfill && typeof Map === \"function\" && typeof Map.prototype.entries === \"function\" ? Map : CreateMapPolyfill();\r\n        var _Set = !usePolyfill && typeof Set === \"function\" && typeof Set.prototype.entries === \"function\" ? Set : CreateSetPolyfill();\r\n        var _WeakMap = !usePolyfill && typeof WeakMap === \"function\" ? WeakMap : CreateWeakMapPolyfill();\r\n        // [[Metadata]] internal slot\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinary-object-internal-methods-and-internal-slots\r\n        var Metadata = new _WeakMap();\r\n        /**\r\n         * Applies a set of decorators to a property of a target object.\r\n         * @param decorators An array of decorators.\r\n         * @param target The target object.\r\n         * @param propertyKey (Optional) The property key to decorate.\r\n         * @param attributes (Optional) The property descriptor for the target key.\r\n         * @remarks Decorators are applied in reverse order.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     Example = Reflect.decorate(decoratorsArray, Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     Reflect.decorate(decoratorsArray, Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     Reflect.decorate(decoratorsArray, Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     Object.defineProperty(Example, \"staticMethod\",\r\n         *         Reflect.decorate(decoratorsArray, Example, \"staticMethod\",\r\n         *             Object.getOwnPropertyDescriptor(Example, \"staticMethod\")));\r\n         *\r\n         *     // method (on prototype)\r\n         *     Object.defineProperty(Example.prototype, \"method\",\r\n         *         Reflect.decorate(decoratorsArray, Example.prototype, \"method\",\r\n         *             Object.getOwnPropertyDescriptor(Example.prototype, \"method\")));\r\n         *\r\n         */\r\n        function decorate(decorators, target, propertyKey, attributes) {\r\n            if (!IsUndefined(propertyKey)) {\r\n                if (!IsArray(decorators))\r\n                    throw new TypeError();\r\n                if (!IsObject(target))\r\n                    throw new TypeError();\r\n                if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))\r\n                    throw new TypeError();\r\n                if (IsNull(attributes))\r\n                    attributes = undefined;\r\n                propertyKey = ToPropertyKey(propertyKey);\r\n                return DecorateProperty(decorators, target, propertyKey, attributes);\r\n            }\r\n            else {\r\n                if (!IsArray(decorators))\r\n                    throw new TypeError();\r\n                if (!IsConstructor(target))\r\n                    throw new TypeError();\r\n                return DecorateConstructor(decorators, target);\r\n            }\r\n        }\r\n        exporter(\"decorate\", decorate);\r\n        // 4.1.2 Reflect.metadata(metadataKey, metadataValue)\r\n        // https://rbuckton.github.io/reflect-metadata/#reflect.metadata\r\n        /**\r\n         * A default metadata decorator factory that can be used on a class, class member, or parameter.\r\n         * @param metadataKey The key for the metadata entry.\r\n         * @param metadataValue The value for the metadata entry.\r\n         * @returns A decorator function.\r\n         * @remarks\r\n         * If `metadataKey` is already defined for the target and target key, the\r\n         * metadataValue for that key will be overwritten.\r\n         * @example\r\n         *\r\n         *     // constructor\r\n         *     @Reflect.metadata(key, value)\r\n         *     class Example {\r\n         *     }\r\n         *\r\n         *     // property (on constructor, TypeScript only)\r\n         *     class Example {\r\n         *         @Reflect.metadata(key, value)\r\n         *         static staticProperty;\r\n         *     }\r\n         *\r\n         *     // property (on prototype, TypeScript only)\r\n         *     class Example {\r\n         *         @Reflect.metadata(key, value)\r\n         *         property;\r\n         *     }\r\n         *\r\n         *     // method (on constructor)\r\n         *     class Example {\r\n         *         @Reflect.metadata(key, value)\r\n         *         static staticMethod() { }\r\n         *     }\r\n         *\r\n         *     // method (on prototype)\r\n         *     class Example {\r\n         *         @Reflect.metadata(key, value)\r\n         *         method() { }\r\n         *     }\r\n         *\r\n         */\r\n        function metadata(metadataKey, metadataValue) {\r\n            function decorator(target, propertyKey) {\r\n                if (!IsObject(target))\r\n                    throw new TypeError();\r\n                if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))\r\n                    throw new TypeError();\r\n                OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\r\n            }\r\n            return decorator;\r\n        }\r\n        exporter(\"metadata\", metadata);\r\n        /**\r\n         * Define a unique metadata entry on the target.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param metadataValue A value that contains attached metadata.\r\n         * @param target The target object on which to define metadata.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     Reflect.defineMetadata(\"custom:annotation\", options, Example.prototype, \"method\");\r\n         *\r\n         *     // decorator factory as metadata-producing annotation.\r\n         *     function MyAnnotation(options): Decorator {\r\n         *         return (target, key?) => Reflect.defineMetadata(\"custom:annotation\", options, target, key);\r\n         *     }\r\n         *\r\n         */\r\n        function defineMetadata(metadataKey, metadataValue, target, propertyKey) {\r\n            if (!IsObject(target))\r\n                throw new TypeError();\r\n            if (!IsUndefined(propertyKey))\r\n                propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);\r\n        }\r\n        exporter(\"defineMetadata\", defineMetadata);\r\n        /**\r\n         * Gets a value indicating whether the target object or its prototype chain has the provided metadata key defined.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns `true` if the metadata key was defined on the target object or its prototype chain; otherwise, `false`.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.hasMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function hasMetadata(metadataKey, target, propertyKey) {\r\n            if (!IsObject(target))\r\n                throw new TypeError();\r\n            if (!IsUndefined(propertyKey))\r\n                propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryHasMetadata(metadataKey, target, propertyKey);\r\n        }\r\n        exporter(\"hasMetadata\", hasMetadata);\r\n        /**\r\n         * Gets a value indicating whether the target object has the provided metadata key defined.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns `true` if the metadata key was defined on the target object; otherwise, `false`.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.hasOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function hasOwnMetadata(metadataKey, target, propertyKey) {\r\n            if (!IsObject(target))\r\n                throw new TypeError();\r\n            if (!IsUndefined(propertyKey))\r\n                propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);\r\n        }\r\n        exporter(\"hasOwnMetadata\", hasOwnMetadata);\r\n        /**\r\n         * Gets the metadata value for the provided metadata key on the target object or its prototype chain.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.getMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function getMetadata(metadataKey, target, propertyKey) {\r\n            if (!IsObject(target))\r\n                throw new TypeError();\r\n            if (!IsUndefined(propertyKey))\r\n                propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryGetMetadata(metadataKey, target, propertyKey);\r\n        }\r\n        exporter(\"getMetadata\", getMetadata);\r\n        /**\r\n         * Gets the metadata value for the provided metadata key on the target object.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns The metadata value for the metadata key if found; otherwise, `undefined`.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.getOwnMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function getOwnMetadata(metadataKey, target, propertyKey) {\r\n            if (!IsObject(target))\r\n                throw new TypeError();\r\n            if (!IsUndefined(propertyKey))\r\n                propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);\r\n        }\r\n        exporter(\"getOwnMetadata\", getOwnMetadata);\r\n        /**\r\n         * Gets the metadata keys defined on the target object or its prototype chain.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns An array of unique metadata keys.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.getMetadataKeys(Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.getMetadataKeys(Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.getMetadataKeys(Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.getMetadataKeys(Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function getMetadataKeys(target, propertyKey) {\r\n            if (!IsObject(target))\r\n                throw new TypeError();\r\n            if (!IsUndefined(propertyKey))\r\n                propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryMetadataKeys(target, propertyKey);\r\n        }\r\n        exporter(\"getMetadataKeys\", getMetadataKeys);\r\n        /**\r\n         * Gets the unique metadata keys defined on the target object.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns An array of unique metadata keys.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.getOwnMetadataKeys(Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.getOwnMetadataKeys(Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.getOwnMetadataKeys(Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function getOwnMetadataKeys(target, propertyKey) {\r\n            if (!IsObject(target))\r\n                throw new TypeError();\r\n            if (!IsUndefined(propertyKey))\r\n                propertyKey = ToPropertyKey(propertyKey);\r\n            return OrdinaryOwnMetadataKeys(target, propertyKey);\r\n        }\r\n        exporter(\"getOwnMetadataKeys\", getOwnMetadataKeys);\r\n        /**\r\n         * Deletes the metadata entry from the target object with the provided key.\r\n         * @param metadataKey A key used to store and retrieve metadata.\r\n         * @param target The target object on which the metadata is defined.\r\n         * @param propertyKey (Optional) The property key for the target.\r\n         * @returns `true` if the metadata entry was found and deleted; otherwise, false.\r\n         * @example\r\n         *\r\n         *     class Example {\r\n         *         // property declarations are not part of ES6, though they are valid in TypeScript:\r\n         *         // static staticProperty;\r\n         *         // property;\r\n         *\r\n         *         constructor(p) { }\r\n         *         static staticMethod(p) { }\r\n         *         method(p) { }\r\n         *     }\r\n         *\r\n         *     // constructor\r\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example);\r\n         *\r\n         *     // property (on constructor)\r\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticProperty\");\r\n         *\r\n         *     // property (on prototype)\r\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"property\");\r\n         *\r\n         *     // method (on constructor)\r\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example, \"staticMethod\");\r\n         *\r\n         *     // method (on prototype)\r\n         *     result = Reflect.deleteMetadata(\"custom:annotation\", Example.prototype, \"method\");\r\n         *\r\n         */\r\n        function deleteMetadata(metadataKey, target, propertyKey) {\r\n            if (!IsObject(target))\r\n                throw new TypeError();\r\n            if (!IsUndefined(propertyKey))\r\n                propertyKey = ToPropertyKey(propertyKey);\r\n            var metadataMap = GetOrCreateMetadataMap(target, propertyKey, /*Create*/ false);\r\n            if (IsUndefined(metadataMap))\r\n                return false;\r\n            if (!metadataMap.delete(metadataKey))\r\n                return false;\r\n            if (metadataMap.size > 0)\r\n                return true;\r\n            var targetMetadata = Metadata.get(target);\r\n            targetMetadata.delete(propertyKey);\r\n            if (targetMetadata.size > 0)\r\n                return true;\r\n            Metadata.delete(target);\r\n            return true;\r\n        }\r\n        exporter(\"deleteMetadata\", deleteMetadata);\r\n        function DecorateConstructor(decorators, target) {\r\n            for (var i = decorators.length - 1; i >= 0; --i) {\r\n                var decorator = decorators[i];\r\n                var decorated = decorator(target);\r\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\r\n                    if (!IsConstructor(decorated))\r\n                        throw new TypeError();\r\n                    target = decorated;\r\n                }\r\n            }\r\n            return target;\r\n        }\r\n        function DecorateProperty(decorators, target, propertyKey, descriptor) {\r\n            for (var i = decorators.length - 1; i >= 0; --i) {\r\n                var decorator = decorators[i];\r\n                var decorated = decorator(target, propertyKey, descriptor);\r\n                if (!IsUndefined(decorated) && !IsNull(decorated)) {\r\n                    if (!IsObject(decorated))\r\n                        throw new TypeError();\r\n                    descriptor = decorated;\r\n                }\r\n            }\r\n            return descriptor;\r\n        }\r\n        function GetOrCreateMetadataMap(O, P, Create) {\r\n            var targetMetadata = Metadata.get(O);\r\n            if (IsUndefined(targetMetadata)) {\r\n                if (!Create)\r\n                    return undefined;\r\n                targetMetadata = new _Map();\r\n                Metadata.set(O, targetMetadata);\r\n            }\r\n            var metadataMap = targetMetadata.get(P);\r\n            if (IsUndefined(metadataMap)) {\r\n                if (!Create)\r\n                    return undefined;\r\n                metadataMap = new _Map();\r\n                targetMetadata.set(P, metadataMap);\r\n            }\r\n            return metadataMap;\r\n        }\r\n        // 3.1.1.1 OrdinaryHasMetadata(MetadataKey, O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasmetadata\r\n        function OrdinaryHasMetadata(MetadataKey, O, P) {\r\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\r\n            if (hasOwn)\r\n                return true;\r\n            var parent = OrdinaryGetPrototypeOf(O);\r\n            if (!IsNull(parent))\r\n                return OrdinaryHasMetadata(MetadataKey, parent, P);\r\n            return false;\r\n        }\r\n        // 3.1.2.1 OrdinaryHasOwnMetadata(MetadataKey, O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryhasownmetadata\r\n        function OrdinaryHasOwnMetadata(MetadataKey, O, P) {\r\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\r\n            if (IsUndefined(metadataMap))\r\n                return false;\r\n            return ToBoolean(metadataMap.has(MetadataKey));\r\n        }\r\n        // 3.1.3.1 OrdinaryGetMetadata(MetadataKey, O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetmetadata\r\n        function OrdinaryGetMetadata(MetadataKey, O, P) {\r\n            var hasOwn = OrdinaryHasOwnMetadata(MetadataKey, O, P);\r\n            if (hasOwn)\r\n                return OrdinaryGetOwnMetadata(MetadataKey, O, P);\r\n            var parent = OrdinaryGetPrototypeOf(O);\r\n            if (!IsNull(parent))\r\n                return OrdinaryGetMetadata(MetadataKey, parent, P);\r\n            return undefined;\r\n        }\r\n        // 3.1.4.1 OrdinaryGetOwnMetadata(MetadataKey, O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinarygetownmetadata\r\n        function OrdinaryGetOwnMetadata(MetadataKey, O, P) {\r\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\r\n            if (IsUndefined(metadataMap))\r\n                return undefined;\r\n            return metadataMap.get(MetadataKey);\r\n        }\r\n        // 3.1.5.1 OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinarydefineownmetadata\r\n        function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {\r\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ true);\r\n            metadataMap.set(MetadataKey, MetadataValue);\r\n        }\r\n        // 3.1.6.1 OrdinaryMetadataKeys(O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinarymetadatakeys\r\n        function OrdinaryMetadataKeys(O, P) {\r\n            var ownKeys = OrdinaryOwnMetadataKeys(O, P);\r\n            var parent = OrdinaryGetPrototypeOf(O);\r\n            if (parent === null)\r\n                return ownKeys;\r\n            var parentKeys = OrdinaryMetadataKeys(parent, P);\r\n            if (parentKeys.length <= 0)\r\n                return ownKeys;\r\n            if (ownKeys.length <= 0)\r\n                return parentKeys;\r\n            var set = new _Set();\r\n            var keys = [];\r\n            for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {\r\n                var key = ownKeys_1[_i];\r\n                var hasKey = set.has(key);\r\n                if (!hasKey) {\r\n                    set.add(key);\r\n                    keys.push(key);\r\n                }\r\n            }\r\n            for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {\r\n                var key = parentKeys_1[_a];\r\n                var hasKey = set.has(key);\r\n                if (!hasKey) {\r\n                    set.add(key);\r\n                    keys.push(key);\r\n                }\r\n            }\r\n            return keys;\r\n        }\r\n        // 3.1.7.1 OrdinaryOwnMetadataKeys(O, P)\r\n        // https://rbuckton.github.io/reflect-metadata/#ordinaryownmetadatakeys\r\n        function OrdinaryOwnMetadataKeys(O, P) {\r\n            var keys = [];\r\n            var metadataMap = GetOrCreateMetadataMap(O, P, /*Create*/ false);\r\n            if (IsUndefined(metadataMap))\r\n                return keys;\r\n            var keysObj = metadataMap.keys();\r\n            var iterator = GetIterator(keysObj);\r\n            var k = 0;\r\n            while (true) {\r\n                var next = IteratorStep(iterator);\r\n                if (!next) {\r\n                    keys.length = k;\r\n                    return keys;\r\n                }\r\n                var nextValue = IteratorValue(next);\r\n                try {\r\n                    keys[k] = nextValue;\r\n                }\r\n                catch (e) {\r\n                    try {\r\n                        IteratorClose(iterator);\r\n                    }\r\n                    finally {\r\n                        throw e;\r\n                    }\r\n                }\r\n                k++;\r\n            }\r\n        }\r\n        // 6 ECMAScript Data Typ0es and Values\r\n        // https://tc39.github.io/ecma262/#sec-ecmascript-data-types-and-values\r\n        function Type(x) {\r\n            if (x === null)\r\n                return 1 /* Null */;\r\n            switch (typeof x) {\r\n                case \"undefined\": return 0 /* Undefined */;\r\n                case \"boolean\": return 2 /* Boolean */;\r\n                case \"string\": return 3 /* String */;\r\n                case \"symbol\": return 4 /* Symbol */;\r\n                case \"number\": return 5 /* Number */;\r\n                case \"object\": return x === null ? 1 /* Null */ : 6 /* Object */;\r\n                default: return 6 /* Object */;\r\n            }\r\n        }\r\n        // 6.1.1 The Undefined Type\r\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-undefined-type\r\n        function IsUndefined(x) {\r\n            return x === undefined;\r\n        }\r\n        // 6.1.2 The Null Type\r\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-null-type\r\n        function IsNull(x) {\r\n            return x === null;\r\n        }\r\n        // 6.1.5 The Symbol Type\r\n        // https://tc39.github.io/ecma262/#sec-ecmascript-language-types-symbol-type\r\n        function IsSymbol(x) {\r\n            return typeof x === \"symbol\";\r\n        }\r\n        // 6.1.7 The Object Type\r\n        // https://tc39.github.io/ecma262/#sec-object-type\r\n        function IsObject(x) {\r\n            return typeof x === \"object\" ? x !== null : typeof x === \"function\";\r\n        }\r\n        // 7.1 Type Conversion\r\n        // https://tc39.github.io/ecma262/#sec-type-conversion\r\n        // 7.1.1 ToPrimitive(input [, PreferredType])\r\n        // https://tc39.github.io/ecma262/#sec-toprimitive\r\n        function ToPrimitive(input, PreferredType) {\r\n            switch (Type(input)) {\r\n                case 0 /* Undefined */: return input;\r\n                case 1 /* Null */: return input;\r\n                case 2 /* Boolean */: return input;\r\n                case 3 /* String */: return input;\r\n                case 4 /* Symbol */: return input;\r\n                case 5 /* Number */: return input;\r\n            }\r\n            var hint = PreferredType === 3 /* String */ ? \"string\" : PreferredType === 5 /* Number */ ? \"number\" : \"default\";\r\n            var exoticToPrim = GetMethod(input, toPrimitiveSymbol);\r\n            if (exoticToPrim !== undefined) {\r\n                var result = exoticToPrim.call(input, hint);\r\n                if (IsObject(result))\r\n                    throw new TypeError();\r\n                return result;\r\n            }\r\n            return OrdinaryToPrimitive(input, hint === \"default\" ? \"number\" : hint);\r\n        }\r\n        // 7.1.1.1 OrdinaryToPrimitive(O, hint)\r\n        // https://tc39.github.io/ecma262/#sec-ordinarytoprimitive\r\n        function OrdinaryToPrimitive(O, hint) {\r\n            if (hint === \"string\") {\r\n                var toString_1 = O.toString;\r\n                if (IsCallable(toString_1)) {\r\n                    var result = toString_1.call(O);\r\n                    if (!IsObject(result))\r\n                        return result;\r\n                }\r\n                var valueOf = O.valueOf;\r\n                if (IsCallable(valueOf)) {\r\n                    var result = valueOf.call(O);\r\n                    if (!IsObject(result))\r\n                        return result;\r\n                }\r\n            }\r\n            else {\r\n                var valueOf = O.valueOf;\r\n                if (IsCallable(valueOf)) {\r\n                    var result = valueOf.call(O);\r\n                    if (!IsObject(result))\r\n                        return result;\r\n                }\r\n                var toString_2 = O.toString;\r\n                if (IsCallable(toString_2)) {\r\n                    var result = toString_2.call(O);\r\n                    if (!IsObject(result))\r\n                        return result;\r\n                }\r\n            }\r\n            throw new TypeError();\r\n        }\r\n        // 7.1.2 ToBoolean(argument)\r\n        // https://tc39.github.io/ecma262/2016/#sec-toboolean\r\n        function ToBoolean(argument) {\r\n            return !!argument;\r\n        }\r\n        // 7.1.12 ToString(argument)\r\n        // https://tc39.github.io/ecma262/#sec-tostring\r\n        function ToString(argument) {\r\n            return \"\" + argument;\r\n        }\r\n        // 7.1.14 ToPropertyKey(argument)\r\n        // https://tc39.github.io/ecma262/#sec-topropertykey\r\n        function ToPropertyKey(argument) {\r\n            var key = ToPrimitive(argument, 3 /* String */);\r\n            if (IsSymbol(key))\r\n                return key;\r\n            return ToString(key);\r\n        }\r\n        // 7.2 Testing and Comparison Operations\r\n        // https://tc39.github.io/ecma262/#sec-testing-and-comparison-operations\r\n        // 7.2.2 IsArray(argument)\r\n        // https://tc39.github.io/ecma262/#sec-isarray\r\n        function IsArray(argument) {\r\n            return Array.isArray\r\n                ? Array.isArray(argument)\r\n                : argument instanceof Object\r\n                    ? argument instanceof Array\r\n                    : Object.prototype.toString.call(argument) === \"[object Array]\";\r\n        }\r\n        // 7.2.3 IsCallable(argument)\r\n        // https://tc39.github.io/ecma262/#sec-iscallable\r\n        function IsCallable(argument) {\r\n            // NOTE: This is an approximation as we cannot check for [[Call]] internal method.\r\n            return typeof argument === \"function\";\r\n        }\r\n        // 7.2.4 IsConstructor(argument)\r\n        // https://tc39.github.io/ecma262/#sec-isconstructor\r\n        function IsConstructor(argument) {\r\n            // NOTE: This is an approximation as we cannot check for [[Construct]] internal method.\r\n            return typeof argument === \"function\";\r\n        }\r\n        // 7.2.7 IsPropertyKey(argument)\r\n        // https://tc39.github.io/ecma262/#sec-ispropertykey\r\n        function IsPropertyKey(argument) {\r\n            switch (Type(argument)) {\r\n                case 3 /* String */: return true;\r\n                case 4 /* Symbol */: return true;\r\n                default: return false;\r\n            }\r\n        }\r\n        // 7.3 Operations on Objects\r\n        // https://tc39.github.io/ecma262/#sec-operations-on-objects\r\n        // 7.3.9 GetMethod(V, P)\r\n        // https://tc39.github.io/ecma262/#sec-getmethod\r\n        function GetMethod(V, P) {\r\n            var func = V[P];\r\n            if (func === undefined || func === null)\r\n                return undefined;\r\n            if (!IsCallable(func))\r\n                throw new TypeError();\r\n            return func;\r\n        }\r\n        // 7.4 Operations on Iterator Objects\r\n        // https://tc39.github.io/ecma262/#sec-operations-on-iterator-objects\r\n        function GetIterator(obj) {\r\n            var method = GetMethod(obj, iteratorSymbol);\r\n            if (!IsCallable(method))\r\n                throw new TypeError(); // from Call\r\n            var iterator = method.call(obj);\r\n            if (!IsObject(iterator))\r\n                throw new TypeError();\r\n            return iterator;\r\n        }\r\n        // 7.4.4 IteratorValue(iterResult)\r\n        // https://tc39.github.io/ecma262/2016/#sec-iteratorvalue\r\n        function IteratorValue(iterResult) {\r\n            return iterResult.value;\r\n        }\r\n        // 7.4.5 IteratorStep(iterator)\r\n        // https://tc39.github.io/ecma262/#sec-iteratorstep\r\n        function IteratorStep(iterator) {\r\n            var result = iterator.next();\r\n            return result.done ? false : result;\r\n        }\r\n        // 7.4.6 IteratorClose(iterator, completion)\r\n        // https://tc39.github.io/ecma262/#sec-iteratorclose\r\n        function IteratorClose(iterator) {\r\n            var f = iterator[\"return\"];\r\n            if (f)\r\n                f.call(iterator);\r\n        }\r\n        // 9.1 Ordinary Object Internal Methods and Internal Slots\r\n        // https://tc39.github.io/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots\r\n        // 9.1.1.1 OrdinaryGetPrototypeOf(O)\r\n        // https://tc39.github.io/ecma262/#sec-ordinarygetprototypeof\r\n        function OrdinaryGetPrototypeOf(O) {\r\n            var proto = Object.getPrototypeOf(O);\r\n            if (typeof O !== \"function\" || O === functionPrototype)\r\n                return proto;\r\n            // TypeScript doesn't set __proto__ in ES5, as it's non-standard.\r\n            // Try to determine the superclass constructor. Compatible implementations\r\n            // must either set __proto__ on a subclass constructor to the superclass constructor,\r\n            // or ensure each class has a valid `constructor` property on its prototype that\r\n            // points back to the constructor.\r\n            // If this is not the same as Function.[[Prototype]], then this is definately inherited.\r\n            // This is the case when in ES6 or when using __proto__ in a compatible browser.\r\n            if (proto !== functionPrototype)\r\n                return proto;\r\n            // If the super prototype is Object.prototype, null, or undefined, then we cannot determine the heritage.\r\n            var prototype = O.prototype;\r\n            var prototypeProto = prototype && Object.getPrototypeOf(prototype);\r\n            if (prototypeProto == null || prototypeProto === Object.prototype)\r\n                return proto;\r\n            // If the constructor was not a function, then we cannot determine the heritage.\r\n            var constructor = prototypeProto.constructor;\r\n            if (typeof constructor !== \"function\")\r\n                return proto;\r\n            // If we have some kind of self-reference, then we cannot determine the heritage.\r\n            if (constructor === O)\r\n                return proto;\r\n            // we have a pretty good guess at the heritage.\r\n            return constructor;\r\n        }\r\n        // naive Map shim\r\n        function CreateMapPolyfill() {\r\n            var cacheSentinel = {};\r\n            var arraySentinel = [];\r\n            var MapIterator = (function () {\r\n                function MapIterator(keys, values, selector) {\r\n                    this._index = 0;\r\n                    this._keys = keys;\r\n                    this._values = values;\r\n                    this._selector = selector;\r\n                }\r\n                MapIterator.prototype[\"@@iterator\"] = function () { return this; };\r\n                MapIterator.prototype[iteratorSymbol] = function () { return this; };\r\n                MapIterator.prototype.next = function () {\r\n                    var index = this._index;\r\n                    if (index >= 0 && index < this._keys.length) {\r\n                        var result = this._selector(this._keys[index], this._values[index]);\r\n                        if (index + 1 >= this._keys.length) {\r\n                            this._index = -1;\r\n                            this._keys = arraySentinel;\r\n                            this._values = arraySentinel;\r\n                        }\r\n                        else {\r\n                            this._index++;\r\n                        }\r\n                        return { value: result, done: false };\r\n                    }\r\n                    return { value: undefined, done: true };\r\n                };\r\n                MapIterator.prototype.throw = function (error) {\r\n                    if (this._index >= 0) {\r\n                        this._index = -1;\r\n                        this._keys = arraySentinel;\r\n                        this._values = arraySentinel;\r\n                    }\r\n                    throw error;\r\n                };\r\n                MapIterator.prototype.return = function (value) {\r\n                    if (this._index >= 0) {\r\n                        this._index = -1;\r\n                        this._keys = arraySentinel;\r\n                        this._values = arraySentinel;\r\n                    }\r\n                    return { value: value, done: true };\r\n                };\r\n                return MapIterator;\r\n            }());\r\n            return (function () {\r\n                function Map() {\r\n                    this._keys = [];\r\n                    this._values = [];\r\n                    this._cacheKey = cacheSentinel;\r\n                    this._cacheIndex = -2;\r\n                }\r\n                Object.defineProperty(Map.prototype, \"size\", {\r\n                    get: function () { return this._keys.length; },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n                Map.prototype.has = function (key) { return this._find(key, /*insert*/ false) >= 0; };\r\n                Map.prototype.get = function (key) {\r\n                    var index = this._find(key, /*insert*/ false);\r\n                    return index >= 0 ? this._values[index] : undefined;\r\n                };\r\n                Map.prototype.set = function (key, value) {\r\n                    var index = this._find(key, /*insert*/ true);\r\n                    this._values[index] = value;\r\n                    return this;\r\n                };\r\n                Map.prototype.delete = function (key) {\r\n                    var index = this._find(key, /*insert*/ false);\r\n                    if (index >= 0) {\r\n                        var size = this._keys.length;\r\n                        for (var i = index + 1; i < size; i++) {\r\n                            this._keys[i - 1] = this._keys[i];\r\n                            this._values[i - 1] = this._values[i];\r\n                        }\r\n                        this._keys.length--;\r\n                        this._values.length--;\r\n                        if (key === this._cacheKey) {\r\n                            this._cacheKey = cacheSentinel;\r\n                            this._cacheIndex = -2;\r\n                        }\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                };\r\n                Map.prototype.clear = function () {\r\n                    this._keys.length = 0;\r\n                    this._values.length = 0;\r\n                    this._cacheKey = cacheSentinel;\r\n                    this._cacheIndex = -2;\r\n                };\r\n                Map.prototype.keys = function () { return new MapIterator(this._keys, this._values, getKey); };\r\n                Map.prototype.values = function () { return new MapIterator(this._keys, this._values, getValue); };\r\n                Map.prototype.entries = function () { return new MapIterator(this._keys, this._values, getEntry); };\r\n                Map.prototype[\"@@iterator\"] = function () { return this.entries(); };\r\n                Map.prototype[iteratorSymbol] = function () { return this.entries(); };\r\n                Map.prototype._find = function (key, insert) {\r\n                    if (this._cacheKey !== key) {\r\n                        this._cacheIndex = this._keys.indexOf(this._cacheKey = key);\r\n                    }\r\n                    if (this._cacheIndex < 0 && insert) {\r\n                        this._cacheIndex = this._keys.length;\r\n                        this._keys.push(key);\r\n                        this._values.push(undefined);\r\n                    }\r\n                    return this._cacheIndex;\r\n                };\r\n                return Map;\r\n            }());\r\n            function getKey(key, _) {\r\n                return key;\r\n            }\r\n            function getValue(_, value) {\r\n                return value;\r\n            }\r\n            function getEntry(key, value) {\r\n                return [key, value];\r\n            }\r\n        }\r\n        // naive Set shim\r\n        function CreateSetPolyfill() {\r\n            return (function () {\r\n                function Set() {\r\n                    this._map = new _Map();\r\n                }\r\n                Object.defineProperty(Set.prototype, \"size\", {\r\n                    get: function () { return this._map.size; },\r\n                    enumerable: true,\r\n                    configurable: true\r\n                });\r\n                Set.prototype.has = function (value) { return this._map.has(value); };\r\n                Set.prototype.add = function (value) { return this._map.set(value, value), this; };\r\n                Set.prototype.delete = function (value) { return this._map.delete(value); };\r\n                Set.prototype.clear = function () { this._map.clear(); };\r\n                Set.prototype.keys = function () { return this._map.keys(); };\r\n                Set.prototype.values = function () { return this._map.values(); };\r\n                Set.prototype.entries = function () { return this._map.entries(); };\r\n                Set.prototype[\"@@iterator\"] = function () { return this.keys(); };\r\n                Set.prototype[iteratorSymbol] = function () { return this.keys(); };\r\n                return Set;\r\n            }());\r\n        }\r\n        // naive WeakMap shim\r\n        function CreateWeakMapPolyfill() {\r\n            var UUID_SIZE = 16;\r\n            var keys = HashMap.create();\r\n            var rootKey = CreateUniqueKey();\r\n            return (function () {\r\n                function WeakMap() {\r\n                    this._key = CreateUniqueKey();\r\n                }\r\n                WeakMap.prototype.has = function (target) {\r\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\r\n                    return table !== undefined ? HashMap.has(table, this._key) : false;\r\n                };\r\n                WeakMap.prototype.get = function (target) {\r\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\r\n                    return table !== undefined ? HashMap.get(table, this._key) : undefined;\r\n                };\r\n                WeakMap.prototype.set = function (target, value) {\r\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ true);\r\n                    table[this._key] = value;\r\n                    return this;\r\n                };\r\n                WeakMap.prototype.delete = function (target) {\r\n                    var table = GetOrCreateWeakMapTable(target, /*create*/ false);\r\n                    return table !== undefined ? delete table[this._key] : false;\r\n                };\r\n                WeakMap.prototype.clear = function () {\r\n                    // NOTE: not a real clear, just makes the previous data unreachable\r\n                    this._key = CreateUniqueKey();\r\n                };\r\n                return WeakMap;\r\n            }());\r\n            function CreateUniqueKey() {\r\n                var key;\r\n                do\r\n                    key = \"@@WeakMap@@\" + CreateUUID();\r\n                while (HashMap.has(keys, key));\r\n                keys[key] = true;\r\n                return key;\r\n            }\r\n            function GetOrCreateWeakMapTable(target, create) {\r\n                if (!hasOwn.call(target, rootKey)) {\r\n                    if (!create)\r\n                        return undefined;\r\n                    Object.defineProperty(target, rootKey, { value: HashMap.create() });\r\n                }\r\n                return target[rootKey];\r\n            }\r\n            function FillRandomBytes(buffer, size) {\r\n                for (var i = 0; i < size; ++i)\r\n                    buffer[i] = Math.random() * 0xff | 0;\r\n                return buffer;\r\n            }\r\n            function GenRandomBytes(size) {\r\n                if (typeof Uint8Array === \"function\") {\r\n                    if (typeof crypto !== \"undefined\")\r\n                        return crypto.getRandomValues(new Uint8Array(size));\r\n                    if (typeof msCrypto !== \"undefined\")\r\n                        return msCrypto.getRandomValues(new Uint8Array(size));\r\n                    return FillRandomBytes(new Uint8Array(size), size);\r\n                }\r\n                return FillRandomBytes(new Array(size), size);\r\n            }\r\n            function CreateUUID() {\r\n                var data = GenRandomBytes(UUID_SIZE);\r\n                // mark as random - RFC 4122 § 4.4\r\n                data[6] = data[6] & 0x4f | 0x40;\r\n                data[8] = data[8] & 0xbf | 0x80;\r\n                var result = \"\";\r\n                for (var offset = 0; offset < UUID_SIZE; ++offset) {\r\n                    var byte = data[offset];\r\n                    if (offset === 4 || offset === 6 || offset === 8)\r\n                        result += \"-\";\r\n                    if (byte < 16)\r\n                        result += \"0\";\r\n                    result += byte.toString(16).toLowerCase();\r\n                }\r\n                return result;\r\n            }\r\n        }\r\n        // uses a heuristic used by v8 and chakra to force an object into dictionary mode.\r\n        function MakeDictionary(obj) {\r\n            obj.__ = undefined;\r\n            delete obj.__;\r\n            return obj;\r\n        }\r\n    });\r\n})(Reflect || (Reflect = {}));\r\n//# sourceMappingURL=Reflect.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"reflect-metadata\");\nconst set = require(\"lodash.set\");\nconst get = require(\"lodash.get\");\nfunction push(target, path, value) {\n    if (Array.isArray(get(target, path))) {\n        get(target, path).push(value);\n    }\n    else {\n        set(target, path, [value]);\n    }\n}\n/** Properties accumlated by propertyDecorators and grouped by schema */\nconst propertiesBySchema = {};\n/** Relationships accumlated by propertyDecorators and grouped by schema */\nconst relationshipsBySchema = {};\nexports.propertyDecorator = (nameValuePairs = {}, \n/**\n * if you want to set the property being decorated's name\n * as property on meta specify the meta properties name here\n */\nproperty) => (target, key) => {\n    const reflect = Reflect.getMetadata(\"design:type\", target, key);\n    const meta = Object.assign({}, Reflect.getMetadata(key, target), { type: reflect.name }, nameValuePairs);\n    Reflect.defineMetadata(key, meta, target);\n    const _val = this[key];\n    if (nameValuePairs.isProperty) {\n        if (property) {\n            push(propertiesBySchema, target.constructor.name, Object.assign({}, meta, { [property]: key }));\n        }\n        else {\n            push(propertiesBySchema, target.constructor.name, meta);\n        }\n    }\n    if (nameValuePairs.isRelationship) {\n        if (property) {\n            push(relationshipsBySchema, target.constructor.name, Object.assign({}, meta, { [property]: key }));\n        }\n        else {\n            push(relationshipsBySchema, target.constructor.name, meta);\n        }\n    }\n    // Reflect.defineProperty(target, key, {\n    //   get: () => {\n    //     return this[key];\n    //   },\n    //   set: (value: any) => {\n    //     this[key] = value;\n    //   },\n    //   enumerable: true,\n    //   configurable: true\n    // });\n};\n/** lookup meta data for schema properties */\nfunction propertyMeta(context) {\n    return (prop) => Reflect.getMetadata(prop, context);\n}\n/**\n * Give all properties from schema and base schema\n *\n * @param target the schema object which is being looked up\n */\nfunction getProperties(target) {\n    return [\n        ...propertiesBySchema[target.constructor.name],\n        ...propertiesBySchema.BaseSchema.map(s => (Object.assign({}, s, { isBaseSchema: true })))\n    ];\n}\nexports.getProperties = getProperties;\nfunction getRelationships(target) {\n    return relationshipsBySchema[target.constructor.name];\n}\nexports.getRelationships = getRelationships;\nfunction getPushKeys(target) {\n    const props = getProperties(target);\n    return props.filter(p => p.pushKey).map(p => p.property);\n}\nexports.getPushKeys = getPushKeys;\n//# sourceMappingURL=decorator.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"reflect-metadata\");\nconst decorator_1 = require(\"./decorator\");\nfunction hasMany(schemaClass) {\n    return decorator_1.propertyDecorator({\n        isRelationship: true,\n        isProperty: false,\n        relType: 'hasMany'\n    }, 'property');\n}\nexports.hasMany = hasMany;\nfunction ownedBy(schemaClass) {\n    return decorator_1.propertyDecorator({\n        isRelationship: true,\n        isProperty: false,\n        relType: 'ownedBy'\n    }, 'property');\n}\nexports.ownedBy = ownedBy;\nfunction inverse(inverseProperty) {\n    return decorator_1.propertyDecorator({ inverseProperty });\n}\nexports.inverse = inverse;\n//# sourceMappingURL=relationship.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nrequire(\"reflect-metadata\");\nconst decorator_1 = require(\"./decorator\");\n/** lookup meta data for schema properties */\nfunction propertyMeta(context) {\n    return (prop) => Reflect.getMetadata(prop, context);\n}\nfunction schema(options) {\n    return (target) => {\n        const original = target;\n        // new constructor\n        const f = function (...args) {\n            const meta = options;\n            const obj = Reflect.construct(original, args);\n            Reflect.defineProperty(obj, \"META\", {\n                get() {\n                    return Object.assign({}, options, { property: propertyMeta(obj) }, { properties: decorator_1.getProperties(obj) }, { relationships: decorator_1.getRelationships(obj) }, { pushKeys: decorator_1.getPushKeys(obj) }, { audit: options.audit ? options.audit : false });\n                },\n                set() {\n                    throw new Error(\"The meta property can only be set with the @schema decorator!\");\n                },\n                configurable: false,\n                enumerable: false\n            });\n            return obj;\n        };\n        // copy prototype so intanceof operator still works\n        f.prototype = original.prototype;\n        // return new constructor (will override original)\n        return f;\n    };\n}\nexports.schema = schema;\n//# sourceMappingURL=schema.js.map","\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst property_1 = require(\"./decorators/property\");\nvar RelationshipPolicy;\n(function (RelationshipPolicy) {\n    RelationshipPolicy[\"keys\"] = \"keys\";\n    RelationshipPolicy[\"lazy\"] = \"lazy\";\n    RelationshipPolicy[\"inline\"] = \"inline\";\n})(RelationshipPolicy = exports.RelationshipPolicy || (exports.RelationshipPolicy = {}));\nvar RelationshipCardinality;\n(function (RelationshipCardinality) {\n    RelationshipCardinality[\"hasMany\"] = \"hasMany\";\n    RelationshipCardinality[\"belongsTo\"] = \"belongsTo\";\n})(RelationshipCardinality = exports.RelationshipCardinality || (exports.RelationshipCardinality = {}));\nclass BaseSchema {\n    toString() {\n        const obj = {};\n        this.META.properties.map(p => {\n            obj[p.property] = this[p.property];\n        });\n        return JSON.stringify(obj);\n    }\n}\n__decorate([\n    property_1.property,\n    __metadata(\"design:type\", String)\n], BaseSchema.prototype, \"id\", void 0);\n__decorate([\n    property_1.property,\n    __metadata(\"design:type\", Number)\n], BaseSchema.prototype, \"lastUpdated\", void 0);\n__decorate([\n    property_1.property,\n    __metadata(\"design:type\", Number)\n], BaseSchema.prototype, \"createdAt\", void 0);\nexports.BaseSchema = BaseSchema;\n//# sourceMappingURL=base-schema.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst common_types_1 = require(\"common-types\");\nconst VerboseError_1 = require(\"./VerboseError\");\nconst index_1 = require(\"./index\");\nconst pluralize = require(\"pluralize\");\nconst camelCase = require(\"lodash.camelcase\");\nconst serialized_query_1 = require(\"serialized-query\");\nconst util_1 = require(\"./util\");\nconst firebase_key_1 = require(\"firebase-key\");\nexports.baseLogger = {\n    log: (message) => console.log(`${this.modelName}/${this._key}: ${message}`),\n    warn: (message) => console.warn(`${this.modelName}/${this._key}: ${message}`),\n    debug: (message) => {\n        const stage = process.env.STAGE || process.env.AWS_STAGE || process.env.ENV;\n        if (stage !== \"prod\") {\n            console.log(`${this.modelName}/${this._key}: ${message}`);\n        }\n    },\n    error: (message) => console.error(`${this.modelName}/${this._key}: ${message}`)\n};\nclass Model {\n    //#endregion\n    constructor(_schemaClass, db, logger) {\n        this._schemaClass = _schemaClass;\n        // tslint:disable-next-line:member-ordering\n        this._mockGenerator = h => () => {\n            return this._bespokeMockGenerator\n                ? Object.assign({}, this._defaultGenerator(h)(), this._bespokeMockGenerator(h)()) : this._defaultGenerator(h)();\n        };\n        this._defaultGenerator = h => () => ({\n            createdAt: new Date(h.faker.date.past()).toISOString(),\n            lastUpdated: new Date().toISOString()\n        });\n        this._db = db;\n        if (!Model.defaultDb) {\n            Model.defaultDb = db;\n        }\n        this.logger = logger ? logger : exports.baseLogger;\n        this._schema = new this.schemaClass();\n    }\n    static create(schema, options = {}) {\n        const db = options.db || Model.defaultDb;\n        const logger = options.logger || exports.baseLogger;\n        const model = new Model(schema, db, logger);\n        return model;\n    }\n    /** the singular name of the model */\n    get modelName() {\n        return camelCase(this._schema.constructor.name);\n    }\n    get pluralName() {\n        return this._pluralName ? this._pluralName : pluralize.plural(this.modelName);\n    }\n    set pluralName(name) {\n        this._pluralName = name;\n    }\n    set mockGenerator(cb) {\n        this._bespokeMockGenerator = cb;\n    }\n    //#region PUBLIC API\n    get schemaClass() {\n        return this._schemaClass;\n    }\n    /** Database access */\n    get db() {\n        return this._db;\n    }\n    get schema() {\n        return this._schema;\n    }\n    get dbPath() {\n        return [this._schema.META.dbOffset, this.pluralName].join(\".\");\n    }\n    get localPath() {\n        return [this._schema.META.localOffset, this.pluralName].join(\".\");\n    }\n    get relationships() {\n        return this._schema.META.relationships;\n    }\n    get properties() {\n        return this._schema.META.properties;\n    }\n    get pushKeys() {\n        return this._schema.META ? this._schema.META.pushKeys : [];\n    }\n    // /**\n    //  * Add a new record of type T, optionally including the payload\n    //  *\n    //  * @param hash the values that you want this new object to be initialized as; note that if you include an \"id\" property it will assume this is from the DB, if you don't then it will immediately add it and create an id.\n    //  */\n    // public async newRecord(hash?: Partial<T>) {\n    //   console.log(this.schemaClass);\n    //   return hash\n    //     ? Record.add(this.schemaClass, hash as T, { db: this.db })\n    //     : Record.create(this.schemaClass, { db: this.db });\n    // }\n    /**\n     * Get an existing record from the  DB and return as a Record\n     *\n     * @param id the primary key for the record\n     */\n    getRecord(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const record = yield index_1.Record.get(this._schemaClass, id);\n            return record;\n        });\n    }\n    /**\n     * Returns a list of ALL objects of the given schema type\n     */\n    getAll(query) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const list = new index_1.List(this);\n            return query ? list.load(query) : list.load(this.dbPath);\n        });\n    }\n    /**\n     * Finds a single records within a list\n     *\n     * @param prop the property on the Schema which you are looking for a value in\n     * @param value the value you are looking for the property to equal; alternatively you can pass a tuple with a comparison operation and a value\n     */\n    findRecord(prop, value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const query = this._findBuilder(prop, value, true);\n            const results = yield this.db.getList(query);\n            if (results.length > 0) {\n                const first = results.pop();\n                const record = index_1.Record.get(this._schemaClass, first.id);\n                return record;\n            }\n            else {\n                throw common_types_1.createError(\"not-found\", `Not Found: didn't find any \"${this.pluralName}\" which had \"${prop}\" set to \"${value}\"; note the path in the database which was searched was \"${this.dbPath}\".`);\n            }\n        });\n    }\n    findAll(prop, value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const query = this._findBuilder(prop, value);\n            let results;\n            try {\n                results = yield this.db.getList(query);\n            }\n            catch (e) {\n                console.log(\"Error attempting to findAll() in Model.\", e);\n                throw common_types_1.createError(\"model/findAll\", `\\nFailed getting via getList() with query` + JSON.stringify(query, null, 2), e);\n            }\n            return new index_1.List(this, results);\n        });\n    }\n    /** sets a record to the database */\n    set(record, auditInfo = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!record.id) {\n                throw common_types_1.createError(\"set/no-id\", `Attempt to set \"${this.dbPath}\" in database but record had no \"id\" property.`);\n            }\n            const now = this.now();\n            record = Object.assign({}, record, { lastUpdated: now });\n            auditInfo = Object.assign({}, auditInfo, { properties: Object.keys(record) });\n            const ref = yield this.crud(\"set\", now, util_1.slashNotation(this.dbPath, record.id), record, auditInfo);\n            return ref;\n        });\n    }\n    /** Push a new record onto a model's list using Firebase a push-ID */\n    push(newRecord, auditInfo = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const now = this.now();\n            const id = firebase_key_1.key();\n            newRecord = Object.assign({}, newRecord, { lastUpdated: now, createdAt: now });\n            auditInfo = Object.assign({}, auditInfo, { properties: Object.keys(newRecord) });\n            const ref = yield this.crud(\"push\", now, util_1.slashNotation(this.dbPath, id), newRecord, auditInfo);\n            return index_1.Record.get(this._schemaClass, id);\n        });\n    }\n    update(key, updates, auditInfo = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const now = this.now();\n            auditInfo = Object.assign({ auditInfo }, { updatedProperties: Object.keys(updates) });\n            updates = Object.assign({}, updates, { lastUpdated: now });\n            yield this.crud(\"update\", now, util_1.slashNotation(this.dbPath, key), updates, auditInfo);\n        });\n    }\n    /**\n     * Remove\n     *\n     * Remove a record from the database\n     *\n     * @param key         the specific record id (but can alternatively be the full path if it matches dbPath)\n     * @param returnValue optionally pass back the deleted record along removing from server\n     * @param auditInfo   any additional information to be passed to the audit record (if Model has turned on)\n     */\n    remove(key, returnValue = false, auditInfo = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!key) {\n                const e = new Error(`Trying to call remove(id) on a ${this.modelName} Model class can not be done when ID is undefined!`);\n                e.name = \"NotAllowed\";\n                throw e;\n            }\n            const now = this.now();\n            let value;\n            if (returnValue) {\n                value = yield this._db.getValue(util_1.slashNotation(this.dbPath, key));\n            }\n            yield this.crud(\"remove\", now, key.match(this.dbPath) ? key : util_1.slashNotation(this.dbPath, key), null, auditInfo);\n            return returnValue ? value : undefined;\n        });\n    }\n    getAuditTrail(filter = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { since, last } = filter;\n            const path = `${Model.auditBase}/${this.pluralName}`;\n            let query = serialized_query_1.SerializedQuery.path(path);\n            if (since) {\n                const startAt = new Date(since).toISOString();\n                query = query.orderByChild(\"when\").startAt(startAt);\n            }\n            if (last) {\n                query = query.limitToLast(last);\n            }\n            return this.db.getList(query);\n        });\n    }\n    //#endregion\n    //#region PRIVATE API\n    audit(crud, when, key, info) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const path = util_1.slashNotation(Model.auditBase, this.pluralName);\n            return this.db.push(path, {\n                crud,\n                when,\n                key,\n                info\n            });\n        });\n    }\n    /**\n     * crud\n     *\n     * Standardized processing of all CRUD operations\n     *\n     * @param op The CRUD operation being performed\n     * @param key The record id which is being performed on\n     * @param value The new-value parameter (meaning varies on context)\n     * @param auditInfo the meta-fields for the audit trail\n     */\n    crud(op, when, key, value, auditInfo) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const isAuditable = this._schema.META.audit;\n            const auditPath = util_1.slashNotation(Model.auditBase, this.pluralName, key);\n            let auditRef;\n            if (isAuditable) {\n                console.log(\"auditing: \", op);\n                auditRef = yield this.audit(op, when, key, auditInfo);\n            }\n            switch (op) {\n                case \"set\":\n                    return this.db.set(key, value);\n                case \"update\":\n                    return this.db.update(key, value);\n                case \"push\":\n                    // PUSH unlike SET returns a reference to the newly created record\n                    return this.db.set(key, value).then(() => this.db.ref(key));\n                case \"remove\":\n                    return this.db.remove(key);\n                default:\n                    throw new VerboseError_1.VerboseError({\n                        code: \"unknown-operation\",\n                        message: `The operation \"${op}\" is not known!`,\n                        module: \"crud\"\n                    });\n            }\n        });\n    }\n    _findBuilder(child, value, singular = false) {\n        let operation = \"=\";\n        if (value instanceof Array) {\n            operation = value[0];\n            value = value[1];\n        }\n        let query = serialized_query_1.SerializedQuery.path(this.dbPath).orderByChild(child);\n        if (singular) {\n            query = query.limitToFirst(1);\n        }\n        switch (operation) {\n            case \"=\":\n                return query.equalTo(value);\n            case \">\":\n                return query.startAt(value);\n            case \"<\":\n                return query.endAt(value);\n            default:\n                throw new VerboseError_1.VerboseError({\n                    code: \"invalid-operation\",\n                    message: `Invalid comparison operater \"${operation}\" used in find query`,\n                    module: \"findXXX\"\n                });\n        }\n    }\n    //#region mocking\n    // tslint:disable-next-line:member-ordering\n    generate(quantity, override = {}) {\n        this.db.mock.queueSchema(this.modelName, quantity, override);\n        this.db.mock.generate();\n    }\n    //#endregion\n    now() {\n        return Date.now();\n    }\n}\n//#region PROPERTIES\nModel.defaultDb = null;\n/** The base path in the database to store audit logs */\nModel.auditBase = \"logging/audit_logs\";\nexports.Model = Model;\n//# sourceMappingURL=model.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst common_types_1 = require(\"common-types\");\nconst model_1 = require(\"./model\");\nconst firebase_key_1 = require(\"firebase-key\");\nclass Record {\n    constructor(_model, options = {}) {\n        this._model = _model;\n        this._existsOnDB = false;\n        this._writeOperations = [];\n        this._data = new _model.schemaClass();\n    }\n    /**\n     * create\n     *\n     * creates a new -- and empty -- Record object; often used in\n     * conjunction with the Record's initialize() method\n     */\n    static create(schema, options = {}) {\n        const model = model_1.Model.create(schema, options);\n        const record = new Record(model, options);\n        return record;\n    }\n    /**\n     * add\n     *\n     * Adds a new record to the database\n     *\n     * @param schema the schema of the record\n     * @param newRecord the data for the new record\n     * @param options\n     */\n    static add(schema, newRecord, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let r;\n            try {\n                r = Record.create(schema, options);\n                r._initialize(newRecord);\n                yield r._save();\n            }\n            catch (e) {\n                const err = new Error(`Problem adding new Record: ${e.message}`);\n                err.name = e.name !== \"Error\" ? e.name : \"FiremodelError\";\n                throw e;\n            }\n            return r;\n        });\n    }\n    /**\n     * load\n     *\n     * static method to create a Record when you want to load the\n     * state of the record with something you already have.\n     *\n     * Intent should be that this record already exists in the\n     * database. If you want to add to the database then use add()\n     */\n    static load(schema, record, options = {}) {\n        const r = Record.create(schema, options);\n        r._initialize(record);\n        return r;\n    }\n    static get(schema, id, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const record = Record.create(schema, options);\n            yield record._getFromDB(id);\n            return record;\n        });\n    }\n    get data() {\n        return this._data;\n    }\n    get isDirty() {\n        return this._writeOperations.length > 0 ? true : false;\n    }\n    get META() {\n        return this._model.schema.META;\n    }\n    get db() {\n        return this._model.db;\n    }\n    get pluralName() {\n        return this._model.pluralName;\n    }\n    get pushKeys() {\n        return this._model.schema.META.pushKeys;\n    }\n    /**\n     * returns the fully qualified name in the database to this record;\n     * this of course includes the record id so if that's not set yet calling\n     * this getter will result in an error\n     */\n    get dbPath() {\n        if (!this.data.id) {\n            throw common_types_1.createError(\"record/invalid-path\", `Invalid Record Path: you can not ask for the dbPath before setting an \"id\" property.`);\n        }\n        return [this.data.META.dbOffset, this.pluralName, this.data.id].join(\"/\");\n    }\n    get modelName() {\n        return this.data.constructor.name.toLowerCase();\n    }\n    /** The Record's primary key */\n    get id() {\n        return this.data.id;\n    }\n    set id(val) {\n        if (this.data.id) {\n            const e = new Error(`You may not re-set the ID of a record [ ${this.data.id} → ${val} ].`);\n            e.name = \"NotAllowed\";\n            throw e;\n        }\n        this._data.id = val;\n    }\n    /**\n     * returns the record's database offset without including the ID of the record;\n     * among other things this can be useful prior to establishing an ID for a record\n     */\n    get dbOffset() {\n        return this.data.META.dbOffset;\n    }\n    /**\n     * returns the record's location in the frontend state management framework;\n     * depends on appropriate configuration of model to be accurate.\n     */\n    get localPath() {\n        if (!this.data.id) {\n            throw new Error('Invalid Path: you can not ask for the dbPath before setting an \"id\" property.');\n        }\n        return [this.data.META.localOffset, this.pluralName, this.data.id].join(\"/\");\n    }\n    /**\n     * Allows an empty Record to be initialized to a known state.\n     * This is not intended to allow for mass property manipulation other\n     * than at time of initialization\n     *\n     * @param data the initial state you want to start with\n     */\n    _initialize(data) {\n        Object.keys(data).map(key => {\n            this._data[key] = data[key];\n        });\n        const relationships = this.META.relationships;\n        const ownedByRels = (relationships || [])\n            .filter(r => r.relType === \"ownedBy\")\n            .map(r => r.property);\n        const hasManyRels = (relationships || [])\n            .filter(r => r.relType === \"hasMany\")\n            .map(r => r.property);\n        // default hasMany to empty hash\n        hasManyRels.map((p) => {\n            if (!this._data[p]) {\n                this._data[p] = {};\n            }\n        });\n        const now = new Date().getTime();\n        if (!this._data.lastUpdated) {\n            this._data.lastUpdated = now;\n        }\n        if (!this._data.createdAt) {\n            this._data.createdAt = now;\n        }\n    }\n    get existsOnDB() {\n        return this.data && this.data.id ? true : false;\n    }\n    update(hash) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.data.id || !this._existsOnDB) {\n                throw new Error(`Invalid Operation: you can not update a record which doesn't have an \"id\" or which has never been saved to the database`);\n            }\n            return this.db.update(this.dbPath, hash);\n        });\n    }\n    /**\n     * Pushes new values onto properties on the record\n     * which have been stated to be a \"pushKey\"\n     */\n    pushKey(property, value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.META.pushKeys.indexOf(property) === -1) {\n                throw common_types_1.createError(\"invalid-operation/not-pushkey\", `Invalid Operation: you can not push to property \"${property}\" as it has not been declared a pushKey property in the schema`);\n            }\n            if (!this.existsOnDB) {\n                throw common_types_1.createError(\"invalid-operation/not-on-db\", `Invalid Operation: you can not push to property \"${property}\" before saving the record to the database`);\n            }\n            const key = firebase_key_1.key();\n            const currentState = this.get(property) || {};\n            const newState = Object.assign({}, currentState, { [key]: value });\n            // set state locally\n            this.set(property, newState);\n            // push updates to db\n            const write = this.db.multiPathSet(`${this.dbPath}/`);\n            write.add({ path: `lastUpdated`, value: new Date().getTime() });\n            write.add({ path: `${property}/${key}`, value });\n            try {\n                yield write.execute();\n            }\n            catch (e) {\n                throw common_types_1.createError(\"multi-path/write-error\", \"\", e);\n            }\n            return key;\n        });\n    }\n    /**\n     * Updates a set of properties on a given model atomically (aka, all at once); will automatically\n     * include the \"lastUpdated\" property.\n     *\n     * @param props a hash of name value pairs which represent the props being updated and their new values\n     */\n    updateProps(props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const updater = this.db.multiPathSet(this.dbPath);\n            Object.keys(props).map((key) => {\n                if (typeof props[key] === \"object\") {\n                    const existingState = this.get(key);\n                    props[key] = Object.assign({}, existingState, props[key]);\n                }\n                else {\n                    if (key !== \"lastUpdated\") {\n                        updater.add({ path: key, value: props[key] });\n                    }\n                }\n                this.set(key, props[key]);\n            });\n            const now = new Date().getTime();\n            updater.add({ path: \"lastUpdated\", value: now });\n            this._data.lastUpdated = now;\n            try {\n                yield updater.execute();\n            }\n            catch (e) {\n                throw common_types_1.createError(\"UpdateProps\", `An error occurred trying to update ${this._model.modelName}:${this.id}`, e);\n            }\n        });\n    }\n    /**\n     * Adds another fk to a hasMany relationship\n     *\n     * @param property the property which is acting as a foreign key (array)\n     * @param ref reference to ID of related entity\n     * @param optionalValue the default behaviour is to add the value TRUE but you can optionally add some additional piece of information here instead.\n     */\n    addHasMany(property, ref, optionalValue = true) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.META.property(property).relType !== \"hasMany\") {\n                const e = new Error(`The property \"${property}\" does NOT have a \"hasMany\" relationship on ${this.modelName}`);\n                e.name = \"InvalidRelationship\";\n                throw e;\n            }\n            if (typeof this.data[property] === \"object\" && this.data[property][ref]) {\n                console.warn(`The fk of \"${ref}\" already exists in \"${this.modelName}.${property}\"!`);\n                return;\n            }\n            yield this.db\n                .multiPathSet(this.dbPath)\n                .add({ path: `${property}/${ref}/`, value: optionalValue })\n                .add({ path: \"lastUpdated\", value: new Date().getTime() })\n                .execute();\n        });\n    }\n    /**\n     * Changes the local state of a property on the record\n     *\n     * @param prop the property on the record to be changed\n     * @param value the new value to set to\n     */\n    set(prop, value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // TODO: add interaction points for client-side state management; goal\n            // is to have local state changed immediately but with meta data to indicate\n            // that we're waiting for backend confirmation.\n            this._data[prop] = value;\n            yield this.db\n                .multiPathSet(this.dbPath)\n                .add({ path: `${prop}/`, value })\n                .add({ path: \"lastUpdated/\", value: new Date().getTime() })\n                .execute();\n            return;\n        });\n    }\n    /**\n     * get a property value from the record\n     *\n     * @param prop the property being retrieved\n     */\n    get(prop) {\n        return this.data[prop];\n    }\n    toString() {\n        return `Record::${this.modelName}@${this.id || \"undefined\"}`;\n    }\n    toJSON() {\n        return {\n            dbPath: this.dbPath,\n            modelName: this.modelName,\n            pluralName: this.pluralName,\n            key: this.id,\n            localPath: this.localPath,\n            data: this.data.toString()\n        };\n    }\n    /**\n     * Load data from a record in database\n     */\n    _getFromDB(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.db) {\n                const e = new Error(`The attempt to load data into a Record requires that the DB property be initialized first!`);\n                e.name = \"NoDatabase\";\n                throw e;\n            }\n            this._data.id = id;\n            const data = yield this.db.getRecord(this.dbPath);\n            if (data && data.id) {\n                this._initialize(data);\n            }\n            else {\n                throw new Error(`Unknown Key: the key \"${id}\" was not found in Firebase at \"${this.dbPath}\".`);\n            }\n            return this;\n        });\n    }\n    _save() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.id) {\n                const e = new Error(`Saving after ID is set is not allowed [ ${this.id} ]`);\n                e.name = \"InvalidSave\";\n                throw e;\n            }\n            this.id = firebase_key_1.key();\n            if (!this.db) {\n                const e = new Error(`Attempt to save Record failed as the Database has not been connected yet. Try setting Model.defaultDb first.`);\n                e.name = \"FiremodelError\";\n                throw e;\n            }\n            yield this.db.set(this.dbPath, this.data);\n            return this;\n        });\n    }\n}\nexports.Record = Record;\n//# sourceMappingURL=record.js.map","\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst index_1 = require(\"./index\");\nconst serialized_query_1 = require(\"serialized-query\");\nconst model_1 = require(\"./model\");\nconst DEFAULT_IF_NOT_FOUND = \"__DO_NOT_USE__\";\nclass List {\n    constructor(_model, _data = []) {\n        this._model = _model;\n        this._data = _data;\n    }\n    static create(schema, options = {}) {\n        const model = model_1.Model.create(schema, options);\n        return new List(model);\n    }\n    /**\n     * Creates a List<T> which is populated with the passed in query\n     *\n     * @param schema the schema type\n     * @param query the serialized query; note that this LIST will override the path of the query\n     * @param options model options\n     */\n    static fromQuery(schema, query, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const model = model_1.Model.create(schema, options);\n            query.setPath(model.dbPath);\n            const list = List.create(schema, options);\n            yield list.load(query);\n            return list;\n        });\n    }\n    /**\n     * Loads all the records of a given schema-type ordered by lastUpdated\n     *\n     * @param schema the schema type\n     * @param options model options\n     */\n    static all(schema, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const query = new serialized_query_1.SerializedQuery().orderByChild(\"lastUpdated\");\n            const list = yield List.fromQuery(schema, query, options);\n            return list;\n        });\n    }\n    /**\n     * Loads the first X records of the Schema type where\n     * ordering is provided by the \"createdAt\" property\n     *\n     * @param schema the schema type\n     * @param howMany the number of records to bring back\n     * @param options model options\n     */\n    static first(schema, howMany, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const query = new serialized_query_1.SerializedQuery().orderByChild(\"createdAt\").limitToLast(howMany);\n            const list = yield List.fromQuery(schema, query, options);\n            return list;\n        });\n    }\n    /**\n     * recent\n     *\n     * Get recent items of a given type/schema (based on lastUpdated)\n     *\n     * @param schema the TYPE you are interested\n     * @param howMany the quantity to of records to bring back\n     * @param offset start at an offset position (useful for paging)\n     * @param options\n     */\n    static recent(schema, howMany, offset = 0, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const query = new serialized_query_1.SerializedQuery().orderByChild(\"lastUpdated\").limitToFirst(howMany);\n            const list = yield List.fromQuery(schema, query, options);\n            return list;\n        });\n    }\n    /**\n     * since\n     *\n     * Bring back all records that have changed since a given date\n     *\n     * @param schema the TYPE you are interested\n     * @param since  the datetime in miliseconds\n     * @param options\n     */\n    static since(schema, since, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (typeof since !== \"number\") {\n                const e = new Error(`Invalid \"since\" parameter; value must be number instead got a(n) ${typeof since} [ ${since} ]`);\n                e.name = \"NotAllowed\";\n                throw e;\n            }\n            // const query = new SerializedQuery().orderByChild(\"lastUpdated\").startAt(since);\n            const query = new serialized_query_1.SerializedQuery().orderByChild(\"lastUpdated\").startAt(since);\n            console.log(\"QUERY\", query);\n            const list = yield List.fromQuery(schema, query, options);\n            return list;\n        });\n    }\n    static inactive(schema, howMany, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const query = new serialized_query_1.SerializedQuery().orderByChild(\"lastUpdated\").limitToLast(howMany);\n            const list = yield List.fromQuery(schema, query, options);\n            return list;\n        });\n    }\n    static last(schema, howMany, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const query = new serialized_query_1.SerializedQuery().orderByChild(\"createdAt\").limitToFirst(howMany);\n            const list = yield List.fromQuery(schema, query, options);\n            return list;\n        });\n    }\n    static where(schema, property, value, options = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let operation = \"=\";\n            let val = value;\n            if (Array.isArray(value)) {\n                val = value[1];\n                operation = value[0];\n            }\n            const query = new serialized_query_1.SerializedQuery().orderByChild(property).where(operation, val);\n            const list = yield List.fromQuery(schema, query, options);\n            return list;\n        });\n    }\n    get length() {\n        return this._data.length;\n    }\n    get db() {\n        return this._model.db;\n    }\n    get modelName() {\n        return this._model.modelName;\n    }\n    get pluralName() {\n        return this._model.pluralName;\n    }\n    get dbPath() {\n        return [this.meta.dbOffset, this.pluralName].join(\"/\");\n    }\n    get localPath() {\n        return [this.meta.localOffset, this.pluralName].join(\"/\");\n    }\n    get meta() {\n        return this._model.schema.META;\n    }\n    /** Returns another List with data filtered down by passed in filter function */\n    filter(f) {\n        return new List(this._model, this._data.filter(f));\n    }\n    /** Returns another List with data filtered down by passed in filter function */\n    find(f, defaultIfNotFound = DEFAULT_IF_NOT_FOUND) {\n        const filtered = this._data.filter(f);\n        const r = index_1.Record.create(this._model.schemaClass);\n        if (filtered.length > 0) {\n            r._initialize(filtered[0]);\n            return r;\n        }\n        else {\n            if (defaultIfNotFound !== DEFAULT_IF_NOT_FOUND) {\n                return defaultIfNotFound;\n            }\n            else {\n                const e = new Error(`find(fn) did not find a value in the List [ length: ${this.data.length} ]`);\n                e.name = \"NotFound\";\n                throw e;\n            }\n        }\n    }\n    filterWhere(prop, value) {\n        const whereFilter = (item) => item[prop] === value;\n        return new List(this._model, this._data.filter(whereFilter));\n    }\n    /**\n     * findWhere\n     *\n     * returns the first record in the list where the property equals the\n     * specified value. If no value is found then an error is thrown unless\n     * it is stated\n     */\n    findWhere(prop, value, defaultIfNotFound = DEFAULT_IF_NOT_FOUND) {\n        console.log(this._data);\n        const list = this.filterWhere(prop, value);\n        if (list.length > 0) {\n            return index_1.Record.load(this._model.schemaClass, list._data[0]);\n        }\n        else {\n            if (defaultIfNotFound !== DEFAULT_IF_NOT_FOUND) {\n                return defaultIfNotFound;\n            }\n            else {\n                const e = new Error(`findWhere(${prop}, ${value}) was not found in the List [ length: ${this.data.length} ]`);\n                e.name = \"NotFound\";\n                throw e;\n            }\n        }\n    }\n    /**\n     * provides a map over the data structured managed by the List; there will be no mutations to the\n     * data managed by the list\n     */\n    map(f) {\n        return this.data.map(f);\n    }\n    get data() {\n        return this._data;\n    }\n    /**\n     * Returns the specified record Record object\n     *\n     * @param id the unique ID which is being looked for\n     * @param defaultIfNotFound the default value returned if the ID is not found in the list\n     */\n    get(id, defaultIfNotFound = DEFAULT_IF_NOT_FOUND) {\n        const find = this.filter(f => f.id === id);\n        if (find.length === 0) {\n            if (defaultIfNotFound !== DEFAULT_IF_NOT_FOUND) {\n                return defaultIfNotFound;\n            }\n            const e = new Error(`Could not find \"${id}\" in list of ${this._model.pluralName}`);\n            e.name = \"NotFound\";\n            throw e;\n        }\n        const r = new index_1.Record(this._model);\n        r._initialize(find.data[0]);\n        return r;\n    }\n    /**\n     * Returns the single instance of an object contained by the List container\n     *\n     * @param id the unique ID which is being looked for\n     * @param defaultIfNotFound the default value returned if the ID is not found in the list\n     */\n    getData(id, defaultIfNotFound = \"__DO_NOT_USE__\") {\n        const record = this.get(id, defaultIfNotFound);\n        return record === defaultIfNotFound ? defaultIfNotFound : record.data;\n    }\n    load(pathOrQuery) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.db) {\n                const e = new Error(`The attempt to load data into a List requires that the DB property be initialized first!`);\n                e.name = \"NoDatabase\";\n                throw e;\n            }\n            this._data = yield this.db.getList(pathOrQuery);\n            return this;\n        });\n    }\n}\nexports.List = List;\n//# sourceMappingURL=list.js.map","import { alphabet } from \"./key-alphabet\";\r\nexport function milliseconds(key) {\r\n    var result = 0;\r\n    for (var i = 0; i < 8; ++i) {\r\n        var index = alphabet.indexOf(key.charAt(i));\r\n        if (index === -1) {\r\n            throw new Error(\"Unexpected character '\" + key.charAt(i) + \"'.\");\r\n        }\r\n        result = (result * 64) + index;\r\n    }\r\n    return result;\r\n}\r\n","export function repeat(text, count) {\r\n    var result = \"\";\r\n    if (typeof text.repeat === \"function\") {\r\n        result = text.repeat(count);\r\n    }\r\n    else {\r\n        if (count > 0) {\r\n            while (count > 1) {\r\n                if (count & 1) {\r\n                    result += text;\r\n                }\r\n                count >>= 1;\r\n                text += text;\r\n            }\r\n            result = result + text;\r\n        }\r\n    }\r\n    return result;\r\n}\r\n","import { alphabet } from \"./key-alphabet\";\r\nimport { randomString } from \"./text-random-string\";\r\nvar lastTimestamp = 0;\r\nexport function key(timestamp, as) {\r\n    if (timestamp === undefined) {\r\n        timestamp = Date.now();\r\n        if (timestamp <= lastTimestamp) {\r\n            timestamp = lastTimestamp + 1;\r\n        }\r\n        lastTimestamp = timestamp;\r\n    }\r\n    if (timestamp instanceof Date) {\r\n        timestamp = timestamp.getTime();\r\n    }\r\n    var result = new Array(9);\r\n    for (var i = 7; i >= 0; --i) {\r\n        result[i] = alphabet.charAt(timestamp % 64);\r\n        timestamp = Math.floor(timestamp / 64);\r\n    }\r\n    if (timestamp !== 0) {\r\n        throw new Error(\"Unexpected timestamp.\");\r\n    }\r\n    switch (as) {\r\n        case \"max\":\r\n            result[8] = \"zzzzzzzzzzzz\";\r\n            break;\r\n        case \"min\":\r\n            result[8] = \"------------\";\r\n            break;\r\n        default:\r\n            result[8] = randomString(alphabet, 12);\r\n    }\r\n    return result.join(\"\");\r\n}\r\nexport function resetLastTimestamp() {\r\n    lastTimestamp = 0;\r\n}\r\n","import { milliseconds } from \"./key-milliseconds\";\r\nexport function date(key) {\r\n    return new Date(milliseconds(key));\r\n}\r\n","export function decode(component) {\r\n    return component.replace(/!([0-9a-f]{2})/gi, function (match, code) { return String.fromCharCode(parseInt(code, 16)); });\r\n}\r\n","import { alphabet } from \"./key-alphabet\";\r\nexport function decodeLexicographic(key) {\r\n    var value = 0;\r\n    var lengthChar = key.charAt(0);\r\n    if (lengthChar > \"_\") {\r\n        for (var k = 1; k < key.length; k++) {\r\n            value *= alphabet.length;\r\n            value += alphabet.indexOf(key.charAt(k));\r\n        }\r\n    }\r\n    else {\r\n        for (var k = 1; k < key.length; k++) {\r\n            value *= alphabet.length;\r\n            value += alphabet.length - 1 - alphabet.indexOf(key.charAt(k));\r\n        }\r\n        value = -value;\r\n    }\r\n    return value;\r\n}\r\n","import { alphabet } from \"./key-alphabet\";\r\nimport { repeat } from \"./text-repeat\";\r\nexport function decrement(key) {\r\n    return key.replace(/[^-]-*$/, function (match) {\r\n        var index = alphabet.indexOf(match.charAt(0));\r\n        if (index === -1) {\r\n            throw new Error(\"Unexpected character '\" + match.charAt(0) + \"'.\");\r\n        }\r\n        return alphabet.charAt(index - 1) + repeat(\"z\", match.length - 1);\r\n    });\r\n}\r\n","export function encode(component) {\r\n    return component.replace(/[\\/\\.\\$\\[\\]#!]/g, function (match) { return \"!\" + match.charCodeAt(0).toString(16).toUpperCase(); });\r\n}\r\n","import { alphabet } from \"./key-alphabet\";\r\nexport function encodeLexicographic(value) {\r\n    var result = \"\";\r\n    if (value === 0) {\r\n        result = \"a-\";\r\n    }\r\n    else if (value > 0) {\r\n        while (value > 0) {\r\n            var digit = (value % alphabet.length);\r\n            result = alphabet.charAt(digit) + result;\r\n            value -= digit;\r\n            value /= alphabet.length;\r\n        }\r\n        var prefix = alphabet.charAt(result.length + 37);\r\n        result = prefix + result;\r\n    }\r\n    else {\r\n        value = -value;\r\n        while (value > 0) {\r\n            var digit = (value % alphabet.length);\r\n            result = alphabet.charAt(alphabet.length - 1 - digit) + result;\r\n            value -= digit;\r\n            value /= alphabet.length;\r\n        }\r\n        var prefix = alphabet.charAt(37 - result.length);\r\n        result = prefix + result;\r\n    }\r\n    return result;\r\n}\r\n","import { alphabet } from \"./key-alphabet\";\r\nimport { repeat } from \"./text-repeat\";\r\nexport function increment(key) {\r\n    return key.replace(/[^z]z*$/, function (match) {\r\n        var index = alphabet.indexOf(match.charAt(0));\r\n        if (index === -1) {\r\n            throw new Error(\"Unexpected character '\" + match.charAt(0) + \"'.\");\r\n        }\r\n        return alphabet.charAt(index + 1) + repeat(\"-\", match.length - 1);\r\n    });\r\n}\r\n","export function randomString(alphabet, length) {\r\n    var buffer = [];\r\n    length = length | 0;\r\n    while (length) {\r\n        var r = (Math.random() * alphabet.length) | 0;\r\n        buffer.push(alphabet.charAt(r));\r\n        length -= 1;\r\n    }\r\n    return buffer.join(\"\");\r\n}\r\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Named Exports\nvar property_1 = require(\"./decorators/property\");\nexports.property = property_1.property;\nexports.pushKey = property_1.pushKey;\nexports.constrainedProperty = property_1.constrainedProperty;\nexports.constrain = property_1.constrain;\nexports.min = property_1.min;\nexports.max = property_1.max;\nexports.length = property_1.length;\nexports.desc = property_1.desc;\nvar relationship_1 = require(\"./decorators/relationship\");\nexports.hasMany = relationship_1.hasMany;\nexports.ownedBy = relationship_1.ownedBy;\nexports.inverse = relationship_1.inverse;\nvar schema_1 = require(\"./decorators/schema\");\nexports.schema = schema_1.schema;\nvar base_schema_1 = require(\"./base-schema\");\nexports.BaseSchema = base_schema_1.BaseSchema;\nexports.RelationshipPolicy = base_schema_1.RelationshipPolicy;\nexports.RelationshipCardinality = base_schema_1.RelationshipCardinality;\nvar model_1 = require(\"./model\");\nexports.Model = model_1.Model;\nvar record_1 = require(\"./record\");\nexports.Record = record_1.Record;\nvar list_1 = require(\"./list\");\nexports.List = list_1.List;\nvar firebase_key_1 = require(\"firebase-key\");\nexports.fbKey = firebase_key_1.key;\n//# sourceMappingURL=index.js.map"],"names":["Object","defineProperty","exports","require","decorator_1","constrainedProperty","options","propertyDecorator","assign","constrain","prop","value","desc","min","max","length","property","pushKey","Reflect","factory","root","global","self","this","Function","exporter","makeExporter","target","previous","key","configurable","writable","hasOwn","prototype","hasOwnProperty","supportsSymbol","Symbol","toPrimitiveSymbol","toPrimitive","iteratorSymbol","iterator","supportsCreate","create","supportsProto","__proto__","Array","downLevel","HashMap","MakeDictionary","has","map","call","get","undefined","functionPrototype","getPrototypeOf","usePolyfill","process","env","_Map","Map","entries","cacheSentinel","arraySentinel","MapIterator","keys","values","selector","_index","_keys","_values","_selector","next","index","result","done","throw","error","return","_cacheKey","_cacheIndex","enumerable","_find","set","delete","size","i","clear","getKey","getValue","getEntry","insert","indexOf","push","_","CreateMapPolyfill","_Set","Set","_map","add","Metadata","WeakMap","UUID_SIZE","rootKey","CreateUniqueKey","_key","table","GetOrCreateWeakMapTable","CreateUUID","FillRandomBytes","buffer","Math","random","data","Uint8Array","crypto","getRandomValues","msCrypto","GenRandomBytes","offset","byte","toString","toLowerCase","CreateWeakMapPolyfill","GetOrCreateMetadataMap","O","P","Create","targetMetadata","IsUndefined","metadataMap","OrdinaryHasOwnMetadata","MetadataKey","OrdinaryGetOwnMetadata","OrdinaryDefineOwnMetadata","MetadataValue","OrdinaryOwnMetadataKeys","keysObj","obj","method","GetMethod","IsCallable","TypeError","IsObject","GetIterator","k","IteratorStep","nextValue","e","IteratorClose","Type","x","IsNull","ToPrimitive","input","PreferredType","hint","exoticToPrim","toString_1","valueOf","toString_2","OrdinaryToPrimitive","ToPropertyKey","argument","ToString","IsArray","isArray","IsConstructor","V","func","f","OrdinaryGetPrototypeOf","proto","prototypeProto","constructor","__","decorators","propertyKey","attributes","decorator","decorated","DecorateConstructor","descriptor","DecorateProperty","metadataKey","metadataValue","IsPropertyKey","OrdinaryHasMetadata","parent","OrdinaryGetMetadata","OrdinaryMetadataKeys","ownKeys","parentKeys","_i","ownKeys_1","hasKey","_a","parentKeys_1","path","propertiesBySchema","relationshipsBySchema","getProperties","name","BaseSchema","s","nameValuePairs","reflect","getMetadata","meta","defineMetadata","isProperty","isRelationship","getRelationships","getPushKeys","filter","p","schemaClass","inverseProperty","original","args","construct","context","audit","Error","__decorate","d","c","arguments","r","getOwnPropertyDescriptor","decorate","__metadata","v","metadata","property_1","RelationshipPolicy","RelationshipCardinality","META","properties","_this","JSON","stringify","String","Number","__awaiter","thisArg","_arguments","generator","Promise","resolve","reject","fulfilled","rejected","step","then","apply","common_types_1","VerboseError_1","index_1","pluralize","camelCase","serialized_query_1","util_1","firebase_key_1","baseLogger","message","console","log","modelName","warn","STAGE","AWS_STAGE","ENV","Model","_schemaClass","db","logger","_mockGenerator","_this2","_bespokeMockGenerator","_defaultGenerator","h","Date","faker","date","past","toISOString","_db","defaultDb","_schema","id","Record","query","list","List","load","dbPath","_findBuilder","results","getList","first","pop","createError","pluralName","record","auditInfo","now","crud","slashNotation","newRecord","updates","returnValue","match","since","last","auditBase","SerializedQuery","startAt","orderByChild","limitToLast","when","info","op","isAuditable","update","_this3","ref","remove","VerboseError","child","singular","operation","limitToFirst","equalTo","endAt","quantity","override","mock","queueSchema","generate","_pluralName","plural","cb","dbOffset","join","localOffset","relationships","pushKeys","schema","model_1","_model","_existsOnDB","_writeOperations","_data","relType","getTime","lastUpdated","createdAt","hash","existsOnDB","currentState","newState","write","multiPathSet","execute","props","updater","_typeof","existingState","optionalValue","localPath","getRecord","_initialize","val","_save","_getFromDB","defaultIfNotFound","filtered","item","filterWhere","find","pathOrQuery","model","setPath","fromQuery","howMany","where","milliseconds","alphabet","charAt","repeat","text","count","lastTimestamp","component","replace","code","fromCharCode","parseInt","charCodeAt","toUpperCase","digit","timestamp","as","floor","randomString","relationship_1","hasMany","ownedBy","inverse","schema_1","base_schema_1","record_1","list_1"],"mappings":"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"}