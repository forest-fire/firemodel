{"version":3,"file":"firemodel.cjs.js","sources":["esnext/decorators/decorator.js","esnext/decorators/property.js","esnext/decorators/relationship.js","esnext/decorators/schema.js","esnext/Model.js","esnext/FireModel.js","esnext/Record.js","esnext/list.js"],"sourcesContent":["import \"reflect-metadata\";\nimport { set, get } from \"lodash\";\nfunction push(target, path, value) {\n    if (Array.isArray(get(target, path))) {\n        get(target, path).push(value);\n    }\n    else {\n        set(target, path, [value]);\n    }\n}\n/** Properties accumlated by propertyDecorators and grouped by schema */\nconst propertiesBySchema = {};\n/** Relationships accumlated by propertyDecorators and grouped by schema */\nconst relationshipsBySchema = {};\nexport const propertyDecorator = (nameValuePairs = {}, \n/**\n * if you want to set the property being decorated's name\n * as property on meta specify the meta properties name here\n */\nproperty) => (target, key) => {\n    const reflect = Reflect.getMetadata(\"design:type\", target, key) || {};\n    const meta = Object.assign({}, Reflect.getMetadata(key, target), { type: reflect.name }, nameValuePairs);\n    Reflect.defineMetadata(key, meta, target);\n    const _val = this[key];\n    if (nameValuePairs.isProperty) {\n        if (property) {\n            push(propertiesBySchema, target.constructor.name, Object.assign({}, meta, { [property]: key }));\n        }\n        else {\n            push(propertiesBySchema, target.constructor.name, meta);\n        }\n    }\n    if (nameValuePairs.isRelationship) {\n        if (property) {\n            push(relationshipsBySchema, target.constructor.name, Object.assign({}, meta, { [property]: key }));\n        }\n        else {\n            push(relationshipsBySchema, target.constructor.name, meta);\n        }\n    }\n};\n/** lookup meta data for schema properties */\nfunction propertyMeta(context) {\n    return (prop) => Reflect.getMetadata(prop, context);\n}\n/**\n * Give all properties from schema and base schema\n *\n * @param target the schema object which is being looked up\n */\nexport function getProperties(target) {\n    return [\n        ...propertiesBySchema[target.constructor.name],\n        ...propertiesBySchema.Model.map(s => (Object.assign({}, s, { isBaseSchema: true })))\n    ];\n}\nexport function getRelationships(target) {\n    return relationshipsBySchema[target.constructor.name];\n}\nexport function getPushKeys(target) {\n    const props = getProperties(target);\n    return props.filter(p => p.pushKey).map(p => p.property);\n}\n//# sourceMappingURL=decorator.js.map","import \"reflect-metadata\";\nimport { propertyDecorator } from \"./decorator\";\nexport function constrainedProperty(options = {}) {\n    return propertyDecorator(Object.assign({}, options, { isRelationship: false, isProperty: true }), \"property\");\n}\n/** allows the introduction of a new constraint to the metadata of a property */\nexport function constrain(prop, value) {\n    return propertyDecorator({ [prop]: value });\n}\nexport function desc(value) {\n    return propertyDecorator({ desc: value });\n}\nexport function min(value) {\n    return propertyDecorator({ min: value });\n}\nexport function max(value) {\n    return propertyDecorator({ max: value });\n}\nexport function length(value) {\n    return propertyDecorator({ length: value });\n}\nexport const property = propertyDecorator({\n    isRelationship: false,\n    isProperty: true\n}, \"property\");\nexport const pushKey = propertyDecorator({\n    pushKey: true\n}, \"property\");\n//# sourceMappingURL=property.js.map","import \"reflect-metadata\";\nimport { propertyDecorator } from \"./decorator\";\nexport function hasMany(schemaClass) {\n    return propertyDecorator({\n        isRelationship: true,\n        isProperty: false,\n        relType: \"hasMany\"\n    }, \"property\");\n}\nexport function ownedBy(schemaClass) {\n    return propertyDecorator({\n        isRelationship: true,\n        isProperty: false,\n        relType: \"ownedBy\"\n    }, \"property\");\n}\nexport function inverse(inverseProperty) {\n    return propertyDecorator({ inverseProperty });\n}\n//# sourceMappingURL=relationship.js.map","import \"reflect-metadata\";\nimport { getRelationships, getProperties, getPushKeys } from \"./decorator\";\n/** lookup meta data for schema properties */\nfunction propertyMeta(context) {\n    return (prop) => Reflect.getMetadata(prop, context);\n}\nexport function model(options) {\n    return (target) => {\n        const original = target;\n        // new constructor\n        const f = function (...args) {\n            const meta = options;\n            const obj = Reflect.construct(original, args);\n            Reflect.defineProperty(obj, \"META\", {\n                get() {\n                    return Object.assign({}, options, { property: propertyMeta(obj) }, { properties: getProperties(obj) }, { relationships: getRelationships(obj) }, { pushKeys: getPushKeys(obj) }, { audit: options.audit ? options.audit : false });\n                },\n                set() {\n                    throw new Error(\"The meta property can only be set with the @model decorator!\");\n                },\n                configurable: false,\n                enumerable: false\n            });\n            return obj;\n        };\n        // copy prototype so intanceof operator still works\n        f.prototype = original.prototype;\n        // return new constructor (will override original)\n        return f;\n    };\n}\n//# sourceMappingURL=schema.js.map","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { property } from \"./decorators/property\";\nexport var RelationshipPolicy;\n(function (RelationshipPolicy) {\n    RelationshipPolicy[\"keys\"] = \"keys\";\n    RelationshipPolicy[\"lazy\"] = \"lazy\";\n    RelationshipPolicy[\"inline\"] = \"inline\";\n})(RelationshipPolicy || (RelationshipPolicy = {}));\nexport var RelationshipCardinality;\n(function (RelationshipCardinality) {\n    RelationshipCardinality[\"hasMany\"] = \"hasMany\";\n    RelationshipCardinality[\"belongsTo\"] = \"belongsTo\";\n})(RelationshipCardinality || (RelationshipCardinality = {}));\nexport class Model {\n    toString() {\n        const obj = {};\n        this.META.properties.map(p => {\n            obj[p.property] = this[p.property];\n        });\n        return JSON.stringify(obj);\n    }\n}\n__decorate([\n    property,\n    __metadata(\"design:type\", String)\n], Model.prototype, \"id\", void 0);\n__decorate([\n    property,\n    __metadata(\"design:type\", Number)\n], Model.prototype, \"lastUpdated\", void 0);\n__decorate([\n    property,\n    __metadata(\"design:type\", Number)\n], Model.prototype, \"createdAt\", void 0);\n//# sourceMappingURL=Model.js.map","// tslint:disable-next-line:no-var-requires\nconst pluralize = require(\"pluralize\");\nexport class FireModel {\n    static get defaultDb() {\n        return FireModel._defaultDb;\n    }\n    static set defaultDb(db) {\n        this._defaultDb = db;\n    }\n    //#endregion\n    //#region PUBLIC INTERFACE\n    get modelName() {\n        return this._model.constructor.name.toLowerCase();\n    }\n    get pluralName() {\n        // TODO: add back the exception processing\n        return pluralize(this.modelName);\n    }\n    get META() {\n        return this._model.META;\n    }\n    get properties() {\n        return this._model.META.properties;\n    }\n    get relationships() {\n        return this._model.META.relationships;\n    }\n    /** the connected real-time database */\n    get db() {\n        if (!this._db) {\n            this._db = FireModel.defaultDb;\n        }\n        if (!this._db) {\n            const e = new Error(`Can't get DB as it has not been set yet for this instance and no default database exists [ ${this.modelName} ]!`);\n            e.name = \"FireModel::NoDatabase\";\n            throw e;\n        }\n        return this._db;\n    }\n    get pushKeys() {\n        return this._model.META.pushKeys;\n    }\n}\n//#region STATIC INTERFACE\nFireModel._defaultDb = null;\n//# sourceMappingURL=FireModel.js.map","import { createError } from \"common-types\";\nimport { key as fbKey } from \"firebase-key\";\nimport { FireModel } from \"./FireModel\";\nexport class Record extends FireModel {\n    constructor(model, options = {}) {\n        super();\n        this._existsOnDB = false;\n        this._writeOperations = [];\n        this._modelConstructor = model;\n        this._model = new model();\n        this._data = new model();\n    }\n    static set defaultDb(db) {\n        FireModel.defaultDb = db;\n    }\n    static get defaultDb() {\n        return FireModel.defaultDb;\n    }\n    /**\n     * create\n     *\n     * creates a new -- and empty -- Record object; often used in\n     * conjunction with the Record's initialize() method\n     */\n    static create(model, options = {}) {\n        // const model = OldModel.create(schema, options);\n        const record = new Record(model, options);\n        return record;\n    }\n    /**\n     * add\n     *\n     * Adds a new record to the database\n     *\n     * @param schema the schema of the record\n     * @param payload the data for the new record\n     * @param options\n     */\n    static async add(model, payload, options = {}) {\n        let r;\n        try {\n            r = Record.create(model, options);\n            r._initialize(payload);\n            await r._save();\n        }\n        catch (e) {\n            const err = new Error(`Problem adding new Record: ${e.message}`);\n            err.name = e.name !== \"Error\" ? e.name : \"FiremodelError\";\n            throw e;\n        }\n        return r;\n    }\n    /**\n     * load\n     *\n     * static method to create a Record when you want to load the\n     * state of the record with something you already have.\n     *\n     * Intent should be that this record already exists in the\n     * database. If you want to add to the database then use add()\n     */\n    static load(model, payload, options = {}) {\n        const rec = Record.create(model, options);\n        rec._initialize(payload);\n        return rec;\n    }\n    static async get(model, id, options = {}) {\n        const record = Record.create(model, options);\n        await record._getFromDB(id);\n        return record;\n    }\n    get data() {\n        return this._data;\n    }\n    get isDirty() {\n        return this._writeOperations.length > 0 ? true : false;\n    }\n    /**\n     * returns the fully qualified name in the database to this record;\n     * this of course includes the record id so if that's not set yet calling\n     * this getter will result in an error\n     */\n    get dbPath() {\n        if (!this.data.id) {\n            throw createError(\"record/invalid-path\", `Invalid Record Path: you can not ask for the dbPath before setting an \"id\" property.`);\n        }\n        return [this.data.META.dbOffset, this.pluralName, this.data.id].join(\"/\");\n    }\n    /** The Record's primary key */\n    get id() {\n        return this.data.id;\n    }\n    set id(val) {\n        if (this.data.id) {\n            const e = new Error(`You may not re-set the ID of a record [ ${this.data.id} → ${val} ].`);\n            e.name = \"NotAllowed\";\n            throw e;\n        }\n        this._data.id = val;\n    }\n    /**\n     * returns the record's database offset without including the ID of the record;\n     * among other things this can be useful prior to establishing an ID for a record\n     */\n    get dbOffset() {\n        return this.data.META.dbOffset;\n    }\n    /**\n     * returns the record's location in the frontend state management framework;\n     * depends on appropriate configuration of model to be accurate.\n     */\n    get localPath() {\n        if (!this.data.id) {\n            throw new Error('Invalid Path: you can not ask for the dbPath before setting an \"id\" property.');\n        }\n        return [this.data.META.localOffset, this.pluralName, this.data.id].join(\"/\");\n    }\n    /**\n     * Allows an empty Record to be initialized to a known state.\n     * This is not intended to allow for mass property manipulation other\n     * than at time of initialization\n     *\n     * @param data the initial state you want to start with\n     */\n    _initialize(data) {\n        Object.keys(data).map(key => {\n            this._data[key] = data[key];\n        });\n        const relationships = this.META.relationships;\n        const ownedByRels = (relationships || [])\n            .filter(r => r.relType === \"ownedBy\")\n            .map(r => r.property);\n        const hasManyRels = (relationships || [])\n            .filter(r => r.relType === \"hasMany\")\n            .map(r => r.property);\n        // default hasMany to empty hash\n        hasManyRels.map((p) => {\n            if (!this._data[p]) {\n                this._data[p] = {};\n            }\n        });\n        const now = new Date().getTime();\n        if (!this._data.lastUpdated) {\n            this._data.lastUpdated = now;\n        }\n        if (!this._data.createdAt) {\n            this._data.createdAt = now;\n        }\n    }\n    get existsOnDB() {\n        return this.data && this.data.id ? true : false;\n    }\n    async update(hash) {\n        if (!this.data.id || !this._existsOnDB) {\n            throw new Error(`Invalid Operation: you can not update a record which doesn't have an \"id\" or which has never been saved to the database`);\n        }\n        return this.db.update(this.dbPath, hash);\n    }\n    /**\n     * Pushes new values onto properties on the record\n     * which have been stated to be a \"pushKey\"\n     */\n    async pushKey(property, value) {\n        if (this.META.pushKeys.indexOf(property) === -1) {\n            throw createError(\"invalid-operation/not-pushkey\", `Invalid Operation: you can not push to property \"${property}\" as it has not been declared a pushKey property in the schema`);\n        }\n        if (!this.existsOnDB) {\n            throw createError(\"invalid-operation/not-on-db\", `Invalid Operation: you can not push to property \"${property}\" before saving the record to the database`);\n        }\n        const key = fbKey();\n        const currentState = this.get(property) || {};\n        const newState = Object.assign({}, currentState, { [key]: value });\n        // set state locally\n        this.set(property, newState);\n        // push updates to db\n        const write = this.db.multiPathSet(`${this.dbPath}/`);\n        write.add({ path: `lastUpdated`, value: new Date().getTime() });\n        write.add({ path: `${property}/${key}`, value });\n        try {\n            await write.execute();\n        }\n        catch (e) {\n            throw createError(\"multi-path/write-error\", \"\", e);\n        }\n        return key;\n    }\n    /**\n     * Updates a set of properties on a given model atomically (aka, all at once); will automatically\n     * include the \"lastUpdated\" property.\n     *\n     * @param props a hash of name value pairs which represent the props being updated and their new values\n     */\n    async updateProps(props) {\n        const updater = this.db.multiPathSet(this.dbPath);\n        Object.keys(props).map((key) => {\n            if (typeof props[key] === \"object\") {\n                const existingState = this.get(key);\n                props[key] = Object.assign({}, existingState, props[key]);\n            }\n            else {\n                if (key !== \"lastUpdated\") {\n                    updater.add({ path: key, value: props[key] });\n                }\n            }\n            this.set(key, props[key]);\n        });\n        const now = new Date().getTime();\n        updater.add({ path: \"lastUpdated\", value: now });\n        this._data.lastUpdated = now;\n        try {\n            await updater.execute();\n        }\n        catch (e) {\n            throw createError(\"UpdateProps\", `An error occurred trying to update ${this.modelName}:${this.id}`, e);\n        }\n    }\n    /**\n     * Adds another fk to a hasMany relationship\n     *\n     * @param property the property which is acting as a foreign key (array)\n     * @param ref reference to ID of related entity\n     * @param optionalValue the default behaviour is to add the value TRUE but you can optionally add some additional piece of information here instead.\n     */\n    async addHasMany(property, ref, optionalValue = true) {\n        if (this.META.property(property).relType !== \"hasMany\") {\n            const e = new Error(`The property \"${property}\" does NOT have a \"hasMany\" relationship on ${this.modelName}`);\n            e.name = \"InvalidRelationship\";\n            throw e;\n        }\n        if (typeof this.data[property] === \"object\" && this.data[property][ref]) {\n            console.warn(`The fk of \"${ref}\" already exists in \"${this.modelName}.${property}\"!`);\n            return;\n        }\n        await this.db\n            .multiPathSet(this.dbPath)\n            .add({ path: `${property}/${ref}/`, value: optionalValue })\n            .add({ path: \"lastUpdated\", value: new Date().getTime() })\n            .execute();\n    }\n    /**\n     * Changes the local state of a property on the record\n     *\n     * @param prop the property on the record to be changed\n     * @param value the new value to set to\n     */\n    async set(prop, value) {\n        // TODO: add interaction points for client-side state management; goal\n        // is to have local state changed immediately but with meta data to indicate\n        // that we're waiting for backend confirmation.\n        this._data[prop] = value;\n        await this.db\n            .multiPathSet(this.dbPath)\n            .add({ path: `${prop}/`, value })\n            .add({ path: \"lastUpdated/\", value: new Date().getTime() })\n            .execute();\n        return;\n    }\n    /**\n     * get a property value from the record\n     *\n     * @param prop the property being retrieved\n     */\n    get(prop) {\n        return this.data[prop];\n    }\n    toString() {\n        return `Record::${this.modelName}@${this.id || \"undefined\"}`;\n    }\n    toJSON() {\n        return {\n            dbPath: this.dbPath,\n            modelName: this.modelName,\n            pluralName: this.pluralName,\n            key: this.id,\n            localPath: this.localPath,\n            data: this.data.toString()\n        };\n    }\n    /**\n     * Load data from a record in database\n     */\n    async _getFromDB(id) {\n        if (!this.db) {\n            const e = new Error(`The attempt to load data into a Record requires that the DB property be initialized first!`);\n            e.name = \"NoDatabase\";\n            throw e;\n        }\n        this._data.id = id;\n        const data = await this.db.getRecord(this.dbPath);\n        if (data && data.id) {\n            this._initialize(data);\n        }\n        else {\n            throw new Error(`Unknown Key: the key \"${id}\" was not found in Firebase at \"${this.dbPath}\".`);\n        }\n        return this;\n    }\n    async _save() {\n        if (this.id) {\n            const e = new Error(`Saving after ID is set is not allowed [ ${this.id} ]`);\n            e.name = \"InvalidSave\";\n            throw e;\n        }\n        this.id = fbKey();\n        if (!this.db) {\n            const e = new Error(`Attempt to save Record failed as the Database has not been connected yet. Try settingFireModel first.`);\n            e.name = \"FiremodelError\";\n            throw e;\n        }\n        await this.db.set(this.dbPath, this.data);\n        return this;\n    }\n}\n//# sourceMappingURL=Record.js.map","import { Record } from \"./index\";\nimport { SerializedQuery } from \"serialized-query\";\nimport { FireModel } from \"./FireModel\";\nconst DEFAULT_IF_NOT_FOUND = \"__DO_NOT_USE__\";\nexport class List extends FireModel {\n    constructor(model, _data = []) {\n        super();\n        this._data = _data;\n        this._modelConstructor = model;\n        this._model = new model();\n    }\n    static set defaultDb(db) {\n        FireModel.defaultDb = db;\n    }\n    static get defaultDb() {\n        return FireModel.defaultDb;\n    }\n    static create(model, options = {}) {\n        return new List(model);\n    }\n    /**\n     * Creates a List<T> which is populated with the passed in query\n     *\n     * @param schema the schema type\n     * @param query the serialized query; note that this LIST will override the path of the query\n     * @param options model options\n     */\n    static async fromQuery(model, query, options = {}) {\n        const list = List.create(model, options);\n        query.setPath(list.dbPath);\n        await list.load(query);\n        return list;\n    }\n    /**\n     * Loads all the records of a given schema-type ordered by lastUpdated\n     *\n     * @param schema the schema type\n     * @param options model options\n     */\n    static async all(model, options = {}) {\n        const query = new SerializedQuery().orderByChild(\"lastUpdated\");\n        const list = await List.fromQuery(model, query, options);\n        return list;\n    }\n    /**\n     * Loads the first X records of the Schema type where\n     * ordering is provided by the \"createdAt\" property\n     *\n     * @param model the model type\n     * @param howMany the number of records to bring back\n     * @param options model options\n     */\n    static async first(model, howMany, options = {}) {\n        const query = new SerializedQuery().orderByChild(\"createdAt\").limitToLast(howMany);\n        const list = await List.fromQuery(model, query, options);\n        return list;\n    }\n    /**\n     * recent\n     *\n     * Get recent items of a given type/schema (based on lastUpdated)\n     *\n     * @param model the TYPE you are interested\n     * @param howMany the quantity to of records to bring back\n     * @param offset start at an offset position (useful for paging)\n     * @param options\n     */\n    static async recent(model, howMany, offset = 0, options = {}) {\n        const query = new SerializedQuery().orderByChild(\"lastUpdated\").limitToFirst(howMany);\n        const list = await List.fromQuery(model, query, options);\n        return list;\n    }\n    /**\n     * since\n     *\n     * Bring back all records that have changed since a given date\n     *\n     * @param schema the TYPE you are interested\n     * @param since  the datetime in miliseconds\n     * @param options\n     */\n    static async since(model, since, options = {}) {\n        if (typeof since !== \"number\") {\n            const e = new Error(`Invalid \"since\" parameter; value must be number instead got a(n) ${typeof since} [ ${since} ]`);\n            e.name = \"NotAllowed\";\n            throw e;\n        }\n        // const query = new SerializedQuery().orderByChild(\"lastUpdated\").startAt(since);\n        const query = new SerializedQuery().orderByChild(\"lastUpdated\").startAt(since);\n        const list = await List.fromQuery(model, query, options);\n        return list;\n    }\n    static async inactive(model, howMany, options = {}) {\n        const query = new SerializedQuery().orderByChild(\"lastUpdated\").limitToLast(howMany);\n        const list = await List.fromQuery(model, query, options);\n        return list;\n    }\n    static async last(model, howMany, options = {}) {\n        const query = new SerializedQuery().orderByChild(\"createdAt\").limitToFirst(howMany);\n        const list = await List.fromQuery(model, query, options);\n        return list;\n    }\n    static async where(model, property, value, options = {}) {\n        let operation = \"=\";\n        let val = value;\n        if (Array.isArray(value)) {\n            val = value[1];\n            operation = value[0];\n        }\n        const query = new SerializedQuery().orderByChild(property).where(operation, val);\n        const list = await List.fromQuery(model, query, options);\n        return list;\n    }\n    get length() {\n        return this._data.length;\n    }\n    get dbPath() {\n        return [this.META.dbOffset, this.pluralName].join(\"/\");\n    }\n    get localPath() {\n        return [this.META.localOffset, this.pluralName].join(\"/\");\n    }\n    get meta() {\n        return this._model.META;\n    }\n    /** Returns another List with data filtered down by passed in filter function */\n    filter(f) {\n        const list = List.create(this._modelConstructor);\n        list._data = this._data.filter(f);\n        return list;\n    }\n    /** Returns another List with data filtered down by passed in filter function */\n    find(f, defaultIfNotFound = DEFAULT_IF_NOT_FOUND) {\n        const filtered = this._data.filter(f);\n        const r = Record.create(this._modelConstructor);\n        if (filtered.length > 0) {\n            r._initialize(filtered[0]);\n            return r;\n        }\n        else {\n            if (defaultIfNotFound !== DEFAULT_IF_NOT_FOUND) {\n                return defaultIfNotFound;\n            }\n            else {\n                const e = new Error(`find(fn) did not find a value in the List [ length: ${this.data.length} ]`);\n                e.name = \"NotFound\";\n                throw e;\n            }\n        }\n    }\n    filterWhere(prop, value) {\n        const whereFilter = (item) => item[prop] === value;\n        return new List(this._modelConstructor, this._data.filter(whereFilter));\n    }\n    /**\n     * findWhere\n     *\n     * returns the first record in the list where the property equals the\n     * specified value. If no value is found then an error is thrown unless\n     * it is stated\n     */\n    findWhere(prop, value, defaultIfNotFound = DEFAULT_IF_NOT_FOUND) {\n        const list = this.filterWhere(prop, value);\n        if (list.length > 0) {\n            return Record.load(this._modelConstructor, list._data[0]);\n        }\n        else {\n            if (defaultIfNotFound !== DEFAULT_IF_NOT_FOUND) {\n                return defaultIfNotFound;\n            }\n            else {\n                const e = new Error(`findWhere(${prop}, ${value}) was not found in the List [ length: ${this.data.length} ]`);\n                e.name = \"NotFound\";\n                throw e;\n            }\n        }\n    }\n    /**\n     * provides a map over the data structured managed by the List; there will be no mutations to the\n     * data managed by the list\n     */\n    map(f) {\n        return this.data.map(f);\n    }\n    get data() {\n        return this._data;\n    }\n    /**\n     * Returns the specified record Record object\n     *\n     * @param id the unique ID which is being looked for\n     * @param defaultIfNotFound the default value returned if the ID is not found in the list\n     */\n    get(id, defaultIfNotFound = DEFAULT_IF_NOT_FOUND) {\n        const find = this.filter(f => f.id === id);\n        if (find.length === 0) {\n            if (defaultIfNotFound !== DEFAULT_IF_NOT_FOUND) {\n                return defaultIfNotFound;\n            }\n            const e = new Error(`Could not find \"${id}\" in list of ${this.pluralName}`);\n            e.name = \"NotFound\";\n            throw e;\n        }\n        const r = Record.create(this._modelConstructor);\n        r._initialize(find.data[0]);\n        return r;\n    }\n    /**\n     * Returns the single instance of an object contained by the List container\n     *\n     * @param id the unique ID which is being looked for\n     * @param defaultIfNotFound the default value returned if the ID is not found in the list\n     */\n    getData(id, defaultIfNotFound = \"__DO_NOT_USE__\") {\n        const record = this.get(id, defaultIfNotFound);\n        return record === defaultIfNotFound ? defaultIfNotFound : record.data;\n    }\n    async load(pathOrQuery) {\n        if (!this.db) {\n            const e = new Error(`The attempt to load data into a List requires that the DB property be initialized first!`);\n            e.name = \"NoDatabase\";\n            throw e;\n        }\n        this._data = await this.db.getList(pathOrQuery);\n        return this;\n    }\n}\n//# sourceMappingURL=list.js.map"],"names":["get","set","this","propertyMeta","desc","RelationshipPolicy","RelationshipCardinality","createError","fbKey","List","model","SerializedQuery","property"],"mappings":"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"}