{"version":3,"file":"firemodel.cjs.js","sources":["../src/decorators/decorator.ts","../src/decorators/property.ts","../src/FireModel.ts","../src/state-mgmt/index.ts","../src/Record.ts","../src/decorators/relationship.ts","../src/decorators/schema.ts","../src/Model.ts","../src/List.ts","../src/Mock.ts"],"sourcesContent":["import \"reflect-metadata\";\nimport { Model, IModelPropertyMeta, IModelRelationshipMeta } from \"..\";\nimport { IDictionary } from \"common-types\";\nimport { set, get } from \"lodash\";\n\nfunction push<T extends Model = Model>(\n  target: IDictionary,\n  path: string,\n  value: IModelPropertyMeta<T>\n) {\n  if (Array.isArray(get(target, path))) {\n    get(target, path).push(value);\n  } else {\n    set(target, path, [value]);\n  }\n}\n\n/** Properties accumlated by propertyDecorators  */\nconst propertiesByModel: IDictionary<IModelPropertyMeta[]> = {};\n/** Relationships accumlated by hasMany/ownedBy decorators */\nconst relationshipsByModel: IDictionary<IModelPropertyMeta[]> = {};\n\nexport const propertyDecorator = <T extends Model>(\n  nameValuePairs: IDictionary = {},\n  /**\n   * if you want to set the property being decorated's name\n   * as property on meta specify the meta properties name here\n   */\n  property?: string\n) => (target: Model, key: string): void => {\n  const reflect: IDictionary =\n    Reflect.getMetadata(\"design:type\", target, key) || {};\n  const meta: IModelPropertyMeta<T> = {\n    ...Reflect.getMetadata(key, target),\n    ...{ type: reflect.name },\n    ...nameValuePairs\n  };\n\n  Reflect.defineMetadata(key, meta, target);\n\n  if (nameValuePairs.isProperty) {\n    if (property) {\n      push(propertiesByModel, target.constructor.name, {\n        ...meta,\n        [property]: key\n      });\n    } else {\n      push(propertiesByModel, target.constructor.name, meta);\n    }\n  }\n  if (nameValuePairs.isRelationship) {\n    if (property) {\n      push(relationshipsByModel, target.constructor.name, {\n        ...meta,\n        [property]: key\n      });\n    } else {\n      push(relationshipsByModel, target.constructor.name, meta);\n    }\n  }\n};\n\n/** lookup meta data for schema properties */\nfunction propertyMeta<T extends Model = Model>(context: object) {\n  return (prop: string): IModelPropertyMeta<T> =>\n    Reflect.getMetadata(prop, context);\n}\n\n/**\n * Gets all the properties for a given model\n *\n * @param target the schema object which is being looked up\n */\nexport function getProperties(target: object) {\n  return [\n    ...propertiesByModel[target.constructor.name],\n    ...propertiesByModel.Model.map(s => ({\n      ...s,\n      ...{ isBaseSchema: true }\n    }))\n  ];\n}\n\n/**\n * Gets all the relationships for a given model\n */\nexport function getRelationships<T>(target: object) {\n  return relationshipsByModel[target.constructor.name] as Array<\n    IModelRelationshipMeta<T>\n  >;\n}\n\nexport function getPushKeys(target: object) {\n  const props = getProperties(target);\n  return props.filter(p => p.pushKey).map(p => p.property);\n}\n","import \"reflect-metadata\";\nimport { IDictionary, PropertyDecorator } from \"common-types\";\nimport { propertyDecorator } from \"./decorator\";\n\nexport function constrainedProperty(options: IDictionary = {}) {\n  return propertyDecorator(\n    {\n      ...options,\n      ...{ isRelationship: false, isProperty: true }\n    },\n    \"property\"\n  ) as PropertyDecorator;\n}\n\n/** allows the introduction of a new constraint to the metadata of a property */\nexport function constrain(prop: string, value: any) {\n  return propertyDecorator({ [prop]: value }) as PropertyDecorator;\n}\n\nexport function desc(value: string) {\n  return propertyDecorator({ desc: value }) as PropertyDecorator;\n}\n\nexport function min(value: number) {\n  return propertyDecorator({ min: value });\n}\n\nexport type MockFunction = (context: import(\"firemock\").MockHelper) => any;\n\nexport function mock(value: string | MockFunction) {\n  return propertyDecorator({ mockType: value });\n}\n\nexport function max(value: number) {\n  return propertyDecorator({ max: value });\n}\n\nexport function length(value: number) {\n  return propertyDecorator({ length: value });\n}\n\nexport const property = propertyDecorator(\n  {\n    isRelationship: false,\n    isProperty: true\n  },\n  \"property\"\n) as PropertyDecorator;\n\nexport const pushKey = propertyDecorator(\n  {\n    pushKey: true\n  },\n  \"property\"\n) as PropertyDecorator;\n","import { Model } from \"./Model\";\n// tslint:disable-next-line:no-implicit-dependencies\nimport { RealTimeDB } from \"abstracted-firebase\";\nimport { IModelMetaProperties } from \"./index\";\nimport { Record } from \"./Record\";\nimport { IDictionary } from \"common-types\";\nimport {\n  IFMRecordEvent,\n  FMEvents,\n  NotString,\n  Extractable,\n  IFMRelationshipEvent,\n  IFMEventName\n} from \"./state-mgmt\";\nimport { IReduxDispatch } from \"./VuexWrapper\";\n// tslint:disable-next-line:no-var-requires\nconst pluralize = require(\"pluralize\");\nconst defaultDispatch = (context: IDictionary) => \"\";\n\nexport class FireModel<T extends Model> {\n  //#region STATIC INTERFACE\n\n  public static isBeingWatched(path: string): boolean {\n    // TODO: implement this!\n    return false;\n  }\n  private static _defaultDb: import(\"abstracted-firebase\").RealTimeDB = null;\n  private static _dispatchActive: boolean = false;\n  /** the dispatch function used to interact with frontend frameworks */\n  private static _dispatch: IReduxDispatch = defaultDispatch;\n\n  public static get defaultDb() {\n    return FireModel._defaultDb;\n  }\n\n  public static set defaultDb(db: import(\"abstracted-firebase\").RealTimeDB) {\n    this._defaultDb = db;\n  }\n\n  public static set dispatch(fn: IReduxDispatch) {\n    if (!fn) {\n      FireModel._dispatchActive = false;\n      FireModel._dispatch = defaultDispatch;\n    } else {\n      FireModel._dispatchActive = true;\n      FireModel._dispatch = fn;\n    }\n  }\n\n  public static get dispatch() {\n    return FireModel._dispatch;\n  }\n\n  //#endregion\n\n  //#region OBJECT INTERFACE\n\n  /** the data structure/model that this class operates around */\n  protected _model: T;\n  protected _modelConstructor: new () => T;\n  protected _db: RealTimeDB;\n\n  //#endregion\n\n  //#region PUBLIC INTERFACE\n\n  public get modelName() {\n    return this._model.constructor.name.toLowerCase();\n  }\n\n  public get pluralName() {\n    // TODO: add back the exception processing\n    return pluralize(this.modelName);\n  }\n\n  public get dbPath() {\n    return \"dbPath was not overwritten!\";\n  }\n\n  public get localPath() {\n    return \"dbPath was not overwritten!\";\n  }\n\n  public get META(): IModelMetaProperties<T> {\n    return (this._model as Model).META;\n  }\n\n  public get properties() {\n    return (this._model as Model).META.properties;\n  }\n\n  public get relationships() {\n    return (this._model as Model).META.relationships;\n  }\n\n  public get dispatch() {\n    return FireModel.dispatch;\n  }\n\n  public get dispatchIsActive(): boolean {\n    return FireModel._dispatchActive;\n  }\n\n  /** the connected real-time database */\n  public get db() {\n    if (!this._db) {\n      this._db = FireModel.defaultDb;\n    }\n    if (!this._db) {\n      const e = new Error(\n        `Can't get DB as it has not been set yet for this instance and no default database exists [ ${\n          this.modelName\n        } ]!`\n      );\n      e.name = \"FireModel::NoDatabase\";\n      throw e;\n    }\n\n    return this._db;\n  }\n\n  public get pushKeys() {\n    return (this._model as Model).META.pushKeys;\n  }\n\n  //#endregion\n\n  //#region PROTECTED INTERFACE\n\n  /**\n   * Creates a Redux-styled event\n   */\n  protected _createRecordEvent<\n    K extends string & NotString<K> & Extractable<FMEvents, K>\n  >(record: Record<T>, type: K, pathsOrValue: IMultiPathUpdates[] | T) {\n    const payload: Partial<IFMRecordEvent<T>> = {\n      type,\n      model: record.modelName,\n      modelConstructor: record._modelConstructor,\n      dbPath: record.dbPath,\n      localPath: record.localPath,\n      key: record.id\n    };\n    if (Array.isArray(pathsOrValue)) {\n      payload.paths = pathsOrValue;\n    } else {\n      payload.value = pathsOrValue;\n    }\n\n    return payload as IFMRecordEvent<T>;\n  }\n\n  protected _createRelationshipEvent<K extends IFMEventName<K>>(\n    record: Record<T>,\n    type: K,\n    relProp: keyof T,\n    fk: string,\n    paths?: any[]\n  ) {\n    const fkConstruct = record.META.property(relProp).fkConstructor;\n    const hasInverse = record.META.property(relProp).inverse;\n    const fkRecord = Record.create(fkConstruct);\n    const payload: any = {\n      type,\n      model: record.modelName,\n      modelConstructor: record._modelConstructor,\n      dbPath: record.dbPath,\n      localPath: record.localPath,\n      key: record.id,\n      paths,\n      fk,\n      fkModelName: fkRecord.modelName,\n      fkHasInverse: hasInverse\n    };\n\n    return payload;\n  }\n\n  protected _getPaths(changes: IDictionary): IMultiPathUpdates[] {\n    return Object.keys(changes).reduce(\n      (prev: any[], current: Extract<keyof typeof changes, string>) => {\n        const path = current;\n        const value = changes[current];\n        return [].concat(prev, [{ path, value }]);\n      },\n      []\n    );\n  }\n\n  //#endregion\n}\n\nexport interface IMultiPathUpdates {\n  path: string;\n  value: any;\n}\n","import { SerializedQuery } from \"serialized-query\";\nimport { Model, FMModelConstructor } from \"../Model\";\nimport { ISchemaRelationshipType } from \"../decorators/schema\";\nimport { IMultiPathUpdates } from \"../FireModel\";\n//#region generalized structures\n\nexport type Extractable<T, U> = T extends U ? any : never;\nexport type NotString<T> = string extends T ? never : any;\nfunction promoteStringToFMEvents<\n  K extends string & NotString<K> & Extractable<FMEvents, K>\n>(k: K): Extract<FMEvents, K> {\n  return k;\n}\n\nexport type IFMEventName<T> = string & NotString<T> & Extractable<FMEvents, T>;\n\n/** Enumeration of all Firemodel Actions that will be fired */\nexport enum FMEvents {\n  /** A record has been added locally */\n  RECORD_ADDED_LOCALLY = \"@firemodel/RECORD_ADDED_LOCALLY\",\n  /** A record has been added to a given Model list being watched */\n  RECORD_ADDED = \"@firemodel/RECORD_ADDED\",\n  /** A record has been updated locally */\n  RECORD_CHANGED_LOCALLY = \"@firemodel/RECORD_CHANGED_LOCALLY\",\n  /** A record has been updated on Firebase */\n  RECORD_CHANGED = \"@firemodel/RECORD_CHANGED\",\n  /** for client originated events touching relationships (as external events would come back as an event per model) */\n  RECORD_MOVED = \"@firemodel/RECORD_MOVED\",\n  /** A record has been removed from a given Model list being watched */\n  RECORD_REMOVED_LOCALLY = \"@firemodel/RECORD_REMOVED_LOCALLY\",\n  /** A record has been removed from a given Model list being watched */\n  RECORD_REMOVED = \"@firemodel/RECORD_REMOVED\",\n\n  /** Watcher has established connection with Firebase */\n  WATCHER_STARTED = \"@firemodel/WATCHER_STARTED\",\n  /** Watcher has disconnected an event stream from Firebase */\n  WATCHER_STOPPED = \"@firemodel/WATCHER_STOPPED\",\n  /** Watcher has disconnected all event streams from Firebase */\n  WATCHER_STOPPED_ALL = \"@firemodel/WATCHER_STOPPED_ALL\",\n  /** A Record has removed a relationship from another */\n  RELATIONSHIP_REMOVED = \"@firemodel/RELATIONSHIP_REMOVED\",\n  RELATIONSHIP_ADDED = \"@firemodel/RELATIONSHIP_ADDED\",\n\n  APP_CONNECTED = \"@firemodel/APP_CONNECTED\",\n  APP_DISCONNECTED = \"@firemodel/APP_DISCONNECTED\"\n}\n\nexport interface IFMChangedPath {\n  /** a dot delimited property path to the location for local state */\n  localPath: string;\n  /** a dot delimited property path to the location in the database */\n  dbPath: string;\n  /** the value to set at this path */\n  value: any;\n}\n\nexport interface IFMRelationshipEvent<T extends Model = Model>\n  extends IFMRecordEventCore<T> {\n  fk: string;\n  fkModelName: string;\n  fkHasInverse: boolean;\n  fkConstructor?: FMModelConstructor<T>;\n  fkRelType?: ISchemaRelationshipType;\n  fkLocalPath?: string;\n}\n\nexport interface IFMRecordEventCore<T extends Model = Model> {\n  /** the unique identifier of the event type/kind */\n  type: string;\n  /** the name of the Model who's record has changed */\n  model: string;\n  /** the constructor for the Model of the record which has changed */\n  modelConstructor: FMModelConstructor<T>;\n  /** the path in Firebase where this Record should is stored */\n  dbPath: string;\n  /** the path in your local state management where this Record should go */\n  localPath: string;\n  /** an identifier of which active watcher which triggered to create this event, not populated in the case of a client triggered event */\n  watcherHash?: string;\n  /** the Record's \"id\" property */\n  key: string;\n  /** the key/ID the previous state; provided only on child_moved and child_changed */\n  prevKey?: string;\n}\n\nexport interface IFMRecordClientEvent<T extends Model = Model>\n  extends IFMRecordEventCore<T> {\n  /** paths that will be updated; this is only provided on client originated events */\n  paths?: IMultiPathUpdates[];\n}\n\nexport interface IFMRecordExternalEvent<T extends Model = Model>\n  extends IFMRecordEventCore<T> {\n  /** the value of the Record after the change */\n  value: T;\n}\n\nexport type IFMRecordEvent<T = Model> = IFMRecordClientEvent<T> &\n  IFMRecordExternalEvent<T>;\n\nexport interface IFMAction {\n  type: string;\n  payload: any;\n}\n\nexport interface IFMChildAction extends IFMAction {\n  key: string;\n  path: string;\n  model: string;\n  query: SerializedQuery | null;\n}\n\nexport interface IFMValueAction extends IFMAction {\n  model: string;\n  query: SerializedQuery | null;\n}\n//#endregion\n\n//#region specific events\n\n//#endregion\n","// tslint:disable-next-line:no-implicit-dependencies\nimport { RealTimeDB } from \"abstracted-firebase\";\nimport { Model } from \"./Model\";\nimport { createError, fk, IDictionary, pathJoin } from \"common-types\";\nimport { key as fbKey } from \"firebase-key\";\nimport { FireModel, IMultiPathUpdates } from \"./FireModel\";\nimport { IReduxDispatch } from \"./VuexWrapper\";\nimport { FMEvents, IFMEventName } from \"./state-mgmt/index\";\n\nexport interface IWriteOperation {\n  id: string;\n  type: \"set\" | \"pushKey\" | \"update\";\n  /** The database path being written to */\n  path: string;\n  /** The new value being written to database */\n  value: any;\n  /** called on positive confirmation received from server */\n  callback: (type: string, value: any) => void;\n}\n\nexport interface IRecordOptions {\n  db?: RealTimeDB;\n  logging?: any;\n  id?: string;\n  /** if you're working off of a mocking database, there are situations where adding a record silently (aka., not triggering any listener events) is desirable and should be allowed */\n  silent?: boolean;\n}\n\nexport class Record<T extends Model> extends FireModel<T> {\n  //#region STATIC INTERFACE\n  public static set defaultDb(db: RealTimeDB) {\n    FireModel.defaultDb = db;\n  }\n  public static get defaultDb() {\n    return FireModel.defaultDb;\n  }\n\n  public static set dispatch(fn: IReduxDispatch) {\n    FireModel.dispatch = fn;\n  }\n  /**\n   * create\n   *\n   * creates a new -- and empty -- Record object; often used in\n   * conjunction with the Record's initialize() method\n   */\n  public static create<T extends Model>(\n    model: new () => T,\n    options: IRecordOptions = {}\n  ) {\n    const r = new Record<T>(model, options);\n    if (options.silent && !r.db.isMockDb) {\n      const e = new Error(\n        `You can only add new records to the DB silently when using a Mock database!`\n      );\n      e.name = \"FireModel::Forbidden\";\n      throw e;\n    }\n\n    return r;\n  }\n\n  /**\n   * add\n   *\n   * Adds a new record to the database\n   *\n   * @param schema the schema of the record\n   * @param payload the data for the new record\n   * @param options\n   */\n  public static async add<T extends Model>(\n    model: new () => T,\n    payload: T,\n    options: IRecordOptions = {}\n  ) {\n    let r;\n    try {\n      r = Record.create(model, options);\n      r._initialize(payload);\n      await r._save();\n    } catch (e) {\n      const err = new Error(`Problem adding new Record: ${e.message}`);\n      err.name = e.name !== \"Error\" ? e.name : \"FireModel\";\n      throw e;\n    }\n\n    return r;\n  }\n\n  /**\n   * load\n   *\n   * static method to create a Record when you want to load the\n   * state of the record with something you already have.\n   *\n   * Intent should be that this record already exists in the\n   * database. If you want to add to the database then use add()\n   */\n  public static createWith<T extends Model>(\n    model: new () => T,\n    payload: T,\n    options: IRecordOptions = {}\n  ) {\n    const rec = Record.create(model, options);\n    rec._initialize(payload);\n\n    return rec;\n  }\n\n  public static async get<T extends Model>(\n    model: new () => T,\n    id: string,\n    options: IRecordOptions = {}\n  ) {\n    const record = Record.create(model, options);\n    await record._getFromDB(id);\n    return record;\n  }\n\n  public static async remove<T extends Model>(\n    model: new () => T,\n    id: string,\n    /** if there is a known current state of this model you can avoid a DB call to get it */\n    currentState?: Record<T>\n  ) {\n    // TODO: add lookup in local state to see if we can avoid DB call\n    const record = currentState ? currentState : await Record.get(model, id);\n    await record.remove();\n    return record;\n  }\n\n  //#endregion\n\n  //#region OBJECT DEFINITION\n  private _existsOnDB: boolean = false;\n  private _writeOperations: IWriteOperation[] = [];\n  private _data?: Partial<T>;\n\n  constructor(model: new () => T, options: IRecordOptions = {}) {\n    super();\n    if (!model) {\n      const e = new Error(\n        `You can not construct a Record instance without passing in a Model's constructor! `\n      );\n      e.name = \"FireModel::Forbidden\";\n      throw e;\n    }\n    this._modelConstructor = model;\n    this._model = new model();\n    this._data = new model();\n  }\n\n  public get data() {\n    return this._data as Readonly<T>;\n  }\n\n  public get isDirty() {\n    return this.META.isDirty ? true : false;\n  }\n\n  /**\n   * set the dirty flag of the model\n   */\n  public set isDirty(value: boolean) {\n    this._data.META = { isDirty: value };\n  }\n\n  /**\n   * returns the fully qualified name in the database to this record;\n   * this of course includes the record id so if that's not set yet calling\n   * this getter will result in an error\n   */\n  public get dbPath() {\n    if (!this.data.id) {\n      throw createError(\n        \"record/invalid-path\",\n        `Invalid Record Path: you can not ask for the dbPath before setting an \"id\" property.`\n      );\n    }\n    return [this.data.META.dbOffset, this.pluralName, this.data.id].join(\"/\");\n  }\n\n  /** The Record's primary key */\n  public get id() {\n    return this.data.id;\n  }\n\n  public set id(val: string) {\n    if (this.data.id) {\n      const e = new Error(\n        `You may not re-set the ID of a record [ ${this.data.id} → ${val} ].`\n      );\n      e.name = \"NotAllowed\";\n      throw e;\n    }\n\n    this._data.id = val;\n  }\n\n  /**\n   * returns the record's database offset without including the ID of the record;\n   * among other things this can be useful prior to establishing an ID for a record\n   */\n  public get dbOffset() {\n    return this.data.META.dbOffset;\n  }\n\n  /**\n   * returns the record's location in the frontend state management framework;\n   * depends on appropriate configuration of model to be accurate.\n   */\n  public get localPath() {\n    if (!this.data.id) {\n      throw new Error(\n        'Invalid Path: you can not ask for the dbPath before setting an \"id\" property.'\n      );\n    }\n    return [this.data.META.localOffset, this.pluralName, this.data.id].join(\n      \"/\"\n    );\n  }\n\n  /**\n   * Allows an empty Record to be initialized to a known state.\n   * This is not intended to allow for mass property manipulation other\n   * than at time of initialization\n   *\n   * @param data the initial state you want to start with\n   */\n  public _initialize(data: T) {\n    Object.keys(data).map(key => {\n      this._data[key as keyof T] = data[key as keyof T];\n    });\n    const relationships = this.META.relationships;\n\n    const ownedByRels = (relationships || [])\n      .filter(r => r.relType === \"ownedBy\")\n      .map(r => r.property);\n    const hasManyRels = (relationships || [])\n      .filter(r => r.relType === \"hasMany\")\n      .map(r => r.property);\n\n    // default hasMany to empty hash\n    hasManyRels.map((p: string) => {\n      if (!this._data[p as keyof T]) {\n        (this._data as any)[p] = {};\n      }\n    });\n\n    const now = new Date().getTime();\n    if (!this._data.lastUpdated) {\n      this._data.lastUpdated = now;\n    }\n    if (!this._data.createdAt) {\n      this._data.createdAt = now;\n    }\n  }\n\n  public get existsOnDB() {\n    return this.data && this.data.id ? true : false;\n  }\n\n  /**\n   * Pushes new values onto properties on the record\n   * which have been stated to be a \"pushKey\"\n   */\n  public async pushKey<K extends keyof T>(\n    property: K,\n    value: T[K][keyof T[K]]\n  ) {\n    if (this.META.pushKeys.indexOf(property as any) === -1) {\n      throw createError(\n        \"invalid-operation/not-pushkey\",\n        `Invalid Operation: you can not push to property \"${property}\" as it has not been declared a pushKey property in the schema`\n      );\n    }\n\n    if (!this.existsOnDB) {\n      throw createError(\n        \"invalid-operation/not-on-db\",\n        `Invalid Operation: you can not push to property \"${property}\" before saving the record to the database`\n      );\n    }\n    const key = fbKey();\n    const currentState = this.get(property) || {};\n    const newState = { ...(currentState as any), [key]: value };\n    // set state locally\n    this.set(property, newState);\n    // push updates to db\n    const write = this.db.multiPathSet(`${this.dbPath}/`);\n    write.add({ path: `lastUpdated`, value: new Date().getTime() });\n    write.add({ path: `${property}/${key}`, value });\n    try {\n      await write.execute();\n    } catch (e) {\n      throw createError(\"multi-path/write-error\", \"\", e);\n    }\n\n    return key;\n  }\n\n  /**\n   * Updates a set of properties on a given model atomically (aka, all at once); will automatically\n   * include the \"lastUpdated\" property. Does NOT allow relationships to be included,\n   * this should be done separately.\n   *\n   * @param props a hash of name value pairs which represent the props being updated and their new values\n   */\n  public async update(props: Partial<T>) {\n    // can not update relationship properties\n    if (\n      Object.keys(props).some((key: any) => {\n        const root = key.split(\".\")[0];\n        return this.META.property(root).isRelationship;\n      })\n    ) {\n      const relProps = Object.keys(props).filter(\n        (p: any) => this.META.property(p).isRelationship\n      );\n      const e = new Error(\n        `You called update on a hash which has relationships included in it. Please only use \"update\" for updating properties. The relationships you were attempting to update were: ${relProps.join(\n          \", \"\n        )}.`\n      );\n      e.name = \"FireModel::NotAllowed\";\n      throw e;\n    }\n\n    const lastUpdated = new Date().getTime();\n    const changed: any = {\n      ...(props as IDictionary),\n      lastUpdated\n    };\n    await this._updateProps(\n      FMEvents.RECORD_CHANGED_LOCALLY,\n      FMEvents.RECORD_CHANGED,\n      changed\n    );\n    if (this.META.audit) {\n      // TODO: implement for auditing\n    }\n\n    return;\n  }\n\n  /**\n   * remove\n   *\n   * Removes the active record from the database and dispatches the change to\n   * FE State Mgmt.\n   */\n  public async remove() {\n    this.isDirty = true;\n    this.dispatch(\n      this._createRecordEvent(this, FMEvents.RECORD_REMOVED_LOCALLY, [\n        { path: this.dbPath, value: null }\n      ])\n    );\n    await this.db.remove(this.dbPath);\n    if (this.META.audit) {\n      // TODO: implement for auditing\n    }\n    this.isDirty = false;\n    this.dispatch(\n      this._createRecordEvent(this, FMEvents.RECORD_REMOVED, this.data)\n    );\n  }\n\n  /**\n   * Changes the local state of a property on the record\n   *\n   * @param prop the property on the record to be changed\n   * @param value the new value to set to\n   */\n  public async set<K extends keyof T>(prop: K, value: T[K]) {\n    if (this.META.property(prop).isRelationship) {\n      const e = new Error(\n        `You can not \"set\" the property \"${prop}\" because it is configured as a relationship!`\n      );\n      e.name = \"FireModel::NotAllowed\";\n      throw e;\n    }\n    const lastUpdated = new Date().getTime();\n    const changed: any = {\n      [prop]: value,\n      lastUpdated\n    };\n    await this._updateProps(\n      FMEvents.RECORD_CHANGED_LOCALLY,\n      FMEvents.RECORD_CHANGED,\n      changed\n    );\n    if (this.META.audit) {\n      // TODO: implement for auditing\n    }\n\n    return;\n  }\n\n  /**\n   * Adds one or more fk's to a hasMany relationship\n   *\n   * @param property the property which is acting as a foreign key (array)\n   * @param refs FK reference (or array of FKs) that should be added to reln\n   * @param optionalValue the default behaviour is to add the value TRUE but you can optionally add some additional piece of information here instead.\n   */\n  public async addToRelationship(\n    property: Extract<keyof T, string>,\n    refs: Extract<fk, string> | Array<Extract<fk, string>>,\n    optionalValue: any = true\n  ) {\n    console.log(\"property: \", property);\n\n    if (this.META.property(property).relType !== \"hasMany\") {\n      const e = new Error(\n        `FireModel::addToRelationship() - can not use property \"${property}\" on ${\n          this.modelName\n        } with addToRelationship() because it is not a hasMany relationship [ relType: ${\n          this.META.property(property).relType\n        }, inverse: ${this.META.property(property).inverse} ]`\n      );\n      e.name = \"FireModel::WrongRelationshipType\";\n      throw e;\n    }\n\n    if (!Array.isArray(refs)) {\n      refs = [refs];\n    }\n    const now = new Date().getTime();\n    const mps = this.db.multiPathSet(\"/\");\n    const inverseProperty = this.META.property(property).inverseProperty;\n    const fkRecord = Record.create(this.META.property(property).fkConstructor);\n\n    refs.map(ref => {\n      const pathToThisFkReln = pathJoin(this.dbPath, property, ref);\n\n      mps.add({ path: pathToThisFkReln, value: optionalValue });\n      // INVERSE RELATIONSHIP\n      if (inverseProperty) {\n        console.log(\n          `The inverse FK is ${inverseProperty} on ${fkRecord.modelName}`\n        );\n        console.log(\n          `The inverse FK META is: `,\n          fkRecord.META.relationship(inverseProperty)\n        );\n        const pathToInverseFkReln = inverseProperty\n          ? pathJoin(fkRecord.dbOffset, ref, inverseProperty)\n          : null;\n        const fkInverseIsHasManyReln = inverseProperty\n          ? fkRecord.META.relationship(inverseProperty).relType === \"hasMany\"\n          : false;\n        mps.add({\n          path: fkInverseIsHasManyReln\n            ? pathJoin(pathToThisFkReln, this.id)\n            : pathToThisFkReln,\n          value: fkInverseIsHasManyReln ? true : this.id\n        });\n      }\n      if (\n        typeof this.data[property] === \"object\" &&\n        (this.data[property] as any)[ref]\n      ) {\n        console.warn(\n          `The fk of \"${ref}\" already exists in \"${\n            this.modelName\n          }.${property}\"!`\n        );\n        return;\n      }\n    });\n    mps.add({ path: pathJoin(this.dbPath, \"lastUpdated\"), value: now });\n\n    this.dispatch(\n      this._createRecordEvent(this, FMEvents.RECORD_ADDED_LOCALLY, mps.payload)\n    );\n    await mps.execute();\n    this.dispatch(\n      this._createRecordEvent(this, FMEvents.RECORD_ADDED, this.data)\n    );\n  }\n\n  /** indicates whether this record is already being watched locally */\n  public get isBeingWatched() {\n    return FireModel.isBeingWatched(this.dbPath);\n  }\n\n  /**\n   * get a property value from the record\n   *\n   * @param prop the property being retrieved\n   */\n  public get<K extends keyof T>(prop: K) {\n    return this.data[prop];\n  }\n\n  public toString() {\n    return `Record::${this.modelName}@${this.id || \"undefined\"}`;\n  }\n\n  public toJSON() {\n    return {\n      dbPath: this.dbPath,\n      modelName: this.modelName,\n      pluralName: this.pluralName,\n      key: this.id,\n      localPath: this.localPath,\n      data: this.data.toString()\n    };\n  }\n\n  protected async _updateProps<K extends IFMEventName<K>>(\n    actionTypeStart: K,\n    actionTypeEnd: K,\n    changed: Partial<T>\n  ) {\n    this.isDirty = true;\n    Object.keys(changed).map((prop: Extract<string, keyof T>) => {\n      this._data[prop] = changed[prop];\n    });\n    const paths = this._getPaths(changed);\n\n    this.dispatch(this._createRecordEvent(this, actionTypeStart, paths));\n\n    const mps = this.db.multiPathSet(this.dbPath);\n    paths.map(path => mps.add(path));\n    await mps.execute();\n    this.isDirty = false;\n    this._data.lastUpdated = new Date().getTime();\n\n    // if this path is being watched we should avoid\n    // sending a duplicative event\n    if (!this.isBeingWatched) {\n      this.dispatch(this._createRecordEvent(this, actionTypeEnd, this.data));\n    }\n  }\n\n  /**\n   * Load data from a record in database\n   */\n  private async _getFromDB(id: string) {\n    if (!this.db) {\n      const e = new Error(\n        `The attempt to load data into a Record requires that the DB property be initialized first!`\n      );\n      e.name = \"NoDatabase\";\n      throw e;\n    }\n\n    this._data.id = id;\n    const data = await this.db.getRecord<T>(this.dbPath);\n\n    if (data && data.id) {\n      this._initialize(data);\n    } else {\n      throw new Error(\n        `Unknown Key: the key \"${id}\" was not found in Firebase at \"${\n          this.dbPath\n        }\".`\n      );\n    }\n\n    return this;\n  }\n\n  private async _save() {\n    if (!this.id) {\n      this.id = fbKey();\n    }\n    const now = new Date().getTime();\n    if (!this.get(\"createdAt\")) {\n      this._data.createdAt = now;\n    }\n    this._data.lastUpdated = now;\n    if (!this.db) {\n      const e = new Error(\n        `Attempt to save Record failed as the Database has not been connected yet. Try settingFireModel first.`\n      );\n      e.name = \"FiremodelError\";\n      throw e;\n    }\n    const paths: IMultiPathUpdates[] = [{ path: \"/\", value: this._data }];\n    this.isDirty = true;\n    this.dispatch(\n      this._createRecordEvent(this, FMEvents.RECORD_ADDED_LOCALLY, paths)\n    );\n    const mps = this.db.multiPathSet(this.dbPath);\n    paths.map(path => mps.add(path));\n    await mps.execute();\n    this.isDirty = false;\n\n    if (!FireModel.isBeingWatched(this.dbPath)) {\n      // TODO: is there any reason we'd need to load from server like with update?\n      this.dispatch(\n        this._createRecordEvent(this, FMEvents.RECORD_ADDED, this.data)\n      );\n    }\n\n    return this;\n  }\n\n  //#endregion\n}\n","import \"reflect-metadata\";\nimport { propertyDecorator } from \"./decorator\";\nimport { Record } from \"../Record\";\n\nexport function hasMany(modelConstructor: new () => any) {\n  const rec = Record.create(modelConstructor);\n  const payload = {\n    isRelationship: true,\n    isProperty: false,\n    relType: \"hasMany\",\n    fkConstructor: modelConstructor,\n    fkModelName: rec ? rec.modelName : null\n  };\n\n  console.log(\n    `registering hasMany:`,\n    payload,\n    rec.META ? rec.META : \"self-reference: \"\n  );\n\n  return propertyDecorator(payload, \"property\") as PropertyDecorator;\n}\n\nexport function ownedBy(modelConstructor: new () => any) {\n  const rec = Record.create(modelConstructor);\n  const payload = {\n    isRelationship: true,\n    isProperty: false,\n    relType: \"ownedBy\",\n    fkConstructor: modelConstructor,\n    fkModelName: rec.modelName\n  };\n\n  console.log(`registering ownedBy: `, payload, rec.META);\n\n  return propertyDecorator(payload, \"property\") as PropertyDecorator;\n}\n\nexport function inverse(inverseProperty: string) {\n  return propertyDecorator({ inverseProperty });\n}\n","import \"reflect-metadata\";\nimport { IDictionary, ClassDecorator } from \"common-types\";\nimport { getRelationships, getProperties, getPushKeys } from \"./decorator\";\nimport { Model } from \"../Model\";\n/* tslint:disable:only-arrow-functions */\n\nexport type ISchemaRelationshipType = \"hasMany\" | \"ownedBy\";\n\nexport interface IModelMetaProperties<T extends Model = any> {\n  /** Optionally specify a root path to store this schema under */\n  dbOffset?: string;\n  /** Optionally specify a root path where the local store will put this schema */\n  localOffset?: string;\n  /** a function to lookup the meta properties of a given property */\n  property?: (prop: keyof T) => IModelPropertyMeta<T>;\n  /** a function to lookup the meta properties of a given relationship */\n  relationship?: (prop: keyof T) => IModelRelationshipMeta<T>;\n  audit?: boolean;\n  /** A list of all properties and associated meta-data for the given schema */\n  properties?: Array<IModelPropertyMeta<T>>;\n  /** A list of all relationships and associated meta-data for the given schema */\n  relationships?: Array<IModelRelationshipMeta<T>>;\n  /** A list of properties which should be pushed using firebase push() */\n  pushKeys?: string[];\n  /** indicates whether this property has been changed on client but not yet accepted by server */\n  isDirty?: boolean;\n}\n\nexport interface IModelRelationshipMeta<T extends Model = Model>\n  extends IModelPropertyMeta<T> {\n  isRelationship: true;\n  isProperty: false;\n  /** the general cardinality type of the relationship (aka, hasMany, ownedBy) */\n  relType: ISchemaRelationshipType;\n  /** The constructor for a model of the FK reference that this relationship maintains */\n  fkConstructor: new () => T;\n  fkModelName: string;\n}\nexport interface IModelPropertyMeta<T extends Model = Model>\n  extends IDictionary {\n  /** the property name */\n  property: Extract<keyof T, string>;\n  /** the type of the property */\n  type: string;\n  /** constraint: a maximum length */\n  length?: number;\n  /** constraint: a minimum value */\n  min?: number;\n  /** constraint: a maximum value */\n  max?: number;\n  /** the name -- if it exists -- of the property on the FK which points back to this record */\n  inverse?: string;\n  /** is this prop a FK relationship to another entity/entities */\n  isRelationship: boolean;\n  /** is this prop an attribute of the schema (versus being a relationship) */\n  isProperty?: boolean;\n  /** is this property an array which is added to using firebase pushkeys? */\n  pushKey?: boolean;\n  /** what kind of relationship does this foreign key contain */\n  relType?: ISchemaRelationshipType;\n  /** if the property is a relationship ... a constructor for the FK's Model */\n  fkConstructor?: new () => any;\n  fkModelName?: string;\n}\n\n/** lookup meta data for schema properties */\nfunction getModelProperty<T extends Model = Model>(modelKlass: object) {\n  return (prop: string): IModelPropertyMeta<T> =>\n    Reflect.getMetadata(prop, modelKlass);\n}\n\nfunction getModelRelationship<T extends Model = Model>(\n  relationships: Array<IModelRelationshipMeta<T>>\n) {\n  return (relnProp: string): IModelRelationshipMeta<T> =>\n    relationships.find(i => relnProp === i.property);\n}\n\nexport function model(options: IModelMetaProperties): ClassDecorator {\n  let isDirty: boolean = false;\n  return (target: any): void => {\n    const original = target;\n\n    // new constructor\n    const f: any = function(...args: any[]) {\n      const meta = options;\n      const obj = Reflect.construct(original, args);\n\n      Reflect.defineProperty(obj, \"META\", {\n        get(): IModelMetaProperties {\n          return {\n            ...options,\n            ...{ property: getModelProperty(obj) },\n            ...{ properties: getProperties(obj) },\n            ...{ relationship: getModelRelationship(getRelationships(obj)) },\n            ...{ relationships: getRelationships(obj) },\n            ...{ pushKeys: getPushKeys(obj) },\n            ...{ audit: options.audit ? options.audit : false },\n            ...{ isDirty }\n          };\n        },\n        set(prop: IDictionary) {\n          if (typeof prop === \"object\" && prop.isDirty !== undefined) {\n            isDirty = prop.isDirty;\n          } else {\n            throw new Error(\n              \"The META properties should only be set with the @model decorator at design time!\"\n            );\n          }\n        },\n        configurable: false,\n        enumerable: false\n      });\n      return obj;\n    };\n\n    // copy prototype so intanceof operator still works\n    f.prototype = original.prototype;\n\n    // return new constructor (will override original)\n    return f;\n  };\n}\n","// tslint:disable:no-unused-expression\nexport type NonProperties<T> = {\n  [P in keyof T]: T[P] extends () => any ? never : P\n}[keyof T];\nexport type Properties<T> = Pick<T, NonProperties<T>>;\nimport { IDictionary, epochWithMilliseconds, datetime } from \"common-types\";\nimport { property, mock } from \"./decorators/property\";\nimport { IModelMetaProperties } from \"./decorators/schema\";\n\nexport interface IModelOptions {\n  logger?: ILogger;\n  db?: import(\"abstracted-firebase\").RealTimeDB;\n}\nexport interface IMetaData {\n  attributes: IDictionary;\n  relationships: IDictionary<IRelationship>;\n}\n\nexport interface IAuditFilter {\n  /** audit entries since a given unix epoch timestamp */\n  since?: number;\n  /** the last X number of audit entries */\n  last?: number;\n}\n\nexport type IComparisonOperator = \"=\" | \">\" | \"<\";\nexport type IConditionAndValue = [\n  IComparisonOperator,\n  boolean | string | number\n];\nexport type FirebaseCrudOperations = \"push\" | \"set\" | \"update\" | \"remove\";\n\nexport interface IAuditRecord {\n  crud: FirebaseCrudOperations;\n  when: datetime;\n  schema: string;\n  key: string;\n  info: IDictionary;\n}\n\nexport interface ILogger {\n  log: (message: string) => void;\n  warn: (message: string) => void;\n  debug: (message: string) => void;\n  error: (message: string) => void;\n}\n\nexport interface IRelationship {\n  cardinality: string;\n  policy: RelationshipPolicy;\n}\nexport enum RelationshipPolicy {\n  keys = \"keys\",\n  lazy = \"lazy\",\n  inline = \"inline\"\n}\nexport enum RelationshipCardinality {\n  hasMany = \"hasMany\",\n  belongsTo = \"belongsTo\"\n}\n\nexport type FMModelConstructor<T> = new () => T;\n\nexport abstract class Model {\n  /** The primary-key for the record */\n  @property public id?: string;\n  /** The last time that a given record was updated */\n  @property\n  @mock(\"dateRecentMiliseconds\")\n  public lastUpdated?: epochWithMilliseconds;\n  /** The datetime at which this record was first created */\n  @property\n  @mock(\"datePastMiliseconds\")\n  public createdAt?: epochWithMilliseconds;\n  /** Metadata properties of the given schema */\n  public META?: IModelMetaProperties;\n}\n","import { Model, IModelOptions } from \"./Model\";\nimport { Record } from \"./Record\";\nimport { SerializedQuery, IComparisonOperator } from \"serialized-query\";\n\nimport { epochWithMilliseconds } from \"common-types\";\nimport { FireModel } from \"./FireModel\";\n// tslint:disable-next-line:no-implicit-dependencies\nimport { RealTimeDB } from \"abstracted-firebase\";\nimport { IReduxDispatch } from \"./VuexWrapper\";\n\nconst DEFAULT_IF_NOT_FOUND = \"__DO_NOT_USE__\";\n\nexport class List<T extends Model> extends FireModel<T> {\n  //#region STATIC Interfaces\n\n  public static set defaultDb(db: RealTimeDB) {\n    FireModel.defaultDb = db;\n  }\n  public static get defaultDb() {\n    return FireModel.defaultDb;\n  }\n\n  public static set dispatch(fn: IReduxDispatch) {\n    FireModel.dispatch = fn;\n  }\n\n  public static create<T extends Model>(\n    model: new () => T,\n    options: IModelOptions = {}\n  ) {\n    return new List<T>(model);\n  }\n\n  /**\n   * Creates a List<T> which is populated with the passed in query\n   *\n   * @param schema the schema type\n   * @param query the serialized query; note that this LIST will override the path of the query\n   * @param options model options\n   */\n  public static async fromQuery<T extends Model>(\n    model: new () => T,\n    query: SerializedQuery,\n    options: IModelOptions = {}\n  ): Promise<List<T>> {\n    const list = List.create(model, options);\n    query.setPath(list.dbPath);\n\n    await list.load(query);\n    return list;\n  }\n\n  /**\n   * Loads all the records of a given schema-type ordered by lastUpdated\n   *\n   * @param schema the schema type\n   * @param options model options\n   */\n  public static async all<T extends Model>(\n    model: new () => T,\n    options: IModelOptions = {}\n  ): Promise<List<T>> {\n    const query = new SerializedQuery().orderByChild(\"lastUpdated\");\n    const list = await List.fromQuery<T>(model, query, options);\n\n    return list;\n  }\n\n  /**\n   * Loads the first X records of the Schema type where\n   * ordering is provided by the \"createdAt\" property\n   *\n   * @param model the model type\n   * @param howMany the number of records to bring back\n   * @param options model options\n   */\n  public static async first<T extends Model>(\n    model: new () => T,\n    howMany: number,\n    options: IModelOptions = {}\n  ): Promise<List<T>> {\n    const query = new SerializedQuery()\n      .orderByChild(\"createdAt\")\n      .limitToLast(howMany);\n    const list = await List.fromQuery(model, query, options);\n\n    return list;\n  }\n\n  /**\n   * recent\n   *\n   * Get recent items of a given type/schema (based on lastUpdated)\n   *\n   * @param model the TYPE you are interested\n   * @param howMany the quantity to of records to bring back\n   * @param offset start at an offset position (useful for paging)\n   * @param options\n   */\n  public static async recent<T extends Model>(\n    model: new () => T,\n    howMany: number,\n    offset: number = 0,\n    options: IModelOptions = {}\n  ): Promise<List<T>> {\n    const query = new SerializedQuery()\n      .orderByChild(\"lastUpdated\")\n      .limitToFirst(howMany);\n    const list = await List.fromQuery(model, query, options);\n\n    return list;\n  }\n\n  /**\n   * since\n   *\n   * Bring back all records that have changed since a given date\n   *\n   * @param schema the TYPE you are interested\n   * @param since  the datetime in miliseconds\n   * @param options\n   */\n  public static async since<T extends Model>(\n    model: new () => T,\n    since: epochWithMilliseconds,\n    options: IModelOptions = {}\n  ): Promise<List<T>> {\n    if (typeof since !== \"number\") {\n      const e = new Error(\n        `Invalid \"since\" parameter; value must be number instead got a(n) ${typeof since} [ ${since} ]`\n      );\n      e.name = \"NotAllowed\";\n      throw e;\n    }\n\n    // const query = new SerializedQuery().orderByChild(\"lastUpdated\").startAt(since);\n    const query = new SerializedQuery<T>()\n      .orderByChild(\"lastUpdated\")\n      .startAt(since);\n    const list = await List.fromQuery(model, query, options);\n\n    return list;\n  }\n\n  public static async inactive<T extends Model>(\n    model: new () => T,\n    howMany: number,\n    options: IModelOptions = {}\n  ): Promise<List<T>> {\n    const query = new SerializedQuery()\n      .orderByChild(\"lastUpdated\")\n      .limitToLast(howMany);\n    const list = await List.fromQuery(model, query, options);\n\n    return list;\n  }\n\n  public static async last<T extends Model>(\n    model: new () => T,\n    howMany: number,\n    options: IModelOptions = {}\n  ): Promise<List<T>> {\n    const query = new SerializedQuery()\n      .orderByChild(\"createdAt\")\n      .limitToFirst(howMany);\n    const list = await List.fromQuery(model, query, options);\n\n    return list;\n  }\n\n  public static async where<T extends Model, K extends keyof T>(\n    model: new () => T,\n    property: K,\n    value: T[K] | [IComparisonOperator, T[K]],\n    options: IModelOptions = {}\n  ) {\n    let operation: IComparisonOperator = \"=\";\n    let val = value;\n    if (Array.isArray(value)) {\n      val = value[1];\n      operation = value[0];\n    }\n    const query = new SerializedQuery()\n      .orderByChild(property)\n      .where(operation, val);\n    const list = await List.fromQuery(model, query, options);\n\n    return list;\n  }\n\n  //#endregion\n\n  private _data: T[] = [];\n\n  constructor(model: new () => T, options: IModelOptions = {}) {\n    super();\n    this._modelConstructor = model;\n    this._model = new model();\n    if (options.db) {\n      this._db = options.db;\n      if (!FireModel.defaultDb) {\n        FireModel.defaultDb = options.db;\n      }\n    }\n  }\n\n  public get length(): number {\n    return this._data.length;\n  }\n\n  public get dbPath() {\n    return [this.META.dbOffset, this.pluralName].join(\"/\");\n  }\n\n  public get localPath() {\n    return [this.META.localOffset, this.pluralName].join(\"/\");\n  }\n\n  /** Returns another List with data filtered down by passed in filter function */\n  public filter(f: ListFilterFunction<T>) {\n    const list = List.create(this._modelConstructor);\n    list._data = this._data.filter(f);\n    return list;\n  }\n\n  /** Returns another List with data filtered down by passed in filter function */\n  public find(\n    f: ListFilterFunction<T>,\n    defaultIfNotFound = DEFAULT_IF_NOT_FOUND\n  ): Record<T> {\n    const filtered = this._data.filter(f);\n    const r = Record.create(this._modelConstructor);\n    if (filtered.length > 0) {\n      r._initialize(filtered[0]);\n      return r;\n    } else {\n      if (defaultIfNotFound !== DEFAULT_IF_NOT_FOUND) {\n        return defaultIfNotFound as any;\n      } else {\n        const e = new Error(\n          `find(fn) did not find a value in the List [ length: ${\n            this.data.length\n          } ]`\n        );\n        e.name = \"NotFound\";\n        throw e;\n      }\n    }\n  }\n\n  public filterWhere<K extends keyof T>(prop: K, value: T[K]): List<T> {\n    const whereFilter = (item: T) => item[prop] === value;\n    const list = new List(this._modelConstructor);\n    list._data = this.data.filter(whereFilter);\n    return list;\n  }\n\n  /**\n   * findWhere\n   *\n   * returns the first record in the list where the property equals the\n   * specified value. If no value is found then an error is thrown unless\n   * it is stated\n   */\n  public findWhere(\n    prop: keyof T,\n    value: T[typeof prop],\n    defaultIfNotFound = DEFAULT_IF_NOT_FOUND\n  ): Record<T> {\n    const list = this.filterWhere(prop, value);\n\n    if (list.length > 0) {\n      return Record.createWith(this._modelConstructor, list._data[0]);\n    } else {\n      if (defaultIfNotFound !== DEFAULT_IF_NOT_FOUND) {\n        return defaultIfNotFound as any;\n      } else {\n        const e = new Error(\n          `findWhere(${prop}, ${value}) was not found in the List [ length: ${\n            this.data.length\n          } ]`\n        );\n        e.name = \"NotFound\";\n        throw e;\n      }\n    }\n  }\n\n  /**\n   * provides a map over the data structured managed by the List; there will be no mutations to the\n   * data managed by the list\n   */\n  public map<K = any>(f: ListMapFunction<T, K>) {\n    return this.data.map(f);\n  }\n\n  public get data() {\n    return this._data;\n  }\n\n  /**\n   * Returns the Record object with the given ID, errors if not found (name: NotFound)\n   * unless call signature includes \"defaultIfNotFound\"\n   *\n   * @param id the unique ID which is being looked for\n   * @param defaultIfNotFound the default value returned if the ID is not found in the list\n   */\n  public findById(\n    id: string,\n    defaultIfNotFound: any = DEFAULT_IF_NOT_FOUND\n  ): Record<T> {\n    const find = this.filter(f => f.id === id);\n    if (find.length === 0) {\n      if (defaultIfNotFound !== DEFAULT_IF_NOT_FOUND) {\n        return defaultIfNotFound;\n      }\n      const e = new Error(\n        `Could not find \"${id}\" in list of ${this.pluralName}`\n      );\n      e.name = \"NotFound\";\n      throw e;\n    }\n\n    const r = Record.create(this._modelConstructor);\n    r._initialize(find.data[0]);\n    return r;\n  }\n\n  public async removeById(id: string, ignoreOnNotFound: boolean = false) {\n    const rec = this.findById(id, null);\n    if (!rec) {\n      if (!ignoreOnNotFound) {\n        const e = new Error(\n          `Could not remove \"${id}\" in list of ${\n            this.pluralName\n          } as the ID was not found!`\n        );\n        e.name = \"NotFound\";\n        throw e;\n      } else {\n        return;\n      }\n    }\n\n    const removed = await Record.remove(this._modelConstructor, id, rec);\n    this._data = this.filter(f => f.id !== id).data;\n  }\n\n  public async add(payload: T) {\n    const newRecord = await Record.add(this._modelConstructor, payload);\n    this._data.push(newRecord.data);\n    return newRecord;\n  }\n\n  /**\n   * Returns the single instance of an object contained by the List container\n   *\n   * @param id the unique ID which is being looked for\n   * @param defaultIfNotFound the default value returned if the ID is not found in the list\n   */\n  public getData(id: string, defaultIfNotFound: any = \"__DO_NOT_USE__\"): T {\n    const record = this.findById(id, defaultIfNotFound);\n\n    return record === defaultIfNotFound\n      ? defaultIfNotFound\n      : ((record as any).data as T);\n  }\n\n  public async load(pathOrQuery: string | SerializedQuery<T>) {\n    if (!this.db) {\n      const e = new Error(\n        `The attempt to load data into a List requires that the DB property be initialized first!`\n      );\n      e.name = \"NoDatabase\";\n      throw e;\n    }\n    this._data = await this.db.getList<T>(pathOrQuery);\n    return this;\n  }\n}\n\nexport type ListFilterFunction<T> = (fc: T) => boolean;\nexport type ListMapFunction<T, K = any> = (fc: T) => K;\n","import { Model } from \"./Model\";\nimport { IDictionary, pathJoin } from \"common-types\";\n// tslint:disable-next-line:no-implicit-dependencies\nimport { RealTimeDB } from \"abstracted-firebase\";\nimport { Record } from \"./Record\";\nimport { arrayToHash } from \"typed-conversions\";\nimport { IModelPropertyMeta } from \"./decorators/schema\";\nimport { fbKey } from \"./index\";\nimport { set } from \"lodash\";\nimport { MockHelper } from \"firemock\";\n\nexport type ICardinalityConfig<T> = {\n  [key in keyof T]: [number, number] | number | true\n};\n\nexport interface IMockConfig<T> {\n  relationshipBehavior: \"ignore\" | \"link\" | \"follow\";\n  cardinality?: IDictionary<number | [number, number] | true>;\n}\n\nfunction defaultCardinality<T>(r: Record<T>) {\n  return r.META.relationships.reduce(\n    (prev, curr) => {\n      prev = { ...prev, [curr.property]: true };\n    },\n    {} as any\n  );\n}\n\nfunction dbOffset<T extends Model>(record: Record<T>, payload: IDictionary<T>) {\n  const output = {};\n  const path = pathJoin(record.META.dbOffset || \"\", record.pluralName);\n\n  set(output, path.replace(/\\//g, \".\"), payload);\n  return output;\n}\n\nfunction fakeIt(helper: MockHelper, type: string) {\n  switch (type) {\n    case \"id\":\n      return fbKey();\n    case \"String\":\n      return helper.faker.lorem.words(5);\n    case \"Number\":\n      return Math.round(Math.random() * 100);\n    case \"Boolean\":\n      return Math.random() > 0.49 ? true : false;\n    case \"Object\":\n      return {};\n    case \"name\":\n      return helper.faker.name.firstName() + \" \" + helper.faker.name.lastName();\n    case \"firstName\":\n      return helper.faker.name.firstName();\n    case \"lastName\":\n      return helper.faker.name.lastName();\n    case \"company\":\n      return helper.faker.company.companyName();\n    case \"address\":\n      return (\n        helper.faker.address.secondaryAddress() +\n        \", \" +\n        helper.faker.address.city() +\n        \", \" +\n        helper.faker.address.stateAbbr() +\n        \"  \" +\n        helper.faker.address.zipCode()\n      );\n    case \"streetName\":\n      return helper.faker.address.streetName();\n    case \"streetAddress\":\n      return helper.faker.address.streetAddress();\n    case \"city\":\n      return helper.faker.address.city();\n    case \"state\":\n      return helper.faker.address.state();\n    case \"stateAbbr\":\n      return helper.faker.address.stateAbbr();\n    case \"country\":\n      return helper.faker.address.country();\n    case \"countryCode\":\n      return helper.faker.address.countryCode();\n    case \"latitude\":\n      return helper.faker.address.latitude();\n    case \"longitude\":\n      return helper.faker.address.longitude();\n    case \"gender\":\n      return helper.faker.helpers.shuffle([\"male\", \"female\", \"other\"]);\n    case \"date\":\n    case \"dateRecent\":\n      return helper.faker.date.recent();\n    case \"dateMiliseconds\":\n    case \"dateRecentMiliseconds\":\n      return helper.faker.date.recent().getTime();\n    case \"datePast\":\n      return helper.faker.date.past();\n    case \"datePastMiliseconds\":\n      return helper.faker.date.past().getTime();\n    case \"dateFuture\":\n      return helper.faker.date.future();\n    case \"dateFutureMiliseconds\":\n      return helper.faker.date.future().getTime();\n    case \"dateSoon\":\n      return helper.faker.date.soon();\n    case \"dateSoonMiliseconds\":\n      return helper.faker.date.soon().getTime();\n    case \"image\":\n    case \"avatar\":\n      return helper.faker.image.avatar();\n    case \"imageAnimal\":\n      return helper.faker.image.animals();\n    case \"imagePeople\":\n      return helper.faker.image.people();\n    case \"imageNature\":\n      return helper.faker.image.nature();\n    case \"imageTransport\":\n      return helper.faker.image.transport();\n    case \"phoneNumber\":\n      return helper.faker.phone.phoneNumber();\n    default:\n      return helper.faker.lorem.slug();\n  }\n}\n\nfunction mockValue<T extends Model>(\n  db: RealTimeDB,\n  propMeta: IModelPropertyMeta<T>\n) {\n  if (!db || !(db instanceof RealTimeDB)) {\n    const e = new Error(\n      `When trying to Mock the value of \"${\n        propMeta.property\n      }\" the database reference passed in not a valid instance of the RealTimeDB provided by either 'abstracted-client' or 'abstracted-server' [ ${typeof db} ].`\n    );\n    e.name = \"FireModel::NotReady\";\n    throw e;\n  }\n  const helper = db.mock.getMockHelper();\n  const { type, mockType } = propMeta;\n\n  if (mockType) {\n    return typeof mockType === \"function\"\n      ? mockType(helper)\n      : fakeIt(helper, mockType);\n  } else {\n    const namePatterns: IDictionary<string> = {\n      id: \"id\",\n      name: \"name\",\n      fullname: \"name\",\n      firstName: \"firstName\",\n      lastName: \"lastName\",\n      address: \"address\",\n      city: \"city\",\n      state: \"stateAbbr\",\n      country: \"countryCode\",\n      street: \"streetAddress\",\n      streetAddress: \"streetAddress\",\n      lat: \"latitude\",\n      latitude: \"latitude\",\n      lon: \"longitude\",\n      longitude: \"longitude\",\n      avatar: \"avatar\",\n      phone: \"phoneNumber\",\n      phoneNumber: \"phoneNumber\"\n    };\n    return fakeIt(\n      helper,\n      Object.keys(namePatterns).includes(propMeta.property)\n        ? namePatterns[propMeta.property]\n        : type\n    );\n  }\n}\n\nfunction properties<T extends Model>(\n  db: RealTimeDB,\n  config: IMockConfig<T>,\n  exceptions: IDictionary\n) {\n  return (instance: T): T => {\n    if (!instance.META) {\n      const e = new Error(\n        `The instance passed passed into properties does not have any META properties! [ ${typeof instance} ]`\n      );\n      e.name = \"FireModel::MockError\";\n      throw e;\n    }\n\n    const props = instance.META.properties;\n    props.map(prop => {\n      (instance as any)[prop.property] = mockValue<T>(db, prop);\n    });\n    return instance;\n  };\n}\n\nfunction NumberBetween(startEnd: [number, number]) {\n  return (\n    Math.floor(Math.random() * (startEnd[1] - startEnd[0] + 1)) + startEnd[0]\n  );\n}\n\nfunction addRelationships<T extends Model>(\n  db: RealTimeDB,\n  config: IMockConfig<T>,\n  exceptions: IDictionary\n) {\n  return (instance: T): T => {\n    const relns = instance.META.relationships;\n    if (!relns || config.relationshipBehavior === \"ignore\") {\n      return instance;\n    }\n    relns.map(rel => {\n      if (\n        !config.cardinality ||\n        Object.keys(config.cardinality).includes(rel.property)\n      ) {\n        if (rel.relType === \"ownedBy\") {\n          (instance as any)[rel.property] = fbKey();\n        } else {\n          const cardinality = config.cardinality\n            ? typeof config.cardinality[rel.property] === \"number\"\n              ? config.cardinality[rel.property]\n              : NumberBetween(config.cardinality[rel.property] as any)\n            : 2;\n\n          (instance as any)[rel.property] = [];\n          for (let i = 0; i < cardinality; i++) {\n            (instance as any)[rel.property].push(fbKey());\n          }\n        }\n      }\n    });\n    return instance;\n  };\n}\n\nfunction followRelationships<T extends Model>(\n  db: RealTimeDB,\n  config: IMockConfig<T>,\n  exceptions: IDictionary\n) {\n  return (instance: T): T => {\n    const relns = instance.META.relationships;\n    if (!relns || config.relationshipBehavior !== \"follow\") {\n      return instance;\n    }\n\n    instance = addRelationships(db, config, exceptions)(instance);\n\n    relns.map(rel => {\n      const fkConstructor = rel.fkConstructor;\n      let foreignModel = new fkConstructor();\n\n      const fks = getRelationshipIds<T>(instance, rel as any);\n      fks.map(fk => {\n        foreignModel = properties(db, { relationshipBehavior: \"link\" }, {})(\n          foreignModel\n        );\n        foreignModel.id = fk;\n        if (rel.inverse) {\n          const inverseType = foreignModel.META.property(rel.inverse).relType;\n          if (inverseType === \"hasMany\") {\n            // TODO: look at after implementing relationship mgmt\n          }\n        }\n\n        Record.add(fkConstructor, foreignModel);\n      });\n    });\n\n    return instance;\n  };\n}\n\nfunction getRelationshipIds<T>(\n  instance: T,\n  rel: IModelPropertyMeta<T>\n): string[] {\n  if (rel.relType === \"ownedBy\") {\n    return [instance[rel.property]] as any;\n  } else {\n    return instance[rel.property] as any;\n  }\n}\n\nexport function Mock<T extends Model>(\n  modelConstructor: new () => T,\n  db: RealTimeDB\n) {\n  const record: Record<T> = Record.create(modelConstructor);\n  const config: IMockConfig<T> = { relationshipBehavior: \"ignore\" };\n\n  const API = {\n    /**\n     * generate\n     *\n     * Populates the mock database with values for a given model passed in.\n     *\n     * @param count how many instances of the given Model do you want?\n     * @param exceptions do you want to fix a given set of properties to a static value?\n     */\n    generate(count: number, exceptions?: IDictionary) {\n      const props = properties<T>(db, config, exceptions);\n      const relns = addRelationships<T>(db, config, exceptions);\n      const follow = followRelationships<T>(db, config, exceptions);\n      const records: T[] = [];\n      for (let i = 0; i < count; i++) {\n        const model = new modelConstructor();\n        records.push(follow(relns(props(model))));\n      }\n\n      db.mock.updateDB(dbOffset(record, arrayToHash(records)));\n    },\n    /**\n     * createRelationshipLinks\n     *\n     * Creates FK links for all the relationships in the model you are generating.\n     *\n     * @param cardinality an optional param which allows you to have fine grained control over how many of each type of relationship should be added\n     */\n    createRelationshipLinks(\n      cardinality?: IDictionary<[number, number] | number | true>\n    ) {\n      config.relationshipBehavior = \"link\";\n      return API;\n    },\n    /**\n     * followRelationshipLinks\n     *\n     * Creates FK links for all the relationships in the model you are generating; also generates\n     * mocks for all the FK links.\n     *\n     * @param cardinality an optional param which allows you to have fine grained control over how many of each type of relationship should be added\n     */\n    followRelationshipLinks(\n      cardinality?: IDictionary<[number, number] | number | true>\n    ) {\n      // TODO: would like to move back to ICardinalityConfig<T> when I can figure out why Partial doesn't work\n      config.relationshipBehavior = \"follow\";\n      if (cardinality) {\n        config.cardinality = cardinality;\n      }\n      return API;\n    }\n  };\n  return API;\n}\n"],"names":["get","set","createError","fbKey","pathJoin","RelationshipPolicy","RelationshipCardinality","tslib_1.__decorate","SerializedQuery","RealTimeDB","model","arrayToHash"],"mappings":"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"}