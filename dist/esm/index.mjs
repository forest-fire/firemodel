let __defineProperty = Object.defineProperty;
let __hasOwnProperty = Object.prototype.hasOwnProperty;
let __getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
let __commonJS = (callback, module) => () => {
  if (!module) {
    module = {exports: {}};
    callback(module.exports, module);
  }
  return module.exports;
};
let __markAsModule = (target) => {
  return __defineProperty(target, "__esModule", {value: true});
};
let __export = (target, all) => {
  __markAsModule(target);
  for (let name2 in all)
    __defineProperty(target, name2, {get: all[name2], enumerable: true});
};
let __exportStar = (target, module) => {
  __markAsModule(target);
  for (let key2 in module)
    if (__hasOwnProperty.call(module, key2) && !__hasOwnProperty.call(target, key2) && key2 !== "default")
      __defineProperty(target, key2, {get: () => module[key2], enumerable: true});
  return target;
};
let __toModule = (module) => {
  if (module && module.__esModule)
    return module;
  return __exportStar(__defineProperty({}, "default", {value: module, enumerable: true}), module);
};
let __decorate = (decorators4, target, key2, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropertyDescriptor(target, key2) : target;
  for (var i = decorators4.length - 1, decorator2; i >= 0; i--)
    if (decorator2 = decorators4[i])
      result = (kind ? decorator2(target, key2, result) : decorator2(result)) || result;
  if (kind && result)
    __defineProperty(target, key2, result);
  return result;
};

// node_modules/isobject/index.js
var require_isobject = __commonJS((exports, module) => {
  "use strict";
  module.exports = function isObject(val) {
    return val != null && typeof val === "object" && Array.isArray(val) === false;
  };
});

// node_modules/get-value/index.js
var require_get_value = __commonJS((exports, module) => {
  const isObject = require_isobject();
  module.exports = function(target, path4, options) {
    if (!isObject(options)) {
      options = {default: options};
    }
    if (!isValidObject(target)) {
      return typeof options.default !== "undefined" ? options.default : target;
    }
    if (typeof path4 === "number") {
      path4 = String(path4);
    }
    const isArray2 = Array.isArray(path4);
    const isString = typeof path4 === "string";
    const splitChar = options.separator || ".";
    const joinChar = options.joinChar || (typeof splitChar === "string" ? splitChar : ".");
    if (!isString && !isArray2) {
      return target;
    }
    if (isString && path4 in target) {
      return isValid11(path4, target, options) ? target[path4] : options.default;
    }
    let segs = isArray2 ? path4 : split(path4, splitChar, options);
    let len = segs.length;
    let idx = 0;
    do {
      let prop = segs[idx];
      if (typeof prop === "number") {
        prop = String(prop);
      }
      while (prop && prop.slice(-1) === "\\") {
        prop = join2([prop.slice(0, -1), segs[++idx] || ""], joinChar, options);
      }
      if (prop in target) {
        if (!isValid11(prop, target, options)) {
          return options.default;
        }
        target = target[prop];
      } else {
        let hasProp = false;
        let n = idx + 1;
        while (n < len) {
          prop = join2([prop, segs[n++]], joinChar, options);
          if (hasProp = prop in target) {
            if (!isValid11(prop, target, options)) {
              return options.default;
            }
            target = target[prop];
            idx = n - 1;
            break;
          }
        }
        if (!hasProp) {
          return options.default;
        }
      }
    } while (++idx < len && isValidObject(target));
    if (idx === len) {
      return target;
    }
    return options.default;
  };
  function join2(segs, joinChar, options) {
    if (typeof options.join === "function") {
      return options.join(segs);
    }
    return segs[0] + joinChar + segs[1];
  }
  function split(path4, splitChar, options) {
    if (typeof options.split === "function") {
      return options.split(path4);
    }
    return path4.split(splitChar);
  }
  function isValid11(key2, target, options) {
    if (typeof options.isValid === "function") {
      return options.isValid(key2, target);
    }
    return true;
  }
  function isValidObject(val) {
    return isObject(val) || Array.isArray(val) || typeof val === "function";
  }
});

// node_modules/is-plain-object/index.js
var require_is_plain_object = __commonJS((exports, module) => {
  "use strict";
  var isObject = require_isobject();
  function isObjectObject(o) {
    return isObject(o) === true && Object.prototype.toString.call(o) === "[object Object]";
  }
  module.exports = function isPlainObject(o) {
    var ctor, prot;
    if (isObjectObject(o) === false)
      return false;
    ctor = o.constructor;
    if (typeof ctor !== "function")
      return false;
    prot = ctor.prototype;
    if (isObjectObject(prot) === false)
      return false;
    if (prot.hasOwnProperty("isPrototypeOf") === false) {
      return false;
    }
    return true;
  };
});

// node_modules/set-value/index.js
var require_set_value = __commonJS((exports, module) => {
  "use strict";
  const isPlain = require_is_plain_object();
  function set7(target, path4, value, options) {
    if (!isObject(target)) {
      return target;
    }
    let opts = options || {};
    const isArray2 = Array.isArray(path4);
    if (!isArray2 && typeof path4 !== "string") {
      return target;
    }
    let merge2 = opts.merge;
    if (merge2 && typeof merge2 !== "function") {
      merge2 = Object.assign;
    }
    const keys2 = (isArray2 ? path4 : split(path4, opts)).filter(isValidKey);
    const len = keys2.length;
    const orig = target;
    if (!options && keys2.length === 1) {
      result(target, keys2[0], value, merge2);
      return target;
    }
    for (let i = 0; i < len; i++) {
      let prop = keys2[i];
      if (!isObject(target[prop])) {
        target[prop] = {};
      }
      if (i === len - 1) {
        result(target, prop, value, merge2);
        break;
      }
      target = target[prop];
    }
    return orig;
  }
  function result(target, path4, value, merge2) {
    if (merge2 && isPlain(target[path4]) && isPlain(value)) {
      target[path4] = merge2({}, target[path4], value);
    } else {
      target[path4] = value;
    }
  }
  function split(path4, options) {
    const id = createKey(path4, options);
    if (set7.memo[id])
      return set7.memo[id];
    const char = options && options.separator ? options.separator : ".";
    let keys2 = [];
    let res = [];
    if (options && typeof options.split === "function") {
      keys2 = options.split(path4);
    } else {
      keys2 = path4.split(char);
    }
    for (let i = 0; i < keys2.length; i++) {
      let prop = keys2[i];
      while (prop && prop.slice(-1) === "\\" && keys2[i + 1] != null) {
        prop = prop.slice(0, -1) + char + keys2[++i];
      }
      res.push(prop);
    }
    set7.memo[id] = res;
    return res;
  }
  function createKey(pattern, options) {
    let id = pattern;
    if (typeof options === "undefined") {
      return id + "";
    }
    const keys2 = Object.keys(options);
    for (let i = 0; i < keys2.length; i++) {
      const key2 = keys2[i];
      id += ";" + key2 + "=" + String(options[key2]);
    }
    return id;
  }
  function isValidKey(key2) {
    return key2 !== "__proto__" && key2 !== "constructor" && key2 !== "prototype";
  }
  function isObject(val) {
    return val !== null && (typeof val === "object" || typeof val === "function");
  }
  set7.memo = {};
  module.exports = set7;
});

// node_modules/lodash.get/index.js
var require_lodash2 = __commonJS((exports, module) => {
  var FUNC_ERROR_TEXT = "Expected a function";
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var INFINITY = 1 / 0;
  var funcTag = "[object Function]";
  var genTag = "[object GeneratorFunction]";
  var symbolTag = "[object Symbol]";
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
  var reIsPlainProp = /^\w*$/;
  var reLeadingDot = /^\./;
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reEscapeChar = /\\(\\)?/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  function getValue(object, key2) {
    return object == null ? void 0 : object[key2];
  }
  function isHostObject(value) {
    var result = false;
    if (value != null && typeof value.toString != "function") {
      try {
        result = !!(value + "");
      } catch (e) {
      }
    }
    return result;
  }
  var arrayProto = Array.prototype;
  var funcProto = Function.prototype;
  var objectProto = Object.prototype;
  var coreJsData = root["__core-js_shared__"];
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
  var Symbol2 = root.Symbol;
  var splice = arrayProto.splice;
  var Map2 = getNative(root, "Map");
  var nativeCreate = getNative(Object, "create");
  var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
  var symbolToString = symbolProto ? symbolProto.toString : void 0;
  function Hash(entries) {
    var index15 = -1, length2 = entries ? entries.length : 0;
    this.clear();
    while (++index15 < length2) {
      var entry = entries[index15];
      this.set(entry[0], entry[1]);
    }
  }
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }
  function hashDelete(key2) {
    return this.has(key2) && delete this.__data__[key2];
  }
  function hashGet(key2) {
    var data2 = this.__data__;
    if (nativeCreate) {
      var result = data2[key2];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty.call(data2, key2) ? data2[key2] : void 0;
  }
  function hashHas(key2) {
    var data2 = this.__data__;
    return nativeCreate ? data2[key2] !== void 0 : hasOwnProperty.call(data2, key2);
  }
  function hashSet(key2, value) {
    var data2 = this.__data__;
    data2[key2] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
    return this;
  }
  Hash.prototype.clear = hashClear;
  Hash.prototype["delete"] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;
  function ListCache(entries) {
    var index15 = -1, length2 = entries ? entries.length : 0;
    this.clear();
    while (++index15 < length2) {
      var entry = entries[index15];
      this.set(entry[0], entry[1]);
    }
  }
  function listCacheClear() {
    this.__data__ = [];
  }
  function listCacheDelete(key2) {
    var data2 = this.__data__, index15 = assocIndexOf(data2, key2);
    if (index15 < 0) {
      return false;
    }
    var lastIndex = data2.length - 1;
    if (index15 == lastIndex) {
      data2.pop();
    } else {
      splice.call(data2, index15, 1);
    }
    return true;
  }
  function listCacheGet(key2) {
    var data2 = this.__data__, index15 = assocIndexOf(data2, key2);
    return index15 < 0 ? void 0 : data2[index15][1];
  }
  function listCacheHas(key2) {
    return assocIndexOf(this.__data__, key2) > -1;
  }
  function listCacheSet(key2, value) {
    var data2 = this.__data__, index15 = assocIndexOf(data2, key2);
    if (index15 < 0) {
      data2.push([key2, value]);
    } else {
      data2[index15][1] = value;
    }
    return this;
  }
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype["delete"] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  function MapCache(entries) {
    var index15 = -1, length2 = entries ? entries.length : 0;
    this.clear();
    while (++index15 < length2) {
      var entry = entries[index15];
      this.set(entry[0], entry[1]);
    }
  }
  function mapCacheClear() {
    this.__data__ = {
      hash: new Hash(),
      map: new (Map2 || ListCache)(),
      string: new Hash()
    };
  }
  function mapCacheDelete(key2) {
    return getMapData(this, key2)["delete"](key2);
  }
  function mapCacheGet(key2) {
    return getMapData(this, key2).get(key2);
  }
  function mapCacheHas(key2) {
    return getMapData(this, key2).has(key2);
  }
  function mapCacheSet(key2, value) {
    getMapData(this, key2).set(key2, value);
    return this;
  }
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype["delete"] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  function assocIndexOf(array, key2) {
    var length2 = array.length;
    while (length2--) {
      if (eq(array[length2][0], key2)) {
        return length2;
      }
    }
    return -1;
  }
  function baseGet(object, path4) {
    path4 = isKey(path4, object) ? [path4] : castPath(path4);
    var index15 = 0, length2 = path4.length;
    while (object != null && index15 < length2) {
      object = object[toKey(path4[index15++])];
    }
    return index15 && index15 == length2 ? object : void 0;
  }
  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }
  function baseToString(value) {
    if (typeof value == "string") {
      return value;
    }
    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : "";
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
  }
  function castPath(value) {
    return isArray2(value) ? value : stringToPath(value);
  }
  function getMapData(map, key2) {
    var data2 = map.__data__;
    return isKeyable(key2) ? data2[typeof key2 == "string" ? "string" : "hash"] : data2.map;
  }
  function getNative(object, key2) {
    var value = getValue(object, key2);
    return baseIsNative(value) ? value : void 0;
  }
  function isKey(value, object) {
    if (isArray2(value)) {
      return false;
    }
    var type = typeof value;
    if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }
  function isKeyable(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
  }
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  var stringToPath = memoize(function(string) {
    string = toString2(string);
    var result = [];
    if (reLeadingDot.test(string)) {
      result.push("");
    }
    string.replace(rePropName, function(match3, number, quote, string2) {
      result.push(quote ? string2.replace(reEscapeChar, "$1") : number || match3);
    });
    return result;
  });
  function toKey(value) {
    if (typeof value == "string" || isSymbol(value)) {
      return value;
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
  }
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {
      }
      try {
        return func + "";
      } catch (e) {
      }
    }
    return "";
  }
  function memoize(func, resolver) {
    if (typeof func != "function" || resolver && typeof resolver != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function() {
      var args = arguments, key2 = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
      if (cache.has(key2)) {
        return cache.get(key2);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key2, result);
      return result;
    };
    memoized.cache = new (memoize.Cache || MapCache)();
    return memoized;
  }
  memoize.Cache = MapCache;
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }
  var isArray2 = Array.isArray;
  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : "";
    return tag == funcTag || tag == genTag;
  }
  function isObject(value) {
    var type = typeof value;
    return !!value && (type == "object" || type == "function");
  }
  function isObjectLike(value) {
    return !!value && typeof value == "object";
  }
  function isSymbol(value) {
    return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
  }
  function toString2(value) {
    return value == null ? "" : baseToString(value);
  }
  function get8(object, path4, defaultValue2) {
    var result = object == null ? void 0 : baseGet(object, path4);
    return result === void 0 ? defaultValue2 : result;
  }
  module.exports = get8;
});

// node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS((exports, module) => {
  "use strict";
  module.exports = function equal2(a, b) {
    if (a === b)
      return true;
    if (a && b && typeof a == "object" && typeof b == "object") {
      if (a.constructor !== b.constructor)
        return false;
      var length2, i, keys2;
      if (Array.isArray(a)) {
        length2 = a.length;
        if (length2 != b.length)
          return false;
        for (i = length2; i-- !== 0; )
          if (!equal2(a[i], b[i]))
            return false;
        return true;
      }
      if (a.constructor === RegExp)
        return a.source === b.source && a.flags === b.flags;
      if (a.valueOf !== Object.prototype.valueOf)
        return a.valueOf() === b.valueOf();
      if (a.toString !== Object.prototype.toString)
        return a.toString() === b.toString();
      keys2 = Object.keys(a);
      length2 = keys2.length;
      if (length2 !== Object.keys(b).length)
        return false;
      for (i = length2; i-- !== 0; )
        if (!Object.prototype.hasOwnProperty.call(b, keys2[i]))
          return false;
      for (i = length2; i-- !== 0; ) {
        var key2 = keys2[i];
        if (!equal2(a[key2], b[key2]))
          return false;
      }
      return true;
    }
    return a !== a && b !== b;
  };
});

// node_modules/fast-copy/dist/fast-copy.js
var require_fast_copy = __commonJS((exports, module) => {
  (function(global2, factory) {
    typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global2 = global2 || self, global2["fast-copy"] = factory());
  })(exports, function() {
    "use strict";
    var toStringFunction = Function.prototype.toString;
    var create = Object.create, defineProperty2 = Object.defineProperty, getOwnPropertyDescriptor2 = Object.getOwnPropertyDescriptor, getOwnPropertyNames = Object.getOwnPropertyNames, getOwnPropertySymbols = Object.getOwnPropertySymbols, getPrototypeOf = Object.getPrototypeOf;
    var _a2 = Object.prototype, hasOwnProperty = _a2.hasOwnProperty, propertyIsEnumerable = _a2.propertyIsEnumerable;
    var SUPPORTS = {
      SYMBOL_PROPERTIES: typeof getOwnPropertySymbols === "function",
      WEAKMAP: typeof WeakMap === "function"
    };
    var createCache = function() {
      if (SUPPORTS.WEAKMAP) {
        return new WeakMap();
      }
      var object = create({
        has: function(key2) {
          return !!~object._keys.indexOf(key2);
        },
        set: function(key2, value) {
          object._keys.push(key2);
          object._values.push(value);
        },
        get: function(key2) {
          return object._values[object._keys.indexOf(key2)];
        }
      });
      object._keys = [];
      object._values = [];
      return object;
    };
    var getCleanClone = function(object, realm) {
      if (!object.constructor) {
        return create(null);
      }
      var Constructor = object.constructor;
      var prototype = object.__proto__ || getPrototypeOf(object);
      if (Constructor === realm.Object) {
        return prototype === realm.Object.prototype ? {} : create(prototype);
      }
      if (~toStringFunction.call(Constructor).indexOf("[native code]")) {
        try {
          return new Constructor();
        } catch (_a3) {
        }
      }
      return create(prototype);
    };
    var getObjectCloneLoose = function(object, realm, handleCopy, cache) {
      var clone = getCleanClone(object, realm);
      cache.set(object, clone);
      for (var key2 in object) {
        if (hasOwnProperty.call(object, key2)) {
          clone[key2] = handleCopy(object[key2], cache);
        }
      }
      if (SUPPORTS.SYMBOL_PROPERTIES) {
        var symbols = getOwnPropertySymbols(object);
        var length_1 = symbols.length;
        if (length_1) {
          for (var index15 = 0, symbol = void 0; index15 < length_1; index15++) {
            symbol = symbols[index15];
            if (propertyIsEnumerable.call(object, symbol)) {
              clone[symbol] = handleCopy(object[symbol], cache);
            }
          }
        }
      }
      return clone;
    };
    var getObjectCloneStrict = function(object, realm, handleCopy, cache) {
      var clone = getCleanClone(object, realm);
      cache.set(object, clone);
      var properties = SUPPORTS.SYMBOL_PROPERTIES ? getOwnPropertyNames(object).concat(getOwnPropertySymbols(object)) : getOwnPropertyNames(object);
      var length2 = properties.length;
      if (length2) {
        for (var index15 = 0, property2 = void 0, descriptor = void 0; index15 < length2; index15++) {
          property2 = properties[index15];
          if (property2 !== "callee" && property2 !== "caller") {
            descriptor = getOwnPropertyDescriptor2(object, property2);
            descriptor.value = handleCopy(object[property2], cache);
            defineProperty2(clone, property2, descriptor);
          }
        }
      }
      return clone;
    };
    var getRegExpFlags = function(regExp) {
      var flags = "";
      if (regExp.global) {
        flags += "g";
      }
      if (regExp.ignoreCase) {
        flags += "i";
      }
      if (regExp.multiline) {
        flags += "m";
      }
      if (regExp.unicode) {
        flags += "u";
      }
      if (regExp.sticky) {
        flags += "y";
      }
      return flags;
    };
    var isArray2 = Array.isArray;
    var GLOBAL_THIS = function() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      if (console && console.error) {
        console.error('Unable to locate global object, returning "this".');
      }
    }();
    function copy3(object, options) {
      var isStrict = !!(options && options.isStrict);
      var realm = options && options.realm || GLOBAL_THIS;
      var getObjectClone = isStrict ? getObjectCloneStrict : getObjectCloneLoose;
      var handleCopy = function(object2, cache) {
        if (!object2 || typeof object2 !== "object") {
          return object2;
        }
        if (cache.has(object2)) {
          return cache.get(object2);
        }
        var Constructor = object2.constructor;
        if (Constructor === realm.Object) {
          return getObjectClone(object2, realm, handleCopy, cache);
        }
        var clone;
        if (isArray2(object2)) {
          if (isStrict) {
            return getObjectCloneStrict(object2, realm, handleCopy, cache);
          }
          var length_1 = object2.length;
          clone = new Constructor();
          cache.set(object2, clone);
          for (var index15 = 0; index15 < length_1; index15++) {
            clone[index15] = handleCopy(object2[index15], cache);
          }
          return clone;
        }
        if (object2 instanceof realm.Date) {
          return new Constructor(object2.getTime());
        }
        if (object2 instanceof realm.RegExp) {
          clone = new Constructor(object2.source, object2.flags || getRegExpFlags(object2));
          clone.lastIndex = object2.lastIndex;
          return clone;
        }
        if (realm.Map && object2 instanceof realm.Map) {
          clone = new Constructor();
          cache.set(object2, clone);
          object2.forEach(function(value, key2) {
            clone.set(key2, handleCopy(value, cache));
          });
          return clone;
        }
        if (realm.Set && object2 instanceof realm.Set) {
          clone = new Constructor();
          cache.set(object2, clone);
          object2.forEach(function(value) {
            clone.add(handleCopy(value, cache));
          });
          return clone;
        }
        if (realm.Buffer && realm.Buffer.isBuffer(object2)) {
          clone = realm.Buffer.allocUnsafe ? realm.Buffer.allocUnsafe(object2.length) : new Constructor(object2.length);
          cache.set(object2, clone);
          object2.copy(clone);
          return clone;
        }
        if (realm.ArrayBuffer) {
          if (realm.ArrayBuffer.isView(object2)) {
            clone = new Constructor(object2.buffer.slice(0));
            cache.set(object2, clone);
            return clone;
          }
          if (object2 instanceof realm.ArrayBuffer) {
            clone = object2.slice(0);
            cache.set(object2, clone);
            return clone;
          }
        }
        if (typeof object2.then === "function" || object2 instanceof Error || realm.WeakMap && object2 instanceof realm.WeakMap || realm.WeakSet && object2 instanceof realm.WeakSet) {
          return object2;
        }
        return getObjectClone(object2, realm, handleCopy, cache);
      };
      return handleCopy(object, createCache());
    }
    copy3.strict = function strictCopy(object, options) {
      return copy3(object, {
        isStrict: true,
        realm: options ? options.realm : void 0
      });
    };
    return copy3;
  });
});

// node_modules/pluralize/pluralize.js
var require_pluralize = __commonJS((exports, module) => {
  (function(root, pluralize3) {
    if (typeof exports === "object" && typeof module === "object") {
      module.exports = pluralize3();
    } else if (typeof define === "function" && define.amd) {
      define(function() {
        return pluralize3();
      });
    } else {
      root.pluralize = pluralize3();
    }
  })(exports, function() {
    var pluralRules = [];
    var singularRules = [];
    var uncountables = {};
    var irregularPlurals = {};
    var irregularSingles = {};
    function sanitizeRule(rule) {
      if (typeof rule === "string") {
        return new RegExp("^" + rule + "$", "i");
      }
      return rule;
    }
    function restoreCase(word, token) {
      if (word === token)
        return token;
      if (word === word.toLowerCase())
        return token.toLowerCase();
      if (word === word.toUpperCase())
        return token.toUpperCase();
      if (word[0] === word[0].toUpperCase()) {
        return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();
      }
      return token.toLowerCase();
    }
    function interpolate(str, args) {
      return str.replace(/\$(\d{1,2})/g, function(match3, index15) {
        return args[index15] || "";
      });
    }
    function replace(word, rule) {
      return word.replace(rule[0], function(match3, index15) {
        var result = interpolate(rule[1], arguments);
        if (match3 === "") {
          return restoreCase(word[index15 - 1], result);
        }
        return restoreCase(match3, result);
      });
    }
    function sanitizeWord(token, word, rules) {
      if (!token.length || uncountables.hasOwnProperty(token)) {
        return word;
      }
      var len = rules.length;
      while (len--) {
        var rule = rules[len];
        if (rule[0].test(word))
          return replace(word, rule);
      }
      return word;
    }
    function replaceWord(replaceMap, keepMap, rules) {
      return function(word) {
        var token = word.toLowerCase();
        if (keepMap.hasOwnProperty(token)) {
          return restoreCase(word, token);
        }
        if (replaceMap.hasOwnProperty(token)) {
          return restoreCase(word, replaceMap[token]);
        }
        return sanitizeWord(token, word, rules);
      };
    }
    function checkWord(replaceMap, keepMap, rules, bool) {
      return function(word) {
        var token = word.toLowerCase();
        if (keepMap.hasOwnProperty(token))
          return true;
        if (replaceMap.hasOwnProperty(token))
          return false;
        return sanitizeWord(token, token, rules) === token;
      };
    }
    function pluralize3(word, count, inclusive) {
      var pluralized = count === 1 ? pluralize3.singular(word) : pluralize3.plural(word);
      return (inclusive ? count + " " : "") + pluralized;
    }
    pluralize3.plural = replaceWord(irregularSingles, irregularPlurals, pluralRules);
    pluralize3.isPlural = checkWord(irregularSingles, irregularPlurals, pluralRules);
    pluralize3.singular = replaceWord(irregularPlurals, irregularSingles, singularRules);
    pluralize3.isSingular = checkWord(irregularPlurals, irregularSingles, singularRules);
    pluralize3.addPluralRule = function(rule, replacement) {
      pluralRules.push([sanitizeRule(rule), replacement]);
    };
    pluralize3.addSingularRule = function(rule, replacement) {
      singularRules.push([sanitizeRule(rule), replacement]);
    };
    pluralize3.addUncountableRule = function(word) {
      if (typeof word === "string") {
        uncountables[word.toLowerCase()] = true;
        return;
      }
      pluralize3.addPluralRule(word, "$0");
      pluralize3.addSingularRule(word, "$0");
    };
    pluralize3.addIrregularRule = function(single, plural) {
      plural = plural.toLowerCase();
      single = single.toLowerCase();
      irregularSingles[single] = plural;
      irregularPlurals[plural] = single;
    };
    [
      ["I", "we"],
      ["me", "us"],
      ["he", "they"],
      ["she", "they"],
      ["them", "them"],
      ["myself", "ourselves"],
      ["yourself", "yourselves"],
      ["itself", "themselves"],
      ["herself", "themselves"],
      ["himself", "themselves"],
      ["themself", "themselves"],
      ["is", "are"],
      ["was", "were"],
      ["has", "have"],
      ["this", "these"],
      ["that", "those"],
      ["echo", "echoes"],
      ["dingo", "dingoes"],
      ["volcano", "volcanoes"],
      ["tornado", "tornadoes"],
      ["torpedo", "torpedoes"],
      ["genus", "genera"],
      ["viscus", "viscera"],
      ["stigma", "stigmata"],
      ["stoma", "stomata"],
      ["dogma", "dogmata"],
      ["lemma", "lemmata"],
      ["schema", "schemata"],
      ["anathema", "anathemata"],
      ["ox", "oxen"],
      ["axe", "axes"],
      ["die", "dice"],
      ["yes", "yeses"],
      ["foot", "feet"],
      ["eave", "eaves"],
      ["goose", "geese"],
      ["tooth", "teeth"],
      ["quiz", "quizzes"],
      ["human", "humans"],
      ["proof", "proofs"],
      ["carve", "carves"],
      ["valve", "valves"],
      ["looey", "looies"],
      ["thief", "thieves"],
      ["groove", "grooves"],
      ["pickaxe", "pickaxes"],
      ["passerby", "passersby"]
    ].forEach(function(rule) {
      return pluralize3.addIrregularRule(rule[0], rule[1]);
    });
    [
      [/s?$/i, "s"],
      [/[^\u0000-\u007F]$/i, "$0"],
      [/([^aeiou]ese)$/i, "$1"],
      [/(ax|test)is$/i, "$1es"],
      [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, "$1es"],
      [/(e[mn]u)s?$/i, "$1s"],
      [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, "$1"],
      [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, "$1i"],
      [/(alumn|alg|vertebr)(?:a|ae)$/i, "$1ae"],
      [/(seraph|cherub)(?:im)?$/i, "$1im"],
      [/(her|at|gr)o$/i, "$1oes"],
      [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, "$1a"],
      [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, "$1a"],
      [/sis$/i, "ses"],
      [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, "$1$2ves"],
      [/([^aeiouy]|qu)y$/i, "$1ies"],
      [/([^ch][ieo][ln])ey$/i, "$1ies"],
      [/(x|ch|ss|sh|zz)$/i, "$1es"],
      [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, "$1ices"],
      [/\b((?:tit)?m|l)(?:ice|ouse)$/i, "$1ice"],
      [/(pe)(?:rson|ople)$/i, "$1ople"],
      [/(child)(?:ren)?$/i, "$1ren"],
      [/eaux$/i, "$0"],
      [/m[ae]n$/i, "men"],
      ["thou", "you"]
    ].forEach(function(rule) {
      return pluralize3.addPluralRule(rule[0], rule[1]);
    });
    [
      [/s$/i, ""],
      [/(ss)$/i, "$1"],
      [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$/i, "$1fe"],
      [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, "$1f"],
      [/ies$/i, "y"],
      [/\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, "$1ie"],
      [/\b(mon|smil)ies$/i, "$1ey"],
      [/\b((?:tit)?m|l)ice$/i, "$1ouse"],
      [/(seraph|cherub)im$/i, "$1"],
      [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i, "$1"],
      [/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i, "$1sis"],
      [/(movie|twelve|abuse|e[mn]u)s$/i, "$1"],
      [/(test)(?:is|es)$/i, "$1is"],
      [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, "$1us"],
      [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, "$1um"],
      [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, "$1on"],
      [/(alumn|alg|vertebr)ae$/i, "$1a"],
      [/(cod|mur|sil|vert|ind)ices$/i, "$1ex"],
      [/(matr|append)ices$/i, "$1ix"],
      [/(pe)(rson|ople)$/i, "$1rson"],
      [/(child)ren$/i, "$1"],
      [/(eau)x?$/i, "$1"],
      [/men$/i, "man"]
    ].forEach(function(rule) {
      return pluralize3.addSingularRule(rule[0], rule[1]);
    });
    [
      "adulthood",
      "advice",
      "agenda",
      "aid",
      "aircraft",
      "alcohol",
      "ammo",
      "analytics",
      "anime",
      "athletics",
      "audio",
      "bison",
      "blood",
      "bream",
      "buffalo",
      "butter",
      "carp",
      "cash",
      "chassis",
      "chess",
      "clothing",
      "cod",
      "commerce",
      "cooperation",
      "corps",
      "debris",
      "diabetes",
      "digestion",
      "elk",
      "energy",
      "equipment",
      "excretion",
      "expertise",
      "firmware",
      "flounder",
      "fun",
      "gallows",
      "garbage",
      "graffiti",
      "hardware",
      "headquarters",
      "health",
      "herpes",
      "highjinks",
      "homework",
      "housework",
      "information",
      "jeans",
      "justice",
      "kudos",
      "labour",
      "literature",
      "machinery",
      "mackerel",
      "mail",
      "media",
      "mews",
      "moose",
      "music",
      "mud",
      "manga",
      "news",
      "only",
      "personnel",
      "pike",
      "plankton",
      "pliers",
      "police",
      "pollution",
      "premises",
      "rain",
      "research",
      "rice",
      "salmon",
      "scissors",
      "series",
      "sewage",
      "shambles",
      "shrimp",
      "software",
      "species",
      "staff",
      "swine",
      "tennis",
      "traffic",
      "transportation",
      "trout",
      "tuna",
      "wealth",
      "welfare",
      "whiting",
      "wildebeest",
      "wildlife",
      "you",
      /pok[eé]mon$/i,
      /[^aeiou]ese$/i,
      /deer$/i,
      /fish$/i,
      /measles$/i,
      /o[iu]s$/i,
      /pox$/i,
      /sheep$/i
    ].forEach(pluralize3.addUncountableRule);
    return pluralize3;
  });
});

// node_modules/firemock/dist/es/@types/auth-types.js
var require_auth_types = __commonJS(() => {
});

// node_modules/firemock/dist/es/@types/config-types.js
var require_config_types = __commonJS(() => {
});

// node_modules/firemock/dist/es/@types/rtdb-types.js
var require_rtdb_types = __commonJS(() => {
});

// node_modules/firemock/dist/es/@types/mocking-types.js
var require_mocking_types = __commonJS(() => {
});

// node_modules/firemock/dist/es/@types/index.js
var require_types = __commonJS((exports) => {
  __export(exports, {
    SortOrder: () => SortOrder
  });
  __exportStar(exports, __toModule(require_auth_types()));
  __exportStar(exports, __toModule(require_config_types()));
  __exportStar(exports, __toModule(require_rtdb_types()));
  __exportStar(exports, __toModule(require_mocking_types()));
});

// node_modules/lodash.first/index.js
var require_lodash = __commonJS((exports, module) => {
  function first4(array) {
    return array ? array[0] : void 0;
  }
  module.exports = first4;
});

// node_modules/lodash.last/index.js
var require_lodash3 = __commonJS((exports, module) => {
  function last2(array) {
    var length2 = array ? array.length : 0;
    return length2 ? array[length2 - 1] : void 0;
  }
  module.exports = last2;
});

// node_modules/lodash.set/index.js
var require_lodash4 = __commonJS((exports, module) => {
  var FUNC_ERROR_TEXT = "Expected a function";
  var HASH_UNDEFINED = "__lodash_hash_undefined__";
  var INFINITY = 1 / 0;
  var MAX_SAFE_INTEGER = 9007199254740991;
  var funcTag = "[object Function]";
  var genTag = "[object GeneratorFunction]";
  var symbolTag = "[object Symbol]";
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
  var reIsPlainProp = /^\w*$/;
  var reLeadingDot = /^\./;
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
  var reEscapeChar = /\\(\\)?/g;
  var reIsHostCtor = /^\[object .+?Constructor\]$/;
  var reIsUint = /^(?:0|[1-9]\d*)$/;
  var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
  var freeSelf = typeof self == "object" && self && self.Object === Object && self;
  var root = freeGlobal || freeSelf || Function("return this")();
  function getValue(object, key2) {
    return object == null ? void 0 : object[key2];
  }
  function isHostObject(value) {
    var result = false;
    if (value != null && typeof value.toString != "function") {
      try {
        result = !!(value + "");
      } catch (e) {
      }
    }
    return result;
  }
  var arrayProto = Array.prototype;
  var funcProto = Function.prototype;
  var objectProto = Object.prototype;
  var coreJsData = root["__core-js_shared__"];
  var maskSrcKey = function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
    return uid ? "Symbol(src)_1." + uid : "";
  }();
  var funcToString = funcProto.toString;
  var hasOwnProperty = objectProto.hasOwnProperty;
  var objectToString = objectProto.toString;
  var reIsNative = RegExp("^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");
  var Symbol2 = root.Symbol;
  var splice = arrayProto.splice;
  var Map2 = getNative(root, "Map");
  var nativeCreate = getNative(Object, "create");
  var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
  var symbolToString = symbolProto ? symbolProto.toString : void 0;
  function Hash(entries) {
    var index15 = -1, length2 = entries ? entries.length : 0;
    this.clear();
    while (++index15 < length2) {
      var entry = entries[index15];
      this.set(entry[0], entry[1]);
    }
  }
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
  }
  function hashDelete(key2) {
    return this.has(key2) && delete this.__data__[key2];
  }
  function hashGet(key2) {
    var data2 = this.__data__;
    if (nativeCreate) {
      var result = data2[key2];
      return result === HASH_UNDEFINED ? void 0 : result;
    }
    return hasOwnProperty.call(data2, key2) ? data2[key2] : void 0;
  }
  function hashHas(key2) {
    var data2 = this.__data__;
    return nativeCreate ? data2[key2] !== void 0 : hasOwnProperty.call(data2, key2);
  }
  function hashSet(key2, value) {
    var data2 = this.__data__;
    data2[key2] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
    return this;
  }
  Hash.prototype.clear = hashClear;
  Hash.prototype["delete"] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;
  function ListCache(entries) {
    var index15 = -1, length2 = entries ? entries.length : 0;
    this.clear();
    while (++index15 < length2) {
      var entry = entries[index15];
      this.set(entry[0], entry[1]);
    }
  }
  function listCacheClear() {
    this.__data__ = [];
  }
  function listCacheDelete(key2) {
    var data2 = this.__data__, index15 = assocIndexOf(data2, key2);
    if (index15 < 0) {
      return false;
    }
    var lastIndex = data2.length - 1;
    if (index15 == lastIndex) {
      data2.pop();
    } else {
      splice.call(data2, index15, 1);
    }
    return true;
  }
  function listCacheGet(key2) {
    var data2 = this.__data__, index15 = assocIndexOf(data2, key2);
    return index15 < 0 ? void 0 : data2[index15][1];
  }
  function listCacheHas(key2) {
    return assocIndexOf(this.__data__, key2) > -1;
  }
  function listCacheSet(key2, value) {
    var data2 = this.__data__, index15 = assocIndexOf(data2, key2);
    if (index15 < 0) {
      data2.push([key2, value]);
    } else {
      data2[index15][1] = value;
    }
    return this;
  }
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype["delete"] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;
  function MapCache(entries) {
    var index15 = -1, length2 = entries ? entries.length : 0;
    this.clear();
    while (++index15 < length2) {
      var entry = entries[index15];
      this.set(entry[0], entry[1]);
    }
  }
  function mapCacheClear() {
    this.__data__ = {
      hash: new Hash(),
      map: new (Map2 || ListCache)(),
      string: new Hash()
    };
  }
  function mapCacheDelete(key2) {
    return getMapData(this, key2)["delete"](key2);
  }
  function mapCacheGet(key2) {
    return getMapData(this, key2).get(key2);
  }
  function mapCacheHas(key2) {
    return getMapData(this, key2).has(key2);
  }
  function mapCacheSet(key2, value) {
    getMapData(this, key2).set(key2, value);
    return this;
  }
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype["delete"] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;
  function assignValue(object, key2, value) {
    var objValue = object[key2];
    if (!(hasOwnProperty.call(object, key2) && eq(objValue, value)) || value === void 0 && !(key2 in object)) {
      object[key2] = value;
    }
  }
  function assocIndexOf(array, key2) {
    var length2 = array.length;
    while (length2--) {
      if (eq(array[length2][0], key2)) {
        return length2;
      }
    }
    return -1;
  }
  function baseIsNative(value) {
    if (!isObject(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction(value) || isHostObject(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }
  function baseSet(object, path4, value, customizer) {
    if (!isObject(object)) {
      return object;
    }
    path4 = isKey(path4, object) ? [path4] : castPath(path4);
    var index15 = -1, length2 = path4.length, lastIndex = length2 - 1, nested = object;
    while (nested != null && ++index15 < length2) {
      var key2 = toKey(path4[index15]), newValue = value;
      if (index15 != lastIndex) {
        var objValue = nested[key2];
        newValue = customizer ? customizer(objValue, key2, nested) : void 0;
        if (newValue === void 0) {
          newValue = isObject(objValue) ? objValue : isIndex(path4[index15 + 1]) ? [] : {};
        }
      }
      assignValue(nested, key2, newValue);
      nested = nested[key2];
    }
    return object;
  }
  function baseToString(value) {
    if (typeof value == "string") {
      return value;
    }
    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : "";
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
  }
  function castPath(value) {
    return isArray2(value) ? value : stringToPath(value);
  }
  function getMapData(map, key2) {
    var data2 = map.__data__;
    return isKeyable(key2) ? data2[typeof key2 == "string" ? "string" : "hash"] : data2.map;
  }
  function getNative(object, key2) {
    var value = getValue(object, key2);
    return baseIsNative(value) ? value : void 0;
  }
  function isIndex(value, length2) {
    length2 = length2 == null ? MAX_SAFE_INTEGER : length2;
    return !!length2 && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length2);
  }
  function isKey(value, object) {
    if (isArray2(value)) {
      return false;
    }
    var type = typeof value;
    if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
  }
  function isKeyable(value) {
    var type = typeof value;
    return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
  }
  function isMasked(func) {
    return !!maskSrcKey && maskSrcKey in func;
  }
  var stringToPath = memoize(function(string) {
    string = toString2(string);
    var result = [];
    if (reLeadingDot.test(string)) {
      result.push("");
    }
    string.replace(rePropName, function(match3, number, quote, string2) {
      result.push(quote ? string2.replace(reEscapeChar, "$1") : number || match3);
    });
    return result;
  });
  function toKey(value) {
    if (typeof value == "string" || isSymbol(value)) {
      return value;
    }
    var result = value + "";
    return result == "0" && 1 / value == -INFINITY ? "-0" : result;
  }
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {
      }
      try {
        return func + "";
      } catch (e) {
      }
    }
    return "";
  }
  function memoize(func, resolver) {
    if (typeof func != "function" || resolver && typeof resolver != "function") {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function() {
      var args = arguments, key2 = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
      if (cache.has(key2)) {
        return cache.get(key2);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key2, result);
      return result;
    };
    memoized.cache = new (memoize.Cache || MapCache)();
    return memoized;
  }
  memoize.Cache = MapCache;
  function eq(value, other) {
    return value === other || value !== value && other !== other;
  }
  var isArray2 = Array.isArray;
  function isFunction(value) {
    var tag = isObject(value) ? objectToString.call(value) : "";
    return tag == funcTag || tag == genTag;
  }
  function isObject(value) {
    var type = typeof value;
    return !!value && (type == "object" || type == "function");
  }
  function isObjectLike(value) {
    return !!value && typeof value == "object";
  }
  function isSymbol(value) {
    return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
  }
  function toString2(value) {
    return value == null ? "" : baseToString(value);
  }
  function set7(object, path4, value) {
    return object == null ? object : baseSet(object, path4, value);
  }
  module.exports = set7;
});

// node_modules/fast-equals/dist/fast-equals.js
var require_fast_equals = __commonJS((exports, module) => {
  (function(global2, factory) {
    typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global2 = global2 || self, factory(global2["fast-equals"] = {}));
  })(exports, function(exports2) {
    "use strict";
    var HAS_WEAKSET_SUPPORT = typeof WeakSet === "function";
    var keys2 = Object.keys;
    function addToCache(value, cache) {
      if (value && typeof value === "object") {
        cache.add(value);
      }
    }
    function hasPair(pairs, pairToMatch, isEqual3, meta2) {
      var length2 = pairs.length;
      var pair;
      for (var index15 = 0; index15 < length2; index15++) {
        pair = pairs[index15];
        if (isEqual3(pair[0], pairToMatch[0], meta2) && isEqual3(pair[1], pairToMatch[1], meta2)) {
          return true;
        }
      }
      return false;
    }
    function hasValue(values, valueToMatch, isEqual3, meta2) {
      var length2 = values.length;
      for (var index15 = 0; index15 < length2; index15++) {
        if (isEqual3(values[index15], valueToMatch, meta2)) {
          return true;
        }
      }
      return false;
    }
    function sameValueZeroEqual(a, b) {
      return a === b || a !== a && b !== b;
    }
    function isPlainObject(value) {
      return value.constructor === Object || value.constructor == null;
    }
    function isPromiseLike(value) {
      return !!value && typeof value.then === "function";
    }
    function isReactElement(value) {
      return !!(value && value.$$typeof);
    }
    function getNewCacheFallback() {
      return Object.create({
        _values: [],
        add: function(value) {
          this._values.push(value);
        },
        has: function(value) {
          return this._values.indexOf(value) !== -1;
        }
      });
    }
    var getNewCache = function(canUseWeakMap) {
      if (canUseWeakMap) {
        return function _getNewCache() {
          return new WeakSet();
        };
      }
      return getNewCacheFallback;
    }(HAS_WEAKSET_SUPPORT);
    function createCircularEqualCreator(isEqual3) {
      return function createCircularEqual(comparator) {
        var _comparator = isEqual3 || comparator;
        return function circularEqual(a, b, cache) {
          if (cache === void 0) {
            cache = getNewCache();
          }
          var hasA = cache.has(a);
          var hasB = cache.has(b);
          if (hasA || hasB) {
            return hasA && hasB;
          }
          addToCache(a, cache);
          addToCache(b, cache);
          return _comparator(a, b, cache);
        };
      };
    }
    function toPairs(map) {
      var pairs = new Array(map.size);
      var index15 = 0;
      map.forEach(function(value, key2) {
        pairs[index15++] = [key2, value];
      });
      return pairs;
    }
    function toValues(set7) {
      var values = new Array(set7.size);
      var index15 = 0;
      set7.forEach(function(value) {
        values[index15++] = value;
      });
      return values;
    }
    function areArraysEqual(a, b, isEqual3, meta2) {
      var length2 = a.length;
      if (b.length !== length2) {
        return false;
      }
      for (var index15 = 0; index15 < length2; index15++) {
        if (!isEqual3(a[index15], b[index15], meta2)) {
          return false;
        }
      }
      return true;
    }
    function areMapsEqual(a, b, isEqual3, meta2) {
      if (a.size !== b.size) {
        return false;
      }
      var pairsA = toPairs(a);
      var pairsB = toPairs(b);
      var length2 = pairsA.length;
      for (var index15 = 0; index15 < length2; index15++) {
        if (!hasPair(pairsB, pairsA[index15], isEqual3, meta2) || !hasPair(pairsA, pairsB[index15], isEqual3, meta2)) {
          return false;
        }
      }
      return true;
    }
    var OWNER = "_owner";
    var hasOwnProperty = Function.prototype.bind.call(Function.prototype.call, Object.prototype.hasOwnProperty);
    function areObjectsEqual(a, b, isEqual3, meta2) {
      var keysA = keys2(a);
      var length2 = keysA.length;
      if (keys2(b).length !== length2) {
        return false;
      }
      var key2;
      for (var index15 = 0; index15 < length2; index15++) {
        key2 = keysA[index15];
        if (!hasOwnProperty(b, key2)) {
          return false;
        }
        if (key2 === OWNER && isReactElement(a)) {
          if (!isReactElement(b)) {
            return false;
          }
        } else if (!isEqual3(a[key2], b[key2], meta2)) {
          return false;
        }
      }
      return true;
    }
    function areRegExpsEqual(a, b) {
      return a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.unicode === b.unicode && a.sticky === b.sticky && a.lastIndex === b.lastIndex;
    }
    function areSetsEqual(a, b, isEqual3, meta2) {
      if (a.size !== b.size) {
        return false;
      }
      var valuesA = toValues(a);
      var valuesB = toValues(b);
      var length2 = valuesA.length;
      for (var index15 = 0; index15 < length2; index15++) {
        if (!hasValue(valuesB, valuesA[index15], isEqual3, meta2) || !hasValue(valuesA, valuesB[index15], isEqual3, meta2)) {
          return false;
        }
      }
      return true;
    }
    var isArray2 = Array.isArray;
    var HAS_MAP_SUPPORT = typeof Map === "function";
    var HAS_SET_SUPPORT = typeof Set === "function";
    var OBJECT_TYPEOF = "object";
    function createComparator(createIsEqual) {
      var isEqual3 = typeof createIsEqual === "function" ? createIsEqual(comparator) : comparator;
      function comparator(a, b, meta2) {
        if (sameValueZeroEqual(a, b)) {
          return true;
        }
        if (a && b && typeof a === OBJECT_TYPEOF && typeof b === OBJECT_TYPEOF) {
          if (isPlainObject(a) && isPlainObject(b)) {
            return areObjectsEqual(a, b, isEqual3, meta2);
          }
          var arrayA = isArray2(a);
          var arrayB = isArray2(b);
          if (arrayA || arrayB) {
            return arrayA === arrayB && areArraysEqual(a, b, isEqual3, meta2);
          }
          var aDate = a instanceof Date;
          var bDate = b instanceof Date;
          if (aDate || bDate) {
            return aDate === bDate && sameValueZeroEqual(a.getTime(), b.getTime());
          }
          var aRegExp = a instanceof RegExp;
          var bRegExp = b instanceof RegExp;
          if (aRegExp || bRegExp) {
            return aRegExp === bRegExp && areRegExpsEqual(a, b);
          }
          if (isPromiseLike(a) || isPromiseLike(b)) {
            return a === b;
          }
          if (HAS_MAP_SUPPORT) {
            var aMap = a instanceof Map;
            var bMap = b instanceof Map;
            if (aMap || bMap) {
              return aMap === bMap && areMapsEqual(a, b, isEqual3, meta2);
            }
          }
          if (HAS_SET_SUPPORT) {
            var aSet = a instanceof Set;
            var bSet = b instanceof Set;
            if (aSet || bSet) {
              return aSet === bSet && areSetsEqual(a, b, isEqual3, meta2);
            }
          }
          return areObjectsEqual(a, b, isEqual3, meta2);
        }
        return false;
      }
      return comparator;
    }
    var deepEqual2 = createComparator();
    var shallowEqual = createComparator(function() {
      return sameValueZeroEqual;
    });
    var circularDeepEqual = createComparator(createCircularEqualCreator());
    var circularShallowEqual = createComparator(createCircularEqualCreator(sameValueZeroEqual));
    exports2.circularDeepEqual = circularDeepEqual;
    exports2.circularShallowEqual = circularShallowEqual;
    exports2.createCustomEqual = createComparator;
    exports2.deepEqual = deepEqual2;
    exports2.sameValueZeroEqual = sameValueZeroEqual;
    exports2.shallowEqual = shallowEqual;
    Object.defineProperty(exports2, "__esModule", {value: true});
  });
});

// node_modules/firemock/node_modules/fast-copy/dist/fast-copy.js
var require_fast_copy2 = __commonJS((exports, module) => {
  (function(global2, factory) {
    typeof exports === "object" && typeof module !== "undefined" ? module.exports = factory() : typeof define === "function" && define.amd ? define(factory) : (global2 = global2 || self, global2["fast-copy"] = factory());
  })(exports, function() {
    "use strict";
    var toStringFunction = Function.prototype.toString;
    var create = Object.create, defineProperty2 = Object.defineProperty, getOwnPropertyDescriptor2 = Object.getOwnPropertyDescriptor, getOwnPropertyNames = Object.getOwnPropertyNames, getOwnPropertySymbols = Object.getOwnPropertySymbols, getPrototypeOf = Object.getPrototypeOf;
    var _a2 = Object.prototype, hasOwnProperty = _a2.hasOwnProperty, propertyIsEnumerable = _a2.propertyIsEnumerable;
    var SUPPORTS = {
      SYMBOL_PROPERTIES: typeof getOwnPropertySymbols === "function",
      WEAKMAP: typeof WeakMap === "function"
    };
    var createCache = function() {
      if (SUPPORTS.WEAKMAP) {
        return new WeakMap();
      }
      var object = create({
        has: function(key2) {
          return !!~object._keys.indexOf(key2);
        },
        set: function(key2, value) {
          object._keys.push(key2);
          object._values.push(value);
        },
        get: function(key2) {
          return object._values[object._keys.indexOf(key2)];
        }
      });
      object._keys = [];
      object._values = [];
      return object;
    };
    var getCleanClone = function(object, realm) {
      if (!object.constructor) {
        return create(null);
      }
      var Constructor = object.constructor;
      var prototype = object.__proto__ || getPrototypeOf(object);
      if (Constructor === realm.Object) {
        return prototype === realm.Object.prototype ? {} : create(prototype);
      }
      if (~toStringFunction.call(Constructor).indexOf("[native code]")) {
        try {
          return new Constructor();
        } catch (_a3) {
        }
      }
      return create(prototype);
    };
    var getObjectCloneLoose = function(object, realm, handleCopy, cache) {
      var clone = getCleanClone(object, realm);
      cache.set(object, clone);
      for (var key2 in object) {
        if (hasOwnProperty.call(object, key2)) {
          clone[key2] = handleCopy(object[key2], cache);
        }
      }
      if (SUPPORTS.SYMBOL_PROPERTIES) {
        var symbols = getOwnPropertySymbols(object);
        var length_1 = symbols.length;
        if (length_1) {
          for (var index15 = 0, symbol = void 0; index15 < length_1; index15++) {
            symbol = symbols[index15];
            if (propertyIsEnumerable.call(object, symbol)) {
              clone[symbol] = handleCopy(object[symbol], cache);
            }
          }
        }
      }
      return clone;
    };
    var getObjectCloneStrict = function(object, realm, handleCopy, cache) {
      var clone = getCleanClone(object, realm);
      cache.set(object, clone);
      var properties = SUPPORTS.SYMBOL_PROPERTIES ? getOwnPropertyNames(object).concat(getOwnPropertySymbols(object)) : getOwnPropertyNames(object);
      var length2 = properties.length;
      if (length2) {
        for (var index15 = 0, property2 = void 0, descriptor = void 0; index15 < length2; index15++) {
          property2 = properties[index15];
          if (property2 !== "callee" && property2 !== "caller") {
            descriptor = getOwnPropertyDescriptor2(object, property2);
            if (descriptor) {
              if (!descriptor.get && !descriptor.set) {
                descriptor.value = handleCopy(object[property2], cache);
              }
              try {
                defineProperty2(clone, property2, descriptor);
              } catch (error) {
                clone[property2] = descriptor.value;
              }
            } else {
              clone[property2] = handleCopy(object[property2], cache);
            }
          }
        }
      }
      return clone;
    };
    var getRegExpFlags = function(regExp) {
      var flags = "";
      if (regExp.global) {
        flags += "g";
      }
      if (regExp.ignoreCase) {
        flags += "i";
      }
      if (regExp.multiline) {
        flags += "m";
      }
      if (regExp.unicode) {
        flags += "u";
      }
      if (regExp.sticky) {
        flags += "y";
      }
      return flags;
    };
    var isArray2 = Array.isArray;
    var GLOBAL_THIS = function() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      if (console && console.error) {
        console.error('Unable to locate global object, returning "this".');
      }
    }();
    function copy3(object, options) {
      var isStrict = !!(options && options.isStrict);
      var realm = options && options.realm || GLOBAL_THIS;
      var getObjectClone = isStrict ? getObjectCloneStrict : getObjectCloneLoose;
      var handleCopy = function(object2, cache) {
        if (!object2 || typeof object2 !== "object") {
          return object2;
        }
        if (cache.has(object2)) {
          return cache.get(object2);
        }
        var Constructor = object2.constructor;
        if (Constructor === realm.Object) {
          return getObjectClone(object2, realm, handleCopy, cache);
        }
        var clone;
        if (isArray2(object2)) {
          if (isStrict) {
            return getObjectCloneStrict(object2, realm, handleCopy, cache);
          }
          var length_1 = object2.length;
          clone = new Constructor();
          cache.set(object2, clone);
          for (var index15 = 0; index15 < length_1; index15++) {
            clone[index15] = handleCopy(object2[index15], cache);
          }
          return clone;
        }
        if (object2 instanceof realm.Date) {
          return new Constructor(object2.getTime());
        }
        if (object2 instanceof realm.RegExp) {
          clone = new Constructor(object2.source, object2.flags || getRegExpFlags(object2));
          clone.lastIndex = object2.lastIndex;
          return clone;
        }
        if (realm.Map && object2 instanceof realm.Map) {
          clone = new Constructor();
          cache.set(object2, clone);
          object2.forEach(function(value, key2) {
            clone.set(key2, handleCopy(value, cache));
          });
          return clone;
        }
        if (realm.Set && object2 instanceof realm.Set) {
          clone = new Constructor();
          cache.set(object2, clone);
          object2.forEach(function(value) {
            clone.add(handleCopy(value, cache));
          });
          return clone;
        }
        if (realm.Blob && object2 instanceof realm.Blob) {
          clone = new Blob([object2], {type: object2.type});
          return clone;
        }
        if (realm.Buffer && realm.Buffer.isBuffer(object2)) {
          clone = realm.Buffer.allocUnsafe ? realm.Buffer.allocUnsafe(object2.length) : new Constructor(object2.length);
          cache.set(object2, clone);
          object2.copy(clone);
          return clone;
        }
        if (realm.ArrayBuffer) {
          if (realm.ArrayBuffer.isView(object2)) {
            clone = new Constructor(object2.buffer.slice(0));
            cache.set(object2, clone);
            return clone;
          }
          if (object2 instanceof realm.ArrayBuffer) {
            clone = object2.slice(0);
            cache.set(object2, clone);
            return clone;
          }
        }
        if (typeof object2.then === "function" || object2 instanceof Error || realm.WeakMap && object2 instanceof realm.WeakMap || realm.WeakSet && object2 instanceof realm.WeakSet) {
          return object2;
        }
        return getObjectClone(object2, realm, handleCopy, cache);
      };
      return handleCopy(object, createCache());
    }
    copy3.strict = function strictCopy(object, options) {
      return copy3(object, {
        isStrict: true,
        realm: options ? options.realm : void 0
      });
    };
    return copy3;
  });
});

// node_modules/deepmerge/dist/cjs.js
var require_cjs = __commonJS((exports, module) => {
  "use strict";
  var isMergeableObject = function isMergeableObject2(value) {
    return isNonNullObject(value) && !isSpecial(value);
  };
  function isNonNullObject(value) {
    return !!value && typeof value === "object";
  }
  function isSpecial(value) {
    var stringValue = Object.prototype.toString.call(value);
    return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
  }
  var canUseSymbol = typeof Symbol === "function" && Symbol.for;
  var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
  function isReactElement(value) {
    return value.$$typeof === REACT_ELEMENT_TYPE;
  }
  function emptyTarget(val) {
    return Array.isArray(val) ? [] : {};
  }
  function cloneUnlessOtherwiseSpecified(value, options) {
    return options.clone !== false && options.isMergeableObject(value) ? deepmerge4(emptyTarget(value), value, options) : value;
  }
  function defaultArrayMerge(target, source, options) {
    return target.concat(source).map(function(element) {
      return cloneUnlessOtherwiseSpecified(element, options);
    });
  }
  function getMergeFunction(key2, options) {
    if (!options.customMerge) {
      return deepmerge4;
    }
    var customMerge = options.customMerge(key2);
    return typeof customMerge === "function" ? customMerge : deepmerge4;
  }
  function getEnumerableOwnPropertySymbols(target) {
    return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
      return target.propertyIsEnumerable(symbol);
    }) : [];
  }
  function getKeys(target) {
    return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
  }
  function propertyIsOnObject(object, property2) {
    try {
      return property2 in object;
    } catch (_27) {
      return false;
    }
  }
  function propertyIsUnsafe(target, key2) {
    return propertyIsOnObject(target, key2) && !(Object.hasOwnProperty.call(target, key2) && Object.propertyIsEnumerable.call(target, key2));
  }
  function mergeObject(target, source, options) {
    var destination = {};
    if (options.isMergeableObject(target)) {
      getKeys(target).forEach(function(key2) {
        destination[key2] = cloneUnlessOtherwiseSpecified(target[key2], options);
      });
    }
    getKeys(source).forEach(function(key2) {
      if (propertyIsUnsafe(target, key2)) {
        return;
      }
      if (propertyIsOnObject(target, key2) && options.isMergeableObject(source[key2])) {
        destination[key2] = getMergeFunction(key2, options)(target[key2], source[key2], options);
      } else {
        destination[key2] = cloneUnlessOtherwiseSpecified(source[key2], options);
      }
    });
    return destination;
  }
  function deepmerge4(target, source, options) {
    options = options || {};
    options.arrayMerge = options.arrayMerge || defaultArrayMerge;
    options.isMergeableObject = options.isMergeableObject || isMergeableObject;
    options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
    var sourceIsArray = Array.isArray(source);
    var targetIsArray = Array.isArray(target);
    var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
    if (!sourceAndTargetTypesMatch) {
      return cloneUnlessOtherwiseSpecified(source, options);
    } else if (sourceIsArray) {
      return options.arrayMerge(target, source, options);
    } else {
      return mergeObject(target, source, options);
    }
  }
  deepmerge4.all = function deepmergeAll(array, options) {
    if (!Array.isArray(array)) {
      throw new Error("first argument should be an array");
    }
    return array.reduce(function(prev, next) {
      return deepmerge4(prev, next, options);
    }, {});
  };
  var deepmerge_1 = deepmerge4;
  module.exports = deepmerge_1;
});

// node_modules/email-validator/index.js
var require_email_validator = __commonJS((exports) => {
  "use strict";
  var tester = /^[-!#$%&'*+\/0-9=?A-Z^_a-z{|}~](\.?[-!#$%&'*+\/0-9=?A-Z^_a-z`{|}~])*@[a-zA-Z0-9](-*\.?[a-zA-Z0-9])*\.[a-zA-Z](-?[a-zA-Z0-9])+$/;
  exports.validate = function(email) {
    if (!email)
      return false;
    if (email.length > 254)
      return false;
    var valid = tester.test(email);
    if (!valid)
      return false;
    var parts2 = email.split("@");
    if (parts2[0].length > 64)
      return false;
    var domainParts = parts2[1].split(".");
    if (domainParts.some(function(part) {
      return part.length > 63;
    }))
      return false;
    return true;
  };
});

// node_modules/faker/lib/fake.js
var require_fake = __commonJS((exports, module) => {
  function Fake(faker2) {
    this.fake = function fake(str) {
      var res = "";
      if (typeof str !== "string" || str.length === 0) {
        res = "string parameter is required!";
        return res;
      }
      var start = str.search("{{");
      var end = str.search("}}");
      if (start === -1 && end === -1) {
        return str;
      }
      var token = str.substr(start + 2, end - start - 2);
      var method = token.replace("}}", "").replace("{{", "");
      var regExp = /\(([^)]+)\)/;
      var matches = regExp.exec(method);
      var parameters = "";
      if (matches) {
        method = method.replace(regExp, "");
        parameters = matches[1];
      }
      var parts2 = method.split(".");
      if (typeof faker2[parts2[0]] === "undefined") {
        throw new Error("Invalid module: " + parts2[0]);
      }
      if (typeof faker2[parts2[0]][parts2[1]] === "undefined") {
        throw new Error("Invalid method: " + parts2[0] + "." + parts2[1]);
      }
      var fn2 = faker2[parts2[0]][parts2[1]];
      var params;
      try {
        params = JSON.parse(parameters);
      } catch (err) {
        params = parameters;
      }
      var result;
      if (typeof params === "string" && params.length === 0) {
        result = fn2.call(this);
      } else {
        result = fn2.call(this, params);
      }
      res = str.replace("{{" + token + "}}", result);
      return fake(res);
    };
    return this;
  }
  module["exports"] = Fake;
});

// node_modules/faker/vendor/mersenne.js
var require_mersenne = __commonJS((exports) => {
  function MersenneTwister19937() {
    var N, M, MATRIX_A, UPPER_MASK, LOWER_MASK;
    N = 624;
    M = 397;
    MATRIX_A = 2567483615;
    UPPER_MASK = 2147483648;
    LOWER_MASK = 2147483647;
    var mt = new Array(N);
    var mti = N + 1;
    function unsigned32(n1) {
      return n1 < 0 ? (n1 ^ UPPER_MASK) + UPPER_MASK : n1;
    }
    function subtraction32(n1, n2) {
      return n1 < n2 ? unsigned32(4294967296 - (n2 - n1) & 4294967295) : n1 - n2;
    }
    function addition32(n1, n2) {
      return unsigned32(n1 + n2 & 4294967295);
    }
    function multiplication32(n1, n2) {
      var sum = 0;
      for (var i = 0; i < 32; ++i) {
        if (n1 >>> i & 1) {
          sum = addition32(sum, unsigned32(n2 << i));
        }
      }
      return sum;
    }
    this.init_genrand = function(s) {
      mt[0] = unsigned32(s & 4294967295);
      for (mti = 1; mti < N; mti++) {
        mt[mti] = addition32(multiplication32(1812433253, unsigned32(mt[mti - 1] ^ mt[mti - 1] >>> 30)), mti);
        mt[mti] = unsigned32(mt[mti] & 4294967295);
      }
    };
    this.init_by_array = function(init_key, key_length) {
      var i, j, k;
      this.init_genrand(19650218);
      i = 1;
      j = 0;
      k = N > key_length ? N : key_length;
      for (; k; k--) {
        mt[i] = addition32(addition32(unsigned32(mt[i] ^ multiplication32(unsigned32(mt[i - 1] ^ mt[i - 1] >>> 30), 1664525)), init_key[j]), j);
        mt[i] = unsigned32(mt[i] & 4294967295);
        i++;
        j++;
        if (i >= N) {
          mt[0] = mt[N - 1];
          i = 1;
        }
        if (j >= key_length)
          j = 0;
      }
      for (k = N - 1; k; k--) {
        mt[i] = subtraction32(unsigned32((dbg = mt[i]) ^ multiplication32(unsigned32(mt[i - 1] ^ mt[i - 1] >>> 30), 1566083941)), i);
        mt[i] = unsigned32(mt[i] & 4294967295);
        i++;
        if (i >= N) {
          mt[0] = mt[N - 1];
          i = 1;
        }
      }
      mt[0] = 2147483648;
    };
    var mag01 = [0, MATRIX_A];
    this.genrand_int32 = function() {
      var y;
      if (mti >= N) {
        var kk;
        if (mti == N + 1)
          this.init_genrand(5489);
        for (kk = 0; kk < N - M; kk++) {
          y = unsigned32(mt[kk] & UPPER_MASK | mt[kk + 1] & LOWER_MASK);
          mt[kk] = unsigned32(mt[kk + M] ^ y >>> 1 ^ mag01[y & 1]);
        }
        for (; kk < N - 1; kk++) {
          y = unsigned32(mt[kk] & UPPER_MASK | mt[kk + 1] & LOWER_MASK);
          mt[kk] = unsigned32(mt[kk + (M - N)] ^ y >>> 1 ^ mag01[y & 1]);
        }
        y = unsigned32(mt[N - 1] & UPPER_MASK | mt[0] & LOWER_MASK);
        mt[N - 1] = unsigned32(mt[M - 1] ^ y >>> 1 ^ mag01[y & 1]);
        mti = 0;
      }
      y = mt[mti++];
      y = unsigned32(y ^ y >>> 11);
      y = unsigned32(y ^ y << 7 & 2636928640);
      y = unsigned32(y ^ y << 15 & 4022730752);
      y = unsigned32(y ^ y >>> 18);
      return y;
    };
    this.genrand_int31 = function() {
      return this.genrand_int32() >>> 1;
    };
    this.genrand_real1 = function() {
      return this.genrand_int32() * (1 / 4294967295);
    };
    this.genrand_real2 = function() {
      return this.genrand_int32() * (1 / 4294967296);
    };
    this.genrand_real3 = function() {
      return (this.genrand_int32() + 0.5) * (1 / 4294967296);
    };
    this.genrand_res53 = function() {
      var a = this.genrand_int32() >>> 5, b = this.genrand_int32() >>> 6;
      return (a * 67108864 + b) * (1 / 9007199254740992);
    };
  }
  exports.MersenneTwister19937 = MersenneTwister19937;
  var gen = new MersenneTwister19937();
  gen.init_genrand(new Date().getTime() % 1e9);
  exports.rand = function(max4, min4) {
    if (max4 === void 0) {
      min4 = 0;
      max4 = 32768;
    }
    return Math.floor(gen.genrand_real2() * (max4 - min4) + min4);
  };
  exports.seed = function(S) {
    if (typeof S != "number") {
      throw new Error("seed(S) must take numeric argument; is " + typeof S);
    }
    gen.init_genrand(S);
  };
  exports.seed_array = function(A) {
    if (typeof A != "object") {
      throw new Error("seed_array(A) must take array of numbers; is " + typeof A);
    }
    gen.init_by_array(A);
  };
});

// node_modules/faker/lib/random.js
var require_random = __commonJS((exports, module) => {
  var mersenne = require_mersenne();
  function Random(faker2, seed) {
    if (seed) {
      if (Array.isArray(seed) && seed.length) {
        mersenne.seed_array(seed);
      } else {
        mersenne.seed(seed);
      }
    }
    this.number = function(options) {
      if (typeof options === "number") {
        options = {
          max: options
        };
      }
      options = options || {};
      if (typeof options.min === "undefined") {
        options.min = 0;
      }
      if (typeof options.max === "undefined") {
        options.max = 99999;
      }
      if (typeof options.precision === "undefined") {
        options.precision = 1;
      }
      var max4 = options.max;
      if (max4 >= 0) {
        max4 += options.precision;
      }
      var randomNumber = options.precision * Math.floor(mersenne.rand(max4 / options.precision, options.min / options.precision));
      return randomNumber;
    };
    this.arrayElement = function(array) {
      array = array || ["a", "b", "c"];
      var r = faker2.random.number({max: array.length - 1});
      return array[r];
    };
    this.objectElement = function(object, field) {
      object = object || {foo: "bar", too: "car"};
      var array = Object.keys(object);
      var key2 = faker2.random.arrayElement(array);
      return field === "key" ? key2 : object[key2];
    };
    this.uuid = function() {
      var self2 = this;
      var RFC4122_TEMPLATE = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
      var replacePlaceholders = function(placeholder) {
        var random = self2.number({min: 0, max: 15});
        var value = placeholder == "x" ? random : random & 3 | 8;
        return value.toString(16);
      };
      return RFC4122_TEMPLATE.replace(/[xy]/g, replacePlaceholders);
    };
    this.boolean = function() {
      return !!faker2.random.number(1);
    };
    this.word = function randomWord(type) {
      var wordMethods = [
        "commerce.department",
        "commerce.productName",
        "commerce.productAdjective",
        "commerce.productMaterial",
        "commerce.product",
        "commerce.color",
        "company.catchPhraseAdjective",
        "company.catchPhraseDescriptor",
        "company.catchPhraseNoun",
        "company.bsAdjective",
        "company.bsBuzz",
        "company.bsNoun",
        "address.streetSuffix",
        "address.county",
        "address.country",
        "address.state",
        "finance.accountName",
        "finance.transactionType",
        "finance.currencyName",
        "hacker.noun",
        "hacker.verb",
        "hacker.adjective",
        "hacker.ingverb",
        "hacker.abbreviation",
        "name.jobDescriptor",
        "name.jobArea",
        "name.jobType"
      ];
      var randomWordMethod = faker2.random.arrayElement(wordMethods);
      return faker2.fake("{{" + randomWordMethod + "}}");
    };
    this.words = function randomWords(count) {
      var words = [];
      if (typeof count === "undefined") {
        count = faker2.random.number({min: 1, max: 3});
      }
      for (var i = 0; i < count; i++) {
        words.push(faker2.random.word());
      }
      return words.join(" ");
    };
    this.image = function randomImage() {
      return faker2.image.image();
    };
    this.locale = function randomLocale() {
      return faker2.random.arrayElement(Object.keys(faker2.locales));
    };
    this.alphaNumeric = function alphaNumeric(count) {
      if (typeof count === "undefined") {
        count = 1;
      }
      var wholeString = "";
      for (var i = 0; i < count; i++) {
        wholeString += faker2.random.arrayElement(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]);
      }
      return wholeString;
    };
    return this;
  }
  module["exports"] = Random;
});

// node_modules/faker/lib/helpers.js
var require_helpers = __commonJS((exports, module) => {
  var Helpers = function(faker2) {
    var self2 = this;
    self2.randomize = function(array) {
      array = array || ["a", "b", "c"];
      return faker2.random.arrayElement(array);
    };
    self2.slugify = function(string) {
      string = string || "";
      return string.replace(/ /g, "-").replace(/[^\w\.\-]+/g, "");
    };
    self2.replaceSymbolWithNumber = function(string, symbol) {
      string = string || "";
      if (symbol === void 0) {
        symbol = "#";
      }
      var str = "";
      for (var i = 0; i < string.length; i++) {
        if (string.charAt(i) == symbol) {
          str += faker2.random.number(9);
        } else {
          str += string.charAt(i);
        }
      }
      return str;
    };
    self2.replaceSymbols = function(string) {
      string = string || "";
      var alpha = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"];
      var str = "";
      for (var i = 0; i < string.length; i++) {
        if (string.charAt(i) == "#") {
          str += faker2.random.number(9);
        } else if (string.charAt(i) == "?") {
          str += faker2.random.arrayElement(alpha);
        } else {
          str += string.charAt(i);
        }
      }
      return str;
    };
    self2.shuffle = function(o) {
      if (typeof o === "undefined" || o.length === 0) {
        return [];
      }
      o = o || ["a", "b", "c"];
      for (var j, x, i = o.length - 1; i; j = faker2.random.number(i), x = o[--i], o[i] = o[j], o[j] = x)
        ;
      return o;
    };
    self2.mustache = function(str, data2) {
      if (typeof str === "undefined") {
        return "";
      }
      for (var p in data2) {
        var re = new RegExp("{{" + p + "}}", "g");
        str = str.replace(re, data2[p]);
      }
      return str;
    };
    self2.createCard = function() {
      return {
        name: faker2.name.findName(),
        username: faker2.internet.userName(),
        email: faker2.internet.email(),
        address: {
          streetA: faker2.address.streetName(),
          streetB: faker2.address.streetAddress(),
          streetC: faker2.address.streetAddress(true),
          streetD: faker2.address.secondaryAddress(),
          city: faker2.address.city(),
          state: faker2.address.state(),
          country: faker2.address.country(),
          zipcode: faker2.address.zipCode(),
          geo: {
            lat: faker2.address.latitude(),
            lng: faker2.address.longitude()
          }
        },
        phone: faker2.phone.phoneNumber(),
        website: faker2.internet.domainName(),
        company: {
          name: faker2.company.companyName(),
          catchPhrase: faker2.company.catchPhrase(),
          bs: faker2.company.bs()
        },
        posts: [
          {
            words: faker2.lorem.words(),
            sentence: faker2.lorem.sentence(),
            sentences: faker2.lorem.sentences(),
            paragraph: faker2.lorem.paragraph()
          },
          {
            words: faker2.lorem.words(),
            sentence: faker2.lorem.sentence(),
            sentences: faker2.lorem.sentences(),
            paragraph: faker2.lorem.paragraph()
          },
          {
            words: faker2.lorem.words(),
            sentence: faker2.lorem.sentence(),
            sentences: faker2.lorem.sentences(),
            paragraph: faker2.lorem.paragraph()
          }
        ],
        accountHistory: [faker2.helpers.createTransaction(), faker2.helpers.createTransaction(), faker2.helpers.createTransaction()]
      };
    };
    self2.contextualCard = function() {
      var name2 = faker2.name.firstName(), userName = faker2.internet.userName(name2);
      return {
        name: name2,
        username: userName,
        avatar: faker2.internet.avatar(),
        email: faker2.internet.email(userName),
        dob: faker2.date.past(50, new Date("Sat Sep 20 1992 21:35:02 GMT+0200 (CEST)")),
        phone: faker2.phone.phoneNumber(),
        address: {
          street: faker2.address.streetName(true),
          suite: faker2.address.secondaryAddress(),
          city: faker2.address.city(),
          zipcode: faker2.address.zipCode(),
          geo: {
            lat: faker2.address.latitude(),
            lng: faker2.address.longitude()
          }
        },
        website: faker2.internet.domainName(),
        company: {
          name: faker2.company.companyName(),
          catchPhrase: faker2.company.catchPhrase(),
          bs: faker2.company.bs()
        }
      };
    };
    self2.userCard = function() {
      return {
        name: faker2.name.findName(),
        username: faker2.internet.userName(),
        email: faker2.internet.email(),
        address: {
          street: faker2.address.streetName(true),
          suite: faker2.address.secondaryAddress(),
          city: faker2.address.city(),
          zipcode: faker2.address.zipCode(),
          geo: {
            lat: faker2.address.latitude(),
            lng: faker2.address.longitude()
          }
        },
        phone: faker2.phone.phoneNumber(),
        website: faker2.internet.domainName(),
        company: {
          name: faker2.company.companyName(),
          catchPhrase: faker2.company.catchPhrase(),
          bs: faker2.company.bs()
        }
      };
    };
    self2.createTransaction = function() {
      return {
        amount: faker2.finance.amount(),
        date: new Date(2012, 1, 2),
        business: faker2.company.companyName(),
        name: [faker2.finance.accountName(), faker2.finance.mask()].join(" "),
        type: self2.randomize(faker2.definitions.finance.transaction_type),
        account: faker2.finance.account()
      };
    };
    return self2;
  };
  module["exports"] = Helpers;
});

// node_modules/faker/lib/name.js
var require_name82 = __commonJS((exports, module) => {
  function Name(faker2) {
    this.firstName = function(gender) {
      if (typeof faker2.definitions.name.male_first_name !== "undefined" && typeof faker2.definitions.name.female_first_name !== "undefined") {
        if (typeof gender !== "number") {
          gender = faker2.random.number(1);
        }
        if (gender === 0) {
          return faker2.random.arrayElement(faker2.locales[faker2.locale].name.male_first_name);
        } else {
          return faker2.random.arrayElement(faker2.locales[faker2.locale].name.female_first_name);
        }
      }
      return faker2.random.arrayElement(faker2.definitions.name.first_name);
    };
    this.lastName = function(gender) {
      if (typeof faker2.definitions.name.male_last_name !== "undefined" && typeof faker2.definitions.name.female_last_name !== "undefined") {
        if (typeof gender !== "number") {
          gender = faker2.random.number(1);
        }
        if (gender === 0) {
          return faker2.random.arrayElement(faker2.locales[faker2.locale].name.male_last_name);
        } else {
          return faker2.random.arrayElement(faker2.locales[faker2.locale].name.female_last_name);
        }
      }
      return faker2.random.arrayElement(faker2.definitions.name.last_name);
    };
    this.findName = function(firstName, lastName, gender) {
      var r = faker2.random.number(8);
      var prefix, suffix;
      if (typeof gender !== "number") {
        gender = faker2.random.number(1);
      }
      firstName = firstName || faker2.name.firstName(gender);
      lastName = lastName || faker2.name.lastName(gender);
      switch (r) {
        case 0:
          prefix = faker2.name.prefix(gender);
          if (prefix) {
            return prefix + " " + firstName + " " + lastName;
          }
        case 1:
          suffix = faker2.name.suffix(gender);
          if (suffix) {
            return firstName + " " + lastName + " " + suffix;
          }
      }
      return firstName + " " + lastName;
    };
    this.jobTitle = function() {
      return faker2.name.jobDescriptor() + " " + faker2.name.jobArea() + " " + faker2.name.jobType();
    };
    this.prefix = function(gender) {
      if (typeof faker2.definitions.name.male_prefix !== "undefined" && typeof faker2.definitions.name.female_prefix !== "undefined") {
        if (typeof gender !== "number") {
          gender = faker2.random.number(1);
        }
        if (gender === 0) {
          return faker2.random.arrayElement(faker2.locales[faker2.locale].name.male_prefix);
        } else {
          return faker2.random.arrayElement(faker2.locales[faker2.locale].name.female_prefix);
        }
      }
      return faker2.random.arrayElement(faker2.definitions.name.prefix);
    };
    this.suffix = function() {
      return faker2.random.arrayElement(faker2.definitions.name.suffix);
    };
    this.title = function() {
      var descriptor = faker2.random.arrayElement(faker2.definitions.name.title.descriptor), level = faker2.random.arrayElement(faker2.definitions.name.title.level), job = faker2.random.arrayElement(faker2.definitions.name.title.job);
      return descriptor + " " + level + " " + job;
    };
    this.jobDescriptor = function() {
      return faker2.random.arrayElement(faker2.definitions.name.title.descriptor);
    };
    this.jobArea = function() {
      return faker2.random.arrayElement(faker2.definitions.name.title.level);
    };
    this.jobType = function() {
      return faker2.random.arrayElement(faker2.definitions.name.title.job);
    };
  }
  module["exports"] = Name;
});

// node_modules/faker/lib/address.js
var require_address = __commonJS((exports, module) => {
  function Address(faker2) {
    var f = faker2.fake, Helpers = faker2.helpers;
    this.zipCode = function(format4) {
      if (typeof format4 === "undefined") {
        var localeFormat = faker2.definitions.address.postcode;
        if (typeof localeFormat === "string") {
          format4 = localeFormat;
        } else {
          format4 = faker2.random.arrayElement(localeFormat);
        }
      }
      return Helpers.replaceSymbols(format4);
    };
    this.city = function(format4) {
      var formats = [
        "{{address.cityPrefix}} {{name.firstName}}{{address.citySuffix}}",
        "{{address.cityPrefix}} {{name.firstName}}",
        "{{name.firstName}}{{address.citySuffix}}",
        "{{name.lastName}}{{address.citySuffix}}"
      ];
      if (typeof format4 !== "number") {
        format4 = faker2.random.number(formats.length - 1);
      }
      return f(formats[format4]);
    };
    this.cityPrefix = function() {
      return faker2.random.arrayElement(faker2.definitions.address.city_prefix);
    };
    this.citySuffix = function() {
      return faker2.random.arrayElement(faker2.definitions.address.city_suffix);
    };
    this.streetName = function() {
      var result;
      var suffix = faker2.address.streetSuffix();
      if (suffix !== "") {
        suffix = " " + suffix;
      }
      switch (faker2.random.number(1)) {
        case 0:
          result = faker2.name.lastName() + suffix;
          break;
        case 1:
          result = faker2.name.firstName() + suffix;
          break;
      }
      return result;
    };
    this.streetAddress = function(useFullAddress) {
      if (useFullAddress === void 0) {
        useFullAddress = false;
      }
      var address = "";
      switch (faker2.random.number(2)) {
        case 0:
          address = Helpers.replaceSymbolWithNumber("#####") + " " + faker2.address.streetName();
          break;
        case 1:
          address = Helpers.replaceSymbolWithNumber("####") + " " + faker2.address.streetName();
          break;
        case 2:
          address = Helpers.replaceSymbolWithNumber("###") + " " + faker2.address.streetName();
          break;
      }
      return useFullAddress ? address + " " + faker2.address.secondaryAddress() : address;
    };
    this.streetSuffix = function() {
      return faker2.random.arrayElement(faker2.definitions.address.street_suffix);
    };
    this.streetPrefix = function() {
      return faker2.random.arrayElement(faker2.definitions.address.street_prefix);
    };
    this.secondaryAddress = function() {
      return Helpers.replaceSymbolWithNumber(faker2.random.arrayElement([
        "Apt. ###",
        "Suite ###"
      ]));
    };
    this.county = function() {
      return faker2.random.arrayElement(faker2.definitions.address.county);
    };
    this.country = function() {
      return faker2.random.arrayElement(faker2.definitions.address.country);
    };
    this.countryCode = function() {
      return faker2.random.arrayElement(faker2.definitions.address.country_code);
    };
    this.state = function(useAbbr) {
      return faker2.random.arrayElement(faker2.definitions.address.state);
    };
    this.stateAbbr = function() {
      return faker2.random.arrayElement(faker2.definitions.address.state_abbr);
    };
    this.latitude = function() {
      return (faker2.random.number(180 * 1e4) / 1e4 - 90).toFixed(4);
    };
    this.longitude = function() {
      return (faker2.random.number(360 * 1e4) / 1e4 - 180).toFixed(4);
    };
    return this;
  }
  module.exports = Address;
});

// node_modules/faker/lib/company.js
var require_company = __commonJS((exports, module) => {
  var Company = function(faker2) {
    var self2 = this;
    var f = faker2.fake;
    this.suffixes = function() {
      return faker2.definitions.company.suffix.slice(0);
    };
    this.companyName = function(format4) {
      var formats = [
        "{{name.lastName}} {{company.companySuffix}}",
        "{{name.lastName}} - {{name.lastName}}",
        "{{name.lastName}}, {{name.lastName}} and {{name.lastName}}"
      ];
      if (typeof format4 !== "number") {
        format4 = faker2.random.number(formats.length - 1);
      }
      return f(formats[format4]);
    };
    this.companySuffix = function() {
      return faker2.random.arrayElement(faker2.company.suffixes());
    };
    this.catchPhrase = function() {
      return f("{{company.catchPhraseAdjective}} {{company.catchPhraseDescriptor}} {{company.catchPhraseNoun}}");
    };
    this.bs = function() {
      return f("{{company.bsAdjective}} {{company.bsBuzz}} {{company.bsNoun}}");
    };
    this.catchPhraseAdjective = function() {
      return faker2.random.arrayElement(faker2.definitions.company.adjective);
    };
    this.catchPhraseDescriptor = function() {
      return faker2.random.arrayElement(faker2.definitions.company.descriptor);
    };
    this.catchPhraseNoun = function() {
      return faker2.random.arrayElement(faker2.definitions.company.noun);
    };
    this.bsAdjective = function() {
      return faker2.random.arrayElement(faker2.definitions.company.bs_adjective);
    };
    this.bsBuzz = function() {
      return faker2.random.arrayElement(faker2.definitions.company.bs_verb);
    };
    this.bsNoun = function() {
      return faker2.random.arrayElement(faker2.definitions.company.bs_noun);
    };
  };
  module["exports"] = Company;
});

// node_modules/faker/lib/iban.js
var require_iban = __commonJS((exports, module) => {
  module["exports"] = {
    alpha: [
      "A",
      "B",
      "C",
      "D",
      "E",
      "F",
      "G",
      "H",
      "I",
      "J",
      "K",
      "L",
      "M",
      "N",
      "O",
      "P",
      "Q",
      "R",
      "S",
      "T",
      "U",
      "V",
      "W",
      "X",
      "Y",
      "Z"
    ],
    pattern10: [
      "01",
      "02",
      "03",
      "04",
      "05",
      "06",
      "07",
      "08",
      "09"
    ],
    pattern100: [
      "001",
      "002",
      "003",
      "004",
      "005",
      "006",
      "007",
      "008",
      "009"
    ],
    toDigitString: function(str) {
      return str.replace(/[A-Z]/gi, function(match3) {
        return match3.toUpperCase().charCodeAt(0) - 55;
      });
    },
    mod97: function(digitStr) {
      var m = 0;
      for (var i = 0; i < digitStr.length; i++) {
        m = (m * 10 + (digitStr[i] | 0)) % 97;
      }
      return m;
    },
    formats: [
      {
        country: "AL",
        total: 28,
        bban: [
          {
            type: "n",
            count: 8
          },
          {
            type: "c",
            count: 16
          }
        ],
        format: "ALkk bbbs sssx cccc cccc cccc cccc"
      },
      {
        country: "AD",
        total: 24,
        bban: [
          {
            type: "n",
            count: 8
          },
          {
            type: "c",
            count: 12
          }
        ],
        format: "ADkk bbbb ssss cccc cccc cccc"
      },
      {
        country: "AT",
        total: 20,
        bban: [
          {
            type: "n",
            count: 5
          },
          {
            type: "n",
            count: 11
          }
        ],
        format: "ATkk bbbb bccc cccc cccc"
      },
      {
        country: "AZ",
        total: 28,
        bban: [
          {
            type: "c",
            count: 4
          },
          {
            type: "n",
            count: 20
          }
        ],
        format: "AZkk bbbb cccc cccc cccc cccc cccc"
      },
      {
        country: "BH",
        total: 22,
        bban: [
          {
            type: "a",
            count: 4
          },
          {
            type: "c",
            count: 14
          }
        ],
        format: "BHkk bbbb cccc cccc cccc cc"
      },
      {
        country: "BE",
        total: 16,
        bban: [
          {
            type: "n",
            count: 3
          },
          {
            type: "n",
            count: 9
          }
        ],
        format: "BEkk bbbc cccc ccxx"
      },
      {
        country: "BA",
        total: 20,
        bban: [
          {
            type: "n",
            count: 6
          },
          {
            type: "n",
            count: 10
          }
        ],
        format: "BAkk bbbs sscc cccc ccxx"
      },
      {
        country: "BR",
        total: 29,
        bban: [
          {
            type: "n",
            count: 13
          },
          {
            type: "n",
            count: 10
          },
          {
            type: "a",
            count: 1
          },
          {
            type: "c",
            count: 1
          }
        ],
        format: "BRkk bbbb bbbb ssss sccc cccc ccct n"
      },
      {
        country: "BG",
        total: 22,
        bban: [
          {
            type: "a",
            count: 4
          },
          {
            type: "n",
            count: 6
          },
          {
            type: "c",
            count: 8
          }
        ],
        format: "BGkk bbbb ssss ddcc cccc cc"
      },
      {
        country: "CR",
        total: 21,
        bban: [
          {
            type: "n",
            count: 3
          },
          {
            type: "n",
            count: 14
          }
        ],
        format: "CRkk bbbc cccc cccc cccc c"
      },
      {
        country: "HR",
        total: 21,
        bban: [
          {
            type: "n",
            count: 7
          },
          {
            type: "n",
            count: 10
          }
        ],
        format: "HRkk bbbb bbbc cccc cccc c"
      },
      {
        country: "CY",
        total: 28,
        bban: [
          {
            type: "n",
            count: 8
          },
          {
            type: "c",
            count: 16
          }
        ],
        format: "CYkk bbbs ssss cccc cccc cccc cccc"
      },
      {
        country: "CZ",
        total: 24,
        bban: [
          {
            type: "n",
            count: 10
          },
          {
            type: "n",
            count: 10
          }
        ],
        format: "CZkk bbbb ssss sscc cccc cccc"
      },
      {
        country: "DK",
        total: 18,
        bban: [
          {
            type: "n",
            count: 4
          },
          {
            type: "n",
            count: 10
          }
        ],
        format: "DKkk bbbb cccc cccc cc"
      },
      {
        country: "DO",
        total: 28,
        bban: [
          {
            type: "a",
            count: 4
          },
          {
            type: "n",
            count: 20
          }
        ],
        format: "DOkk bbbb cccc cccc cccc cccc cccc"
      },
      {
        country: "TL",
        total: 23,
        bban: [
          {
            type: "n",
            count: 3
          },
          {
            type: "n",
            count: 16
          }
        ],
        format: "TLkk bbbc cccc cccc cccc cxx"
      },
      {
        country: "EE",
        total: 20,
        bban: [
          {
            type: "n",
            count: 4
          },
          {
            type: "n",
            count: 12
          }
        ],
        format: "EEkk bbss cccc cccc cccx"
      },
      {
        country: "FO",
        total: 18,
        bban: [
          {
            type: "n",
            count: 4
          },
          {
            type: "n",
            count: 10
          }
        ],
        format: "FOkk bbbb cccc cccc cx"
      },
      {
        country: "FI",
        total: 18,
        bban: [
          {
            type: "n",
            count: 6
          },
          {
            type: "n",
            count: 8
          }
        ],
        format: "FIkk bbbb bbcc cccc cx"
      },
      {
        country: "FR",
        total: 27,
        bban: [
          {
            type: "n",
            count: 10
          },
          {
            type: "c",
            count: 11
          },
          {
            type: "n",
            count: 2
          }
        ],
        format: "FRkk bbbb bggg ggcc cccc cccc cxx"
      },
      {
        country: "GE",
        total: 22,
        bban: [
          {
            type: "c",
            count: 2
          },
          {
            type: "n",
            count: 16
          }
        ],
        format: "GEkk bbcc cccc cccc cccc cc"
      },
      {
        country: "DE",
        total: 22,
        bban: [
          {
            type: "n",
            count: 8
          },
          {
            type: "n",
            count: 10
          }
        ],
        format: "DEkk bbbb bbbb cccc cccc cc"
      },
      {
        country: "GI",
        total: 23,
        bban: [
          {
            type: "a",
            count: 4
          },
          {
            type: "c",
            count: 15
          }
        ],
        format: "GIkk bbbb cccc cccc cccc ccc"
      },
      {
        country: "GR",
        total: 27,
        bban: [
          {
            type: "n",
            count: 7
          },
          {
            type: "c",
            count: 16
          }
        ],
        format: "GRkk bbbs sssc cccc cccc cccc ccc"
      },
      {
        country: "GL",
        total: 18,
        bban: [
          {
            type: "n",
            count: 4
          },
          {
            type: "n",
            count: 10
          }
        ],
        format: "GLkk bbbb cccc cccc cc"
      },
      {
        country: "GT",
        total: 28,
        bban: [
          {
            type: "c",
            count: 4
          },
          {
            type: "c",
            count: 4
          },
          {
            type: "c",
            count: 16
          }
        ],
        format: "GTkk bbbb mmtt cccc cccc cccc cccc"
      },
      {
        country: "HU",
        total: 28,
        bban: [
          {
            type: "n",
            count: 8
          },
          {
            type: "n",
            count: 16
          }
        ],
        format: "HUkk bbbs sssk cccc cccc cccc cccx"
      },
      {
        country: "IS",
        total: 26,
        bban: [
          {
            type: "n",
            count: 6
          },
          {
            type: "n",
            count: 16
          }
        ],
        format: "ISkk bbbb sscc cccc iiii iiii ii"
      },
      {
        country: "IE",
        total: 22,
        bban: [
          {
            type: "c",
            count: 4
          },
          {
            type: "n",
            count: 6
          },
          {
            type: "n",
            count: 8
          }
        ],
        format: "IEkk aaaa bbbb bbcc cccc cc"
      },
      {
        country: "IL",
        total: 23,
        bban: [
          {
            type: "n",
            count: 6
          },
          {
            type: "n",
            count: 13
          }
        ],
        format: "ILkk bbbn nncc cccc cccc ccc"
      },
      {
        country: "IT",
        total: 27,
        bban: [
          {
            type: "a",
            count: 1
          },
          {
            type: "n",
            count: 10
          },
          {
            type: "c",
            count: 12
          }
        ],
        format: "ITkk xaaa aabb bbbc cccc cccc ccc"
      },
      {
        country: "JO",
        total: 30,
        bban: [
          {
            type: "a",
            count: 4
          },
          {
            type: "n",
            count: 4
          },
          {
            type: "n",
            count: 18
          }
        ],
        format: "JOkk bbbb nnnn cccc cccc cccc cccc cc"
      },
      {
        country: "KZ",
        total: 20,
        bban: [
          {
            type: "n",
            count: 3
          },
          {
            type: "c",
            count: 13
          }
        ],
        format: "KZkk bbbc cccc cccc cccc"
      },
      {
        country: "XK",
        total: 20,
        bban: [
          {
            type: "n",
            count: 4
          },
          {
            type: "n",
            count: 12
          }
        ],
        format: "XKkk bbbb cccc cccc cccc"
      },
      {
        country: "KW",
        total: 30,
        bban: [
          {
            type: "a",
            count: 4
          },
          {
            type: "c",
            count: 22
          }
        ],
        format: "KWkk bbbb cccc cccc cccc cccc cccc cc"
      },
      {
        country: "LV",
        total: 21,
        bban: [
          {
            type: "a",
            count: 4
          },
          {
            type: "c",
            count: 13
          }
        ],
        format: "LVkk bbbb cccc cccc cccc c"
      },
      {
        country: "LB",
        total: 28,
        bban: [
          {
            type: "n",
            count: 4
          },
          {
            type: "c",
            count: 20
          }
        ],
        format: "LBkk bbbb cccc cccc cccc cccc cccc"
      },
      {
        country: "LI",
        total: 21,
        bban: [
          {
            type: "n",
            count: 5
          },
          {
            type: "c",
            count: 12
          }
        ],
        format: "LIkk bbbb bccc cccc cccc c"
      },
      {
        country: "LT",
        total: 20,
        bban: [
          {
            type: "n",
            count: 5
          },
          {
            type: "n",
            count: 11
          }
        ],
        format: "LTkk bbbb bccc cccc cccc"
      },
      {
        country: "LU",
        total: 20,
        bban: [
          {
            type: "n",
            count: 3
          },
          {
            type: "c",
            count: 13
          }
        ],
        format: "LUkk bbbc cccc cccc cccc"
      },
      {
        country: "MK",
        total: 19,
        bban: [
          {
            type: "n",
            count: 3
          },
          {
            type: "c",
            count: 10
          },
          {
            type: "n",
            count: 2
          }
        ],
        format: "MKkk bbbc cccc cccc cxx"
      },
      {
        country: "MT",
        total: 31,
        bban: [
          {
            type: "a",
            count: 4
          },
          {
            type: "n",
            count: 5
          },
          {
            type: "c",
            count: 18
          }
        ],
        format: "MTkk bbbb ssss sccc cccc cccc cccc ccc"
      },
      {
        country: "MR",
        total: 27,
        bban: [
          {
            type: "n",
            count: 10
          },
          {
            type: "n",
            count: 13
          }
        ],
        format: "MRkk bbbb bsss sscc cccc cccc cxx"
      },
      {
        country: "MU",
        total: 30,
        bban: [
          {
            type: "a",
            count: 4
          },
          {
            type: "n",
            count: 4
          },
          {
            type: "n",
            count: 15
          },
          {
            type: "a",
            count: 3
          }
        ],
        format: "MUkk bbbb bbss cccc cccc cccc 000d dd"
      },
      {
        country: "MC",
        total: 27,
        bban: [
          {
            type: "n",
            count: 10
          },
          {
            type: "c",
            count: 11
          },
          {
            type: "n",
            count: 2
          }
        ],
        format: "MCkk bbbb bsss sscc cccc cccc cxx"
      },
      {
        country: "MD",
        total: 24,
        bban: [
          {
            type: "c",
            count: 2
          },
          {
            type: "c",
            count: 18
          }
        ],
        format: "MDkk bbcc cccc cccc cccc cccc"
      },
      {
        country: "ME",
        total: 22,
        bban: [
          {
            type: "n",
            count: 3
          },
          {
            type: "n",
            count: 15
          }
        ],
        format: "MEkk bbbc cccc cccc cccc xx"
      },
      {
        country: "NL",
        total: 18,
        bban: [
          {
            type: "a",
            count: 4
          },
          {
            type: "n",
            count: 10
          }
        ],
        format: "NLkk bbbb cccc cccc cc"
      },
      {
        country: "NO",
        total: 15,
        bban: [
          {
            type: "n",
            count: 4
          },
          {
            type: "n",
            count: 7
          }
        ],
        format: "NOkk bbbb cccc ccx"
      },
      {
        country: "PK",
        total: 24,
        bban: [
          {
            type: "c",
            count: 4
          },
          {
            type: "n",
            count: 16
          }
        ],
        format: "PKkk bbbb cccc cccc cccc cccc"
      },
      {
        country: "PS",
        total: 29,
        bban: [
          {
            type: "c",
            count: 4
          },
          {
            type: "n",
            count: 9
          },
          {
            type: "n",
            count: 12
          }
        ],
        format: "PSkk bbbb xxxx xxxx xccc cccc cccc c"
      },
      {
        country: "PL",
        total: 28,
        bban: [
          {
            type: "n",
            count: 8
          },
          {
            type: "n",
            count: 16
          }
        ],
        format: "PLkk bbbs sssx cccc cccc cccc cccc"
      },
      {
        country: "PT",
        total: 25,
        bban: [
          {
            type: "n",
            count: 8
          },
          {
            type: "n",
            count: 13
          }
        ],
        format: "PTkk bbbb ssss cccc cccc cccx x"
      },
      {
        country: "QA",
        total: 29,
        bban: [
          {
            type: "a",
            count: 4
          },
          {
            type: "c",
            count: 21
          }
        ],
        format: "QAkk bbbb cccc cccc cccc cccc cccc c"
      },
      {
        country: "RO",
        total: 24,
        bban: [
          {
            type: "a",
            count: 4
          },
          {
            type: "c",
            count: 16
          }
        ],
        format: "ROkk bbbb cccc cccc cccc cccc"
      },
      {
        country: "SM",
        total: 27,
        bban: [
          {
            type: "a",
            count: 1
          },
          {
            type: "n",
            count: 10
          },
          {
            type: "c",
            count: 12
          }
        ],
        format: "SMkk xaaa aabb bbbc cccc cccc ccc"
      },
      {
        country: "SA",
        total: 24,
        bban: [
          {
            type: "n",
            count: 2
          },
          {
            type: "c",
            count: 18
          }
        ],
        format: "SAkk bbcc cccc cccc cccc cccc"
      },
      {
        country: "RS",
        total: 22,
        bban: [
          {
            type: "n",
            count: 3
          },
          {
            type: "n",
            count: 15
          }
        ],
        format: "RSkk bbbc cccc cccc cccc xx"
      },
      {
        country: "SK",
        total: 24,
        bban: [
          {
            type: "n",
            count: 10
          },
          {
            type: "n",
            count: 10
          }
        ],
        format: "SKkk bbbb ssss sscc cccc cccc"
      },
      {
        country: "SI",
        total: 19,
        bban: [
          {
            type: "n",
            count: 5
          },
          {
            type: "n",
            count: 10
          }
        ],
        format: "SIkk bbss sccc cccc cxx"
      },
      {
        country: "ES",
        total: 24,
        bban: [
          {
            type: "n",
            count: 10
          },
          {
            type: "n",
            count: 10
          }
        ],
        format: "ESkk bbbb gggg xxcc cccc cccc"
      },
      {
        country: "SE",
        total: 24,
        bban: [
          {
            type: "n",
            count: 3
          },
          {
            type: "n",
            count: 17
          }
        ],
        format: "SEkk bbbc cccc cccc cccc cccc"
      },
      {
        country: "CH",
        total: 21,
        bban: [
          {
            type: "n",
            count: 5
          },
          {
            type: "c",
            count: 12
          }
        ],
        format: "CHkk bbbb bccc cccc cccc c"
      },
      {
        country: "TN",
        total: 24,
        bban: [
          {
            type: "n",
            count: 5
          },
          {
            type: "n",
            count: 15
          }
        ],
        format: "TNkk bbss sccc cccc cccc cccc"
      },
      {
        country: "TR",
        total: 26,
        bban: [
          {
            type: "n",
            count: 5
          },
          {
            type: "c",
            count: 1
          },
          {
            type: "c",
            count: 16
          }
        ],
        format: "TRkk bbbb bxcc cccc cccc cccc cc"
      },
      {
        country: "AE",
        total: 23,
        bban: [
          {
            type: "n",
            count: 3
          },
          {
            type: "n",
            count: 16
          }
        ],
        format: "AEkk bbbc cccc cccc cccc ccc"
      },
      {
        country: "GB",
        total: 22,
        bban: [
          {
            type: "a",
            count: 4
          },
          {
            type: "n",
            count: 6
          },
          {
            type: "n",
            count: 8
          }
        ],
        format: "GBkk bbbb ssss sscc cccc cc"
      },
      {
        country: "VG",
        total: 24,
        bban: [
          {
            type: "c",
            count: 4
          },
          {
            type: "n",
            count: 16
          }
        ],
        format: "VGkk bbbb cccc cccc cccc cccc"
      }
    ],
    iso3166: [
      "AC",
      "AD",
      "AE",
      "AF",
      "AG",
      "AI",
      "AL",
      "AM",
      "AN",
      "AO",
      "AQ",
      "AR",
      "AS",
      "AT",
      "AU",
      "AW",
      "AX",
      "AZ",
      "BA",
      "BB",
      "BD",
      "BE",
      "BF",
      "BG",
      "BH",
      "BI",
      "BJ",
      "BL",
      "BM",
      "BN",
      "BO",
      "BQ",
      "BR",
      "BS",
      "BT",
      "BU",
      "BV",
      "BW",
      "BY",
      "BZ",
      "CA",
      "CC",
      "CD",
      "CE",
      "CF",
      "CG",
      "CH",
      "CI",
      "CK",
      "CL",
      "CM",
      "CN",
      "CO",
      "CP",
      "CR",
      "CS",
      "CS",
      "CU",
      "CV",
      "CW",
      "CX",
      "CY",
      "CZ",
      "DD",
      "DE",
      "DG",
      "DJ",
      "DK",
      "DM",
      "DO",
      "DZ",
      "EA",
      "EC",
      "EE",
      "EG",
      "EH",
      "ER",
      "ES",
      "ET",
      "EU",
      "FI",
      "FJ",
      "FK",
      "FM",
      "FO",
      "FR",
      "FX",
      "GA",
      "GB",
      "GD",
      "GE",
      "GF",
      "GG",
      "GH",
      "GI",
      "GL",
      "GM",
      "GN",
      "GP",
      "GQ",
      "GR",
      "GS",
      "GT",
      "GU",
      "GW",
      "GY",
      "HK",
      "HM",
      "HN",
      "HR",
      "HT",
      "HU",
      "IC",
      "ID",
      "IE",
      "IL",
      "IM",
      "IN",
      "IO",
      "IQ",
      "IR",
      "IS",
      "IT",
      "JE",
      "JM",
      "JO",
      "JP",
      "KE",
      "KG",
      "KH",
      "KI",
      "KM",
      "KN",
      "KP",
      "KR",
      "KW",
      "KY",
      "KZ",
      "LA",
      "LB",
      "LC",
      "LI",
      "LK",
      "LR",
      "LS",
      "LT",
      "LU",
      "LV",
      "LY",
      "MA",
      "MC",
      "MD",
      "ME",
      "MF",
      "MG",
      "MH",
      "MK",
      "ML",
      "MM",
      "MN",
      "MO",
      "MP",
      "MQ",
      "MR",
      "MS",
      "MT",
      "MU",
      "MV",
      "MW",
      "MX",
      "MY",
      "MZ",
      "NA",
      "NC",
      "NE",
      "NF",
      "NG",
      "NI",
      "NL",
      "NO",
      "NP",
      "NR",
      "NT",
      "NU",
      "NZ",
      "OM",
      "PA",
      "PE",
      "PF",
      "PG",
      "PH",
      "PK",
      "PL",
      "PM",
      "PN",
      "PR",
      "PS",
      "PT",
      "PW",
      "PY",
      "QA",
      "RE",
      "RO",
      "RS",
      "RU",
      "RW",
      "SA",
      "SB",
      "SC",
      "SD",
      "SE",
      "SG",
      "SH",
      "SI",
      "SJ",
      "SK",
      "SL",
      "SM",
      "SN",
      "SO",
      "SR",
      "SS",
      "ST",
      "SU",
      "SV",
      "SX",
      "SY",
      "SZ",
      "TA",
      "TC",
      "TD",
      "TF",
      "TG",
      "TH",
      "TJ",
      "TK",
      "TL",
      "TM",
      "TN",
      "TO",
      "TR",
      "TT",
      "TV",
      "TW",
      "TZ",
      "UA",
      "UG",
      "UM",
      "US",
      "UY",
      "UZ",
      "VA",
      "VC",
      "VE",
      "VG",
      "VI",
      "VN",
      "VU",
      "WF",
      "WS",
      "YE",
      "YT",
      "YU",
      "ZA",
      "ZM",
      "ZR",
      "ZW"
    ]
  };
});

// node_modules/faker/lib/finance.js
var require_finance = __commonJS((exports, module) => {
  var Finance = function(faker2) {
    var ibanLib = require_iban();
    var Helpers = faker2.helpers, self2 = this;
    self2.account = function(length2) {
      length2 = length2 || 8;
      var template = "";
      for (var i = 0; i < length2; i++) {
        template = template + "#";
      }
      length2 = null;
      return Helpers.replaceSymbolWithNumber(template);
    };
    self2.accountName = function() {
      return [Helpers.randomize(faker2.definitions.finance.account_type), "Account"].join(" ");
    };
    self2.mask = function(length2, parens, ellipsis) {
      length2 = length2 == 0 || !length2 || typeof length2 == "undefined" ? 4 : length2;
      parens = parens === null ? true : parens;
      ellipsis = ellipsis === null ? true : ellipsis;
      var template = "";
      for (var i = 0; i < length2; i++) {
        template = template + "#";
      }
      template = ellipsis ? ["...", template].join("") : template;
      template = parens ? ["(", template, ")"].join("") : template;
      template = Helpers.replaceSymbolWithNumber(template);
      return template;
    };
    self2.amount = function(min4, max4, dec, symbol) {
      min4 = min4 || 0;
      max4 = max4 || 1e3;
      dec = dec === void 0 ? 2 : dec;
      symbol = symbol || "";
      var randValue = faker2.random.number({max: max4, min: min4, precision: Math.pow(10, -dec)});
      return symbol + randValue.toFixed(dec);
    };
    self2.transactionType = function() {
      return Helpers.randomize(faker2.definitions.finance.transaction_type);
    };
    self2.currencyCode = function() {
      return faker2.random.objectElement(faker2.definitions.finance.currency)["code"];
    };
    self2.currencyName = function() {
      return faker2.random.objectElement(faker2.definitions.finance.currency, "key");
    };
    self2.currencySymbol = function() {
      var symbol;
      while (!symbol) {
        symbol = faker2.random.objectElement(faker2.definitions.finance.currency)["symbol"];
      }
      return symbol;
    };
    self2.bitcoinAddress = function() {
      var addressLength = faker2.random.number({min: 27, max: 34});
      var address = faker2.random.arrayElement(["1", "3"]);
      for (var i = 0; i < addressLength - 1; i++)
        address += faker2.random.alphaNumeric().toUpperCase();
      return address;
    };
    self2.iban = function(formatted) {
      var ibanFormat = faker2.random.arrayElement(ibanLib.formats);
      var s = "";
      var count = 0;
      for (var b = 0; b < ibanFormat.bban.length; b++) {
        var bban = ibanFormat.bban[b];
        var c = bban.count;
        count += bban.count;
        while (c > 0) {
          if (bban.type == "a") {
            s += faker2.random.arrayElement(ibanLib.alpha);
          } else if (bban.type == "c") {
            if (faker2.random.number(100) < 80) {
              s += faker2.random.number(9);
            } else {
              s += faker2.random.arrayElement(ibanLib.alpha);
            }
          } else {
            if (c >= 3 && faker2.random.number(100) < 30) {
              if (faker2.random.boolean()) {
                s += faker2.random.arrayElement(ibanLib.pattern100);
                c -= 2;
              } else {
                s += faker2.random.arrayElement(ibanLib.pattern10);
                c--;
              }
            } else {
              s += faker2.random.number(9);
            }
          }
          c--;
        }
        s = s.substring(0, count);
      }
      var checksum = 98 - ibanLib.mod97(ibanLib.toDigitString(s + ibanFormat.country + "00"));
      if (checksum < 10) {
        checksum = "0" + checksum;
      }
      var iban = ibanFormat.country + checksum + s;
      return formatted ? iban.match(/.{1,4}/g).join(" ") : iban;
    };
    self2.bic = function() {
      var vowels = ["A", "E", "I", "O", "U"];
      var prob = faker2.random.number(100);
      return Helpers.replaceSymbols("???") + faker2.random.arrayElement(vowels) + faker2.random.arrayElement(ibanLib.iso3166) + Helpers.replaceSymbols("?") + "1" + (prob < 10 ? Helpers.replaceSymbols("?" + faker2.random.arrayElement(vowels) + "?") : prob < 40 ? Helpers.replaceSymbols("###") : "");
    };
  };
  module["exports"] = Finance;
});

// node_modules/faker/lib/image.js
var require_image = __commonJS((exports, module) => {
  var Image = function(faker2) {
    var self2 = this;
    self2.image = function(width, height, randomize) {
      var categories = ["abstract", "animals", "business", "cats", "city", "food", "nightlife", "fashion", "people", "nature", "sports", "technics", "transport"];
      return self2[faker2.random.arrayElement(categories)](width, height, randomize);
    };
    self2.avatar = function() {
      return faker2.internet.avatar();
    };
    self2.imageUrl = function(width, height, category, randomize, https) {
      var width = width || 640;
      var height = height || 480;
      var protocol = "http://";
      if (typeof https !== "undefined" && https === true) {
        protocol = "https://";
      }
      var url = protocol + "lorempixel.com/" + width + "/" + height;
      if (typeof category !== "undefined") {
        url += "/" + category;
      }
      if (randomize) {
        url += "?" + faker2.random.number();
      }
      return url;
    };
    self2.abstract = function(width, height, randomize) {
      return faker2.image.imageUrl(width, height, "abstract", randomize);
    };
    self2.animals = function(width, height, randomize) {
      return faker2.image.imageUrl(width, height, "animals", randomize);
    };
    self2.business = function(width, height, randomize) {
      return faker2.image.imageUrl(width, height, "business", randomize);
    };
    self2.cats = function(width, height, randomize) {
      return faker2.image.imageUrl(width, height, "cats", randomize);
    };
    self2.city = function(width, height, randomize) {
      return faker2.image.imageUrl(width, height, "city", randomize);
    };
    self2.food = function(width, height, randomize) {
      return faker2.image.imageUrl(width, height, "food", randomize);
    };
    self2.nightlife = function(width, height, randomize) {
      return faker2.image.imageUrl(width, height, "nightlife", randomize);
    };
    self2.fashion = function(width, height, randomize) {
      return faker2.image.imageUrl(width, height, "fashion", randomize);
    };
    self2.people = function(width, height, randomize) {
      return faker2.image.imageUrl(width, height, "people", randomize);
    };
    self2.nature = function(width, height, randomize) {
      return faker2.image.imageUrl(width, height, "nature", randomize);
    };
    self2.sports = function(width, height, randomize) {
      return faker2.image.imageUrl(width, height, "sports", randomize);
    };
    self2.technics = function(width, height, randomize) {
      return faker2.image.imageUrl(width, height, "technics", randomize);
    };
    self2.transport = function(width, height, randomize) {
      return faker2.image.imageUrl(width, height, "transport", randomize);
    };
    self2.dataUri = function(width, height) {
      var rawPrefix = "data:image/svg+xml;charset=UTF-8,";
      var svgString = '<svg xmlns="http://www.w3.org/2000/svg" version="1.1" baseProfile="full" width="' + width + '" height="' + height + '"> <rect width="100%" height="100%" fill="grey"/>  <text x="0" y="20" font-size="20" text-anchor="start" fill="white">' + width + "x" + height + "</text> </svg>";
      return rawPrefix + encodeURIComponent(svgString);
    };
  };
  module["exports"] = Image;
});

// node_modules/faker/lib/lorem.js
var require_lorem14 = __commonJS((exports, module) => {
  var Lorem = function(faker2) {
    var self2 = this;
    var Helpers = faker2.helpers;
    self2.word = function(num) {
      return faker2.random.arrayElement(faker2.definitions.lorem.words);
    };
    self2.words = function(num) {
      if (typeof num == "undefined") {
        num = 3;
      }
      var words = [];
      for (var i = 0; i < num; i++) {
        words.push(faker2.lorem.word());
      }
      return words.join(" ");
    };
    self2.sentence = function(wordCount, range) {
      if (typeof wordCount == "undefined") {
        wordCount = faker2.random.number({min: 3, max: 10});
      }
      var sentence = faker2.lorem.words(wordCount);
      return sentence.charAt(0).toUpperCase() + sentence.slice(1) + ".";
    };
    self2.slug = function(wordCount) {
      var words = faker2.lorem.words(wordCount);
      return Helpers.slugify(words);
    };
    self2.sentences = function(sentenceCount, separator) {
      if (typeof sentenceCount === "undefined") {
        sentenceCount = faker2.random.number({min: 2, max: 6});
      }
      if (typeof separator == "undefined") {
        separator = " ";
      }
      var sentences = [];
      for (sentenceCount; sentenceCount > 0; sentenceCount--) {
        sentences.push(faker2.lorem.sentence());
      }
      return sentences.join(separator);
    };
    self2.paragraph = function(sentenceCount) {
      if (typeof sentenceCount == "undefined") {
        sentenceCount = 3;
      }
      return faker2.lorem.sentences(sentenceCount + faker2.random.number(3));
    };
    self2.paragraphs = function(paragraphCount, separator) {
      if (typeof separator === "undefined") {
        separator = "\n \r";
      }
      if (typeof paragraphCount == "undefined") {
        paragraphCount = 3;
      }
      var paragraphs = [];
      for (paragraphCount; paragraphCount > 0; paragraphCount--) {
        paragraphs.push(faker2.lorem.paragraph());
      }
      return paragraphs.join(separator);
    };
    self2.text = function loremText(times) {
      var loremMethods = ["lorem.word", "lorem.words", "lorem.sentence", "lorem.sentences", "lorem.paragraph", "lorem.paragraphs", "lorem.lines"];
      var randomLoremMethod = faker2.random.arrayElement(loremMethods);
      return faker2.fake("{{" + randomLoremMethod + "}}");
    };
    self2.lines = function lines(lineCount) {
      if (typeof lineCount === "undefined") {
        lineCount = faker2.random.number({min: 1, max: 5});
      }
      return faker2.lorem.sentences(lineCount, "\n");
    };
    return self2;
  };
  module["exports"] = Lorem;
});

// node_modules/faker/lib/hacker.js
var require_hacker = __commonJS((exports, module) => {
  var Hacker = function(faker2) {
    var self2 = this;
    self2.abbreviation = function() {
      return faker2.random.arrayElement(faker2.definitions.hacker.abbreviation);
    };
    self2.adjective = function() {
      return faker2.random.arrayElement(faker2.definitions.hacker.adjective);
    };
    self2.noun = function() {
      return faker2.random.arrayElement(faker2.definitions.hacker.noun);
    };
    self2.verb = function() {
      return faker2.random.arrayElement(faker2.definitions.hacker.verb);
    };
    self2.ingverb = function() {
      return faker2.random.arrayElement(faker2.definitions.hacker.ingverb);
    };
    self2.phrase = function() {
      var data2 = {
        abbreviation: self2.abbreviation,
        adjective: self2.adjective,
        ingverb: self2.ingverb,
        noun: self2.noun,
        verb: self2.verb
      };
      var phrase = faker2.random.arrayElement([
        "If we {{verb}} the {{noun}}, we can get to the {{abbreviation}} {{noun}} through the {{adjective}} {{abbreviation}} {{noun}}!",
        "We need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!",
        "Try to {{verb}} the {{abbreviation}} {{noun}}, maybe it will {{verb}} the {{adjective}} {{noun}}!",
        "You can't {{verb}} the {{noun}} without {{ingverb}} the {{adjective}} {{abbreviation}} {{noun}}!",
        "Use the {{adjective}} {{abbreviation}} {{noun}}, then you can {{verb}} the {{adjective}} {{noun}}!",
        "The {{abbreviation}} {{noun}} is down, {{verb}} the {{adjective}} {{noun}} so we can {{verb}} the {{abbreviation}} {{noun}}!",
        "{{ingverb}} the {{noun}} won't do anything, we need to {{verb}} the {{adjective}} {{abbreviation}} {{noun}}!",
        "I'll {{verb}} the {{adjective}} {{abbreviation}} {{noun}}, that should {{noun}} the {{abbreviation}} {{noun}}!"
      ]);
      return faker2.helpers.mustache(phrase, data2);
    };
    return self2;
  };
  module["exports"] = Hacker;
});

// node_modules/faker/vendor/user-agent.js
var require_user_agent = __commonJS((exports) => {
  function rnd(a, b) {
    a = a || 0;
    b = b || 100;
    if (typeof b === "number" && typeof a === "number") {
      return function(min4, max4) {
        if (min4 > max4) {
          throw new RangeError("expected min <= max; got min = " + min4 + ", max = " + max4);
        }
        return Math.floor(Math.random() * (max4 - min4 + 1)) + min4;
      }(a, b);
    }
    if (Object.prototype.toString.call(a) === "[object Array]") {
      return a[Math.floor(Math.random() * a.length)];
    }
    if (a && typeof a === "object") {
      return function(obj) {
        var rand = rnd(0, 100) / 100, min4 = 0, max4 = 0, key2, return_val;
        for (key2 in obj) {
          if (obj.hasOwnProperty(key2)) {
            max4 = obj[key2] + min4;
            return_val = key2;
            if (rand >= min4 && rand <= max4) {
              break;
            }
            min4 = min4 + obj[key2];
          }
        }
        return return_val;
      }(a);
    }
    throw new TypeError("Invalid arguments passed to rnd. (" + (b ? a + ", " + b : a) + ")");
  }
  function randomLang() {
    return rnd([
      "AB",
      "AF",
      "AN",
      "AR",
      "AS",
      "AZ",
      "BE",
      "BG",
      "BN",
      "BO",
      "BR",
      "BS",
      "CA",
      "CE",
      "CO",
      "CS",
      "CU",
      "CY",
      "DA",
      "DE",
      "EL",
      "EN",
      "EO",
      "ES",
      "ET",
      "EU",
      "FA",
      "FI",
      "FJ",
      "FO",
      "FR",
      "FY",
      "GA",
      "GD",
      "GL",
      "GV",
      "HE",
      "HI",
      "HR",
      "HT",
      "HU",
      "HY",
      "ID",
      "IS",
      "IT",
      "JA",
      "JV",
      "KA",
      "KG",
      "KO",
      "KU",
      "KW",
      "KY",
      "LA",
      "LB",
      "LI",
      "LN",
      "LT",
      "LV",
      "MG",
      "MK",
      "MN",
      "MO",
      "MS",
      "MT",
      "MY",
      "NB",
      "NE",
      "NL",
      "NN",
      "NO",
      "OC",
      "PL",
      "PT",
      "RM",
      "RO",
      "RU",
      "SC",
      "SE",
      "SK",
      "SL",
      "SO",
      "SQ",
      "SR",
      "SV",
      "SW",
      "TK",
      "TR",
      "TY",
      "UK",
      "UR",
      "UZ",
      "VI",
      "VO",
      "YI",
      "ZH"
    ]);
  }
  function randomBrowserAndOS() {
    var browser3 = rnd({
      chrome: 0.45132810566,
      iexplorer: 0.27477061836,
      firefox: 0.19384170608,
      safari: 0.06186781118,
      opera: 0.01574236955
    }), os = {
      chrome: {win: 0.89, mac: 0.09, lin: 0.02},
      firefox: {win: 0.83, mac: 0.16, lin: 0.01},
      opera: {win: 0.91, mac: 0.03, lin: 0.06},
      safari: {win: 0.04, mac: 0.96},
      iexplorer: ["win"]
    };
    return [browser3, rnd(os[browser3])];
  }
  function randomProc(arch) {
    var procs = {
      lin: ["i686", "x86_64"],
      mac: {Intel: 0.48, PPC: 0.01, "U; Intel": 0.48, "U; PPC": 0.01},
      win: ["", "WOW64", "Win64; x64"]
    };
    return rnd(procs[arch]);
  }
  function randomRevision(dots) {
    var return_val = "";
    for (var x = 0; x < dots; x++) {
      return_val += "." + rnd(0, 9);
    }
    return return_val;
  }
  var version_string = {
    net: function() {
      return [rnd(1, 4), rnd(0, 9), rnd(1e4, 99999), rnd(0, 9)].join(".");
    },
    nt: function() {
      return rnd(5, 6) + "." + rnd(0, 3);
    },
    ie: function() {
      return rnd(7, 11);
    },
    trident: function() {
      return rnd(3, 7) + "." + rnd(0, 1);
    },
    osx: function(delim) {
      return [10, rnd(5, 10), rnd(0, 9)].join(delim || ".");
    },
    chrome: function() {
      return [rnd(13, 39), 0, rnd(800, 899), 0].join(".");
    },
    presto: function() {
      return "2.9." + rnd(160, 190);
    },
    presto2: function() {
      return rnd(10, 12) + ".00";
    },
    safari: function() {
      return rnd(531, 538) + "." + rnd(0, 2) + "." + rnd(0, 2);
    }
  };
  var browser2 = {
    firefox: function firefox(arch) {
      var firefox_ver = rnd(5, 15) + randomRevision(2), gecko_ver = "Gecko/20100101 Firefox/" + firefox_ver, proc = randomProc(arch), os_ver = arch === "win" ? "(Windows NT " + version_string.nt() + (proc ? "; " + proc : "") : arch === "mac" ? "(Macintosh; " + proc + " Mac OS X " + version_string.osx() : "(X11; Linux " + proc;
      return "Mozilla/5.0 " + os_ver + "; rv:" + firefox_ver.slice(0, -2) + ") " + gecko_ver;
    },
    iexplorer: function iexplorer() {
      var ver = version_string.ie();
      if (ver >= 11) {
        return "Mozilla/5.0 (Windows NT 6." + rnd(1, 3) + "; Trident/7.0; " + rnd(["Touch; ", ""]) + "rv:11.0) like Gecko";
      }
      return "Mozilla/5.0 (compatible; MSIE " + ver + ".0; Windows NT " + version_string.nt() + "; Trident/" + version_string.trident() + (rnd(0, 1) === 1 ? "; .NET CLR " + version_string.net() : "") + ")";
    },
    opera: function opera(arch) {
      var presto_ver = " Presto/" + version_string.presto() + " Version/" + version_string.presto2() + ")", os_ver = arch === "win" ? "(Windows NT " + version_string.nt() + "; U; " + randomLang() + presto_ver : arch === "lin" ? "(X11; Linux " + randomProc(arch) + "; U; " + randomLang() + presto_ver : "(Macintosh; Intel Mac OS X " + version_string.osx() + " U; " + randomLang() + " Presto/" + version_string.presto() + " Version/" + version_string.presto2() + ")";
      return "Opera/" + rnd(9, 14) + "." + rnd(0, 99) + " " + os_ver;
    },
    safari: function safari(arch) {
      var safari2 = version_string.safari(), ver = rnd(4, 7) + "." + rnd(0, 1) + "." + rnd(0, 10), os_ver = arch === "mac" ? "(Macintosh; " + randomProc("mac") + " Mac OS X " + version_string.osx("_") + " rv:" + rnd(2, 6) + ".0; " + randomLang() + ") " : "(Windows; U; Windows NT " + version_string.nt() + ")";
      return "Mozilla/5.0 " + os_ver + "AppleWebKit/" + safari2 + " (KHTML, like Gecko) Version/" + ver + " Safari/" + safari2;
    },
    chrome: function chrome2(arch) {
      var safari = version_string.safari(), os_ver = arch === "mac" ? "(Macintosh; " + randomProc("mac") + " Mac OS X " + version_string.osx("_") + ") " : arch === "win" ? "(Windows; U; Windows NT " + version_string.nt() + ")" : "(X11; Linux " + randomProc(arch);
      return "Mozilla/5.0 " + os_ver + " AppleWebKit/" + safari + " (KHTML, like Gecko) Chrome/" + version_string.chrome() + " Safari/" + safari;
    }
  };
  exports.generate = function generate() {
    var random = randomBrowserAndOS();
    return browser2[random[0]](random[1]);
  };
});

// node_modules/faker/lib/internet.js
var require_internet = __commonJS((exports, module) => {
  var random_ua = require_user_agent();
  var Internet = function(faker2) {
    var self2 = this;
    self2.avatar = function() {
      return faker2.random.arrayElement(faker2.definitions.internet.avatar_uri);
    };
    self2.avatar.schema = {
      description: "Generates a URL for an avatar.",
      sampleResults: ["https://s3.amazonaws.com/uifaces/faces/twitter/igorgarybaldi/128.jpg"]
    };
    self2.email = function(firstName, lastName, provider) {
      provider = provider || faker2.random.arrayElement(faker2.definitions.internet.free_email);
      return faker2.helpers.slugify(faker2.internet.userName(firstName, lastName)) + "@" + provider;
    };
    self2.email.schema = {
      description: "Generates a valid email address based on optional input criteria",
      sampleResults: ["foo.bar@gmail.com"],
      properties: {
        firstName: {
          type: "string",
          required: false,
          description: "The first name of the user"
        },
        lastName: {
          type: "string",
          required: false,
          description: "The last name of the user"
        },
        provider: {
          type: "string",
          required: false,
          description: "The domain of the user"
        }
      }
    };
    self2.exampleEmail = function(firstName, lastName) {
      var provider = faker2.random.arrayElement(faker2.definitions.internet.example_email);
      return self2.email(firstName, lastName, provider);
    };
    self2.userName = function(firstName, lastName) {
      var result;
      firstName = firstName || faker2.name.firstName();
      lastName = lastName || faker2.name.lastName();
      switch (faker2.random.number(2)) {
        case 0:
          result = firstName + faker2.random.number(99);
          break;
        case 1:
          result = firstName + faker2.random.arrayElement([".", "_"]) + lastName;
          break;
        case 2:
          result = firstName + faker2.random.arrayElement([".", "_"]) + lastName + faker2.random.number(99);
          break;
      }
      result = result.toString().replace(/'/g, "");
      result = result.replace(/ /g, "");
      return result;
    };
    self2.userName.schema = {
      description: "Generates a username based on one of several patterns. The pattern is chosen randomly.",
      sampleResults: [
        "Kirstin39",
        "Kirstin.Smith",
        "Kirstin.Smith39",
        "KirstinSmith",
        "KirstinSmith39"
      ],
      properties: {
        firstName: {
          type: "string",
          required: false,
          description: "The first name of the user"
        },
        lastName: {
          type: "string",
          required: false,
          description: "The last name of the user"
        }
      }
    };
    self2.protocol = function() {
      var protocols = ["http", "https"];
      return faker2.random.arrayElement(protocols);
    };
    self2.protocol.schema = {
      description: "Randomly generates http or https",
      sampleResults: ["https", "http"]
    };
    self2.url = function() {
      return faker2.internet.protocol() + "://" + faker2.internet.domainName();
    };
    self2.url.schema = {
      description: "Generates a random URL. The URL could be secure or insecure.",
      sampleResults: [
        "http://rashawn.name",
        "https://rashawn.name"
      ]
    };
    self2.domainName = function() {
      return faker2.internet.domainWord() + "." + faker2.internet.domainSuffix();
    };
    self2.domainName.schema = {
      description: "Generates a random domain name.",
      sampleResults: ["marvin.org"]
    };
    self2.domainSuffix = function() {
      return faker2.random.arrayElement(faker2.definitions.internet.domain_suffix);
    };
    self2.domainSuffix.schema = {
      description: "Generates a random domain suffix.",
      sampleResults: ["net"]
    };
    self2.domainWord = function() {
      return faker2.name.firstName().replace(/([\\~#&*{}/:<>?|\"'])/ig, "").toLowerCase();
    };
    self2.domainWord.schema = {
      description: "Generates a random domain word.",
      sampleResults: ["alyce"]
    };
    self2.ip = function() {
      var randNum = function() {
        return faker2.random.number(255).toFixed(0);
      };
      var result = [];
      for (var i = 0; i < 4; i++) {
        result[i] = randNum();
      }
      return result.join(".");
    };
    self2.ip.schema = {
      description: "Generates a random IP.",
      sampleResults: ["97.238.241.11"]
    };
    self2.ipv6 = function() {
      var randHash = function() {
        var result2 = "";
        for (var i2 = 0; i2 < 4; i2++) {
          result2 += faker2.random.arrayElement(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"]);
        }
        return result2;
      };
      var result = [];
      for (var i = 0; i < 8; i++) {
        result[i] = randHash();
      }
      return result.join(":");
    };
    self2.ipv6.schema = {
      description: "Generates a random IPv6 address.",
      sampleResults: ["2001:0db8:6276:b1a7:5213:22f1:25df:c8a0"]
    };
    self2.userAgent = function() {
      return random_ua.generate();
    };
    self2.userAgent.schema = {
      description: "Generates a random user agent.",
      sampleResults: ["Mozilla/5.0 (Macintosh; U; PPC Mac OS X 10_7_5 rv:6.0; SL) AppleWebKit/532.0.1 (KHTML, like Gecko) Version/7.1.6 Safari/532.0.1"]
    };
    self2.color = function(baseRed255, baseGreen255, baseBlue255) {
      baseRed255 = baseRed255 || 0;
      baseGreen255 = baseGreen255 || 0;
      baseBlue255 = baseBlue255 || 0;
      var red = Math.floor((faker2.random.number(256) + baseRed255) / 2);
      var green = Math.floor((faker2.random.number(256) + baseGreen255) / 2);
      var blue = Math.floor((faker2.random.number(256) + baseBlue255) / 2);
      var redStr = red.toString(16);
      var greenStr = green.toString(16);
      var blueStr = blue.toString(16);
      return "#" + (redStr.length === 1 ? "0" : "") + redStr + (greenStr.length === 1 ? "0" : "") + greenStr + (blueStr.length === 1 ? "0" : "") + blueStr;
    };
    self2.color.schema = {
      description: "Generates a random hexadecimal color.",
      sampleResults: ["#06267f"],
      properties: {
        baseRed255: {
          type: "number",
          required: false,
          description: "The red value. Valid values are 0 - 255."
        },
        baseGreen255: {
          type: "number",
          required: false,
          description: "The green value. Valid values are 0 - 255."
        },
        baseBlue255: {
          type: "number",
          required: false,
          description: "The blue value. Valid values are 0 - 255."
        }
      }
    };
    self2.mac = function() {
      var i, mac = "";
      for (i = 0; i < 12; i++) {
        mac += faker2.random.number(15).toString(16);
        if (i % 2 == 1 && i != 11) {
          mac += ":";
        }
      }
      return mac;
    };
    self2.mac.schema = {
      description: "Generates a random mac address.",
      sampleResults: ["78:06:cc:ae:b3:81"]
    };
    self2.password = function(len, memorable, pattern, prefix) {
      len = len || 15;
      if (typeof memorable === "undefined") {
        memorable = false;
      }
      var consonant, letter, password, vowel;
      letter = /[a-zA-Z]$/;
      vowel = /[aeiouAEIOU]$/;
      consonant = /[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]$/;
      var _password = function(length2, memorable2, pattern2, prefix2) {
        var char, n;
        if (length2 == null) {
          length2 = 10;
        }
        if (memorable2 == null) {
          memorable2 = true;
        }
        if (pattern2 == null) {
          pattern2 = /\w/;
        }
        if (prefix2 == null) {
          prefix2 = "";
        }
        if (prefix2.length >= length2) {
          return prefix2;
        }
        if (memorable2) {
          if (prefix2.match(consonant)) {
            pattern2 = vowel;
          } else {
            pattern2 = consonant;
          }
        }
        n = faker2.random.number(94) + 33;
        char = String.fromCharCode(n);
        if (memorable2) {
          char = char.toLowerCase();
        }
        if (!char.match(pattern2)) {
          return _password(length2, memorable2, pattern2, prefix2);
        }
        return _password(length2, memorable2, pattern2, "" + prefix2 + char);
      };
      return _password(len, memorable, pattern, prefix);
    };
    self2.password.schema = {
      description: "Generates a random password.",
      sampleResults: [
        "AM7zl6Mg",
        "susejofe"
      ],
      properties: {
        length: {
          type: "number",
          required: false,
          description: "The number of characters in the password."
        },
        memorable: {
          type: "boolean",
          required: false,
          description: "Whether a password should be easy to remember."
        },
        pattern: {
          type: "regex",
          required: false,
          description: "A regex to match each character of the password against. This parameter will be negated if the memorable setting is turned on."
        },
        prefix: {
          type: "string",
          required: false,
          description: "A value to prepend to the generated password. The prefix counts towards the length of the password."
        }
      }
    };
  };
  module["exports"] = Internet;
});

// node_modules/faker/lib/database.js
var require_database = __commonJS((exports, module) => {
  var Database = function(faker2) {
    var self2 = this;
    self2.column = function() {
      return faker2.random.arrayElement(faker2.definitions.database.column);
    };
    self2.column.schema = {
      description: "Generates a column name.",
      sampleResults: ["id", "title", "createdAt"]
    };
    self2.type = function() {
      return faker2.random.arrayElement(faker2.definitions.database.type);
    };
    self2.type.schema = {
      description: "Generates a column type.",
      sampleResults: ["byte", "int", "varchar", "timestamp"]
    };
    self2.collation = function() {
      return faker2.random.arrayElement(faker2.definitions.database.collation);
    };
    self2.collation.schema = {
      description: "Generates a collation.",
      sampleResults: ["utf8_unicode_ci", "utf8_bin"]
    };
    self2.engine = function() {
      return faker2.random.arrayElement(faker2.definitions.database.engine);
    };
    self2.engine.schema = {
      description: "Generates a storage engine.",
      sampleResults: ["MyISAM", "InnoDB"]
    };
  };
  module["exports"] = Database;
});

// node_modules/faker/lib/phone_number.js
var require_phone_number36 = __commonJS((exports, module) => {
  var Phone = function(faker2) {
    var self2 = this;
    self2.phoneNumber = function(format4) {
      format4 = format4 || faker2.phone.phoneFormats();
      return faker2.helpers.replaceSymbolWithNumber(format4);
    };
    self2.phoneNumberFormat = function(phoneFormatsArrayIndex) {
      phoneFormatsArrayIndex = phoneFormatsArrayIndex || 0;
      return faker2.helpers.replaceSymbolWithNumber(faker2.definitions.phone_number.formats[phoneFormatsArrayIndex]);
    };
    self2.phoneFormats = function() {
      return faker2.random.arrayElement(faker2.definitions.phone_number.formats);
    };
    return self2;
  };
  module["exports"] = Phone;
});

// node_modules/faker/lib/date.js
var require_date = __commonJS((exports, module) => {
  var _Date = function(faker2) {
    var self2 = this;
    self2.past = function(years, refDate) {
      var date2 = refDate ? new Date(Date.parse(refDate)) : new Date();
      var range = {
        min: 1e3,
        max: (years || 1) * 365 * 24 * 3600 * 1e3
      };
      var past = date2.getTime();
      past -= faker2.random.number(range);
      date2.setTime(past);
      return date2;
    };
    self2.future = function(years, refDate) {
      var date2 = refDate ? new Date(Date.parse(refDate)) : new Date();
      var range = {
        min: 1e3,
        max: (years || 1) * 365 * 24 * 3600 * 1e3
      };
      var future = date2.getTime();
      future += faker2.random.number(range);
      date2.setTime(future);
      return date2;
    };
    self2.between = function(from, to) {
      var fromMilli = Date.parse(from);
      var dateOffset = faker2.random.number(Date.parse(to) - fromMilli);
      var newDate = new Date(fromMilli + dateOffset);
      return newDate;
    };
    self2.recent = function(days2) {
      var date2 = new Date();
      var range = {
        min: 1e3,
        max: (days2 || 1) * 24 * 3600 * 1e3
      };
      var future = date2.getTime();
      future -= faker2.random.number(range);
      date2.setTime(future);
      return date2;
    };
    self2.month = function(options) {
      options = options || {};
      var type = "wide";
      if (options.abbr) {
        type = "abbr";
      }
      if (options.context && typeof faker2.definitions.date.month[type + "_context"] !== "undefined") {
        type += "_context";
      }
      var source = faker2.definitions.date.month[type];
      return faker2.random.arrayElement(source);
    };
    self2.weekday = function(options) {
      options = options || {};
      var type = "wide";
      if (options.abbr) {
        type = "abbr";
      }
      if (options.context && typeof faker2.definitions.date.weekday[type + "_context"] !== "undefined") {
        type += "_context";
      }
      var source = faker2.definitions.date.weekday[type];
      return faker2.random.arrayElement(source);
    };
    return self2;
  };
  module["exports"] = _Date;
});

// node_modules/faker/lib/commerce.js
var require_commerce = __commonJS((exports, module) => {
  var Commerce = function(faker2) {
    var self2 = this;
    self2.color = function() {
      return faker2.random.arrayElement(faker2.definitions.commerce.color);
    };
    self2.department = function() {
      return faker2.random.arrayElement(faker2.definitions.commerce.department);
    };
    self2.productName = function() {
      return faker2.commerce.productAdjective() + " " + faker2.commerce.productMaterial() + " " + faker2.commerce.product();
    };
    self2.price = function(min4, max4, dec, symbol) {
      min4 = min4 || 0;
      max4 = max4 || 1e3;
      dec = dec === void 0 ? 2 : dec;
      symbol = symbol || "";
      if (min4 < 0 || max4 < 0) {
        return symbol + 0;
      }
      var randValue = faker2.random.number({max: max4, min: min4});
      return symbol + (Math.round(randValue * Math.pow(10, dec)) / Math.pow(10, dec)).toFixed(dec);
    };
    self2.productAdjective = function() {
      return faker2.random.arrayElement(faker2.definitions.commerce.product_name.adjective);
    };
    self2.productMaterial = function() {
      return faker2.random.arrayElement(faker2.definitions.commerce.product_name.material);
    };
    self2.product = function() {
      return faker2.random.arrayElement(faker2.definitions.commerce.product_name.product);
    };
    return self2;
  };
  module["exports"] = Commerce;
});

// node_modules/faker/lib/system.js
var require_system2 = __commonJS((exports, module) => {
  function System(faker2) {
    this.fileName = function(ext, type) {
      var str = faker2.fake("{{random.words}}.{{system.fileExt}}");
      str = str.replace(/ /g, "_");
      str = str.replace(/\,/g, "_");
      str = str.replace(/\-/g, "_");
      str = str.replace(/\\/g, "_");
      str = str.replace(/\//g, "_");
      str = str.toLowerCase();
      return str;
    };
    this.commonFileName = function(ext, type) {
      var str = faker2.random.words() + "." + (ext || faker2.system.commonFileExt());
      str = str.replace(/ /g, "_");
      str = str.replace(/\,/g, "_");
      str = str.replace(/\-/g, "_");
      str = str.replace(/\\/g, "_");
      str = str.replace(/\//g, "_");
      str = str.toLowerCase();
      return str;
    };
    this.mimeType = function() {
      return faker2.random.arrayElement(Object.keys(faker2.definitions.system.mimeTypes));
    };
    this.commonFileType = function() {
      var types41 = ["video", "audio", "image", "text", "application"];
      return faker2.random.arrayElement(types41);
    };
    this.commonFileExt = function(type) {
      var types41 = [
        "application/pdf",
        "audio/mpeg",
        "audio/wav",
        "image/png",
        "image/jpeg",
        "image/gif",
        "video/mp4",
        "video/mpeg",
        "text/html"
      ];
      return faker2.system.fileExt(faker2.random.arrayElement(types41));
    };
    this.fileType = function() {
      var types41 = [];
      var mimes = faker2.definitions.system.mimeTypes;
      Object.keys(mimes).forEach(function(m) {
        var parts2 = m.split("/");
        if (types41.indexOf(parts2[0]) === -1) {
          types41.push(parts2[0]);
        }
      });
      return faker2.random.arrayElement(types41);
    };
    this.fileExt = function(mimeType) {
      var exts = [];
      var mimes = faker2.definitions.system.mimeTypes;
      if (typeof mimes[mimeType] === "object") {
        return faker2.random.arrayElement(mimes[mimeType].extensions);
      }
      Object.keys(mimes).forEach(function(m) {
        if (mimes[m].extensions instanceof Array) {
          mimes[m].extensions.forEach(function(ext) {
            exts.push(ext);
          });
        }
      });
      return faker2.random.arrayElement(exts);
    };
    this.directoryPath = function() {
    };
    this.filePath = function() {
    };
    this.semver = function() {
      return [
        faker2.random.number(9),
        faker2.random.number(9),
        faker2.random.number(9)
      ].join(".");
    };
  }
  module["exports"] = System;
});

// node_modules/faker/lib/index.js
var require_lib = __commonJS((exports, module) => {
  function Faker(opts) {
    var self2 = this;
    opts = opts || {};
    var locales = self2.locales || opts.locales || {};
    var locale2 = self2.locale || opts.locale || "en";
    var localeFallback = self2.localeFallback || opts.localeFallback || "en";
    self2.locales = locales;
    self2.locale = locale2;
    self2.localeFallback = localeFallback;
    self2.definitions = {};
    function bindAll(obj) {
      Object.keys(obj).forEach(function(meth) {
        if (typeof obj[meth] === "function") {
          obj[meth] = obj[meth].bind(obj);
        }
      });
      return obj;
    }
    var Fake = require_fake();
    self2.fake = new Fake(self2).fake;
    var Random = require_random();
    self2.random = bindAll(new Random(self2));
    var Helpers = require_helpers();
    self2.helpers = new Helpers(self2);
    var Name = require_name82();
    self2.name = bindAll(new Name(self2));
    var Address = require_address();
    self2.address = bindAll(new Address(self2));
    var Company = require_company();
    self2.company = bindAll(new Company(self2));
    var Finance = require_finance();
    self2.finance = bindAll(new Finance(self2));
    var Image = require_image();
    self2.image = bindAll(new Image(self2));
    var Lorem = require_lorem14();
    self2.lorem = bindAll(new Lorem(self2));
    var Hacker = require_hacker();
    self2.hacker = bindAll(new Hacker(self2));
    var Internet = require_internet();
    self2.internet = bindAll(new Internet(self2));
    var Database = require_database();
    self2.database = bindAll(new Database(self2));
    var Phone = require_phone_number36();
    self2.phone = bindAll(new Phone(self2));
    var _Date = require_date();
    self2.date = bindAll(new _Date(self2));
    var Commerce = require_commerce();
    self2.commerce = bindAll(new Commerce(self2));
    var System = require_system2();
    self2.system = bindAll(new System(self2));
    var _definitions = {
      name: ["first_name", "last_name", "prefix", "suffix", "title", "male_first_name", "female_first_name", "male_middle_name", "female_middle_name", "male_last_name", "female_last_name"],
      address: ["city_prefix", "city_suffix", "street_suffix", "county", "country", "country_code", "state", "state_abbr", "street_prefix", "postcode"],
      company: ["adjective", "noun", "descriptor", "bs_adjective", "bs_noun", "bs_verb", "suffix"],
      lorem: ["words"],
      hacker: ["abbreviation", "adjective", "noun", "verb", "ingverb"],
      phone_number: ["formats"],
      finance: ["account_type", "transaction_type", "currency", "iban"],
      internet: ["avatar_uri", "domain_suffix", "free_email", "example_email", "password"],
      commerce: ["color", "department", "product_name", "price", "categories"],
      database: ["collation", "column", "engine", "type"],
      system: ["mimeTypes"],
      date: ["month", "weekday"],
      title: "",
      separator: ""
    };
    Object.keys(_definitions).forEach(function(d) {
      if (typeof self2.definitions[d] === "undefined") {
        self2.definitions[d] = {};
      }
      if (typeof _definitions[d] === "string") {
        self2.definitions[d] = _definitions[d];
        return;
      }
      _definitions[d].forEach(function(p) {
        Object.defineProperty(self2.definitions[d], p, {
          get: function() {
            if (typeof self2.locales[self2.locale][d] === "undefined" || typeof self2.locales[self2.locale][d][p] === "undefined") {
              return self2.locales[localeFallback][d][p];
            } else {
              return self2.locales[self2.locale][d][p];
            }
          }
        });
      });
    });
  }
  Faker.prototype.seed = function(value) {
    var Random = require_random();
    this.seedValue = value;
    this.random = new Random(this, this.seedValue);
  };
  module["exports"] = Faker;
});

// node_modules/faker/lib/locales/az/address/country.js
var require_country = __commonJS((exports, module) => {
  module["exports"] = [
    "Akrotiri və Dekeliya",
    "Aland adaları",
    "Albaniya",
    "Almaniya",
    "Amerika Samoası",
    "Andorra",
    "Angilya",
    "Anqola",
    "Antiqua və Barbuda",
    "Argentina",
    "Aruba",
    "Avstraliya",
    "Avstriya",
    "Azərbaycan",
    "Baham adaları",
    "Banqladeş",
    "Barbados",
    "Belçika",
    "Beliz",
    "Belarus",
    "Benin",
    "Bermud adaları",
    "BƏƏ",
    "ABŞ",
    "Boliviya",
    "Bolqarıstan",
    "Bosniya və Herseqovina",
    "Botsvana",
    "Böyük Britaniya",
    "Braziliya",
    "Bruney",
    "Burkina-Faso",
    "Burundi",
    "Butan",
    "Bəhreyn",
    "Cersi",
    "Cəbəli-Tariq",
    "CAR",
    "Cənubi Sudan",
    "Cənubi Koreya",
    "Cibuti",
    "Çad",
    "Çexiya",
    "Monteneqro",
    "Çili",
    "ÇXR",
    "Danimarka",
    "Dominika",
    "Dominikan Respublikası",
    "Efiopiya",
    "Ekvador",
    "Ekvatorial Qvineya",
    "Eritreya",
    "Ermənistan",
    "Estoniya",
    "Əfqanıstan",
    "Əlcəzair",
    "Farer adaları",
    "Fələstin Dövləti",
    "Fici",
    "Kot-d’İvuar",
    "Filippin",
    "Finlandiya",
    "Folklend adaları",
    "Fransa",
    "Fransa Polineziyası",
    "Gernsi",
    "Gürcüstan",
    "Haiti",
    "Hindistan",
    "Honduras",
    "Honkonq",
    "Xorvatiya",
    "İndoneziya",
    "İordaniya",
    "İraq",
    "İran",
    "İrlandiya",
    "İslandiya",
    "İspaniya",
    "İsrail",
    "İsveç",
    "İsveçrə",
    "İtaliya",
    "Kabo-Verde",
    "Kamboca",
    "Kamerun",
    "Kanada",
    "Kayman adaları",
    "Keniya",
    "Kipr",
    "Kiribati",
    "Kokos adaları",
    "Kolumbiya",
    "Komor adaları",
    "Konqo Respublikası",
    "KDR",
    "Kosovo",
    "Kosta-Rika",
    "Kuba",
    "Kuk adaları",
    "Küveyt",
    "Qabon",
    "Qambiya",
    "Qana",
    "Qətər",
    "Qayana",
    "Qazaxıstan",
    "Qərbi Sahara",
    "Qırğızıstan",
    "Qrenada",
    "Qrenlandiya",
    "Quam",
    "Qvatemala",
    "Qvineya",
    "Qvineya-Bisau",
    "Laos",
    "Latviya",
    "Lesoto",
    "Liberiya",
    "Litva",
    "Livan",
    "Liviya",
    "Lixtenşteyn",
    "Lüksemburq",
    "Macarıstan",
    "Madaqaskar",
    "Makao",
    "Makedoniya",
    "Malavi",
    "Malayziya",
    "Maldiv adaları",
    "Mali",
    "Malta",
    "Marşall adaları",
    "Mavriki",
    "Mavritaniya",
    "Mayotta",
    "Meksika",
    "Men adası",
    "Mərakeş",
    "MAR",
    "Mikroneziya",
    "Milad adası",
    "Misir",
    "Myanma",
    "Moldova",
    "Monako",
    "Monqolustan",
    "Montserrat",
    "Mozambik",
    "Müqəddəs Yelena, Askenson və Tristan-da-Kunya adaları",
    "Namibiya",
    "Nauru",
    "Nepal",
    "Niderland",
    "Niderland Antil adaları",
    "Niger",
    "Nigeriya",
    "Nikaraqua",
    "Niue",
    "Norfolk adası",
    "Norveç",
    "Oman",
    "Özbəkistan",
    "Pakistan",
    "Palau",
    "Panama",
    "Papua-Yeni Qvineya",
    "Paraqvay",
    "Peru",
    "Pitkern adaları",
    "Polşa",
    "Portuqaliya",
    "Prednestroviya",
    "Puerto-Riko",
    "Ruanda",
    "Rumıniya",
    "Rusiya",
    "Salvador",
    "Samoa",
    "San-Marino",
    "San-Tome və Prinsipi",
    "Seneqal",
    "Sen-Bartelemi",
    "Sent-Kits və Nevis",
    "Sent-Lüsiya",
    "Sen-Marten",
    "Sen-Pyer və Mikelon",
    "Sent-Vinsent və Qrenadina",
    "Serbiya",
    "Seyşel adaları",
    "Səudiyyə Ərəbistanı",
    "Sinqapur",
    "Slovakiya",
    "Sloveniya",
    "Solomon adaları",
    "Somali",
    "Somalilend",
    "Sudan",
    "Surinam",
    "Suriya",
    "Svazilend",
    "Syerra-Leone",
    "Şərqi Timor",
    "Şimali Marian adaları",
    "Şpisbergen və Yan-Mayen",
    "Şri-Lanka",
    "Tacikistan",
    "Tanzaniya",
    "Tailand",
    "Çin Respublikası",
    "Törks və Kaykos adaları",
    "Tokelau",
    "Tonqa",
    "Toqo",
    "Trinidad və Tobaqo",
    "Tunis",
    "Tuvalu",
    "Türkiyə",
    "Türkmənistan",
    "Ukrayna",
    "Uollis və Futuna",
    "Uqanda",
    "Uruqvay",
    "Vanuatu",
    "Vatikan",
    "Venesuela",
    "Amerika Virgin adaları",
    "Britaniya Virgin adaları",
    "Vyetnam",
    "Yamayka",
    "Yaponiya",
    "Yeni Kaledoniya",
    "Yeni Zelandiya",
    "Yəmən",
    "Yunanıstan",
    "Zambiya",
    "Zimbabve"
  ];
});

// node_modules/faker/lib/locales/az/address/building_number.js
var require_building_number = __commonJS((exports, module) => {
  module["exports"] = [
    "###"
  ];
});

// node_modules/faker/lib/locales/az/address/street_suffix.js
var require_street_suffix = __commonJS((exports, module) => {
  module["exports"] = [
    "küç.",
    "küçəsi",
    "prospekti",
    "pr.",
    "sahəsi",
    "sh."
  ];
});

// node_modules/faker/lib/locales/az/address/secondary_address.js
var require_secondary_address = __commonJS((exports, module) => {
  module["exports"] = [
    "m. ###"
  ];
});

// node_modules/faker/lib/locales/az/address/postcode.js
var require_postcode = __commonJS((exports, module) => {
  module["exports"] = [
    "AZ####"
  ];
});

// node_modules/faker/lib/locales/az/address/state.js
var require_state = __commonJS((exports, module) => {
  module["exports"] = [];
});

// node_modules/faker/lib/locales/az/address/street_title.js
var require_street_title = __commonJS((exports, module) => {
  module["exports"] = [
    "Abbas Fətullayev",
    "Abbas Mirzə Şərifzadə",
    "Abbas Səhhət",
    "Abdulla Şaiq",
    "Afiyəddin Cəlilov",
    "Axundov",
    "Ağa Nemətulla",
    "Ağadadaş Qurbanov",
    "Akademik Həsən Əliyev",
    "Akademik Lətif İmanov",
    "Alı Mustafayev",
    "Almas İldırım",
    "Asəf Zeynallı",
    "Asif Əsədullayev",
    "Aşıq Alı",
    "Aşıq Ələsgər",
    "Azadlıq prospekti",
    "Bakıxanov",
    "Balababa Məcidov",
    "Balaəmi Dadaşov",
    "Behbud Şaxtantinski",
    "Bəkir Çobanzadə",
    "Bəsti Bağırova",
    "Bəşir Səfəroğlu",
    "Böyük Qala",
    "Cabir Əliyev",
    "Camal Hacıəliyev",
    "Cavadxan",
    "Cavanşir",
    "Ceyhun Səlimov",
    "Ceyhunbəy Hacıbəyli",
    "Cəbiyev",
    "Cəfər Xəndan",
    "Cəfər Cabbarlı",
    "Cəlal Qurbanov",
    "Cəlil Məmmədquluzadə",
    "Çingiz Mustafayev",
    "Çobanzadə",
    "Dadaş Bünyadzadə",
    "Dağlı Yunus",
    "Dilarə Əliyeva",
    "Elçin Əzimov",
    "Eldar və Abdulla Əlibəyovlar",
    "Elxan Həsənov",
    "Elşən Mehdiyev",
    "Elşən Süleymanov",
    "Etibar Bəkirov",
    "Əbdüləzəl Dəmirçizadə",
    "Əbdülhəsən Anaplı",
    "Əbdülkərim Əlizadə",
    "Əhməd bəy Ağaoğlu",
    "Əhməd Cavad",
    "Əhməd Cəmil",
    "Əhməd Mehbalıyev",
    "Əhməd Rəcəbli",
    "Əjdər Xanbabayev",
    "Əkrəm Cəfərov",
    "Ələsgər Qayıbov",
    "Əliağa Vahid",
    "Əli Bəy Hüseynzadə",
    "Əlimərdan bəy Topçubaşov",
    "Əliyar Əliyev",
    "Əlövsət Abdulrəhimov",
    "Əlövsət Quliyev",
    "Əmir Bağırov",
    "Əsəd Əhmədov",
    "Əşrəf Yunusov",
    "Əzim Əzimzadə",
    "Əziz Əliyev",
    "Heybət Heybətov",
    "Həqiqət Rzayeva",
    "Həmid Araslı",
    "Hənifə Ələsgərova",
    "Hərbçilər",
    "Həsənoğu",
    "Həsən Seyidbəyli",
    "Hətəm Allahverdiyev",
    "Həzi Aslanov",
    "Hüsü Hacıyev",
    "Hüseynqulu Sarabski",
    "Fətəli xan Xoyski",
    "Fəzail Bayramov",
    "Fikrət Əmirov",
    "Fuad İbrahimbəyov",
    "Fuad Yusifov",
    "General Əliağa Şıxlinski",
    "Gülayə Qədirbəyova",
    "Gənclik",
    "Xaqani",
    "Xan Şuşinski",
    "Xanlar",
    "Xudu Məmmədov",
    "İbrahimpaşa Dadaşov",
    "İdris Süleymanov",
    "İlqar Abbasov",
    "İlqar İsmayılov",
    "İmran Qasımov",
    "İnqilab İsmayılov",
    "İsfəndiyar Zülalov",
    "İslam Abışov",
    "İslam Səfərli",
    "İsmayıl bəy Qutqaşınlı",
    "İsmayıl Mirzəgülov",
    "İstiqlaliyyət",
    "28 May",
    "İsgəndərov",
    "İvan Turgenev",
    "İzmir",
    "İzzət Həmidov",
    "İzzət Orucova",
    "Kamal Rəhimov",
    "Kazım Kazımzadə",
    "Kazımağa Kərimov",
    "Kərəm İsmayılov",
    "Kiçik Qala",
    "Koroğlu Rəhimov",
    "Qaçaq Nəbi",
    "Qarabağ",
    "Qədirbəyov",
    "Qəzənfər Musabəyov",
    "Qəzənfər Vəliyev",
    "Leyla Məmmədbəyova",
    "Mahmud İbrahimov",
    "Malik Məmmədov",
    "Mehdi Abbasov",
    "Mehdi Mehdizadə",
    "Məhəmməd Əmin Rəsulzadə",
    "Məhəmməd Hadi",
    "Məhəmməd Xiyabani",
    "Məhəmməd ibn Hinduşah Naxçıvani",
    "Məhsəti Gəncəvi",
    "Məmmədyarov",
    "Mərdanov qardaşları",
    "Mətləb Ağayev",
    "Məşədi Hilal",
    "Məzahir Rüstəmov",
    "Mikayıl Müşviq",
    "Mingəçevir",
    "Mirəli Qaşqay",
    "Mirəli Seyidov",
    "Mirzağa Əliyev",
    "Mirzə İbrahimov",
    "Mirzə Mənsur",
    "Mirzə Mustafayev",
    "Murtuza Muxtarov",
    "Mustafa Topçubaşov",
    "Müqtədir Aydınbəyov",
    "Müslüm Maqomayev",
    "Müzəffər Həsənov",
    "Nabat Aşurbəyova",
    "Naxçıvani",
    "Naximov",
    "Nazim İsmaylov",
    "Neapol",
    "Neftçi Qurban Abbasov",
    "Neftçilər prospekti",
    "Nəcəfbəy Vəzirov",
    "Nəcəfqulu Rəfiyev",
    "Nəriman Nərimanov",
    "Nəsirəddin Tusi",
    "Nigar Rəfibəyli",
    "Niyazi",
    "Nizami",
    "Nizami Abdullayev",
    "Nobel prospekti",
    "Novruz",
    "Novruzov qardaşları",
    "Oqtay Vəliyev",
    "Parlament",
    "Puşkin",
    "Rafiq Ağayev",
    "Ramiz Qəmbərov",
    "Rəşid Behbudov",
    "Rəşid Məcidov",
    "Ruhulla Axundov",
    "Ruslan Allahverdiyev",
    "Rüstəm Rüstəmov",
    "Tahir Bağırov",
    "Tarzan Hacı Məmmədov",
    "Tbilisi prospekti",
    "Təbriz (Bakı)",
    "Təbriz Xəlilbəyli",
    "Tofiq Məmmədov",
    "Tolstoy",
    "Sabit Orucov",
    "Sabit Rəhman",
    "Sahib Hümmətov",
    "Salatın Əsgərova",
    "Sarayevo",
    "Seyid Əzim Şirvani",
    "Seyid Şuşinski",
    "Seyidov",
    "Səməd bəy Mehmandarov",
    "Səməd Vurğun",
    "Səttar Bəhlulzadə",
    "Sona xanım Vəlixanlı",
    "Sübhi Salayev",
    "Süleyman Əhmədov",
    "Süleyman Rəhimov",
    "Süleyman Rüstəm",
    "Süleyman Sani Axundov",
    "Süleyman Vəzirov",
    "Şahin Səmədov",
    "Şamil Əzizbəyov",
    "Şamil Kamilov",
    "Şeyx Şamil",
    "Şəfayət Mehdiyev",
    "Şəmsi Bədəlbəyli",
    "Şirin Mirzəyev",
    "Şıxəli Qurbanov",
    "Şövkət Ələkbərova",
    "Ülvi Bünyadzadə",
    "Üzeyir Hacıbəyov",
    "Vasif Əliyev",
    "Vəli Məmmədov",
    "Vladislav Plotnikov",
    "Vüqar Quliyev",
    "Vunq Tau",
    "Yaqub Əliyev",
    "Yaşar Abdullayev",
    "Yaşar Əliyev",
    "Yavər Əliyev",
    "Yesenin",
    "Yəhya Hüseynov",
    "Yılmaz Axundzadə",
    "Yüsif Eyvazov",
    "Yusif Qasımov",
    "Yusif Məmmədəliyev",
    "Yusif Səfərov",
    "Yusif Vəzir Çəmənzəminli",
    "Zahid Əliyev",
    "Zahid Xəlilov",
    "Zaur Kərimov",
    "Zavod",
    "Zərgərpalan"
  ];
});

// node_modules/faker/lib/locales/az/address/city_name.js
var require_city_name = __commonJS((exports, module) => {
  module["exports"] = [
    "Ağcabədi",
    "Ağdam",
    "Ağdaş",
    "Ağdərə",
    "Ağstafa",
    "Ağsu",
    "Astara",
    "Bakı",
    "Balakən",
    "Beyləqan",
    "Bərdə",
    "Biləsuvar",
    "Cəbrayıl",
    "Cəlilabad",
    "Culfa",
    "Daşkəsən",
    "Dəliməmmədli",
    "Füzuli",
    "Gədəbəy",
    "Gəncə",
    "Goranboy",
    "Göyçay",
    "Göygöl",
    "Göytəpə",
    "Hacıqabul",
    "Horadiz",
    "Xaçmaz",
    "Xankəndi",
    "Xocalı",
    "Xocavənd",
    "Xırdalan",
    "Xızı",
    "Xudat",
    "İmişli",
    "İsmayıllı",
    "Kəlbəcər",
    "Kürdəmir",
    "Qax",
    "Qazax",
    "Qəbələ",
    "Qobustan",
    "Qovlar",
    "Quba",
    "Qubadlı",
    "Qusar",
    "Laçın",
    "Lerik",
    "Lənkəran",
    "Liman",
    "Masallı",
    "Mingəçevir",
    "Naftalan",
    "Naxçıvan (şəhər)",
    "Neftçala",
    "Oğuz",
    "Ordubad",
    "Saatlı",
    "Sabirabad",
    "Salyan",
    "Samux",
    "Siyəzən",
    "Sumqayıt",
    "Şabran",
    "Şahbuz",
    "Şamaxı",
    "Şəki",
    "Şəmkir",
    "Şərur",
    "Şirvan",
    "Şuşa",
    "Tərtər",
    "Tovuz",
    "Ucar",
    "Yardımlı",
    "Yevlax",
    "Zaqatala",
    "Zəngilan",
    "Zərdab"
  ];
});

// node_modules/faker/lib/locales/az/address/city.js
var require_city = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Address.city_name}"
  ];
});

// node_modules/faker/lib/locales/az/address/street_name.js
var require_street_name = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_suffix} #{Address.street_title}",
    "#{Address.street_title} #{street_suffix}"
  ];
});

// node_modules/faker/lib/locales/az/address/street_address.js
var require_street_address = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_name}, #{building_number}"
  ];
});

// node_modules/faker/lib/locales/az/address/default_country.js
var require_default_country = __commonJS((exports, module) => {
  module["exports"] = [
    "Azərbaycan"
  ];
});

// node_modules/faker/lib/locales/az/address/index.js
var require_address2 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.country = require_country();
  address.building_number = require_building_number();
  address.street_suffix = require_street_suffix();
  address.secondary_address = require_secondary_address();
  address.postcode = require_postcode();
  address.state = require_state();
  address.street_title = require_street_title();
  address.city_name = require_city_name();
  address.city = require_city();
  address.street_name = require_street_name();
  address.street_address = require_street_address();
  address.default_country = require_default_country();
});

// node_modules/faker/lib/locales/az/internet/free_email.js
var require_free_email = __commonJS((exports, module) => {
  module["exports"] = [
    "box.az",
    "mail.az",
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ];
});

// node_modules/faker/lib/locales/az/internet/domain_suffix.js
var require_domain_suffix = __commonJS((exports, module) => {
  module["exports"] = [
    "com",
    "az",
    "com.az",
    "info",
    "net",
    "org"
  ];
});

// node_modules/faker/lib/locales/az/internet/index.js
var require_internet2 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.free_email = require_free_email();
  internet.domain_suffix = require_domain_suffix();
});

// node_modules/faker/lib/locales/az/name/male_first_name.js
var require_male_first_name = __commonJS((exports, module) => {
  module["exports"] = [
    "Anar",
    "Amid",
    "Afəl",
    "Abbas",
    "Abdulla",
    "Adil",
    "Akif",
    "Aqil",
    "Bəhram",
    "Nurlan",
    "Rafiq",
    "Tərlan",
    "Zaur",
    "Emin",
    "Emil",
    "Kamran",
    "Elnur",
    "Natiq",
    "Rəşad",
    "Rəşid",
    "Tahir",
    "Əhməd",
    "Zahir",
    "İlham",
    "İlqar",
    "Nahid",
    "Nihad",
    "Faiq",
    "İxtiyar",
    "Şəhriyar",
    "Şaiq",
    "Bəxtiyar",
    "Bəhruz",
    "Tunar",
    "Nadir"
  ];
});

// node_modules/faker/lib/locales/az/name/male_last_name.js
var require_male_last_name = __commonJS((exports, module) => {
  module["exports"] = [
    "Əhmədov",
    "Ələkbərov",
    "Əliyev",
    "Vəliyev",
    "Soltanov",
    "Quliyev",
    "Məmmədov",
    "Xəlilov",
    "Nəzərov",
    "Rəhimov"
  ];
});

// node_modules/faker/lib/locales/az/name/female_first_name.js
var require_female_first_name = __commonJS((exports, module) => {
  module["exports"] = [
    "Anna",
    "Adeliya",
    "Afaq",
    "Afət",
    "Afərim",
    "Aidə",
    "Aygün",
    "Aynur",
    "Alsu",
    "Ayan",
    "Aytən",
    "Aygül",
    "Aydan",
    "Aylin",
    "Bahar",
    "Banu",
    "Bəyaz",
    "Billurə",
    "Cansu",
    "Ceyla",
    "Damla",
    "Dəniz",
    "Diana",
    "Dilarə",
    "Ella",
    "Elza",
    "Elyanora",
    "Ellada",
    "Elvira",
    "Elnarə",
    "Esmira",
    "Estella",
    "Fatimə",
    "Fəxriyyə",
    "Fərəh",
    "Fərqanə",
    "Fidan",
    "Firuzə",
    "Gövhər",
    "Günay",
    "Gülay",
    "Gülçin",
    "Gülər",
    "Gülsüm",
    "Humay",
    "Hüriyə",
    "Hülya",
    "Jalə",
    "Jasmin",
    "Kübra",
    "Ləman",
    "Lamiyə",
    "Lalə",
    "Liliya",
    "Laura",
    "Leyla",
    "Maya",
    "Mehriban",
    "Mələk",
    "Nuray",
    "Nurgün",
    "Nərgiz",
    "Nigar",
    "Ofelya",
    "Pəri",
    "Röya",
    "Səbinə",
    "Selcan",
    "Tansu",
    "Tuba",
    "Ülviyyə",
    "Ulduz",
    "Ülkər"
  ];
});

// node_modules/faker/lib/locales/az/name/female_last_name.js
var require_female_last_name = __commonJS((exports, module) => {
  module["exports"] = [
    "Qasımova",
    "Əfəndiyeva",
    "Soltanova",
    "Abdullayeva",
    "Rəşidova",
    "Ələkbərova",
    "Əliyeva",
    "Tahirova",
    "Seyidova",
    "Vəsiyeva"
  ];
});

// node_modules/faker/lib/locales/az/name/prefix.js
var require_prefix2 = __commonJS((exports, module) => {
  module["exports"] = [];
});

// node_modules/faker/lib/locales/az/name/suffix.js
var require_suffix2 = __commonJS((exports, module) => {
  module["exports"] = [];
});

// node_modules/faker/lib/locales/az/name/name.js
var require_name3 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{male_first_name}",
    "#{male_last_name} #{male_first_name}",
    "#{male_first_name} #{male_last_name}",
    "#{female_first_name}",
    "#{female_first_name} #{female_last_name}",
    "#{female_last_name} #{female_first_name}"
  ];
});

// node_modules/faker/lib/locales/az/name/index.js
var require_name2 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.male_first_name = require_male_first_name();
  name2.male_last_name = require_male_last_name();
  name2.female_first_name = require_female_first_name();
  name2.female_last_name = require_female_last_name();
  name2.prefix = require_prefix2();
  name2.suffix = require_suffix2();
  name2.name = require_name3();
});

// node_modules/faker/lib/locales/az/phone_number/formats.js
var require_formats = __commonJS((exports, module) => {
  module["exports"] = [
    "(9##)###-##-##"
  ];
});

// node_modules/faker/lib/locales/az/phone_number/index.js
var require_phone_number = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats();
});

// node_modules/faker/lib/locales/az/commerce/color.js
var require_color = __commonJS((exports, module) => {
  module["exports"] = [
    "ala",
    "açıq bənövşəyi",
    "ağ",
    "mavi",
    "boz",
    "bənövşəyi",
    "göy rəng",
    "gümüşü",
    "kardinal",
    "narıncı",
    "qara",
    "qırmızı",
    "qəhvəyi",
    "tünd göy",
    "tünd qırmızı",
    "xlorofil",
    "yaşıl",
    "çəhrayı"
  ];
});

// node_modules/faker/lib/locales/az/commerce/department.js
var require_department = __commonJS((exports, module) => {
  module["exports"] = [
    "Kitablar",
    "Filmlər",
    "musiqi",
    "oyunlar",
    "Elektronika",
    "Kompyuterlər",
    "Ev",
    "садинструмент",
    "Səhiyyə",
    "gözəllik",
    "Oyuncaqlar",
    "uşaq üçün",
    "Geyim",
    "Ayyaqqabı",
    "bəzək",
    "İdman",
    "turizm",
    "Avtomobil"
  ];
});

// node_modules/faker/lib/locales/az/commerce/product_name.js
var require_product_name = __commonJS((exports, module) => {
  module["exports"] = {
    adjective: [
      "Balaca",
      "Ergonomik",
      "Kobud",
      "İntellektual",
      "Möhtəşəm",
      "İnanılmaz",
      "Fantastik",
      "Əlverişli",
      "Parlaq",
      "Mükəmməl"
    ],
    material: [
      "Polad",
      "Ağac",
      "Beton",
      "Plastik",
      "Pambıq",
      "Qranit",
      "Rezin"
    ],
    product: [
      "Stul",
      "Avtomobil",
      "Kompyuter",
      "Beret",
      "Kulon",
      "Stol",
      "Sviter",
      "Kəmər"
    ]
  };
});

// node_modules/faker/lib/locales/az/commerce/index.js
var require_commerce2 = __commonJS((exports, module) => {
  var commerce = {};
  module["exports"] = commerce;
  commerce.color = require_color();
  commerce.department = require_department();
  commerce.product_name = require_product_name();
});

// node_modules/faker/lib/locales/az/company/prefix.js
var require_prefix = __commonJS((exports, module) => {
  module["exports"] = [
    "ASC",
    "MMC",
    "QSC"
  ];
});

// node_modules/faker/lib/locales/az/company/suffix.js
var require_suffix = __commonJS((exports, module) => {
  module["exports"] = [];
});

// node_modules/faker/lib/locales/az/company/name.js
var require_name = __commonJS((exports, module) => {
  module["exports"] = [
    "#{prefix} #{Name.female_first_name}",
    "#{prefix} #{Name.male_first_name}",
    "#{prefix} #{Name.male_last_name}",
    "#{prefix} #{suffix}#{suffix}",
    "#{prefix} #{suffix}#{suffix}#{suffix}",
    "#{prefix} #{Address.city_name}#{suffix}",
    "#{prefix} #{Address.city_name}#{suffix}#{suffix}",
    "#{prefix} #{Address.city_name}#{suffix}#{suffix}#{suffix}"
  ];
});

// node_modules/faker/lib/locales/az/company/index.js
var require_company2 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.prefix = require_prefix();
  company.suffix = require_suffix();
  company.name = require_name();
});

// node_modules/faker/lib/locales/az/date/month.js
var require_month = __commonJS((exports, module) => {
  module["exports"] = {
    wide: [
      "yanvar",
      "fevral",
      "mart",
      "aprel",
      "may",
      "iyun",
      "iyul",
      "avqust",
      "sentyabr",
      "oktyabr",
      "noyabr",
      "dekabr"
    ],
    wide_context: [
      "января",
      "февраля",
      "марта",
      "апреля",
      "мая",
      "июня",
      "июля",
      "августа",
      "сентября",
      "октября",
      "ноября",
      "декабря"
    ],
    abbr: [
      "янв.",
      "февр.",
      "март",
      "апр.",
      "май",
      "июнь",
      "июль",
      "авг.",
      "сент.",
      "окт.",
      "нояб.",
      "дек."
    ],
    abbr_context: [
      "янв.",
      "февр.",
      "марта",
      "апр.",
      "мая",
      "июня",
      "июля",
      "авг.",
      "сент.",
      "окт.",
      "нояб.",
      "дек."
    ]
  };
});

// node_modules/faker/lib/locales/az/date/weekday.js
var require_weekday = __commonJS((exports, module) => {
  module["exports"] = {
    wide: [
      "Bazar",
      "Bazar ertəsi",
      "Çərşənbə axşamı",
      "Çərşənbə",
      "Cümə axşamı",
      "Cümə",
      "Şənbə"
    ],
    wide_context: [
      "воскресенье",
      "понедельник",
      "вторник",
      "среда",
      "четверг",
      "пятница",
      "суббота"
    ],
    abbr: [
      "Ba",
      "BE",
      "ÇA",
      "Çə",
      "CA",
      "Cü",
      "Şə"
    ],
    abbr_context: [
      "вс",
      "пн",
      "вт",
      "ср",
      "чт",
      "пт",
      "сб"
    ]
  };
});

// node_modules/faker/lib/locales/az/date/index.js
var require_date2 = __commonJS((exports, module) => {
  var date2 = {};
  module["exports"] = date2;
  date2.month = require_month();
  date2.weekday = require_weekday();
});

// node_modules/faker/lib/locales/az/index.js
var require_az = __commonJS((exports, module) => {
  var az = {};
  module["exports"] = az;
  az.title = "Azerbaijani";
  az.separator = " və ";
  az.address = require_address2();
  az.internet = require_internet2();
  az.name = require_name2();
  az.phone_number = require_phone_number();
  az.commerce = require_commerce2();
  az.company = require_company2();
  az.date = require_date2();
});

// node_modules/faker/lib/locales/cz/address/country.js
var require_country2 = __commonJS((exports, module) => {
  module["exports"] = [
    "Afghánistán",
    "Albánie",
    "Alžírsko",
    "Andorra",
    "Angola",
    "Antigua a Barbuda",
    "Argentina",
    "Arménie",
    "Austrálie",
    "Ázerbájdžán",
    "Bahamy",
    "Bahrajn",
    "Bangladéš",
    "Barbados",
    "Belgie",
    "Belize",
    "Benin",
    "Bělorusko",
    "Bhútán",
    "Bolívie",
    "Bosna a Hercegovina",
    "Botswana",
    "Brazílie",
    "Brunej",
    "Bulharsko",
    "Burkina Faso",
    "Burundi",
    "Čad",
    "Černá Hora",
    "Česko",
    "Čína",
    "Dánsko",
    "DR Kongo",
    "Dominika",
    "Dominik",
    "Džibutsko",
    "Egypt",
    "Ekvádor",
    "Eritrea",
    "Estonsko",
    "Etiopie",
    "Fidži",
    "Filipíny",
    "Finsko",
    "Francie",
    "Gabon",
    "Gambie",
    "Gruzie",
    "Německo",
    "Ghana",
    "Grenada",
    "Guatemala",
    "Guinea",
    "Guinea-Bissau",
    "Guyana",
    "Haiti",
    "Honduras",
    "Chile",
    "Chorvatsko",
    "Indie",
    "Indonésie",
    "Irák",
    "Írán",
    "Irsko",
    "Island",
    "Itálie",
    "Izrael",
    "Jamajka",
    "Japonsko",
    "Jemen",
    "Jihoaf",
    "Jižní Korea",
    "Jižní Súdán",
    "Jordánsko",
    "Kambodža",
    "Kamerun",
    "Kanada",
    "Kapverdy",
    "Katar",
    "Kazachstán",
    "Keňa",
    "Kiribati",
    "Kolumbie",
    "Komory",
    "Kongo",
    "Kostarika",
    "Kuba",
    "Kuvajt",
    "Kypr",
    "Kyrgyzstán",
    "Laos",
    "Lesotho",
    "Libanon",
    "Libérie",
    "Libye",
    "Lichtenštejnsko",
    "Litva",
    "Lotyšsko",
    "Lucembursko",
    "Madagaskar",
    "Maďarsko",
    "Makedonie",
    "Malajsie",
    "Malawi",
    "Maledivy",
    "Mali",
    "Malta",
    "Maroko",
    "Marshallovy ostrovy",
    "Mauritánie",
    "Mauricius",
    "Mexiko",
    "Mikronésie",
    "Moldavsko",
    "Monako",
    "Mongolsko",
    "Mosambik",
    "Myanmar (Barma)",
    "Namibie",
    "Nauru",
    "Nepál",
    "Niger",
    "Nigérie",
    "Nikaragua",
    "Nizozemsko",
    "Norsko",
    "Nový Zéland",
    "Omán",
    "Pákistán",
    "Palau",
    "Palestina",
    "Panama",
    "Papua-Nová Guinea",
    "Paraguay",
    "Peru",
    "Pobřeží slonoviny",
    "Polsko",
    "Portugalsko",
    "Rakousko",
    "Rovníková Guinea",
    "Rumunsko",
    "Rusko",
    "Rwanda",
    "Řecko",
    "Salvador",
    "Samoa",
    "San Marino",
    "Saúdská Arábie",
    "Senegal",
    "Severní Korea",
    "Seychely",
    "Sierra Leone",
    "Singapur",
    "Slovensko",
    "Slovinsko",
    "Srbsko",
    "Středo",
    "Somálsko",
    "Surinam",
    "Súdán",
    "Svatá Lucie",
    "Svatý Kryštof a Nevis",
    "Svatý Tomáš a Princův ostrov",
    "Svatý Vincenc a Grenadiny",
    "Svazijsko",
    "Spojené arabské emiráty",
    "Spojené království",
    "Spojené státy americké",
    "Sýrie",
    "Šalamounovy ostrovy",
    "Španělsko",
    "Srí Lanka",
    "Švédsko",
    "Švýcarsko",
    "Tádžikistán",
    "Tanzanie",
    "Thajsko",
    "Togo",
    "Tonga",
    "Trinidad a Tobago",
    "Tunisko",
    "Turecko",
    "Turkmenistán",
    "Tuvalu",
    "Uganda",
    "Ukrajina",
    "Uruguay",
    "Uzbekistán",
    "Vanuatu",
    "Vatikán",
    "Venezuela",
    "Vietnam",
    "Východní Timor",
    "Zambie",
    "Zimbabwe"
  ];
});

// node_modules/faker/lib/locales/cz/address/building_number.js
var require_building_number2 = __commonJS((exports, module) => {
  module["exports"] = [
    "#",
    "##",
    "###"
  ];
});

// node_modules/faker/lib/locales/cz/address/secondary_address.js
var require_secondary_address2 = __commonJS((exports, module) => {
  module["exports"] = [
    "Apt. ###",
    "Suite ###"
  ];
});

// node_modules/faker/lib/locales/cz/address/postcode.js
var require_postcode2 = __commonJS((exports, module) => {
  module["exports"] = [
    "#####",
    "### ##",
    "###-##"
  ];
});

// node_modules/faker/lib/locales/cz/address/state.js
var require_state2 = __commonJS((exports, module) => {
  module["exports"] = [];
});

// node_modules/faker/lib/locales/cz/address/state_abbr.js
var require_state_abbr = __commonJS((exports, module) => {
  module["exports"] = [];
});

// node_modules/faker/lib/locales/cz/address/time_zone.js
var require_time_zone = __commonJS((exports, module) => {
  module["exports"] = [
    "Pacific/Midway",
    "Pacific/Pago_Pago",
    "Pacific/Honolulu",
    "America/Juneau",
    "America/Los_Angeles",
    "America/Tijuana",
    "America/Denver",
    "America/Phoenix",
    "America/Chihuahua",
    "America/Mazatlan",
    "America/Chicago",
    "America/Regina",
    "America/Mexico_City",
    "America/Mexico_City",
    "America/Monterrey",
    "America/Guatemala",
    "America/New_York",
    "America/Indiana/Indianapolis",
    "America/Bogota",
    "America/Lima",
    "America/Lima",
    "America/Halifax",
    "America/Caracas",
    "America/La_Paz",
    "America/Santiago",
    "America/St_Johns",
    "America/Sao_Paulo",
    "America/Argentina/Buenos_Aires",
    "America/Guyana",
    "America/Godthab",
    "Atlantic/South_Georgia",
    "Atlantic/Azores",
    "Atlantic/Cape_Verde",
    "Europe/Dublin",
    "Europe/London",
    "Europe/Lisbon",
    "Europe/London",
    "Africa/Casablanca",
    "Africa/Monrovia",
    "Etc/UTC",
    "Europe/Belgrade",
    "Europe/Bratislava",
    "Europe/Budapest",
    "Europe/Ljubljana",
    "Europe/Prague",
    "Europe/Sarajevo",
    "Europe/Skopje",
    "Europe/Warsaw",
    "Europe/Zagreb",
    "Europe/Brussels",
    "Europe/Copenhagen",
    "Europe/Madrid",
    "Europe/Paris",
    "Europe/Amsterdam",
    "Europe/Berlin",
    "Europe/Berlin",
    "Europe/Rome",
    "Europe/Stockholm",
    "Europe/Vienna",
    "Africa/Algiers",
    "Europe/Bucharest",
    "Africa/Cairo",
    "Europe/Helsinki",
    "Europe/Kiev",
    "Europe/Riga",
    "Europe/Sofia",
    "Europe/Tallinn",
    "Europe/Vilnius",
    "Europe/Athens",
    "Europe/Istanbul",
    "Europe/Minsk",
    "Asia/Jerusalem",
    "Africa/Harare",
    "Africa/Johannesburg",
    "Europe/Moscow",
    "Europe/Moscow",
    "Europe/Moscow",
    "Asia/Kuwait",
    "Asia/Riyadh",
    "Africa/Nairobi",
    "Asia/Baghdad",
    "Asia/Tehran",
    "Asia/Muscat",
    "Asia/Muscat",
    "Asia/Baku",
    "Asia/Tbilisi",
    "Asia/Yerevan",
    "Asia/Kabul",
    "Asia/Yekaterinburg",
    "Asia/Karachi",
    "Asia/Karachi",
    "Asia/Tashkent",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kathmandu",
    "Asia/Dhaka",
    "Asia/Dhaka",
    "Asia/Colombo",
    "Asia/Almaty",
    "Asia/Novosibirsk",
    "Asia/Rangoon",
    "Asia/Bangkok",
    "Asia/Bangkok",
    "Asia/Jakarta",
    "Asia/Krasnoyarsk",
    "Asia/Shanghai",
    "Asia/Chongqing",
    "Asia/Hong_Kong",
    "Asia/Urumqi",
    "Asia/Kuala_Lumpur",
    "Asia/Singapore",
    "Asia/Taipei",
    "Australia/Perth",
    "Asia/Irkutsk",
    "Asia/Ulaanbaatar",
    "Asia/Seoul",
    "Asia/Tokyo",
    "Asia/Tokyo",
    "Asia/Tokyo",
    "Asia/Yakutsk",
    "Australia/Darwin",
    "Australia/Adelaide",
    "Australia/Melbourne",
    "Australia/Melbourne",
    "Australia/Sydney",
    "Australia/Brisbane",
    "Australia/Hobart",
    "Asia/Vladivostok",
    "Pacific/Guam",
    "Pacific/Port_Moresby",
    "Asia/Magadan",
    "Asia/Magadan",
    "Pacific/Noumea",
    "Pacific/Fiji",
    "Asia/Kamchatka",
    "Pacific/Majuro",
    "Pacific/Auckland",
    "Pacific/Auckland",
    "Pacific/Tongatapu",
    "Pacific/Fakaofo",
    "Pacific/Apia"
  ];
});

// node_modules/faker/lib/locales/cz/address/city_name.js
var require_city_name2 = __commonJS((exports, module) => {
  module["exports"] = [
    "Abertamy",
    "Adamov",
    "Andělská Hora",
    "Aš",
    "Bakov nad Jizerou",
    "Bavorov",
    "Bechyně",
    "Bečov nad Teplou",
    "Bělá nad Radbuzou",
    "Bělá pod Bezdězem",
    "Benátky nad Jizerou",
    "Benešov",
    "Benešov nad Ploučnicí",
    "Beroun",
    "Bezdružice",
    "Bílina",
    "Bílovec",
    "Blansko",
    "Blatná",
    "Blovice",
    "Blšany",
    "Bochov",
    "Bohumín",
    "Bohušovice nad Ohří",
    "Bojkovice",
    "Bor",
    "Borohrádek",
    "Borovany",
    "Boskovice",
    "Boží Dar",
    "Brandýs nad Labem-Stará Boleslav",
    "Brandýs nad Orlicí",
    "Brno",
    "Broumov",
    "Brtnice",
    "Brumov-Bylnice",
    "Bruntál",
    "Brušperk",
    "Břeclav",
    "Březnice",
    "Březová",
    "Březová nad Svitavou",
    "Břidličná",
    "Bučovice",
    "Budišov nad Budišovkou",
    "Budyně nad Ohří",
    "Buštěhrad",
    "Bystré",
    "Bystřice",
    "Bystřice nad Pernštejnem",
    "Bystřice pod Hostýnem",
    "Bzenec",
    "Chabařovice",
    "Cheb",
    "Chlumec",
    "Chlumec nad Cidlinou",
    "Choceň",
    "Chodov",
    "Chomutov",
    "Chotěboř",
    "Chrast",
    "Chrastava",
    "Chropyně",
    "Chrudim",
    "Chřibská",
    "Chvaletice",
    "Chýnov",
    "Chyše",
    "Cvikov",
    "Čáslav",
    "Čelákovice",
    "Černošice",
    "Černošín",
    "Černovice",
    "Červená Řečice",
    "Červený Kostelec",
    "Česká Kamenice",
    "Česká Lípa",
    "Česká Skalice",
    "Česká Třebová",
    "České Budějovice",
    "České Velenice",
    "Český Brod",
    "Český Dub",
    "Český Krumlov",
    "Český Těšín",
    "Dačice",
    "Dašice",
    "Děčín",
    "Desná",
    "Deštná",
    "Dobrovice",
    "Dobruška",
    "Dobřany",
    "Dobřichovice",
    "Dobříš",
    "Doksy",
    "Dolní Benešov",
    "Dolní Bousov",
    "Dolní Kounice",
    "Dolní Poustevna",
    "Domažlice",
    "Dubá",
    "Dubí",
    "Dubňany",
    "Duchcov",
    "Dvůr Králové nad Labem",
    "Františkovy Lázně",
    "Frenštát pod Radhoštěm",
    "Frýdek-Místek",
    "Frýdlant",
    "Frýdlant nad Ostravicí",
    "Fryšták",
    "Fulnek",
    "Golčův Jeníkov",
    "Habartov",
    "Habry",
    "Hanušovice",
    "Harrachov",
    "Hartmanice",
    "Havířov",
    "Havlíčkův Brod",
    "Hejnice",
    "Heřmanův Městec",
    "Hlinsko",
    "Hluboká nad Vltavou",
    "Hlučín",
    "Hluk",
    "Hodkovice nad Mohelkou",
    "Hodonín",
    "Holešov",
    "Holice",
    "Holýšov",
    "Hora Svaté Kateřiny",
    "Horažďovice",
    "Horní Benešov",
    "Horní Blatná",
    "Horní Bříza",
    "Horní Cerekev",
    "Horní Jelení",
    "Horní Jiřetín",
    "Horní Planá",
    "Horní Slavkov",
    "Horšovský Týn",
    "Hořice",
    "Hořovice",
    "Hostinné",
    "Hostivice",
    "Hostomice",
    "Hostouň",
    "Hoštka",
    "Hradec Králové",
    "Hradec nad Moravicí",
    "Hrádek",
    "Hrádek nad Nisou",
    "Hranice (okres Cheb)",
    "Hranice (okres Přerov)",
    "Hrob",
    "Hrochův Týnec",
    "Hronov",
    "Hrotovice",
    "Hroznětín",
    "Hrušovany nad Jevišovkou",
    "Hulín",
    "Humpolec",
    "Husinec",
    "Hustopeče",
    "Ivančice",
    "Ivanovice na Hané",
    "Jablonec nad Jizerou",
    "Jablonec nad Nisou",
    "Jablonné nad Orlicí",
    "Jablonné v Podještědí",
    "Jablunkov",
    "Jáchymov",
    "Janov",
    "Janovice nad Úhlavou",
    "Janské Lázně",
    "Jaroměř",
    "Jaroměřice nad Rokytnou",
    "Javorník",
    "Jemnice",
    "Jesenice (okres Rakovník)",
    "Jeseník",
    "Jevíčko",
    "Jevišovice",
    "Jičín",
    "Jihlava",
    "Jilemnice",
    "Jílové",
    "Jílové u Prahy",
    "Jindřichův Hradec",
    "Jirkov",
    "Jiříkov",
    "Jistebnice",
    "Kadaň",
    "Kamenice nad Lipou",
    "Kamenický Šenov",
    "Kaplice",
    "Kardašova Řečice",
    "Karlovy Vary",
    "Karolinka",
    "Karviná",
    "Kasejovice",
    "Kašperské Hory",
    "Kaznějov",
    "Kdyně",
    "Kelč",
    "Kladno",
    "Kladruby",
    "Klášterec nad Ohří",
    "Klatovy",
    "Klecany",
    "Klimkovice",
    "Klobouky u Brna",
    "Kojetín",
    "Kolín",
    "Konice",
    "Kopidlno",
    "Kopřivnice",
    "Koryčany",
    "Kosmonosy",
    "Kostelec na Hané",
    "Kostelec nad Černými lesy",
    "Kostelec nad Labem",
    "Kostelec nad Orlicí",
    "Košťany",
    "Kouřim",
    "Kožlany",
    "Králíky",
    "Kralovice",
    "Kralupy nad Vltavou",
    "Králův Dvůr",
    "Kraslice",
    "Krásná Hora nad Vltavou",
    "Krásná Lípa",
    "Krásné Údolí",
    "Krásno",
    "Kravaře",
    "Krnov",
    "Kroměříž",
    "Krupka",
    "Kryry",
    "Kunovice",
    "Kunštát",
    "Kuřim",
    "Kutná Hora",
    "Kyjov",
    "Kynšperk nad Ohří",
    "Lanškroun",
    "Lanžhot",
    "Lázně Bělohrad",
    "Lázně Bohdaneč",
    "Lázně Kynžvart",
    "Ledeč nad Sázavou",
    "Ledvice",
    "Letohrad",
    "Letovice",
    "Libáň",
    "Libčice nad Vltavou",
    "Liběchov",
    "Liberec",
    "Libochovice",
    "Libušín",
    "Lipník nad Bečvou",
    "Lišov",
    "Litoměřice",
    "Litomyšl",
    "Litovel",
    "Litvínov",
    "Loket",
    "Lom",
    "Lomnice nad Lužnicí",
    "Lomnice nad Popelkou",
    "Loštice",
    "Loučná pod Klínovcem",
    "Louny",
    "Lovosice",
    "Luby",
    "Lučany nad Nisou",
    "Luhačovice",
    "Luže",
    "Lysá nad Labem",
    "Manětín",
    "Mariánské Lázně",
    "Mašťov",
    "Měčín",
    "Mělník",
    "Městec Králové",
    "Město Albrechtice",
    "Město Touškov",
    "Meziboří",
    "Meziměstí",
    "Mikulášovice",
    "Mikulov",
    "Miletín",
    "Milevsko",
    "Milovice",
    "Mimoň",
    "Miroslav",
    "Mirošov",
    "Mirotice",
    "Mirovice",
    "Mladá Boleslav",
    "Mladá Vožice",
    "Mnichovice",
    "Mnichovo Hradiště",
    "Mníšek pod Brdy",
    "Modřice",
    "Mohelnice",
    "Moravská Třebová",
    "Moravské Budějovice",
    "Moravský Beroun",
    "Moravský Krumlov",
    "Morkovice-Slížany",
    "Most",
    "Mšeno",
    "Mýto",
    "Náchod",
    "Nalžovské Hory",
    "Náměšť nad Oslavou",
    "Napajedla",
    "Nasavrky",
    "Nechanice",
    "Nejdek",
    "Němčice nad Hanou",
    "Nepomuk",
    "Neratovice",
    "Netolice",
    "Neveklov",
    "Nová Bystřice",
    "Nová Paka",
    "Nová Role",
    "Nová Včelnice",
    "Nové Hrady",
    "Nové Město na Moravě",
    "Nové Město nad Metují",
    "Nové Město pod Smrkem",
    "Nové Sedlo",
    "Nové Strašecí",
    "Nový Bor",
    "Nový Bydžov",
    "Nový Jičín",
    "Nový Knín",
    "Nymburk",
    "Nýrsko",
    "Nýřany",
    "Odolena Voda",
    "Odry",
    "Olešnice",
    "Olomouc",
    "Oloví",
    "Opava",
    "Opočno",
    "Orlová",
    "Osečná",
    "Osek",
    "Oslavany",
    "Ostrava",
    "Ostrov",
    "Otrokovice",
    "Pacov",
    "Pardubice",
    "Paskov",
    "Pec pod Sněžkou",
    "Pečky",
    "Pelhřimov",
    "Petřvald",
    "Pilníkov",
    "Písek",
    "Planá",
    "Planá nad Lužnicí",
    "Plánice",
    "Plasy",
    "Plesná",
    "Plumlov",
    "Plzeň",
    "Poběžovice",
    "Počátky",
    "Podbořany",
    "Poděbrady",
    "Podivín",
    "Pohořelice",
    "Police nad Metují",
    "Polička",
    "Polná",
    "Postoloprty",
    "Potštát",
    "Prachatice",
    "Praha",
    "Proseč",
    "Prostějov",
    "Protivín",
    "Přebuz",
    "Přelouč",
    "Přerov",
    "Přeštice",
    "Příbor",
    "Příbram",
    "Přibyslav",
    "Přimda",
    "Pyšely",
    "Rabí",
    "Radnice",
    "Rájec-Jestřebí",
    "Rajhrad",
    "Rakovník",
    "Ralsko",
    "Raspenava",
    "Rejštejn",
    "Rokycany",
    "Rokytnice nad Jizerou",
    "Rokytnice v Orlických horách",
    "Ronov nad Doubravou",
    "Rosice",
    "Rotava",
    "Roudnice nad Labem",
    "Rousínov",
    "Rovensko pod Troskami",
    "Roztoky",
    "Rožďalovice",
    "Rožmberk nad Vltavou",
    "Rožmitál pod Třemšínem",
    "Rožnov pod Radhoštěm",
    "Rtyně v Podkrkonoší",
    "Rudná",
    "Rudolfov",
    "Rumburk",
    "Rychnov nad Kněžnou",
    "Rychnov u Jablonce nad Nisou",
    "Rychvald",
    "Rýmařov",
    "Řevnice",
    "Říčany",
    "Sadská",
    "Sázava",
    "Seč",
    "Sedlčany",
    "Sedlec-Prčice",
    "Sedlice",
    "Semily",
    "Sezemice",
    "Sezimovo Ústí",
    "Skalná",
    "Skuteč",
    "Slaný",
    "Slatiňany",
    "Slavičín",
    "Slavkov u Brna",
    "Slavonice",
    "Slušovice",
    "Smečno",
    "Smiřice",
    "Smržovka",
    "Soběslav",
    "Sobotka",
    "Sokolov",
    "Solnice",
    "Spálené Poříčí",
    "Staňkov",
    "Staré Město (okres Šumperk)",
    "Staré Město (okres Uherské Hradiště)",
    "Stárkov",
    "Starý Plzenec",
    "Stochov",
    "Stod",
    "Strakonice",
    "Stráž nad Nežárkou",
    "Stráž pod Ralskem",
    "Strážnice",
    "Strážov",
    "Strmilov",
    "Stříbro",
    "Studénka",
    "Suchdol nad Lužnicí",
    "Sušice",
    "Světlá nad Sázavou",
    "Svitavy",
    "Svoboda nad Úpou",
    "Svratka",
    "Šenov",
    "Šlapanice",
    "Šluknov",
    "Špindlerův Mlýn",
    "Šternberk",
    "Štětí",
    "Štíty",
    "Štramberk",
    "Šumperk",
    "Švihov",
    "Tábor",
    "Tachov",
    "Tanvald",
    "Telč",
    "Teplá",
    "Teplice",
    "Teplice nad Metují",
    "Terezín",
    "Tišnov",
    "Toužim",
    "Tovačov",
    "Trhové Sviny",
    "Trhový Štěpánov",
    "Trmice",
    "Trutnov",
    "Třebechovice pod Orebem",
    "Třebenice",
    "Třebíč",
    "Třeboň",
    "Třemošná",
    "Třemošnice",
    "Třešť",
    "Třinec",
    "Turnov",
    "Týn nad Vltavou",
    "Týnec nad Labem",
    "Týnec nad Sázavou",
    "Týniště nad Orlicí",
    "Uherské Hradiště",
    "Uherský Brod",
    "Uherský Ostroh",
    "Uhlířské Janovice",
    "Újezd u Brna",
    "Unhošť",
    "Uničov",
    "Úpice",
    "Úsov",
    "Ústí nad Labem",
    "Ústí nad Orlicí",
    "Úštěk",
    "Úterý",
    "Úvaly",
    "Valašské Klobouky",
    "Valašské Meziříčí",
    "Valtice",
    "Vamberk",
    "Varnsdorf",
    "Vejprty",
    "Velešín",
    "Velká Bíteš",
    "Velká Bystřice",
    "Velké Bílovice",
    "Velké Hamry",
    "Velké Meziříčí",
    "Velké Opatovice",
    "Velké Pavlovice",
    "Velký Šenov",
    "Veltrusy",
    "Velvary",
    "Verneřice",
    "Veselí nad Lužnicí",
    "Veselí nad Moravou",
    "Vidnava",
    "Vimperk",
    "Vítkov",
    "Vizovice",
    "Vlachovo Březí",
    "Vlašim",
    "Vodňany",
    "Volary",
    "Volyně",
    "Votice",
    "Vracov",
    "Vratimov",
    "Vrbno pod Pradědem",
    "Vrchlabí",
    "Vroutek",
    "Vsetín",
    "Všeruby",
    "Výsluní",
    "Vysoké Mýto",
    "Vysoké nad Jizerou",
    "Vysoké Veselí",
    "Vyškov",
    "Vyšší Brod",
    "Zábřeh",
    "Zákupy",
    "Zásmuky",
    "Zbiroh",
    "Zbýšov",
    "Zdice",
    "Zlaté Hory",
    "Zlín",
    "Zliv",
    "Znojmo",
    "Zruč nad Sázavou",
    "Zubří",
    "Žacléř",
    "Žamberk",
    "Žandov",
    "Žatec",
    "Ždánice",
    "Žďár nad Sázavou",
    "Ždírec nad Doubravou",
    "Žebrák",
    "Železná Ruda",
    "Železnice",
    "Železný Brod",
    "Židlochovice",
    "Žirovnice",
    "Žlutice",
    "Žulová"
  ];
});

// node_modules/faker/lib/locales/cz/address/city.js
var require_city2 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{city_name}"
  ];
});

// node_modules/faker/lib/locales/cz/address/street.js
var require_street = __commonJS((exports, module) => {
  module["exports"] = [
    "17. Listopadu",
    "17. Listopadu",
    "28. Pluku",
    "28. Října",
    "28. Října",
    "5. Května",
    "5. Května",
    "5. Máje",
    "7. Května",
    "8. Listopadu",
    "9. Května",
    "Achátová",
    "Adamova",
    "Adamovská",
    "Adélčina",
    "Africká",
    "Akademická",
    "Aksamitova",
    "Akátová",
    "Alabastrová",
    "Albertov",
    "Albrechtická",
    "Albánská",
    "Albíny Hochové",
    "Aldašínská",
    "Alej Českých Exulantů",
    "Aleny Santarové",
    "Aloisovská",
    "Aloisovská",
    "Aloisovská",
    "Altajská",
    "Alšovo Nábř.",
    "Alšovo Nábřeží",
    "Alšovy Sady",
    "Alžírská",
    "Ambrožova",
    "Americká",
    "Ametystová",
    "Amforová",
    "Amortova",
    "Ampérova",
    "Amurská",
    "Anastázova",
    "Anderleho",
    "Andersenova",
    "Andrštova",
    "Andělova",
    "Anenská",
    "Anenské Nám.",
    "Anenské Náměstí",
    "Anežky Malé",
    "Anežská",
    "Angelovova",
    "Anglická",
    "Angolská",
    "Anhaltova",
    "Ankarská",
    "Anny Drabíkové",
    "Anny Letenské",
    "Anny Rybníčkové",
    "Anny Čížkové",
    "Anny Čížkové",
    "Antala Staška",
    "Antonína Hodného",
    "Antonína Čermáka",
    "Antonínská",
    "Anýzová",
    "Apolinářská",
    "Arabská",
    "Aranžérská",
    "Arbesovo Nám.",
    "Arbesovo Náměstí",
    "Archangelská",
    "Archeologická",
    "Archimédova",
    "Archivní",
    "Argentinská",
    "Aristotelova",
    "Arkalycká",
    "Armádní",
    "Armádního Sboru",
    "Armády",
    "Arménská",
    "Arnošta Valenty",
    "Astlova",
    "Athénská",
    "Atletická",
    "Aubrechtové",
    "Augustinova",
    "Augustova",
    "Austova",
    "Aviatická",
    "Axmanova",
    "Azalková",
    "Azuritová",
    "Ašská",
    "Baarova",
    "Babická",
    "Babiččina",
    "Babočková",
    "Babská",
    "Babylonská",
    "Babákova",
    "Bachmačské Nám.",
    "Bachmačské Náměstí",
    "Bachova",
    "Bacháčkova",
    "Badeniho",
    "Badeniho",
    "Bajgarova",
    "Bajkalská",
    "Bajkonurská",
    "Bakalářská",
    "Bakovská",
    "Bakurinova",
    "Balabánova",
    "Balbínova",
    "Banskobystrická",
    "Baranova",
    "Barchovická",
    "Barešova",
    "Barrandova",
    "Barrandovská",
    "Bartolomějská",
    "Bartoňkova",
    "Bartoňova",
    "Bartoškova",
    "Bartoškova",
    "Bartoškova",
    "Bartákova",
    "Bartůňkova",
    "Barunčina",
    "Barvířská",
    "Barákova",
    "Basilejské Nám.",
    "Basilejské Náměstí",
    "Bassova",
    "Batelovská",
    "Batličkova",
    "Bavorovská",
    "Bavorská",
    "Bazalková",
    "Bazovského",
    "Bačetínská",
    "Baňská",
    "Baškirská",
    "Bašteckého",
    "Baštýřská",
    "Bažantní",
    "Beaufortova",
    "Bechlínská",
    "Bechyňova",
    "Bechyňská",
    "Beckovská",
    "Bedlová",
    "Bednářská",
    "Bedrnova",
    "Bedřichovská",
    "Beethovenova",
    "Beldova",
    "Belgická",
    "Bellova",
    "Bellušova",
    "Bendlova",
    "Bendova",
    "Benecká",
    "Benediktská",
    "Benešovská",
    "Benická",
    "Benkova",
    "Benákova",
    "Benátská",
    "Benáčanova",
    "Beníškové",
    "Beranových",
    "Bergerova",
    "Bergmanova",
    "Berkovská",
    "Berlínská",
    "Bermanova",
    "Bernartická",
    "Bernolákova",
    "Berounská",
    "Bertrámová",
    "Berylová",
    "Besední",
    "Beskydská",
    "Betlémská",
    "Betlémské Nám.",
    "Betlémské Náměstí",
    "Betáňská",
    "Bezdrevská",
    "Bezděkovská",
    "Bezinková",
    "Bezová",
    "Bezprašná",
    "Bečovská",
    "Bečvářova",
    "Bečvářská",
    "Bečvářská",
    "Beřkovická",
    "Bešťákova",
    "Bieblova",
    "Binarova",
    "Biskupcova",
    "Biskupská",
    "Biskupský Dvůr",
    "Blachutova",
    "Blahníkova",
    "Blahoslavova",
    "Blanická",
    "Blatenská",
    "Blatnická",
    "Blatovská",
    "Blatská",
    "Blattného",
    "Blažimská",
    "Blažkova",
    "Blažíčkova",
    "Blešnovská",
    "Blodkova",
    "Bludovická",
    "Blériotova",
    "Blšanecká",
    "Bobkova",
    "Bochovská",
    "Bodláková",
    "Bohdalec",
    "Bohdalec",
    "Bohdalecká",
    "Bohdalecká",
    "Bohdanečská",
    "Bohdašínská",
    "Bohnická",
    "Bohrova",
    "Bohumínská",
    "Bohuslava Martinů",
    "Bohuslava Martinů",
    "Bohuslava Ze Švamberka",
    "Bohuslavická",
    "Bohušovická",
    "Bohušovická",
    "Boháčova",
    "Bohúňova",
    "Bojanovická",
    "Bojasova",
    "Bojetická",
    "Boješická",
    "Bojkovická",
    "Bojovská",
    "Bojínková",
    "Bojčenkova",
    "Bolebořská",
    "Boleratická",
    "Boleslavova",
    "Boleslavská",
    "Boletická",
    "Bolevecká",
    "Bolinská",
    "Boloňská",
    "Bolzanova",
    "Bolívarova",
    "Borecká",
    "Borečkova",
    "Borodinská",
    "Borotínská",
    "Borovanská",
    "Borovanského",
    "Borovnická",
    "Borovská",
    "Borová",
    "Borošova",
    "Borská",
    "Borského",
    "Boršov",
    "Boršovská",
    "Borůvková",
    "Boseňská",
    "Botevova",
    "Botičská",
    "Botičská",
    "Boudova",
    "Bousovská",
    "Boučkova",
    "Bouřilova",
    "Boušova",
    "Bozděchova",
    "Boční I",
    "Boční Ii",
    "Bořanovická",
    "Bořetická",
    "Bořetínská",
    "Bořivojova",
    "Bořivojova",
    "Boříkova",
    "Bošická",
    "Bošilecká",
    "Bošínská",
    "Božanovská",
    "Božecká",
    "Božejovická",
    "Boženy Hofmeisterové",
    "Boženy Jandlové",
    "Boženy Němcové",
    "Boženy Němcové",
    "Boženy Stárkové",
    "Božetická",
    "Božetěchova",
    "Božkova",
    "Božkovská",
    "Božídarská",
    "Brabcova",
    "Bramboříková",
    "Branaldova",
    "Brandejsova",
    "Brandejsovo Nám.",
    "Brandejsovo Náměstí",
    "Brandlova",
    "Brandýská",
    "Branická",
    "Branická",
    "Branické Nám.",
    "Branické Náměstí",
    "Branislavova",
    "Branišovská",
    "Branská",
    "Bratislavská",
    "Bratranců Veverkových",
    "Bratří Dohalských",
    "Bratří Venclíků",
    "Bratří Čapků",
    "Bratříkovská",
    "Braunerova",
    "Braunova",
    "Braškovská",
    "Brdecká",
    "Brdičkova",
    "Brdlíkova",
    "Brechtova",
    "Brechtova",
    "Brehmova",
    "Breitcetlova",
    "Brichtova",
    "Brigádnická",
    "Brigádníků",
    "Brixiho",
    "Brodecká",
    "Brodecká",
    "Brodského",
    "Bromova",
    "Bronzová",
    "Broskvoňová",
    "Broumarská",
    "Broumovská",
    "Brozánská",
    "Brožíkova",
    "Brtecká",
    "Brtnická",
    "Brumovická",
    "Brunclíkova",
    "Brunelova",
    "Brunnerova",
    "Bruselská",
    "Brusinková",
    "Bruslařská",
    "Bryksova",
    "Brzická",
    "Brzorádových",
    "Brázdimská",
    "Brňovská",
    "Bubenečská",
    "Bubenečská",
    "Bubenská",
    "Bubenské Nábř.",
    "Bubenské Nábřeží",
    "Bubeníčkova",
    "Bublavská",
    "Bublíkova",
    "Bubnova",
    "Bucharova",
    "Buchlovská",
    "Buchovcova",
    "Budapešťská",
    "Budečská",
    "Budilova",
    "Budilovská",
    "Budovatelská",
    "Budyňská",
    "Budyšínská",
    "Budínova",
    "Budčická",
    "Budějovická",
    "Budějovická",
    "Bukolská",
    "Bukovecká",
    "Bukovinská",
    "Buková",
    "Bulharská",
    "Buližníková",
    "Bulovka",
    "Burdova",
    "Burešova",
    "Burianova",
    "Butovická",
    "Butovická",
    "Buzulucká",
    "Buštěhradská",
    "Bydhošťská",
    "Bydžovská",
    "Bydžovského",
    "Bylanská",
    "Bystrá",
    "Bystřická",
    "Bystřičná",
    "Byšická",
    "Byškovická",
    "Bzenecká",
    "Bártlova",
    "Bášťská",
    "Bílenecké Nám.",
    "Bílenecké Náměstí",
    "Bílinská",
    "Bílkova",
    "Bílkova",
    "Bílovská",
    "Bílá",
    "Bílčická",
    "Bínova",
    "Bítovská",
    "Böhmova",
    "Býšovská",
    "Běchorská",
    "Běchovická",
    "Běhounkova",
    "Bělehradská",
    "Bělehradská",
    "Bělehradská",
    "Bělečská",
    "Bělinského",
    "Bělocerkevská",
    "Bělocká",
    "Bělohorská",
    "Bělohorská",
    "Bělomlýnská",
    "Bělomlýnská",
    "Běloveská",
    "Běluňská",
    "Bělušická",
    "Bělásková",
    "Bělčická",
    "Bělčická",
    "Běžecká",
    "Běžná",
    "Břeclavská",
    "Břehová",
    "Břehová",
    "Břetislavova",
    "Břevnovská",
    "Březanova",
    "Březecká",
    "Březenská",
    "Březinova",
    "Březiněveská",
    "Březnická",
    "Březnová",
    "Březovická",
    "Březovského",
    "Březová",
    "Břečťanová",
    "Břežanská",
    "Břežánecká",
    "Břidlicová",
    "Břidličná",
    "Břízova",
    "Bříšťanská",
    "Cafourkova",
    "Cedrová",
    "Celetná",
    "Celniční",
    "Celsiova",
    "Cementářská",
    "Ceplechova",
    "Cerhenická",
    "Cerhýnská",
    "Cetyňská",
    "Chabařovická",
    "Chaberská",
    "Chabeřická",
    "Chabská",
    "Chalabalova",
    "Chaloupeckého",
    "Chaloupky",
    "Chaltická",
    "Chalupkova",
    "Chalupnická",
    "Chaplinovo Nám.",
    "Chaplinovo Náměstí",
    "Charkovská",
    "Charlese De Gaulla",
    "Charvátova",
    "Chatařská",
    "Chatová",
    "Chebská",
    "Chelčického",
    "Chemická",
    "Chilská",
    "Chittussiho",
    "Chladírenská",
    "Chlebovická",
    "Chlumecká",
    "Chlumecká",
    "Chlumecká",
    "Chlumova",
    "Chlumínská",
    "Chlumčanského",
    "Chlupova",
    "Chlupáčova",
    "Chládkova",
    "Chmelařská",
    "Chmelická",
    "Chmelová",
    "Chmelířova",
    "Choceradská",
    "Choceňská",
    "Chocholouškova",
    "Chocholova",
    "Chodecká",
    "Chodovecké Nám.",
    "Chodovecké Náměstí",
    "Chodovická",
    "Chodovská",
    "Chodovská",
    "Chodovská",
    "Chodská",
    "Cholupická",
    "Chomutovická",
    "Chomutovská",
    "Chopinova",
    "Choratická",
    "Chorošová",
    "Chorušická",
    "Chorvatská",
    "Chotečská",
    "Chotkova",
    "Chotouchovská",
    "Chotouňská",
    "Chotovická",
    "Chotutická",
    "Chotěbuzská",
    "Chotěnovská",
    "Chotětovská",
    "Chotěšovská",
    "Chovatelská",
    "Chrastavská",
    "Chrobolská",
    "Chrpová",
    "Chrudimská",
    "Chráněná",
    "Chrášťanská",
    "Chuchelská",
    "Chudenická",
    "Chudoměřická",
    "Churnajevova",
    "Churáňovská",
    "Chvaletická",
    "Chvaletická",
    "Chvalečská",
    "Chvalkovická",
    "Chvalova",
    "Chvalská",
    "Chvalská",
    "Chvalšovická",
    "Chvatěrubská",
    "Chvojenecká",
    "Chyjická",
    "Chýnická",
    "Chýnovská",
    "Chýňská",
    "Chřibská",
    "Cibulka",
    "Cidlinská",
    "Cigánkova",
    "Cihelná",
    "Cihlářova",
    "Cihlářská",
    "Cimburkova",
    "Ciolkovského",
    "Cirkusová",
    "Cisterciácká",
    "Citolibská",
    "Coriových",
    "Ctiborova",
    "Ctiněveská",
    "Ctiradova",
    "Ctěnická",
    "Cukerní",
    "Cukrovarnická",
    "Cukrovarská",
    "Cuřínova",
    "Cvikovská",
    "Cvičebná",
    "Cvrčkova",
    "Cvrčkova",
    "Cvrčkova",
    "Cyprichova",
    "Cíglerova",
    "Cílkova",
    "Cínovecká",
    "Církova",
    "Církvická",
    "Církvičná",
    "Císařská Louka",
    "Císařský Ostrov",
    "Císařský Ostrov",
    "Císařský Ostrov",
    "Cítovská",
    "Daimlerova",
    "Dalejská",
    "Dalejská",
    "Dalešická",
    "Daliborova",
    "Dalimilova",
    "Dalovická",
    "Dandova",
    "Danielova",
    "Dany Medřické",
    "Darwinova",
    "Dasnická",
    "Davelská",
    "Davidovičova",
    "Davídkova",
    "Davídkova",
    "Dačická",
    "Dačického",
    "Daňkova",
    "Dašická",
    "Daškova",
    "Dehtínská",
    "Dejvická",
    "Dejvická",
    "Demlova",
    "Demoliční",
    "Desenská",
    "Destinnové",
    "Destinové",
    "Devonská",
    "Deylova",
    "Deštná",
    "Dešťová",
    "Diabasová",
    "Diamantová",
    "Diblíkova",
    "Diblíkova",
    "Dienzenhoferovy Sady",
    "Dieselova",
    "Diskařská",
    "Diskařská",
    "Dismanova",
    "Dittrichova",
    "Divadelní",
    "Divadelní",
    "Divecká",
    "Diviznová",
    "Divišova",
    "Divišovská",
    "Divoká Šárka",
    "Divoká Šárka",
    "Dlabačov",
    "Dlabačov",
    "Dlouhá",
    "Dlážděná",
    "Do Blatin",
    "Do Borovin",
    "Do Chuchle",
    "Do Dolnic",
    "Do Dubin",
    "Do Dubče",
    "Do Hlinek",
    "Do Klukovic",
    "Do Kopečka",
    "Do Koutů",
    "Do Koutů",
    "Do Lipan",
    "Do Lipin",
    "Do Lipin",
    "Do Luk",
    "Do Panenek",
    "Do Podkovy",
    "Do Polí",
    "Do Potoků",
    "Do Píšovic",
    "Do Roklí",
    "Do Rybníčků",
    "Do Svépravic",
    "Do Vozovny",
    "Do Vrchu",
    "Do Vršku",
    "Do Zahrádek I",
    "Do Zahrádek I",
    "Do Zahrádek I",
    "Do Zahrádek Ii",
    "Do Zahrádek Ii",
    "Do Zátiší",
    "Do Údolí",
    "Do Újezda",
    "Do Čertous",
    "Do Čtvrti",
    "Do Říčan",
    "Dobevská",
    "Dobnerova",
    "Dobratická",
    "Dobronická",
    "Dobronická",
    "Dobropolská",
    "Dobrovická",
    "Dobrovolného",
    "Dobrovolského",
    "Dobrovského",
    "Dobrovízská",
    "Dobročovická",
    "Dobrošovská",
    "Dobrušská",
    "Dobřanská",
    "Dobřejovická",
    "Dobřenická",
    "Dobřichovská",
    "Dobšická",
    "Dobšínská",
    "Dohalická",
    "Doksanská",
    "Dolanská",
    "Dolejškova",
    "Doležalova",
    "Dolina",
    "Dolnobranská",
    "Dolnobřežanská",
    "Dolnocholupická",
    "Dolnojirčanská",
    "Dolnokrčská",
    "Dolnokřeslická",
    "Dolnomlýnská",
    "Dolnoměcholupská",
    "Dolnoměcholupská",
    "Dolnopočernická",
    "Dolnočernošická",
    "Dolní",
    "Dolní",
    "Dolní Chaloupky",
    "Dolomitová",
    "Dolská",
    "Dolákova",
    "Dolínecká",
    "Dolňanská",
    "Domanovická",
    "Domašínská",
    "Domažlická",
    "Dominova",
    "Dominínská",
    "Domkovská",
    "Domkářská",
    "Domousnická",
    "Donatellova",
    "Donovalská",
    "Donská",
    "Donátova",
    "Donínská",
    "Dopplerova",
    "Dopravní",
    "Dopraváků",
    "Dopraváků",
    "Dostihová",
    "Dostojevského",
    "Doubecká",
    "Doubická",
    "Doubravická",
    "Doubravská",
    "Doubravínova",
    "Doubravčická",
    "Doudlebská",
    "Doudova",
    "Doupovská",
    "Dr. Marodyho",
    "Dr. Zikmunda Wintra",
    "Dr.Zikmunda Wintra",
    "Dragounská",
    "Drahanská",
    "Drahanská",
    "Drahelická",
    "Drahelčická",
    "Drahobejlova",
    "Drahorádova",
    "Drahotická",
    "Drahotínská",
    "Drahovská",
    "Drahovská",
    "Drahoňovského",
    "Draženovská",
    "Draženovská",
    "Dražetická",
    "Dražická",
    "Dražického",
    "Dražického Nám.",
    "Dražického Náměstí",
    "Dražkovská",
    "Dreyerova",
    "Drimlova",
    "Drnovská",
    "Drobná",
    "Drtikolova",
    "Drtinova",
    "Druhanická",
    "Druhého Odboje",
    "Družicová",
    "Družnosti",
    "Družná",
    "Družstevní",
    "Družstevní Ochoz",
    "Družstevní Ochoz",
    "Drážní",
    "Drůbežnická",
    "Drůbežářská",
    "Dubanská",
    "Dubenecká",
    "Dubečská",
    "Dubečské Horky",
    "Dubinská",
    "Dubnická",
    "Dubnova",
    "Dubovická",
    "Dubová",
    "Dubrovnická",
    "Dubská",
    "Duchcovská",
    "Duchoslávka",
    "Dudkova",
    "Dudínská",
    "Duhová",
    "Dukelská",
    "Dukelských Hrdinů",
    "Dunajevského",
    "Dunajská",
    "Dunická",
    "Dunovského",
    "Durychova",
    "Durychova",
    "Dusíkova",
    "Duškova",
    "Duškova",
    "Dušní",
    "Dušní",
    "Dvorecká",
    "Dvorecké Nám.",
    "Dvorecké Náměstí",
    "Dvorní",
    "Dvorská",
    "Dvoudílná",
    "Dvouletky",
    "Dvouramenná",
    "Dvořeckého",
    "Dvořišťská",
    "Dvořákova",
    "Dvořákovo Nábř.",
    "Dvořákovo Nábřeží",
    "Dygrýnova",
    "Dyjská",
    "Dykova",
    "Dářská",
    "Dürerova",
    "Dýšinská",
    "Děbolínská",
    "Dědická",
    "Dědinova",
    "Dědinská",
    "Děkanská",
    "Děkanská Vinice I",
    "Děkanská Vinice Ii",
    "Dělená",
    "Dělnická",
    "Dělostřelecká",
    "Dětenická",
    "Dětská",
    "Dětský Ostrov",
    "Děvínská",
    "Děčínská",
    "Děčínská",
    "Dřevařská",
    "Dřevnická",
    "Dřevná",
    "Dřevčická",
    "Dřínovská",
    "Dřínová",
    "Dřítenská",
    "Eberlova",
    "Ebrova",
    "Edisonova",
    "Edvardova",
    "Egyptská",
    "Eichlerova",
    "Einsteinova",
    "Ejpovická",
    "Ekonomická",
    "Eledrova",
    "Elektrárenská",
    "Eliášova",
    "Eliášova",
    "Elišky Junkové",
    "Elišky Krásnohorské",
    "Elišky Krásnohorské",
    "Elišky Peškové",
    "Elišky Přemyslovny",
    "Ellnerové",
    "Elsnicovo Náměstí",
    "Emilie Hyblerové",
    "Emlerova",
    "Engelmüllerova",
    "Engelova",
    "Engelova",
    "Englerova",
    "Erbenova",
    "Erbenova",
    "Estonská",
    "Etiopská",
    "Euklidova",
    "Evropská",
    "Evropská",
    "Evropská",
    "Evropská",
    "Evropská",
    "Evy Olmerové",
    "Exnárova",
    "F.V.Veselého",
    "Fabiánova",
    "Fabiánská",
    "Fadějevova",
    "Fajmanové",
    "Fajtlova",
    "Falcká",
    "Faltysova",
    "Famfulíkova",
    "Fantova",
    "Faradayova",
    "Farkašova",
    "Farní",
    "Farská",
    "Farského",
    "Fastrova",
    "Federova",
    "Fejfarova",
    "Felberova",
    "Fenyklová",
    "Fetrovská",
    "Feřtekova",
    "Fialková",
    "Fibichova",
    "Fikerova",
    "Filipova",
    "Filipovského",
    "Filipíny Welserové",
    "Fillova",
    "Filmařská",
    "Filosofská",
    "Fingerova",
    "Finkovská",
    "Finská",
    "Firkušného",
    "Fischlova",
    "Fišerova",
    "Flemingovo Nám.",
    "Flemingovo Náměstí",
    "Flájská",
    "Flöglova",
    "Foerstrova",
    "Folmavská",
    "Formanská",
    "Formánkova",
    "Fořtova",
    "Fragnerova",
    "Francouzská",
    "Francouzská",
    "Francouzská",
    "Františka Diviše",
    "Františka Jansy",
    "Františka Kadlece",
    "Františka Křížka",
    "Františka Černého",
    "Františka Červeného",
    "Františka Šimáčka",
    "Františkova",
    "Franty Kocourka",
    "Frančíkova",
    "Freiwaldova",
    "Freyova",
    "Frimlova",
    "Fričova",
    "Froncova",
    "Frostova",
    "Froňkova",
    "Frydrychova",
    "Fryčovická",
    "Fráni Šrámka",
    "Frézařská",
    "Frýdecká",
    "Frýdlantská",
    "Fuchsova",
    "Fügnerovo Nám.",
    "Fügnerovo Náměstí",
    "Gabinova",
    "Gabčíkova",
    "Gagarinova",
    "Galandova",
    "Galileova",
    "Gallašova",
    "Galvaniho",
    "Gaussova",
    "Gdaňská",
    "Generála Janouška",
    "Generála Mejstříka",
    "Generála Píky",
    "Generála Šišky",
    "Generála Šišky",
    "Gensovská",
    "Geologická",
    "Gercenova",
    "Gerstnerova",
    "Ginzova",
    "Glazunovova",
    "Glinkova",
    "Glowackého",
    "Goetheho",
    "Gogolova",
    "Golfová",
    "Gollova",
    "Golčova",
    "Gončarenkova",
    "Gončarenkova",
    "Gorazdova",
    "Gotthardská",
    "Goyova",
    "Gočárova",
    "Grafická",
    "Grafitová",
    "Grammova",
    "Granátová",
    "Gregorova",
    "Grussova",
    "Gruzínská",
    "Gutfreundova",
    "Gutova",
    "Gymnasijní",
    "Gymnastická",
    "Habartická",
    "Habartická",
    "Habartovská",
    "Haberfeldova",
    "Habrovská",
    "Habrová",
    "Habřická",
    "Habřická",
    "Hackerova",
    "Hadovitá",
    "Hadravská",
    "Hajní",
    "Hakenova",
    "Halasova",
    "Halenkovská",
    "Halštatská",
    "Hamerská",
    "Hamplova",
    "Hamrová",
    "Hamsíkova",
    "Hankova",
    "Hanouškova",
    "Hanusova",
    "Hanušova",
    "Hanzelkova",
    "Hanzlíkova",
    "Harantova",
    "Harcovská",
    "Harlacherova",
    "Harmonická",
    "Harrachovská",
    "Hartenberská",
    "Hasičská",
    "Hasičů",
    "Hasova",
    "Hastrmanská",
    "Haunerova",
    "Hauptova",
    "Hausmannova",
    "Havanská",
    "Havelská",
    "Havelská Ulička",
    "Havlovického",
    "Havlovického",
    "Havlovská",
    "Havlínova",
    "Havlíčkova",
    "Havlíčkovo Nám.",
    "Havlíčkovo Náměstí",
    "Havlíčkovy Sady",
    "Havlůjové",
    "Havlůjové",
    "Havranická",
    "Havraní",
    "Havránkova",
    "Havířovská",
    "Havířská",
    "Haškova",
    "Hašlerova",
    "Haštalská",
    "Haštalské Nám.",
    "Haštalské Náměstí",
    "Heckelova",
    "Heineho",
    "Heinemannova",
    "Hejnická",
    "Hejnická",
    "Hejplíkova",
    "Hejtmanská",
    "Hejtmánkova",
    "Hekova",
    "Hekrova",
    "Heldova",
    "Heleny Malířové",
    "Hellichova",
    "Helmova",
    "Helsinská",
    "Helénská",
    "Hennerova",
    "Heranova",
    "Herbenova",
    "Herdovská",
    "Herlíkovická",
    "Hermanická",
    "Hermelínská",
    "Hermíny Týrlové",
    "Heroldovy Sady",
    "Herrmannova",
    "Herrova",
    "Hertzova",
    "Herálecká I",
    "Herálecká Ii",
    "Herálecká Iii",
    "Herálecká Iv",
    "Herčíkova",
    "Hevlínská",
    "Heydukova",
    "Heyrovského Nám.",
    "Heyrovského Nám.",
    "Heyrovského Náměstí",
    "Heyrovského Náměstí",
    "Hečkova",
    "Heřmanova",
    "Heřmánková",
    "Hildy Čihákové",
    "Hillebrantova",
    "Hilmarova",
    "Hiršlova",
    "Hlavatého",
    "Hlavenecká",
    "Hlavní",
    "Hlavova",
    "Hlaváčkova",
    "Hlaváčova",
    "Hlaďova",
    "Hledíková",
    "Hlinská",
    "Hlivická",
    "Hlohová",
    "Hloubětínská",
    "Hloubětínská",
    "Hlubocká",
    "Hluboká",
    "Hlubočepská",
    "Hlušičkova",
    "Hládkov",
    "Hládkov",
    "Hlávkova",
    "Hněvkovská",
    "Hněvkovského",
    "Hnězdenská",
    "Hoblířská",
    "Hodkovická",
    "Hodkovská",
    "Hodonínská",
    "Hodčina",
    "Hodějovská",
    "Hodějovská",
    "Hoděšovická",
    "Hofbauerova",
    "Hoffmannova",
    "Hokejová",
    "Hokešovo Nám.",
    "Hokešovo Náměstí",
    "Holandská",
    "Holekova",
    "Holenická",
    "Holenská",
    "Holečkova",
    "Holečkova",
    "Holešovické Nábřeží",
    "Holešovický Přístav",
    "Holická",
    "Hollarovo Nám.",
    "Hollarovo Náměstí",
    "Holohlavská",
    "Holotínská",
    "Holoubkova",
    "Holoubkovská",
    "Holubická",
    "Holubinková",
    "Holubkova",
    "Holubova",
    "Holubí",
    "Holušická",
    "Holyňská",
    "Holátova",
    "Holínská",
    "Holýšovská",
    "Holčovická",
    "Holšická",
    "Homolová",
    "Homérova",
    "Honzíkova",
    "Hornická",
    "Hornocholupická",
    "Hornocholupická",
    "Hornofova",
    "Hornokrčská",
    "Hornokřeslická",
    "Hornomlýnská",
    "Hornoměcholupská",
    "Hornoměcholupská",
    "Hornopočernická",
    "Horní",
    "Horní Chaloupky",
    "Horní Hrdlořezská",
    "Horní Stromky",
    "Horníčkova",
    "Horolezecká",
    "Horoměřická",
    "Horoměřická",
    "Horoušanská",
    "Horoušanská",
    "Horovo Nám.",
    "Horovo Náměstí",
    "Horská",
    "Horusická",
    "Horymírovo Nám.",
    "Horymírovo Náměstí",
    "Horákova",
    "Horáčkova",
    "Horčičkova",
    "Horňátecká",
    "Horšovská",
    "Horšovská",
    "Hospodářská",
    "Hostavická",
    "Hostavická",
    "Hostinského",
    "Hostivařská",
    "Hostivařské Nám.",
    "Hostivařské Náměstí",
    "Hostivická",
    "Hostivítova",
    "Hostišovská",
    "Hostouňská",
    "Hostošova",
    "Hostýnská",
    "Hostýnská",
    "Houbařská",
    "Houdova",
    "Hovorčovická",
    "Hořanská",
    "Hořejší Náb.",
    "Hořejší Nábřeží",
    "Hořejšího",
    "Hořelická",
    "Hořická",
    "Hořovského",
    "Hořínecká",
    "Hoškova",
    "Hoštická",
    "Hošťálkova",
    "Hrabačovská",
    "Hrabákova",
    "Hrachovská",
    "Hrad I. Nádvoří",
    "Hrad Ii. Nádvoří",
    "Hrad Iii. Nádvoří",
    "Hradební",
    "Hradecká",
    "Hradeckých",
    "Hradečkova",
    "Hradešínská",
    "Hradčanské Nám.",
    "Hradčanské Náměstí",
    "Hraniční",
    "Hrazanská",
    "Hrazanská",
    "Hrdinova",
    "Hrdličkova",
    "Hrdlořezská",
    "Hrdoňovická",
    "Hroncova",
    "Hronovská",
    "Hronětická",
    "Hrozenkovská",
    "Hroznová",
    "Hrozného",
    "Hrubého",
    "Hrubínova",
    "Hrudičkova",
    "Hrusická",
    "Hruškovská",
    "Hruškovská",
    "Hrušovanské Nám.",
    "Hrušovanské Náměstí",
    "Hrušovická",
    "Hrušovská",
    "Hrušínského",
    "Hrušňová",
    "Hrušňová",
    "Hrádková",
    "Hráského",
    "Huberova",
    "Hubičkova",
    "Hubáčkova",
    "Hudcova",
    "Hudební",
    "Hudečkova",
    "Hudečkova",
    "Hugo Haase",
    "Hulanova",
    "Hulická",
    "Humenecká",
    "Humpolecká",
    "Huntířovská",
    "Hurbanova",
    "Husařská",
    "Husinecká",
    "Husitská",
    "Husitská",
    "Husníkova",
    "Husova",
    "Husovo Nám.",
    "Husovo Náměstí",
    "Hustopečská",
    "Hutnická",
    "Huťská",
    "Hviezdoslavova",
    "Hviezdoslavova",
    "Hvozdecká",
    "Hvozdnická",
    "Hvozdíková",
    "Hvožďanská",
    "Hvězdonická",
    "Hvězdova",
    "Hvězdářská",
    "Hyacintová",
    "Hybernská",
    "Hybešova",
    "Hynaisova",
    "Hypšmanova",
    "Hábova",
    "Hájecká",
    "Hájenská",
    "Hájkova",
    "Hájovna U Podjezdu",
    "Hájovna V Šárce",
    "Hájová",
    "Hájíčkova",
    "Hájčí",
    "Hákova",
    "Hálkova",
    "Hálova",
    "Hálův Statek",
    "Högerova",
    "Hübnerové",
    "Hřbitovní",
    "Hřebenová",
    "Hřebíkova",
    "Hřenská",
    "Hřibojedská",
    "Hřibská",
    "Hříbková",
    "Hřídelecká",
    "Hůlkova",
    "Hůlkova",
    "Hůrská",
    "Ibsenova",
    "Imrychova",
    "Ingrišova",
    "Internacionální",
    "Irkutská",
    "Irská",
    "Irvingova",
    "Italská",
    "Italská",
    "Italská",
    "Ivančická",
    "Izraelská",
    "Izraelská",
    "Jabkenická",
    "Jablonecká",
    "Jablonecká",
    "Jablonského",
    "Jabloňová",
    "Jablunkovská",
    "Jagellonská",
    "Jagellonská",
    "Jahodnická",
    "Jahodová",
    "Jakobiho",
    "Jakubovská",
    "Jakubská",
    "Jakutská",
    "Jalodvorská",
    "Jalovcová",
    "Jaltská",
    "Jamborova",
    "Jamská",
    "Jana Bílka",
    "Jana Jindřicha",
    "Jana Karafiáta",
    "Jana Kašpara",
    "Jana Marka",
    "Jana Masaryka",
    "Jana Ouřady",
    "Jana Přibíka",
    "Jana Růžičky",
    "Jana Srba",
    "Jana Zajíce",
    "Jana Čerstvého",
    "Jana Želivského",
    "Janderova",
    "Jandova",
    "Janečkova",
    "Jankovcova",
    "Jankovská",
    "Janouchova",
    "Janouškova",
    "Janovická",
    "Janovská",
    "Janovského",
    "Jansenova",
    "Janského",
    "Jansova",
    "Jantarová",
    "Janákova",
    "Janáčkovo Nábř.",
    "Janáčkovo Nábř.",
    "Janáčkovo Nábřeží",
    "Janáčkovo Nábřeží",
    "Janýrova",
    "Jančova",
    "Jarešova",
    "Jarkovská",
    "Jarmily Novotné",
    "Jarní",
    "Jarníkova",
    "Jaromíra Jindry",
    "Jaromíra Vejvody",
    "Jaromírova",
    "Jaroměřská",
    "Jaroslava Foglara",
    "Jaroslava Švehly",
    "Jaroslavická",
    "Jasanová",
    "Jaselská",
    "Jaselská",
    "Jasenická",
    "Jasenná",
    "Jasmínová",
    "Jasná I",
    "Jasná Ii",
    "Jaspisová",
    "Jateční",
    "Jaurisova",
    "Jaurisova",
    "Javorenská",
    "Javornická",
    "Javorová",
    "Javorská",
    "Javořická",
    "Jašíkova",
    "Jažlovická",
    "Jedlová",
    "Jednostranná",
    "Jednostranná",
    "Jednotného Zemědělského Družstva",
    "Jednořadá",
    "Jelenovská",
    "Jelení",
    "Jelínkova",
    "Jemenská",
    "Jemnická",
    "Jenerálka",
    "Jenečská",
    "Jenišovská",
    "Jenská",
    "Jeníkovická",
    "Jenštejnská",
    "Jeremenkova",
    "Jeremenkova",
    "Jeremenkova",
    "Jeremiášova",
    "Jeremiášova",
    "Jerevanská",
    "Jeronýmova",
    "Jeruzalémská",
    "Jesenická",
    "Jeseniova",
    "Jestřebická",
    "Jetelová",
    "Jetřichovická",
    "Jevanská",
    "Jezdecká",
    "Jezdovická",
    "Jezerní",
    "Jezerská",
    "Jezevčí",
    "Ječná",
    "Jeřabinová",
    "Jeřabinová",
    "Jeřická",
    "Jeřábkova",
    "Jeřábnická",
    "Jeřábová",
    "Ješetická",
    "Ještědská",
    "Ježdíkova",
    "Ježkova",
    "Ježovická",
    "Ježovická",
    "Ježovská",
    "Jihlavská",
    "Jihovýchodní I",
    "Jihovýchodní Ii",
    "Jihovýchodní Iii",
    "Jihovýchodní Iv",
    "Jihovýchodní Ix",
    "Jihovýchodní V",
    "Jihovýchodní Vi",
    "Jihovýchodní Vii",
    "Jihovýchodní Viii",
    "Jihozápadní I",
    "Jihozápadní Ii",
    "Jihozápadní Iii",
    "Jihozápadní Iv",
    "Jihozápadní V",
    "Jihozápadní Vi",
    "Jihočeská",
    "Jilemnická",
    "Jilemnická",
    "Jilemnického",
    "Jilmová",
    "Jilská",
    "Jindrova",
    "Jindřicha Jindřicha",
    "Jindřicha Plachty",
    "Jindřichova",
    "Jindřišská",
    "Jinolická",
    "Jinonická",
    "Jinonická",
    "Jinočanská",
    "Jirenská",
    "Jirečkova",
    "Jirkovská",
    "Jirsákova",
    "Jirsíkova",
    "Jiránkova",
    "Jiráskovo Nám.",
    "Jiráskovo Náměstí",
    "Jirčanská",
    "Jiskrova",
    "Jistebnická",
    "Jitkovská",
    "Jitravská",
    "Jitravská",
    "Jitrocelová",
    "Jitřní",
    "Jivenská",
    "Jizerská",
    "Jičínská",
    "Jičínská",
    "Jiřická",
    "Jiřinková",
    "Jiřiny Štěpničkové",
    "Jiřská",
    "Jiřího Jandy",
    "Jiřího Mašína",
    "Jiřího Ze Vtelna",
    "Jiříčkova",
    "Jiříčkové",
    "Jižní I",
    "Jižní Ii",
    "Jižní Iii",
    "Jižní Iv",
    "Jižní Ix",
    "Jižní Nám.",
    "Jižní Náměstí",
    "Jižní Spojka",
    "Jižní Spojka",
    "Jižní Spojka",
    "Jižní Spojka",
    "Jižní V",
    "Jižní Vi",
    "Jižní Vii",
    "Jižní Viii",
    "Jižní Xi",
    "Jižní Xii",
    "Jižní Xiii",
    "Jižní Xiv",
    "Jižní Xv",
    "Jižní Xvi",
    "Jižní Xvii",
    "Johanitská",
    "Jordana Jovkova",
    "Jordánská",
    "Josefa Bíbrdlíka",
    "Josefa Houdka",
    "Josefa Houdka",
    "Josefa Kočího",
    "Josefa Němce",
    "Josefa Vašíčka",
    "Josefa Šimůnka",
    "Josefská",
    "José Martího",
    "Juarézova",
    "Jugoslávská",
    "Jugoslávských Partyzánů",
    "Jugoslávských Partyzánů",
    "Jungmannova",
    "Jungmannova",
    "Jungmannovo Náměstí",
    "Junácká",
    "Jupiterova",
    "Jurkovičova",
    "Juárezova",
    "Jzd",
    "Jáchymova",
    "Jáchymova",
    "Jáchymovská",
    "Jánošíkova",
    "Jánská",
    "Jánský Vršek",
    "Jíchova",
    "Jílkova",
    "Jílovická",
    "Jílovišťská",
    "Jílovská",
    "Jílovská",
    "Jílová",
    "Jírova",
    "Jírovcovo Nám.",
    "Jírovcovo Náměstí",
    "Jívanská",
    "Jívová",
    "K Austisu",
    "K Avii",
    "K Barrandovu",
    "K Bateriím",
    "K Bažantnici",
    "K Belvederu",
    "K Berance",
    "K Beranovu",
    "K Berounce",
    "K Beránku",
    "K Betonárně",
    "K Betáni",
    "K Blatovu",
    "K Bohnicím",
    "K Borovíčku",
    "K Botiči",
    "K Brance",
    "K Brnkám",
    "K Brusce",
    "K Brusce",
    "K Brůdku",
    "K Bílému Vrchu",
    "K Běchovicům",
    "K Březince",
    "K Březiněvsi",
    "K Břečkám",
    "K Celinám",
    "K Cementárně",
    "K Chabům",
    "K Chabům",
    "K Chaloupce",
    "K Chaloupkám",
    "K Chatám",
    "K Chmelnici",
    "K Chumberku",
    "K Cihelně",
    "K Cikánce",
    "K Cíli",
    "K Dalejím",
    "K Dobré Vodě",
    "K Dobré Vodě",
    "K Dolům",
    "K Drahani",
    "K Drahani",
    "K Drazdům",
    "K Drsnici",
    "K Dubinám",
    "K Dubovému Mlýnu",
    "K Dubu",
    "K Dubči",
    "K Dálnici",
    "K Dálnici",
    "K Dýmači",
    "K Děrám",
    "K Fantovu Mlýnu",
    "K Farkám",
    "K Fialce",
    "K Fišpance",
    "K Habrovce",
    "K Habru",
    "K Haltýři",
    "K Havlínu",
    "K Hluboké Cestě",
    "K Hlásku",
    "K Holyni",
    "K Holému Vrchu",
    "K Holému Vrchu",
    "K Homolce",
    "K Horkám",
    "K Horkám",
    "K Horkám",
    "K Horním Počernicím",
    "K Horoměřicům",
    "K Hořavce",
    "K Hradišti",
    "K Hrnčířům",
    "K Hrušovu",
    "K Hrušovu",
    "K Hrázi",
    "K Hutím",
    "K Hutím",
    "K Hutím",
    "K Hádku",
    "K Háječku",
    "K Háji",
    "K Háji",
    "K Hájku",
    "K Hájovně",
    "K Hájovně",
    "K Hájovně",
    "K Hájům",
    "K Hárunce",
    "K Interně",
    "K Jalovce",
    "K Jasánkám",
    "K Jelenu",
    "K Jelenám",
    "K Jezeru",
    "K Jezeru",
    "K Jezu",
    "K Jezírku",
    "K Jihu",
    "K Jihu",
    "K Jinočanům",
    "K Jinočanům",
    "K Jižnímu Městu",
    "K Juliáně",
    "K Jízdárně",
    "K Labeškám",
    "K Ladům",
    "K Lahovičkám",
    "K Lahovské",
    "K Lažance",
    "K Lesoparku",
    "K Lesu",
    "K Lesu",
    "K Lesíku",
    "K Letišti",
    "K Letňanům",
    "K Libuši",
    "K Lindě",
    "K Lipanům",
    "K Lipinám",
    "K Lipám",
    "K Lochkovu",
    "K Lomu",
    "K Louži",
    "K Luhu",
    "K Lukám",
    "K Lučinám",
    "K Lužinám",
    "K Ládví",
    "K Ládví",
    "K Lánu",
    "K Lávce",
    "K Lázním",
    "K Lípě",
    "K Markétě",
    "K Matěji",
    "K Mejtu",
    "K Metru",
    "K Metru",
    "K Milíčovu",
    "K Mlíčníku",
    "K Mlýnu",
    "K Modřanskému Nádraží",
    "K Mohyle",
    "K Moravině",
    "K Moravině",
    "K Mostku",
    "K Mostu",
    "K Motelu",
    "K Motolu",
    "K Mírám",
    "K Měcholupům",
    "K Měchurce",
    "K Nedvězí",
    "K Netlukám",
    "K Noskovně",
    "K Nouzovu",
    "K Nové Vsi",
    "K Nové Vsi",
    "K Nové Škole",
    "K Novému Dvoru",
    "K Novému Hradu",
    "K Novému Sídlišti",
    "K Novým Domkům",
    "K Nádraží",
    "K Nádrži",
    "K Náhonu",
    "K Náměstí",
    "K Náplavce",
    "K Náplavce",
    "K Návrší",
    "K Návrší",
    "K Návsi",
    "K Obci",
    "K Obecním Hájovnám",
    "K Oboře",
    "K Obsinám",
    "K Ochozu",
    "K Ohradě",
    "K Okrouhlíku",
    "K Olympiku",
    "K Opatřilce",
    "K Opatřilce",
    "K Oplocení",
    "K Orionce",
    "K Osmidomkům",
    "K Otočce",
    "K Ovčínu",
    "K Ovčínu",
    "K Padesátníku",
    "K Palečku",
    "K Panenkám",
    "K Parku",
    "K Pastvinám",
    "K Pazderkám",
    "K Pekárně",
    "K Peluňku",
    "K Petrově Komoře",
    "K Pitkovicům",
    "K Podchodu",
    "K Podjezdu",
    "K Podjezdu",
    "K Polím",
    "K Pomníku",
    "K Popelce",
    "K Popelce",
    "K Potoku",
    "K Poště",
    "K Pramenu",
    "K Prelátům",
    "K Prádelně",
    "K Průhonicům",
    "K Průhonu",
    "K Průmstavu",
    "K Pyramidce",
    "K Pérovně",
    "K Pískovně",
    "K Písnici",
    "K Přehradám",
    "K Přejezdu",
    "K Přístavišti",
    "K Přívozu",
    "K Radhošti",
    "K Radonicům",
    "K Radotínu",
    "K Radotínu",
    "K Remízku",
    "K Rokli",
    "K Rokytce",
    "K Rotundě",
    "K Rovinám",
    "K Rozkoši",
    "K Rozmezí",
    "K Roztokům",
    "K Rozvodně",
    "K Rukavičkárně",
    "K Rybníku",
    "K Rybníčku",
    "K Rybníčkům",
    "K Rybárně",
    "K Ryšánce",
    "K Ryšánce",
    "K Sadu",
    "K Safině",
    "K Samoobsluze",
    "K Samotě",
    "K Sedlišti",
    "K Sibřině",
    "K Sokolovně",
    "K Sopce",
    "K Sopce",
    "K Starému Bubenči",
    "K Starému Lomu",
    "K Stavebninám",
    "K Sukovu",
    "K Sádkám",
    "K Sádkám",
    "K Sídlišti",
    "K Sídlišti",
    "K Teplárně",
    "K Topolům",
    "K Topírně",
    "K Transformátoru",
    "K Trati",
    "K Trninám",
    "K Trnkám",
    "K Trníčku",
    "K Truhlářce",
    "K Tržišti",
    "K Tuchoměřicům",
    "K Táboru",
    "K Třebonicům",
    "K Třešňovce",
    "K Tůni",
    "K Ubytovnám",
    "K Uhříněvsi",
    "K Uhříněvsi",
    "K Učilišti",
    "K Valu",
    "K Vejvoďáku",
    "K Velké Ohradě",
    "K Velké Ohradě",
    "K Velkému Dvoru",
    "K Verneráku",
    "K Viaduktu",
    "K Vidouli",
    "K Vilkám",
    "K Vinici",
    "K Vinicím",
    "K Vinoři",
    "K Vizerce",
    "K Višňovce",
    "K Višňovce",
    "K Višňovému Sadu",
    "K Vltavě",
    "K Vlásence",
    "K Vodici",
    "K Vodojemu",
    "K Vodárně",
    "K Vodě",
    "K Vrbičkám",
    "K Vrbě",
    "K Vrcholu",
    "K Vrtilce",
    "K Vršíčku",
    "K Vyhlídce",
    "K Vysoké Cestě",
    "K Vystrkovu",
    "K Václavce",
    "K Vápence",
    "K Váze",
    "K Výboru",
    "K Výtopně",
    "K Výzkumným Ústavům",
    "K Větrolamu",
    "K Zabrkům",
    "K Zadní Kopanině",
    "K Zadní Kopanině",
    "K Zahradnictví",
    "K Zahradám",
    "K Zahrádkám",
    "K Zastávce",
    "K Zatáčce",
    "K Zelené Louce",
    "K Zeleným Domkům",
    "K Zelenči",
    "K Zámku",
    "K Zátiší",
    "K Závodišti",
    "K Závorám",
    "K Závěrce",
    "K Závětinám",
    "K Údolí",
    "K Údolí Hvězd",
    "K Újezdu",
    "K Ústavu",
    "K Úvozu",
    "K Černošicím",
    "K Červenému Dvoru",
    "K Červenému Dvoru",
    "K Červenému Dvoru",
    "K Červenému Vrchu",
    "K Čestlicům",
    "K Čihadlům",
    "K Ďáblicům",
    "K Řece",
    "K Řeporyjím",
    "K Řeporyjím",
    "K Říčanům",
    "K Šafránce",
    "K Šafránce",
    "K Šancím",
    "K Šeberovu",
    "K Šeberáku",
    "K Šedivce",
    "K Šubrtce",
    "K Železnici",
    "K Žižkovu",
    "Kabeláčova",
    "Kabešova",
    "Kabátové",
    "Kadaňská",
    "Kadeřávkovská",
    "Kafkova",
    "Kahovská",
    "Kaizlovy Sady",
    "Kakosova",
    "Kakostová",
    "Kalabisova",
    "Kalašova",
    "Kalinová",
    "Kališnická",
    "Kališťská",
    "Kalská",
    "Kalvodova",
    "Kamelova",
    "Kamencová",
    "Kamenická",
    "Kamenická",
    "Kamenitá",
    "Kamenná",
    "Kameníků",
    "Kamerunská",
    "Kampanova",
    "Kamzíková",
    "Kamýcká",
    "Kamýcká",
    "Kamýcká",
    "Kanadská",
    "Kandertova",
    "Kanovnická",
    "Kapitulská",
    "Kaplanova",
    "Kaplická",
    "Kapraďová",
    "Kaprova",
    "Kaprova",
    "Kapucínská",
    "Karafiátová",
    "Karasova",
    "Karasovská",
    "Kardausova",
    "Kardašovská",
    "Kardašovská",
    "Karenova",
    "Karfíkova",
    "Karla Engliše",
    "Karla Hlaváčka",
    "Karla Kryla",
    "Karla Křížka",
    "Karla Michala",
    "Karla Rachůnka",
    "Karla Tomáše",
    "Karla Zicha",
    "Karla Černého",
    "Karlická",
    "Karlova",
    "Karlovarská",
    "Karlovarská",
    "Karlovická",
    "Karlovo Nám.",
    "Karlovo Nám.",
    "Karlovo Náměstí",
    "Karlovo Náměstí",
    "Karlínské Nám.",
    "Karlínské Náměstí",
    "Karlštejnská",
    "Karmelitská",
    "Karolinská",
    "Karoliny Světlé",
    "Karpatská",
    "Kartounářů",
    "Kartouzská",
    "Kasalická",
    "Kateřinská",
    "Kateřinské Nám.",
    "Kateřinské Náměstí",
    "Katovická",
    "Katusická",
    "Kavkazská",
    "Kazaňská",
    "Kazašská",
    "Kazimírova",
    "Kaznějovská",
    "Kazín",
    "Kazínská",
    "Kačerovská",
    "Kačínská",
    "Kaňkova",
    "Kaňkovského",
    "Kaňovská",
    "Kašeho",
    "Kaškova",
    "Kašovická",
    "Kašparovo Nám.",
    "Kašparovo Náměstí",
    "Kašperská",
    "Kaštanová",
    "Kbelská",
    "Kbelská",
    "Kbelská",
    "Kbelská",
    "Kdoulová",
    "Ke Březině",
    "Ke Břvům",
    "Ke Cvičišti",
    "Ke Dračkám",
    "Ke Dráze",
    "Ke Dvoru",
    "Ke Džbánu",
    "Ke Garážím",
    "Ke Golfu",
    "Ke Goniu",
    "Ke Hlásce",
    "Ke Hrádku",
    "Ke Hrázi",
    "Ke Hrázi",
    "Ke Hřbitovu",
    "Ke Hřišti",
    "Ke Kablu",
    "Ke Kablu",
    "Ke Kalvárii",
    "Ke Kaménce",
    "Ke Kamínce",
    "Ke Kamýku",
    "Ke Kapličce",
    "Ke Kapslovně",
    "Ke Karlovu",
    "Ke Kateřinkám",
    "Ke Kazínu",
    "Ke Kašně",
    "Ke Kinu",
    "Ke Kladivům",
    "Ke Klimentce",
    "Ke Klubovně",
    "Ke Klínku",
    "Ke Klínku",
    "Ke Klíčovu",
    "Ke Koh-I-Nooru",
    "Ke Kolodějskému Zámku",
    "Ke Kolodějům",
    "Ke Kolonii",
    "Ke Konstruktivě",
    "Ke Kopečku",
    "Ke Korunce",
    "Ke Kostelu",
    "Ke Kostelíčku",
    "Ke Kotlářce",
    "Ke Koulce",
    "Ke Koupališti",
    "Ke Kovárně",
    "Ke Kozím Hřbetům",
    "Ke Královicům",
    "Ke Krči",
    "Ke Krčské Stráni",
    "Ke Kulišce",
    "Ke Kulturnímu Domu",
    "Ke Kurtům",
    "Ke Kyjovu",
    "Ke Kálku",
    "Ke Křížku",
    "Ke Křížkám",
    "Ke Lhoteckému Lesu",
    "Ke Mlýnku",
    "Ke Mlýnu",
    "Ke Mlýnu",
    "Ke Schodům",
    "Ke Skalce",
    "Ke Skalkám",
    "Ke Skladům",
    "Ke Sklárně",
    "Ke Skále",
    "Ke Slatinám",
    "Ke Slivenci",
    "Ke Smrčině",
    "Ke Smíchovu",
    "Ke Smíchovu",
    "Ke Splávku",
    "Ke Spofě",
    "Ke Spořilovu",
    "Ke Spálence",
    "Ke Srážku",
    "Ke Stadionu",
    "Ke Stanici",
    "Ke Starému Hřišti",
    "Ke Starým Rybníkům",
    "Ke Stinkovskému Rybníku",
    "Ke Strašnické",
    "Ke Strouze",
    "Ke Stráni",
    "Ke Strži",
    "Ke Studni",
    "Ke Studni",
    "Ke Studánce",
    "Ke Stupicím",
    "Ke Stáčírně",
    "Ke Stírce",
    "Ke Střelnici",
    "Ke Střelnici",
    "Ke Sv. Izidoru",
    "Ke Třem Mostům",
    "Ke Xaverovu",
    "Ke Zbraslavi",
    "Ke Zbrojnici",
    "Ke Zbuzanům",
    "Ke Zdibům",
    "Ke Zdravotnímu Středisku",
    "Ke Zděři",
    "Ke Zlatému Kopci",
    "Ke Zličínu",
    "Ke Znaku",
    "Ke Zvonici",
    "Ke Zvoničce",
    "Ke Školce",
    "Ke Škole",
    "Ke Šmejkalu",
    "Ke Štvanici",
    "Ke Štítu",
    "Ke Štěpcům",
    "Ke Štěrkovně",
    "Ke Švestkovce",
    "Kecova",
    "Kejhova",
    "Kejnická",
    "Kellnerova",
    "Keltská",
    "Keltů",
    "Kelvinova",
    "Kemrova",
    "Keplerova",
    "Keplerova",
    "Keramická",
    "Kesnerka",
    "Kestřanská",
    "Keteňská",
    "Kettnerova",
    "Keřová",
    "Khodlova",
    "Kischova",
    "Kišiněvská",
    "Kladenská",
    "Kladenská",
    "Kladenská",
    "Kladinovská",
    "Kladrubská",
    "Kladská",
    "Klamovka",
    "Klapkova",
    "Klapálkova",
    "Klatovská",
    "Klausova",
    "Klecandova",
    "Klecanská",
    "Klenečská",
    "Klenovická",
    "Klenovská",
    "Klenová",
    "Klečkova",
    "Klečákova",
    "Klešická",
    "Klicperova",
    "Klidná",
    "Klihařská",
    "Klikatá",
    "Klikatá",
    "Klimentská",
    "Klivarova",
    "Kloboukova",
    "Kloboučnická",
    "Kloknerova",
    "Klokotská",
    "Klostermannova",
    "Klouzková",
    "Kludských",
    "Klukovická",
    "Klánova",
    "Klánova",
    "Klánova",
    "Klánovická",
    "Klánovická",
    "Klárov",
    "Klášterecká",
    "Klášterská",
    "Klášterského",
    "Klímova",
    "Klímova",
    "Klínecká",
    "Klínovecká",
    "Klínová",
    "Klírova",
    "Klíčanská",
    "Klíčova",
    "Klíčovská",
    "Klíčovská",
    "Kmochova",
    "Knínická",
    "Kněževeská",
    "Kněžická",
    "Koberkova",
    "Kobrova",
    "Kobyliská",
    "Kobyliské Nám.",
    "Kobyliské Náměstí",
    "Kobylákova",
    "Kochanova",
    "Kocianova",
    "Koclířova",
    "Kocourova",
    "Kodaňská",
    "Kodicilova",
    "Kodymova",
    "Kohoutovská",
    "Kohoutových",
    "Kojetická",
    "Kojická",
    "Kokořínská",
    "Kolbenova",
    "Kolbenova",
    "Kolbenova",
    "Koldínova",
    "Kolejní",
    "Kolektivní",
    "Kolešovská",
    "Kollárova",
    "Kolmistrova",
    "Kolmá",
    "Kolocova",
    "Kolodějská",
    "Kolonie U Obecní Cihelny",
    "Kolonka",
    "Kolovečská",
    "Kolovratská",
    "Kolová",
    "Kolátorova",
    "Koláčkova",
    "Koláře Kaliny",
    "Kolářova",
    "Kolínova",
    "Kolínská",
    "Kolčavka",
    "Komenského Nám.",
    "Komenského Náměstí",
    "Komornická",
    "Komořanská",
    "Komořanská",
    "Komořanská",
    "Komunardů",
    "Komárkova",
    "Komárovská",
    "Koncová",
    "Konecchlumského",
    "Konečná",
    "Kongresová",
    "Konojedská",
    "Konopišťská",
    "Konopova",
    "Konopáskova",
    "Konstantinova",
    "Konvalinková",
    "Konviktská",
    "Konzumní",
    "Konzumní",
    "Koníčkovo Nám.",
    "Koníčkovo Náměstí",
    "Konětopská",
    "Koněvova",
    "Konšelská",
    "Konžská",
    "Kopalova",
    "Kopanina",
    "Kopanská",
    "Kopeckého",
    "Koperníkova",
    "Kopečná",
    "Kopretinová",
    "Kopřivnická",
    "Korandova",
    "Korandova",
    "Korunní",
    "Korunní",
    "Korunní",
    "Korunovační",
    "Korunovační",
    "Korybutova",
    "Korycanská",
    "Korytná",
    "Kosatcová",
    "Kosařova",
    "Kosmická",
    "Kosmonoská",
    "Kosova",
    "Kosořická",
    "Kosořská",
    "Kostelecká",
    "Kostelecká",
    "Kostelní",
    "Kostelní Náměstí",
    "Kostečná",
    "Kostková",
    "Kostlivého",
    "Kostnické Nám.",
    "Kostnické Náměstí",
    "Kostomlatská",
    "Kostrbova",
    "Kostřínská",
    "Kosárkovo Nábř.",
    "Kosárkovo Nábřeží",
    "Kosí",
    "Koterovská",
    "Koterovská",
    "Kotevní",
    "Kotlaska",
    "Kotlářka",
    "Kotorská",
    "Kotovka",
    "Kotrčová",
    "Kotršálova",
    "Kotíkova",
    "Kotěrova",
    "Koubkova",
    "Koubkova",
    "Koubova",
    "Koukolová",
    "Koulka",
    "Koulova",
    "Kounická",
    "Kounovská",
    "Koutská",
    "Kouřimská",
    "Kovanecká",
    "Kovařovicova",
    "Kovriginova",
    "Kováků",
    "Kovárenská",
    "Kovářova",
    "Kovářská",
    "Kováříkova",
    "Kozinova",
    "Kozinovo Náměstí",
    "Kozlova",
    "Kozlovská",
    "Kozmíkova",
    "Kozomínská",
    "Kozácká",
    "Kozákovská",
    "Kozáková",
    "Kozí",
    "Kočova",
    "Kořenského",
    "Košařova",
    "Košická",
    "Koštířova",
    "Košátecká",
    "Košíkářská",
    "Košířské Nám.",
    "Košířské Náměstí",
    "Košťálkova",
    "Koťátkova",
    "Koželužská",
    "Kožlanská",
    "Kožná",
    "Kožíškova",
    "Kpt. Nálepky",
    "Kpt. Stránského",
    "Krabošická",
    "Krahulčí",
    "Krajanská",
    "Krajní",
    "Krajová",
    "Krajánkova",
    "Krakovská",
    "Kralická",
    "Kralupská",
    "Krameriova",
    "Kramlova",
    "Kramolná",
    "Kramolínská",
    "Kramperova",
    "Kraslická",
    "Krasnická",
    "Krasnojarská",
    "Kratochvílova",
    "Krausova",
    "Krbická",
    "Krchlebská",
    "Krejnická",
    "Krejčího",
    "Kremličkova",
    "Kremnická",
    "Kremnická",
    "Krhanická",
    "Krhanická",
    "Kristiánova",
    "Kriváňská",
    "Krkonošská",
    "Krnovská",
    "Krnská",
    "Krocínova",
    "Krocínovská",
    "Kroftova",
    "Krohova",
    "Krokova",
    "Krolmusova",
    "Kropáčkova",
    "Krosenská",
    "Kroupova",
    "Kroupova",
    "Krouzova",
    "Krovova",
    "Krteňská",
    "Kruhová",
    "Krumlovská",
    "Krupkovo Nám.",
    "Krupkovo Náměstí",
    "Krupná",
    "Krupská",
    "Krušovická",
    "Kružberská",
    "Krylovecká",
    "Krylovecká",
    "Krymská",
    "Krynická",
    "Krystalová",
    "Kryšpínova",
    "Kryštofova",
    "Krále Václava Iv.",
    "Králodvorská",
    "Králova",
    "Královická",
    "Královny Žofie",
    "Královská Obora",
    "Královská Obora",
    "Krásnolipská",
    "Krásného",
    "Krásova",
    "Krátká",
    "Krátká",
    "Krátkého",
    "Krátký Lán",
    "Krčmářovská",
    "Krčská",
    "Krčínovo Nám.",
    "Krčínovo Náměstí",
    "Krčínská",
    "Krňovická",
    "Krškova",
    "Kubatova",
    "Kubaštova",
    "Kubelíkova",
    "Kubišova",
    "Kubištova",
    "Kubova",
    "Kubánské Nám.",
    "Kubánské Náměstí",
    "Kubíkova",
    "Kubínova",
    "Kuchařská",
    "Kudeříkové",
    "Kudrnova",
    "Kukelská",
    "Kukelská",
    "Kukulova",
    "Kukulova",
    "Kukučínova",
    "Kulhavého",
    "Kulhánkovská",
    "Kuncova",
    "Kundratka",
    "Kunešova",
    "Kunická",
    "Kunratická",
    "Kunratická Spojka",
    "Kunratická Spojka",
    "Kuní",
    "Kuní",
    "Kunínova",
    "Kunčická",
    "Kunětická",
    "Kupeckého",
    "Kupkova",
    "Kurandové",
    "Kurkova",
    "Kurta Konráda",
    "Kurzova",
    "Kurčatovova",
    "Kusá",
    "Kusého",
    "Kutilova",
    "Kutnauerovo Náměstí",
    "Kutnohorská",
    "Kutnohorská",
    "Kutrovická",
    "Kuttelwascherova",
    "Kutvirtova",
    "Kučerova",
    "Kučerové",
    "Kuťatská",
    "Kuželova",
    "Kvapilova",
    "Kvasinská",
    "Kvestorská",
    "Květinková",
    "Květinářská",
    "Květnická",
    "Květnová",
    "Květnového Povstání",
    "Květnového Povstání",
    "Květnového Vítězství",
    "Květnového Vítězství",
    "Květná",
    "Květoslavova",
    "Květová",
    "Kyjevská",
    "Kyjevská",
    "Kyjovská",
    "Kyjská",
    "Kyjská",
    "Kykalova",
    "Kymrova",
    "Kynická",
    "Kyselova",
    "Kyslíková",
    "Kysucká",
    "Kysúcká",
    "Kytlická",
    "Kytínská",
    "Kácovská",
    "Kádnerova",
    "Kálikova",
    "Kálmánova",
    "Káranská",
    "Křejpského",
    "Křelovická",
    "Křemelná",
    "Křemencova",
    "Křemenná",
    "Křemenáčová",
    "Křemílkova",
    "Křenická",
    "Křenova",
    "Křepelčí",
    "Křepelčí",
    "Křesadlova",
    "Křesanovská",
    "Křeslická",
    "Křesomyslova",
    "Křešínská",
    "Křimická",
    "Křimovská",
    "Křivatcová",
    "Křivenická",
    "Křivoklátská",
    "Křivá",
    "Křičkova",
    "Křišťanova",
    "Křišťálová",
    "Křižovnická",
    "Křižovnické Nám.",
    "Křižovnické Náměstí",
    "Křižíkova",
    "Křižíkova",
    "Křovinovo Nám.",
    "Křovinovo Náměstí",
    "Křtinská",
    "Kříženeckého Nám.",
    "Kříženeckého Náměstí",
    "Křížkovského",
    "Křížová",
    "Křížová",
    "Labská",
    "Labětínská",
    "Ladislava Coňka",
    "Ladova",
    "Laglerové",
    "Lahovská",
    "Lahovská",
    "Lamačova",
    "Langweilova",
    "Lannova",
    "Lanýžová",
    "Lanžhotská",
    "Lanžovská",
    "Laténská",
    "Laubova",
    "Laudonova",
    "Laudova",
    "Laurinova",
    "Lazarská",
    "Lazarská",
    "Lačnovská",
    "Lažanská",
    "Lažanská",
    "Lažanského",
    "Lebeděvova",
    "Ledařská",
    "Ledecká",
    "Ledečská",
    "Ledkovská",
    "Lednická",
    "Lednová",
    "Ledvická",
    "Ledvinova",
    "Ledč",
    "Ledčická",
    "Legerova",
    "Legerova",
    "Legerova",
    "Legerova",
    "Legionářů",
    "Lehárova",
    "Leitzova",
    "Leknínová",
    "Leopoldova",
    "Leskovecká",
    "Lesnická",
    "Lesného",
    "Lesní",
    "Lessnerova",
    "Lesáků",
    "Letců",
    "Letecká",
    "Letenská",
    "Letenské Nám.",
    "Letenské Nám.",
    "Letenské Náměstí",
    "Letenské Náměstí",
    "Letenské Sady",
    "Letní",
    "Letohradská",
    "Letovská",
    "Letňanská",
    "Letňanská",
    "Levandulová",
    "Levobřežní",
    "Levského",
    "Levá",
    "Lexova",
    "Lečkova",
    "Lešanská",
    "Lešenská",
    "Lešetínská",
    "Lešovská",
    "Leštínská",
    "Lhenická",
    "Lhotecká",
    "Lhotecká",
    "Lhotská",
    "Lhotákova",
    "Liberecká",
    "Liberijská",
    "Libečkova",
    "Libeňská",
    "Libeňský Ostrov",
    "Libeňský Ostrov",
    "Libeřská",
    "Libichovská",
    "Libická",
    "Libišanská",
    "Libišská",
    "Libkovská",
    "Liblická",
    "Liblická",
    "Libochovická",
    "Libocká",
    "Liborova",
    "Libotovská",
    "Libovická",
    "Libočanská",
    "Liboňovská",
    "Libošovická",
    "Libuňská",
    "Libušina",
    "Libušská",
    "Libušská",
    "Libušská",
    "Libušská",
    "Libáňská",
    "Libínská",
    "Libčanská",
    "Libčická",
    "Liběchovská",
    "Libědická",
    "Liběšická",
    "Libřická",
    "Lichá",
    "Lidečská",
    "Lidická",
    "Lidického",
    "Lihovarská",
    "Liliová",
    "Lilková",
    "Limuzská",
    "Limuzská",
    "Lindavská",
    "Lindleyova",
    "Lindnerova",
    "Linhartova",
    "Linhartská",
    "Lipanská",
    "Lipecká",
    "Lipenecká",
    "Lipenská",
    "Lipenská",
    "Lipenské Nám.",
    "Lipenské Náměstí",
    "Lipnická",
    "Lipoltická",
    "Lipovická",
    "Lipovská",
    "Lipová Alej",
    "Lipové Náměstí",
    "Lipského",
    "Lipí",
    "Lisabonská",
    "Lisabonská",
    "Listopadová",
    "Lisztova",
    "Litavská",
    "Litevská",
    "Litická",
    "Litochlebská",
    "Litoměřická",
    "Litoměřická",
    "Litovická",
    "Litošická",
    "Litošická",
    "Litožnická",
    "Litvínovská",
    "Litvínovská",
    "Livornská",
    "Lišanská",
    "Lišická",
    "Liškova",
    "Lišovická",
    "Liščí",
    "Liščí",
    "Lnářská",
    "Lobečská",
    "Lochenická",
    "Lochkovská",
    "Lochotínská",
    "Lodecká",
    "Lodní Mlýny",
    "Loděnická",
    "Lodžská",
    "Lodžská",
    "Lohenická",
    "Lohniského",
    "Lojovická",
    "Lojovická",
    "Lojovická",
    "Lolkova",
    "Lomařská",
    "Lomecká",
    "Lomená",
    "Lomnická",
    "Lomnického",
    "Lomová",
    "Londýnská",
    "Loosova",
    "Lopatecká",
    "Lopatecká",
    "Lopuchová",
    "Loretánská",
    "Loretánské Nám.",
    "Loretánské Náměstí",
    "Losinská",
    "Lotyšská",
    "Loucká",
    "Loudova",
    "Lounská",
    "Lounských",
    "Loutkářská",
    "Loučanská",
    "Loučimská",
    "Loučná",
    "Louňovická",
    "Lovecká",
    "Lovosická",
    "Lovosická",
    "Lovosická",
    "Lovčenská",
    "Lovčická",
    "Lozická",
    "Lošetická",
    "Lošáková",
    "Lstibořská",
    "Lubenecká",
    "Lublaňská",
    "Lublaňská",
    "Lublinská",
    "Lubnická",
    "Lucemburská",
    "Lucemburská",
    "Lucinková",
    "Ludmilina",
    "Ludvíkova",
    "Luhovská",
    "Lukavecká",
    "Lukavského",
    "Lukešova",
    "Lukešova",
    "Lukovská",
    "Lukášova",
    "Lumiérů",
    "Lumírova",
    "Lumírova",
    "Luníkovská",
    "Lupenická",
    "Lupáčova",
    "Lutínská",
    "Luční",
    "Luštěnická",
    "Lužanská",
    "Lužecká",
    "Lužická",
    "Lužnická",
    "Lužná",
    "Lužní",
    "Lužská",
    "Lvovská",
    "Lysinská",
    "Lysolajská",
    "Lysolajské Údolí",
    "Lyčkovo Nám.",
    "Lyčkovo Náměstí",
    "Lyžařská",
    "Ládevská",
    "Lánovská",
    "Lánská",
    "Lásenická",
    "Láskova",
    "Lázeňská",
    "Lékařská",
    "Lékořicová",
    "Líbalova",
    "Líbeznická",
    "Lípová",
    "Lískovická",
    "Lísková",
    "Líšnická",
    "Lýskova",
    "M. J. Lermontova",
    "Macešková",
    "Macharovo Nám.",
    "Macharovo Náměstí",
    "Machatého",
    "Machkova",
    "Machnova",
    "Machovcova",
    "Machovická",
    "Machovská",
    "Machuldova",
    "Macháčkova",
    "Madarova",
    "Madaťjanova",
    "Madridská",
    "Magd. Rettigové",
    "Magdalény Rettigové",
    "Magistrů",
    "Magnitogorská",
    "Mahenova",
    "Mahlerovy Sady",
    "Mahulenina",
    "Maiselova",
    "Maiselova",
    "Majerové",
    "Majerského",
    "Makedonská",
    "Makovská",
    "Makovského",
    "Maková",
    "Malachitová",
    "Malebná",
    "Malenická",
    "Malešická",
    "Malešická",
    "Malešická",
    "Malešické Nám.",
    "Malešické Náměstí",
    "Malešovská",
    "Malinová",
    "Maličká",
    "Malkovského",
    "Malletova",
    "Malletova",
    "Malobřevnovská",
    "Malostranské Nábř.",
    "Malostranské Nábřeží",
    "Malostranské Náměstí",
    "Malotická",
    "Malovická",
    "Maltézské Nám.",
    "Maltézské Náměstí",
    "Malá",
    "Malá Bylanská",
    "Malá Houdova",
    "Malá Klášterní",
    "Malá Lada",
    "Malá Michnovka",
    "Malá Plynární",
    "Malá Skloněná",
    "Malá Smidarská",
    "Malá Tyršovka",
    "Malá Xaveriova",
    "Malá Štupartská",
    "Malá Štěpánská",
    "Malátova",
    "Malé Nám.",
    "Malé Náměstí",
    "Malého",
    "Malínská",
    "Malířská",
    "Malý Dvůr",
    "Malý Okrouhlík",
    "Malšovická",
    "Malšovské Nám.",
    "Malšovské Náměstí",
    "Mandloňová",
    "Mandova",
    "Mansfeldova",
    "Manská Zahrada",
    "Mantovská",
    "Manželů Dostálových",
    "Manželů Kotrbových",
    "Manželů Lyčkových",
    "Marciho",
    "Marešova",
    "Marie Cibulkové",
    "Marie Podvalové",
    "Mariánská",
    "Mariánská",
    "Mariánské Hradby",
    "Mariánské Hradby",
    "Mariánské Nám.",
    "Mariánské Náměstí",
    "Markova",
    "Markupova",
    "Markušova",
    "Markvartická",
    "Markyta",
    "Markétská",
    "Maroldova",
    "Martinelliho",
    "Martinická",
    "Martinova",
    "Martinovská",
    "Martinská",
    "Marty Krásové",
    "Marvanova",
    "Maršovská",
    "Masarykovo Nábř.",
    "Masarykovo Nábř.",
    "Masarykovo Nábřeží",
    "Masarykovo Nábřeží",
    "Masná",
    "Matek",
    "Matenská",
    "Maternova",
    "Mateřská",
    "Mateřídoušková",
    "Matjuchinova",
    "Matoušova",
    "Mattioliho",
    "Matúškova",
    "Matěchova",
    "Matějkova",
    "Matějovského",
    "Matějská",
    "Maxovská",
    "Mazancova",
    "Mazovská",
    "Mazurská",
    "Maďarská",
    "Maňákova",
    "Mařatkova",
    "Mařákova",
    "Maříkova",
    "Mašatova",
    "Maškova",
    "Mašovická",
    "Maštěřovského",
    "Mašínova",
    "Mechovka",
    "Mechová",
    "Medinská",
    "Medkova",
    "Medlovská",
    "Medová",
    "Meduňková",
    "Meinlinova",
    "Mejstříkova",
    "Melantrichova",
    "Meliorační",
    "Melodická",
    "Melounová",
    "Menclova",
    "Mendelova",
    "Mendíků",
    "Menšíkova",
    "Menšíkovská",
    "Merhoutova",
    "Merkurova",
    "Meruňková",
    "Meskářova",
    "Meteorologická",
    "Meteorologická",
    "Metodějova",
    "Metujská",
    "Mexická",
    "Mezi Chatami",
    "Mezi Domky",
    "Mezi Domy",
    "Mezi Humny",
    "Mezi Lysinami",
    "Mezi Lány",
    "Mezi Poli",
    "Mezi Potoky",
    "Mezi Rolemi",
    "Mezi Rybníky",
    "Mezi Sklady",
    "Mezi Stráněmi",
    "Mezi Vodami",
    "Mezi Úvozy",
    "Mezi Školami",
    "Mezibranská",
    "Mezihorská",
    "Mezihoří",
    "Mezilehlá",
    "Mezilesní",
    "Mezilesí",
    "Meziluží",
    "Mezipolí",
    "Mezitraťová",
    "Mezitraťová",
    "Mezitraťová",
    "Mezivrší",
    "Meziškolská",
    "Mečislavova",
    "Mečovská",
    "Mečíková",
    "Michalovicova",
    "Michalská",
    "Michelangelova",
    "Michelská",
    "Michelská",
    "Michnova",
    "Michnovka",
    "Mickiewiczova",
    "Mikanova",
    "Mikova",
    "Mikovcova",
    "Mikovická",
    "Mikulandská",
    "Mikuleckého",
    "Mikulova",
    "Mikulovická",
    "Mikuláše Z Husi",
    "Mikulášská",
    "Mikulčická",
    "Mikšovského",
    "Milady Horákové",
    "Milady Horákové",
    "Milady Horákové",
    "Milady Horákové",
    "Milady Horákové",
    "Milana Kadlece",
    "Milenovská",
    "Milerova",
    "Miletická",
    "Miletínská",
    "Milevská",
    "Milevská",
    "Milešovská",
    "Milotická",
    "Milovická",
    "Milovická",
    "Milánská",
    "Milínská",
    "Milíčova",
    "Milíčovská",
    "Mimoňská",
    "Minaříkova",
    "Minerální",
    "Minická",
    "Minská",
    "Miranova",
    "Miroslava Hajna",
    "Miroslava Hamra",
    "Mirotická",
    "Mirotická",
    "Mirovická",
    "Mirošovická",
    "Mirošovská",
    "Mistrovská",
    "Mistřínská",
    "Miřetická",
    "Miškovická",
    "Mladenovova",
    "Mladoboleslavská",
    "Mladoboleslavská",
    "Mladoboleslavská",
    "Mladoboleslavská",
    "Mladoboleslavská",
    "Mladotická",
    "Mladotova",
    "Mladých",
    "Mladých Běchovic",
    "Mladčina",
    "Mladějovská",
    "Mlynářská",
    "Mládeže",
    "Mládežnická",
    "Mládkova",
    "Mládí",
    "Mlázovická",
    "Mlékárenská",
    "Mlýnská",
    "Mlýnská",
    "Mnichovická",
    "Mochovská",
    "Mochovská",
    "Modenská",
    "Modlanská",
    "Modletická",
    "Modletínská",
    "Modravská",
    "Modrá",
    "Modrého",
    "Modřanská",
    "Modřanská",
    "Modřanská",
    "Modřanská",
    "Modřínová",
    "Mohelnická",
    "Mohylová",
    "Mojmírova",
    "Mokrá",
    "Mokřanská",
    "Moldavská",
    "Molitorovská",
    "Molákova",
    "Mongolská",
    "Moravanská",
    "Moravanů",
    "Moravská",
    "Morseova",
    "Morstadtova",
    "Morušová",
    "Morušová",
    "Morávkova",
    "Moskevská",
    "Mostecká",
    "Motolská",
    "Moulíkova",
    "Moysesova",
    "Mozambická",
    "Mozartova",
    "Mošnova",
    "Možného",
    "Mramorová",
    "Mratínská",
    "Mračnická",
    "Mrkosova",
    "Mrkvičkova",
    "Mrákovská",
    "Mrázkova",
    "Mrázovka",
    "Mráčkova",
    "Mrštíkova",
    "Mrštíkova",
    "Muchomůrková",
    "Muchova",
    "Mukařovská",
    "Mukařovského",
    "Murgašova",
    "Murmanská",
    "Musilova",
    "Musorgského",
    "Musílkova",
    "Mutěnínská",
    "Muzejní",
    "Muzikova",
    "Muškova",
    "Mydlářka",
    "Myjavská",
    "Mylnerovka",
    "Myslbekova",
    "Myslbekova",
    "Myslivecká",
    "Myslivečkova",
    "Myslíkova",
    "Myslíkova",
    "Myšlínská",
    "Máchova",
    "Máchova",
    "Mádrova",
    "Májovková",
    "Májová",
    "Málkovská",
    "Mánesova",
    "Márova",
    "Máslova",
    "Máslovická",
    "Mátová",
    "Mílovská",
    "Mílová",
    "Mírová",
    "Mírového Hnutí",
    "Mírového Hnutí",
    "Místecká",
    "Míčova",
    "Míšeňská",
    "Míšovická",
    "Münzbergerových",
    "Mýtní",
    "Měchenická",
    "Měcholupská",
    "Měděnecká",
    "Mělická",
    "Mělnická",
    "Městská",
    "Měsíčková",
    "Měsíční",
    "Měšická",
    "Měšínská",
    "Mšecká",
    "Mšenská",
    "N. A. Někrasova",
    "Na Babách",
    "Na Babě",
    "Na Bahnech",
    "Na Balkáně",
    "Na Balkáně",
    "Na Bambouzku",
    "Na Baních",
    "Na Barikádách",
    "Na Bartoňce",
    "Na Bateriích",
    "Na Bateriích",
    "Na Bačálkách",
    "Na Baště Sv. Jiří",
    "Na Baště Sv. Ludmily",
    "Na Baště Sv. Tomáše",
    "Na Bendovce",
    "Na Benátkách",
    "Na Beránce",
    "Na Betonce",
    "Na Bečvářce",
    "Na Bitevní Pláni",
    "Na Blanici",
    "Na Blanseku",
    "Na Blatech",
    "Na Bluku",
    "Na Bohdalci",
    "Na Bojišti",
    "Na Boleslavce",
    "Na Borovém",
    "Na Botiči",
    "Na Botě",
    "Na Božkovně",
    "Na Brabenci",
    "Na Brázdě",
    "Na Bučance",
    "Na Bělici",
    "Na Bělidle",
    "Na Bělohorské Pláni",
    "Na Břehu",
    "Na Břevnovské Pláni",
    "Na Březince",
    "Na Celné",
    "Na Cestě",
    "Na Chmelnici",
    "Na Chobotě",
    "Na Chodovci",
    "Na Chvalce",
    "Na Chvalské Tvrzi",
    "Na Cihelně",
    "Na Cihlářce",
    "Na Cikorce",
    "Na Cikánce",
    "Na Cimbále",
    "Na Cípu",
    "Na Císařce",
    "Na Dionysce",
    "Na Dlouhé Mezi",
    "Na Dlouhé Mezi",
    "Na Dlouhé Mezi",
    "Na Dlouhé Mezi",
    "Na Dlouhém Lánu",
    "Na Dlážděnce",
    "Na Dlážděnce",
    "Na Dlážděnce",
    "Na Dlážděnce",
    "Na Dobešce",
    "Na Dobré Vodě",
    "Na Dolinách",
    "Na Dolinách",
    "Na Dolnici",
    "Na Dolíku",
    "Na Domovině",
    "Na Doubkové",
    "Na Drahách",
    "Na Dračkách",
    "Na Dračkách",
    "Na Dražkách",
    "Na Dubině",
    "Na Dvorcích",
    "Na Dyrince",
    "Na Dílcích",
    "Na Dílech",
    "Na Dědince",
    "Na Dědinách",
    "Na Děkance",
    "Na Děkance",
    "Na Dělostřílnách",
    "Na Džbánu",
    "Na Fabiánce",
    "Na Farkách",
    "Na Farkáně I",
    "Na Farkáně Ii",
    "Na Farkáně Iii",
    "Na Farkáně Iv",
    "Na Fialce I",
    "Na Fialce Ii",
    "Na Fidlovačce",
    "Na Fišerce",
    "Na Florenci",
    "Na Florenci",
    "Na Floře",
    "Na Folimance",
    "Na Formance",
    "Na Františku",
    "Na Groši",
    "Na Habrovce",
    "Na Habrové",
    "Na Hanspaulce",
    "Na Harfě",
    "Na Havránce",
    "Na Hlavní",
    "Na Hlinách",
    "Na Hloubětínské Vinici",
    "Na Hlídce",
    "Na Holém Vrchu",
    "Na Homolce",
    "Na Homoli",
    "Na Horce",
    "Na Horkách",
    "Na Hradním Vodovodu",
    "Na Hranicích",
    "Na Hranicích",
    "Na Hrobci",
    "Na Hroudě",
    "Na Hroudě",
    "Na Hrádku",
    "Na Hrázi",
    "Na Hubálce",
    "Na Humnech",
    "Na Hupech",
    "Na Hutmance",
    "Na Hutích",
    "Na Hutích",
    "Na Hvížďalce",
    "Na Hvězdárně",
    "Na Hádku",
    "Na Hájku",
    "Na Hřebenech I",
    "Na Hřebenech Ii",
    "Na Hřebenech Ii",
    "Na Hřebenkách",
    "Na Hůrce",
    "Na Jabloňce",
    "Na Jabloňce",
    "Na Jahodách",
    "Na Jarově",
    "Na Jelenách",
    "Na Jelenách",
    "Na Jetelce",
    "Na Jetelce",
    "Na Jezerce",
    "Na Jezerách",
    "Na Jitřence",
    "Na Jivinách",
    "Na Julisce",
    "Na Jílech",
    "Na Jílu",
    "Na Kameni",
    "Na Kampě",
    "Na Kapličce",
    "Na Karlovce",
    "Na Kavčích Horách",
    "Na Kazance",
    "Na Kačence",
    "Na Kačerově",
    "Na Kindlovce",
    "Na Klaudiánce",
    "Na Klaudiánce",
    "Na Kleovce",
    "Na Klikovce",
    "Na Klimentce",
    "Na Klášterním",
    "Na Klínech",
    "Na Klínech",
    "Na Klínku",
    "Na Knížce",
    "Na Kocourkách",
    "Na Kocínce",
    "Na Kodymce",
    "Na Kolejním Statku",
    "Na Komořsku",
    "Na Komořsku",
    "Na Konci",
    "Na Konečné",
    "Na Konvářce",
    "Na Kopanině",
    "Na Kopci",
    "Na Kopečku",
    "Na Kopytářce",
    "Na Korunce",
    "Na Korábě",
    "Na Korálově",
    "Na Kotlářce",
    "Na Koupaliště",
    "Na Kovárně",
    "Na Kozačce",
    "Na Kozinci",
    "Na Košince",
    "Na Košíku",
    "Na Kraji",
    "Na Krocínce",
    "Na Krutci",
    "Na Královce",
    "Na Královně",
    "Na Krčské Stráni",
    "Na Kuthence",
    "Na Kvintusce",
    "Na Květnici",
    "Na Kyjově",
    "Na Křemínku",
    "Na Křenkově",
    "Na Křečku",
    "Na Křivce",
    "Na Křivce",
    "Na Křivce",
    "Na Křivině",
    "Na Křtině",
    "Na Křídle",
    "Na Labuťce",
    "Na Labuťce I",
    "Na Labuťce Ii",
    "Na Labuťce Iii",
    "Na Labuťce Iv",
    "Na Ladách",
    "Na Lahovské",
    "Na Laurové",
    "Na Lepším",
    "Na Lhotech",
    "Na Lhotkách",
    "Na Libušince",
    "Na Losách",
    "Na Louce",
    "Na Loukoti",
    "Na Louži",
    "Na Loužku",
    "Na Luka",
    "Na Lukách",
    "Na Luzích",
    "Na Lučinách",
    "Na Lužci",
    "Na Lysinách",
    "Na Lysině",
    "Na Ládví",
    "Na Lánech",
    "Na Lávce",
    "Na Lázeňce",
    "Na Líše",
    "Na Malovance",
    "Na Malé Šárce",
    "Na Malém Klínu",
    "Na Maninách",
    "Na Manoušce",
    "Na Markvartce",
    "Na Marně",
    "Na Mezi",
    "Na Mlejnku",
    "Na Moklině",
    "Na Mokřině",
    "Na Moráni",
    "Na Močále",
    "Na Mrázovce",
    "Na Musilech",
    "Na Mírách",
    "Na Míčánce",
    "Na Míčánkách",
    "Na Mýtě",
    "Na Můstku",
    "Na Neklance",
    "Na Nežárce",
    "Na Nivách",
    "Na Novině",
    "Na Nové Silnici",
    "Na Náspu",
    "Na Návrati",
    "Na Návrší",
    "Na Návsi",
    "Na Obrátce",
    "Na Obrátce",
    "Na Odbočce",
    "Na Ohradě",
    "Na Okraji",
    "Na Okraji",
    "Na Okrouhlíku",
    "Na Okruhu",
    "Na Opyši",
    "Na Opyši",
    "Na Ostrohu",
    "Na Ostrově",
    "Na Ostrůvku",
    "Na Ovesníku",
    "Na Ovčinách",
    "Na Ovčáckém",
    "Na Ovčíně",
    "Na Ořechovce",
    "Na Padesátníku I",
    "Na Padesátníku Ii",
    "Na Padesátníku Iii",
    "Na Padesátníku Iv",
    "Na Padesátníku V",
    "Na Padesátém",
    "Na Pahorku",
    "Na Pahoubce",
    "Na Palouku",
    "Na Paloučku",
    "Na Pankráci",
    "Na Panorámě",
    "Na Parcelách",
    "Na Parkáně",
    "Na Parukářce",
    "Na Pasece",
    "Na Pasece",
    "Na Pastvinách",
    "Na Pavím Vrchu",
    "Na Pazderce",
    "Na Pecích",
    "Na Pernikářce",
    "Na Perštýně",
    "Na Petynce",
    "Na Petynce",
    "Na Petřinách",
    "Na Petřinách",
    "Na Placích",
    "Na Planině",
    "Na Plužině",
    "Na Plzeňce",
    "Na Plácku",
    "Na Pláni",
    "Na Plískavě",
    "Na Podkovce",
    "Na Pokraji",
    "Na Pokraji",
    "Na Poli",
    "Na Polníku",
    "Na Pomezí",
    "Na Pomezí",
    "Na Popelce",
    "Na Popelce",
    "Na Potůčku",
    "Na Poustkách",
    "Na Pozorce",
    "Na Poříčním Právu",
    "Na Poříčí",
    "Na Poříčí",
    "Na Požáru",
    "Na Požáru",
    "Na Pramenech",
    "Na Pramenech",
    "Na Prosecké Vyhlídce",
    "Na Proseku",
    "Na Prostřední Cestě",
    "Na Proutcích",
    "Na Provaznici",
    "Na Průhonu",
    "Na Průseku",
    "Na Pučálce",
    "Na Pískovně",
    "Na Písku",
    "Na Pískách",
    "Na Pěkné Vyhlídce",
    "Na Pěšinách",
    "Na Pěšinách",
    "Na Pěšině",
    "Na Předevsi",
    "Na Přesypu",
    "Na Přesypu",
    "Na Přídole",
    "Na Příkopě",
    "Na Příkopě",
    "Na Přívozích",
    "Na Příčce",
    "Na Příčné Mezi",
    "Na Radosti",
    "Na Radosti",
    "Na Rampách",
    "Na Rejdišti",
    "Na Roháčku",
    "Na Rokytce",
    "Na Rolích",
    "Na Rovinách",
    "Na Rovině",
    "Na Rovni",
    "Na Rovnosti",
    "Na Rovném",
    "Na Rozcestí",
    "Na Rozdílu",
    "Na Rozdílu",
    "Na Rozhledu",
    "Na Rozhraní",
    "Na Rozhraní",
    "Na Rozvodí",
    "Na Ročkově",
    "Na Rybníčku",
    "Na Rybářce",
    "Na Rybářce",
    "Na Rymáni",
    "Na Rynku",
    "Na Salabce",
    "Na Samotě",
    "Na Schodech",
    "Na Schůdkách",
    "Na Sedlišti",
    "Na Sekyrce",
    "Na Selském",
    "Na Seníku",
    "Na Skalce",
    "Na Skalách",
    "Na Sklonku",
    "Na Skále",
    "Na Slatince",
    "Na Slatinách",
    "Na Slatinách",
    "Na Slatinách",
    "Na Slavíkově",
    "Na Slovance",
    "Na Slupi",
    "Na Slupi",
    "Na Smetance",
    "Na Souvrati",
    "Na Souvrati",
    "Na Spojce",
    "Na Spádu",
    "Na Spáleništi",
    "Na Srpečku",
    "Na Srázu",
    "Na Srážku",
    "Na Staré",
    "Na Staré Cestě",
    "Na Staré Návsi",
    "Na Staré Silnici",
    "Na Staré Vinici",
    "Na Stezce",
    "Na Stezce",
    "Na Struze",
    "Na Stráni",
    "Na Stráňkách",
    "Na Stráži",
    "Na Stráži",
    "Na Strži",
    "Na Strži",
    "Na Stupních",
    "Na Stárce",
    "Na Stírce",
    "Na Střelnici",
    "Na Svahu",
    "Na Svěcence",
    "Na Sychrově",
    "Na Sychrově",
    "Na Sypkém",
    "Na Sypčině",
    "Na Sádce",
    "Na Terase",
    "Na Topolce",
    "Na Topolce",
    "Na Truhlářce",
    "Na Tržišti",
    "Na Tykačce",
    "Na Táboře",
    "Na Třebešíně",
    "Na Třebešíně",
    "Na Universitním Statku",
    "Na Usedlosti",
    "Na Vackově",
    "Na Valech",
    "Na Valentince",
    "Na Vartě",
    "Na Vaňhově",
    "Na Veselí",
    "Na Vidouli",
    "Na Viktorce",
    "Na Vinici",
    "Na Viničce",
    "Na Viničkách",
    "Na Viničních Horách",
    "Na Vinobraní",
    "Na Vinohradu",
    "Na Višňovce",
    "Na Vlasačce",
    "Na Vlastní Půdě",
    "Na Vlastním",
    "Na Vlku",
    "Na Vlčovce",
    "Na Volánové",
    "Na Vrchmezí",
    "Na Vrchmezí",
    "Na Vrchmezí",
    "Na Vrcholu",
    "Na Vrchu",
    "Na Vrchu",
    "Na Vrchách",
    "Na Vrchách",
    "Na Vrstevnici",
    "Na Vrstvách",
    "Na Vršku",
    "Na Vrškách",
    "Na Vrších",
    "Na Vrších",
    "Na Vydrholci",
    "Na Vyhlídce",
    "Na Vypichu",
    "Na Vypichu",
    "Na Vysoké I",
    "Na Vysoké I",
    "Na Vysoké Ii",
    "Na Vysočanských Vinicích",
    "Na Vysočině",
    "Na Václavce",
    "Na Vápence",
    "Na Vápenném",
    "Na Vítězné Pláni",
    "Na Výběžku",
    "Na Výhledech",
    "Na Výhonku",
    "Na Výrovně",
    "Na Výsledku I",
    "Na Výsledku Ii",
    "Na Výsluní",
    "Na Výspě",
    "Na Výspě",
    "Na Výstupu",
    "Na Výtoni",
    "Na Výši",
    "Na Výšince",
    "Na Výšinách",
    "Na Výšině",
    "Na Věnečku",
    "Na Větrníku",
    "Na Větrníku",
    "Na Větrově",
    "Na Větru",
    "Na Zahrádkách",
    "Na Zatlance",
    "Na Zavadilce",
    "Na Zbořenci",
    "Na Zderaze",
    "Na Zedníkové",
    "Na Zelené Louce",
    "Na Zemance",
    "Na Zkratce",
    "Na Zlatnici",
    "Na Zlaté",
    "Na Zlíchově",
    "Na Zlíchově",
    "Na Zmrzlíku",
    "Na Znělci",
    "Na Zvoničce",
    "Na Zábradlí",
    "Na Záhonech",
    "Na Zájezdu",
    "Na Zámecké",
    "Na Zámkách",
    "Na Zámyšli",
    "Na Zástřelu",
    "Na Zástřelu",
    "Na Zátorce",
    "Na Zátorách",
    "Na Závěji",
    "Na Úbočí",
    "Na Úhoru",
    "Na Úlehli",
    "Na Úseku",
    "Na Úspěchu",
    "Na Černé Hoře",
    "Na Černé Strouze",
    "Na Černém Vrchu",
    "Na Července",
    "Na Čečeličce",
    "Na Čihadle",
    "Na Čisté",
    "Na Říháku",
    "Na Šabatce",
    "Na Šachtě",
    "Na Šafránce",
    "Na Šancích",
    "Na Šedivé",
    "Na Šejdru",
    "Na Šejdru",
    "Na Šmukýřce",
    "Na Špejcharu",
    "Na Špitálce",
    "Na Špitálsku",
    "Na Štamberku",
    "Na Štěpnici",
    "Na Šubě",
    "Na Šumavě",
    "Na Šutce",
    "Na Švihance",
    "Na Šťáhlavce",
    "Na Žertvách",
    "Na Žvahově",
    "Naardenská",
    "Nad Akcízem",
    "Nad Akáty",
    "Nad Alejí",
    "Nad Belvederem",
    "Nad Belárií",
    "Nad Berounkou",
    "Nad Bertramkou",
    "Nad Botičem",
    "Nad Bořislavkou",
    "Nad Bořislavkou",
    "Nad Branickým Pivovarem",
    "Nad Brůdkem",
    "Nad Brůdkem",
    "Nad Buďánkami I",
    "Nad Buďánkami Ii",
    "Nad Buďánkami Iii",
    "Nad Cementárnou",
    "Nad Chaloupkami",
    "Nad Chuchlí",
    "Nad Cihelnou",
    "Nad Dalejským Údolím",
    "Nad Doly",
    "Nad Dolíky",
    "Nad Drahou",
    "Nad Dubovým Mlýnem",
    "Nad Dvorem",
    "Nad Dálnicí",
    "Nad Elektrárnou",
    "Nad Elektrárnou",
    "Nad Flajšnerkou",
    "Nad Habrovkou",
    "Nad Havlem",
    "Nad Helmrovkou",
    "Nad Hercovkou",
    "Nad Hercovkou",
    "Nad Hliníkem",
    "Nad Hliníkem",
    "Nad Horizontem",
    "Nad Hradním Potokem",
    "Nad Hradním Vodojemem",
    "Nad Husovými Sady",
    "Nad Hutěmi",
    "Nad Hutěmi",
    "Nad Hájem",
    "Nad Hřištěm",
    "Nad Jenerálkou",
    "Nad Jetelkou",
    "Nad Jezem",
    "Nad Jezerkou",
    "Nad Jordánkem",
    "Nad Kajetánkou",
    "Nad Kamínkou",
    "Nad Kaplankou",
    "Nad Kapličkou",
    "Nad Kavalírkou",
    "Nad Kazankou",
    "Nad Kazínem",
    "Nad Kelerkou",
    "Nad Kesnerkou",
    "Nad Klamovkou",
    "Nad Klikovkou",
    "Nad Klíčovem",
    "Nad Kolonií",
    "Nad Kolčavkou",
    "Nad Komornickou",
    "Nad Konečnou",
    "Nad Konvářkou",
    "Nad Kostelem",
    "Nad Kotlaskou I",
    "Nad Kotlaskou Ii",
    "Nad Kotlaskou Iii",
    "Nad Kotlaskou Iv",
    "Nad Kotlaskou V",
    "Nad Koulkou",
    "Nad Koupadly",
    "Nad Koupalištěm",
    "Nad Košinkou",
    "Nad Košíkem",
    "Nad Krocínkou",
    "Nad Krocínkou",
    "Nad Královskou Oborou",
    "Nad Kuliškou",
    "Nad Kundratkou",
    "Nad Kundratkou",
    "Nad Kundratkou",
    "Nad Křížkem",
    "Nad Laurovou",
    "Nad Lesem",
    "Nad Lesním Divadlem",
    "Nad Lesíkem",
    "Nad Libeňským Nádražím",
    "Nad Libeřským Potokem",
    "Nad Libušským Potokem",
    "Nad Libří",
    "Nad Lomem",
    "Nad Lomy",
    "Nad Lukami",
    "Nad Lávkou",
    "Nad Malým Mýtem",
    "Nad Manovkou",
    "Nad Markytou",
    "Nad Mazankou",
    "Nad Meandry",
    "Nad Mlynářkou",
    "Nad Mlýnem",
    "Nad Mlýnským Potokem",
    "Nad Mohylou",
    "Nad Mokřinou",
    "Nad Mostem",
    "Nad Motolskou Nemocnicí",
    "Nad Motolskou Nemocnicí",
    "Nad Mrázovkou",
    "Nad Mušlovkou",
    "Nad Mušlovkou",
    "Nad Novou Libní",
    "Nad Nuslemi",
    "Nad Nádražím",
    "Nad Nádrží",
    "Nad Náhonem",
    "Nad Náměstím",
    "Nad Návsí",
    "Nad Obcí I",
    "Nad Obcí Ii",
    "Nad Octárnou",
    "Nad Odbočkou",
    "Nad Ohradou",
    "Nad Okrouhlíkem",
    "Nad Olšinami",
    "Nad Olšinami",
    "Nad Ondřejovem",
    "Nad Opatovem",
    "Nad Ostrovem",
    "Nad Pahorkem",
    "Nad Palatou",
    "Nad Panenskou",
    "Nad Parkem",
    "Nad Parkánem",
    "Nad Paťankou",
    "Nad Pentlovkou",
    "Nad Petruskou",
    "Nad Petynkou",
    "Nad Plynovodem",
    "Nad Podbabskou Skálou",
    "Nad Pomníkem",
    "Nad Popelkou",
    "Nad Popelářkou",
    "Nad Potůčkem",
    "Nad Prahou",
    "Nad Pramenem",
    "Nad Primaskou",
    "Nad Primaskou",
    "Nad Propustí",
    "Nad Pruhy",
    "Nad Pískovnou",
    "Nad Přehradou",
    "Nad Přívozem",
    "Nad Radotínem",
    "Nad Rohatci",
    "Nad Roklí",
    "Nad Rokoskou",
    "Nad Rokytkou",
    "Nad Rybníkem",
    "Nad Rybníkem",
    "Nad Rybníčky",
    "Nad Ryšánkou",
    "Nad Rážákem",
    "Nad Sadem",
    "Nad Sady",
    "Nad Santoškou",
    "Nad Schody",
    "Nad Skálou",
    "Nad Slávií",
    "Nad Slávií",
    "Nad Smetankou",
    "Nad Sokolovnou",
    "Nad Soutokem",
    "Nad Soutokem",
    "Nad Splavem",
    "Nad Spádem",
    "Nad Spáleným Mlýnem",
    "Nad Stanicí",
    "Nad Starou Pískovnou",
    "Nad Statkem",
    "Nad Strakovkou",
    "Nad Strouhou",
    "Nad Strání",
    "Nad Strání",
    "Nad Studánkou",
    "Nad Svahem",
    "Nad Sýpkou",
    "Nad Tejnkou",
    "Nad Teplárnou",
    "Nad Topoly",
    "Nad Tratí",
    "Nad Trnkovem",
    "Nad Trojou",
    "Nad Turbovou",
    "Nad Třebešínem I",
    "Nad Třebešínem Ii",
    "Nad Třebešínem Ii",
    "Nad Třebešínem Iii",
    "Nad Třebešínem Iii",
    "Nad Vavrouškou",
    "Nad Vernerákem",
    "Nad Vinicí",
    "Nad Vinným Potokem",
    "Nad Vinným Potokem",
    "Nad Vinným Potokem",
    "Nad Vinohradem",
    "Nad Višňovkou",
    "Nad Vltavou",
    "Nad Vodovodem",
    "Nad Vodovodem",
    "Nad Vojenským Hřbitovem",
    "Nad Vokolky",
    "Nad Volyňkou",
    "Nad Vrbami",
    "Nad Vrstvami",
    "Nad Vršovskou Horou",
    "Nad Vsí",
    "Nad Vysočany",
    "Nad Václavkou",
    "Nad Výpustí",
    "Nad Výšinkou",
    "Nad Zahradnictvím",
    "Nad Zatáčkou",
    "Nad Zavážkou",
    "Nad Zbraslaví",
    "Nad Zbrojnicí",
    "Nad Zemankou",
    "Nad Zemankou",
    "Nad Zlatnicí",
    "Nad Zlíchovem",
    "Nad Záložnou",
    "Nad Zámečkem",
    "Nad Zámečnicí",
    "Nad Zátiším",
    "Nad Závodištěm",
    "Nad Závěrkou",
    "Nad Údolím",
    "Nad Údolím Hvězd",
    "Nad Úpadem",
    "Nad Úvozem",
    "Nad Úžlabinou",
    "Nad Úžlabinou",
    "Nad Šafránkou",
    "Nad Šancemi",
    "Nad Šauerovými Sady",
    "Nad Šeberákem",
    "Nad Šejdrem",
    "Nad Šestikopy",
    "Nad Šetelkou",
    "Nad Štolou",
    "Nad Šutkou",
    "Nad Šálkovnou",
    "Nad Šárkou",
    "Nad Želivkou",
    "Nad Žlábkem",
    "Nademlejnská",
    "Nadějovská",
    "Narcisová",
    "Naskové",
    "Natanaelka",
    "Navarova",
    "Navigátorů",
    "Navrátilova",
    "Načeradecká",
    "Načešická",
    "Neapolská",
    "Nebeského",
    "Nebovidská",
    "Nebozízek-Sady",
    "Nebušická",
    "Nechanická",
    "Nechanského",
    "Nechvalická",
    "Nechvílova",
    "Nechybova",
    "Nedašovská",
    "Nedbalova",
    "Nedokončená",
    "Nedokončená",
    "Nedošínské",
    "Nedražická",
    "Nedvědická",
    "Nedvědovo Nám.",
    "Nedvědovo Náměstí",
    "Nedvězská",
    "Neffova",
    "Nefritová",
    "Neherovská",
    "Nehvizdská",
    "Nehvizdská",
    "Nejdkova",
    "Neklanova",
    "Nekvasilova",
    "Nekázanka",
    "Nemocniční",
    "Nemošická",
    "Nepasické Nám.",
    "Nepasické Náměstí",
    "Nepelova",
    "Nepilova",
    "Nepomucká",
    "Nepomuckých",
    "Nepovolená",
    "Nepravidelná",
    "Neprůjezdná",
    "Nepálská",
    "Neratovická",
    "Nerudova",
    "Nerudova",
    "Nesměřická",
    "Nespecká",
    "Nesvadbova",
    "Netlucká",
    "Netluky",
    "Netolická",
    "Netušilská",
    "Netínská",
    "Netřebická",
    "Netřebská",
    "Neumannova",
    "Neustupného",
    "Neužilova",
    "Nevanova",
    "Neveklovská",
    "Newtonova",
    "Nezamyslova",
    "Nezdova",
    "Nezvalova",
    "Nečova",
    "Nešporova",
    "Nežárská",
    "Nickerleho",
    "Niederleho",
    "Nikodémova",
    "Nikoly Tesly",
    "Nikoly Vapcarova",
    "Niská",
    "Nitranská",
    "Nitranská",
    "Nivnická",
    "Nobelova",
    "Norbertov",
    "Norská",
    "Nosická",
    "Nosticova",
    "Notečská",
    "Noutonická",
    "Nouzov",
    "Nouzovské Nám.",
    "Nouzovské Náměstí",
    "Nouzová",
    "Novgorodská",
    "Novobohdalecká",
    "Novoborská",
    "Novoborská",
    "Novochuchelská",
    "Novodvorská",
    "Novodvorská",
    "Novodvorská",
    "Novodvorská",
    "Novohradská",
    "Novohrádecká",
    "Novohrádecká",
    "Novolhotská",
    "Novolipanská",
    "Novomeského",
    "Novomeského",
    "Novomlýnská",
    "Novopacká",
    "Novopetrovická",
    "Novorossijská",
    "Novosibřinská",
    "Novostrašnická",
    "Novosuchdolská",
    "Novosvětská",
    "Novotného Lávka",
    "Novoveská",
    "Novoveská",
    "Novovysočanská",
    "Novovysočanská",
    "Novovysočanská",
    "Novozámecká",
    "Novozámecká",
    "Novoškolská",
    "Novoštěrboholská",
    "Nová",
    "Nová Cesta",
    "Nová Kolonie",
    "Nová Ves",
    "Nová Ves",
    "Nová Šárka",
    "Novákovo Nám.",
    "Novákovo Náměstí",
    "Novákových",
    "Nové Domy",
    "Nové Dvory",
    "Nové Mlýny",
    "Nové Náměstí",
    "Nového",
    "Nový Lesík",
    "Nový Svět",
    "Nový Zlíchov",
    "Nový Zlíchov",
    "Nupacká",
    "Nuselská",
    "Nuselská",
    "Nučická",
    "Nušlova",
    "Nymburská",
    "Nábř. Edvarda Beneše",
    "Nábř. Edvarda Beneše",
    "Nábř. Edvarda Beneše",
    "Nábř. Kapitána Jaroše",
    "Nábř. Kapitána Jaroše",
    "Nábřežní",
    "Nábřeží Edvarda Beneše",
    "Nábřeží Edvarda Beneše",
    "Nábřeží Edvarda Beneše",
    "Nábřeží Kapitána Jaroše",
    "Nábřeží Ludvíka Svobody",
    "Náchodská",
    "Nádražní",
    "Nádražní",
    "Nádvorní",
    "Náhorní",
    "Nákupní",
    "Nám. 14. Října",
    "Nám. 25. Března",
    "Nám. Antonína Pecáka",
    "Nám. Barikád",
    "Nám. Bořislavka",
    "Nám. Bratří Synků",
    "Nám. Chuchelských Bojovníků",
    "Nám. Chuchleských Bojovníků",
    "Nám. Curieových",
    "Nám. Dr. V. Holého",
    "Nám. Franze Kafky",
    "Nám. Generála Kutlvašra",
    "Nám. Hrdinů",
    "Nám. I. P. Pavlova",
    "Nám. Interbrigády",
    "Nám. Jana Palacha",
    "Nám. Jana Palacha",
    "Nám. Jiřího Berana",
    "Nám. Jiřího Z Lobkovic",
    "Nám. Jiřího Z Poděbrad",
    "Nám. Jiřího Z Poděbrad",
    "Nám. Josefa Machka",
    "Nám. Kinských",
    "Nám. Kinských",
    "Nám. Mezi Zahrádkami",
    "Nám. Na Balabence",
    "Nám. Na Farkáně",
    "Nám. Na Lužinách",
    "Nám. Na Santince",
    "Nám. Na Stráži",
    "Nám. Omladiny",
    "Nám. Osvoboditelů",
    "Nám. Padlých",
    "Nám. Pod Kaštany",
    "Nám. Pod Lípou",
    "Nám. Prezidenta Masaryka",
    "Nám. Před Bateriemi",
    "Nám. Republiky",
    "Nám. Smiřických",
    "Nám. Svatopluka Čecha",
    "Nám. Svobody",
    "Nám. U Lva",
    "Nám. U Lípy Svobody",
    "Nám. U Svatého Jiří",
    "Nám. Winstona Churchilla",
    "Nám. Českého Povstání",
    "Nám.Organizace Spojených Národ",
    "Nám.Plukovníka Vlčka",
    "Náměstí 14. Října",
    "Náměstí 25. Března",
    "Náměstí Antonína Pecáka",
    "Náměstí Barikád",
    "Náměstí Bořislavka",
    "Náměstí Bořislavka",
    "Náměstí Bratří Jandusů",
    "Náměstí Bratří Synků",
    "Náměstí Chuchelských Bojovníků",
    "Náměstí Curieových",
    "Náměstí Dr. Václava Holého",
    "Náměstí Generála Kutlvašra",
    "Náměstí Hrdinů",
    "Náměstí I. P. Pavlova",
    "Náměstí Interbrigády",
    "Náměstí Jana Palacha",
    "Náměstí Jana Palacha",
    "Náměstí Jiřího Berana",
    "Náměstí Jiřího Z Lobkovic",
    "Náměstí Jiřího Z Poděbrad",
    "Náměstí Jiřího Z Poděbrad",
    "Náměstí Josefa Machka",
    "Náměstí Junkových",
    "Náměstí Kinských",
    "Náměstí Kinských",
    "Náměstí Kosmonautů",
    "Náměstí Mezi Zahrádkami",
    "Náměstí Míru",
    "Náměstí Na Balabence",
    "Náměstí Na Farkáně",
    "Náměstí Na Lužinách",
    "Náměstí Na Santince",
    "Náměstí Na Stráži",
    "Náměstí Omladiny",
    "Náměstí Organizace Spojených Národů",
    "Náměstí Osvoboditelů",
    "Náměstí Padlých",
    "Náměstí Plukovníka Vlčka",
    "Náměstí Pod Emauzy",
    "Náměstí Pod Kaštany",
    "Náměstí Pod Lípou",
    "Náměstí Prezidenta Masaryka",
    "Náměstí Protifašistických Bojovníků",
    "Náměstí Před Bateriemi",
    "Náměstí Přátelství",
    "Náměstí Republiky",
    "Náměstí Republiky",
    "Náměstí Smiřických",
    "Náměstí Sv. Petra A Pavla",
    "Náměstí Svatopluka Čecha",
    "Náměstí Svobody",
    "Náměstí U Lva",
    "Náměstí U Lípy Svobody",
    "Náměstí U Svatého Jiří",
    "Náměstí Winstona Churchilla",
    "Náměstí Zdenky Braunerové",
    "Náměstí Českého Povstání",
    "Náplavní",
    "Náprstkova",
    "Národní",
    "Národní",
    "Národní Obrany",
    "Národních Hrdinů",
    "Nárožní",
    "Násirovo Nám.",
    "Násirovo Náměstí",
    "Nástrojářská",
    "Návazná",
    "Návršní",
    "Návětrná",
    "Návětrná",
    "Názovská",
    "Nýdecká",
    "Nýrská",
    "Nýřanská",
    "Němčická",
    "Něvská",
    "Obchodní",
    "Obchodní Nám.",
    "Obchodní Náměstí",
    "Obilní",
    "Objízdná",
    "Oblouková",
    "Obora Hvězda",
    "Oborská",
    "Obrataňská",
    "Obrovského",
    "Obsiny",
    "Obslužná",
    "Obvodová",
    "Obědovická",
    "Obětí 6. Května",
    "Obětí 6.Května",
    "Ocelkova",
    "Ocelářská",
    "Ocelářská",
    "Ocelíkova",
    "Ochozská",
    "Ochranovská",
    "Od Rozcestí",
    "Od Vysoké",
    "Od Školy",
    "Odboje",
    "Odborů",
    "Odbočná",
    "Oddechová",
    "Oddělená",
    "Oderská",
    "Odlehlá",
    "Ohmova",
    "Ohnivcova",
    "Ohnišťanská",
    "Ohradní",
    "Ohradní",
    "Ohradská",
    "Ohradské Nám.",
    "Ohradské Náměstí",
    "Ohrobecká",
    "Okenská",
    "Okořská",
    "Okrajní",
    "Okrajová",
    "Okrajová",
    "Okrasná",
    "Okrouhlická",
    "Okrouhlíkova",
    "Okrová",
    "Okruhová",
    "Okružní",
    "Okružní",
    "Okřínecká",
    "Olbrachtova",
    "Olbramovická",
    "Oldřichova",
    "Olešnická",
    "Olešská",
    "Olgy Havlové",
    "Olivova",
    "Olomoucká",
    "Olympijská",
    "Olšanská",
    "Olšanské Nám.",
    "Olšanské Náměstí",
    "Olšovická",
    "Olšová",
    "Olštýnská",
    "Omladinářů",
    "Omská",
    "Ondřejovská",
    "Ondříčkova",
    "Ondříčkova",
    "Onšovecká",
    "Opata Konráda",
    "Opatovická",
    "Opatovská",
    "Opatovská",
    "Opatřilka",
    "Opatřilka",
    "Opařanská",
    "Oplanská",
    "Opletalova",
    "Opolská",
    "Opočenská",
    "Opočínská",
    "Opravářská",
    "Opuková",
    "Opálkova",
    "Opálová",
    "Oravská",
    "Ordovická",
    "Orebitská",
    "Orelská",
    "Orlická",
    "Ortenovo Náměstí",
    "Osadní",
    "Osamocená",
    "Osecká",
    "Osetá",
    "Osická",
    "Osiková",
    "Osinalická",
    "Osluněná",
    "Osmého Listopadu",
    "Osnická",
    "Osnická",
    "Osnická",
    "Ostravická",
    "Ostravská",
    "Ostromečská",
    "Ostrov Štvanice",
    "Ostrovní",
    "Ostrovského",
    "Ostruženská",
    "Ostružinová",
    "Ostrá",
    "Ostrčilovo Nám.",
    "Ostrčilovo Náměstí",
    "Ostředecká",
    "Ostřicová",
    "Osvobození",
    "Osvětová",
    "Otakara Vrby",
    "Otakarova",
    "Otavova",
    "Otavova",
    "Otavská",
    "Otevřená",
    "Otická",
    "Otlíkovská",
    "Otopašská",
    "Otovická",
    "Otradovická",
    "Ottova",
    "Otvovická",
    "Oty Pavla",
    "Otínská",
    "Otěšínská",
    "Ouholická",
    "Ouhrabkova",
    "Ovenecká",
    "Ovenecká",
    "Ovesná",
    "Ovocná",
    "Ovocnářská",
    "Ovocný Trh",
    "Ovsíková",
    "Oválová",
    "Ovčárská",
    "Ovčí Hájek",
    "Ořechová",
    "Ořešská",
    "Paběnická",
    "Paběnická",
    "Pacajevova",
    "Paceřická",
    "Pacholíkova",
    "Pacovská",
    "Paculova",
    "Padovská",
    "Pajerova",
    "Pakoměřická",
    "Palackého",
    "Palackého Nám.",
    "Palackého Náměstí",
    "Palmetová",
    "Palmovka",
    "Paláskova",
    "Pampelišková",
    "Pancířova",
    "Panelová",
    "Panenky",
    "Panenská",
    "Pankrácké Náměstí",
    "Panská",
    "Panská Zahrada",
    "Panský Dvůr",
    "Panuškova",
    "Paprsková",
    "Papírenská",
    "Papírníkova",
    "Parašutistů",
    "Pardubická",
    "Park Přátelství",
    "Parková",
    "Parléřova",
    "Parléřova",
    "Parmská",
    "Paroplavební",
    "Partyzánská",
    "Pasecká",
    "Pasteurova",
    "Pastevců",
    "Patočkova",
    "Patočkova",
    "Patočkova",
    "Pavelkova",
    "Pavla Beneše",
    "Pavla Švandy Ze Semčic",
    "Pavlická",
    "Pavlišovská",
    "Pavlovická",
    "Pavlovská",
    "Pavlíkova",
    "Pavrovského",
    "Paříkova",
    "Pařízkova",
    "Pařížská",
    "Pařížská",
    "Paškova",
    "Paťanka",
    "Peceradská",
    "Pecharova",
    "Pechlátova",
    "Pechlátova",
    "Pecháčkova",
    "Peckova",
    "Pejevové",
    "Pekařova",
    "Pekařova",
    "Pekařská",
    "Pekárenská",
    "Pekárkova",
    "Pelclova",
    "Pelechovská",
    "Pelhřimovská",
    "Pelikánova",
    "Pelléova",
    "Pelléova",
    "Pelnářova",
    "Pelušková",
    "Pelyňková",
    "Pelzova",
    "Penízovková",
    "Perlitová",
    "Perlitová",
    "Perlová",
    "Pernerova",
    "Pernerova",
    "Peroutkova",
    "Peroutkova",
    "Peroutkova",
    "Peroutkova",
    "Perspektivní",
    "Pertoldova",
    "Perucká",
    "Perunova",
    "Perštejnská",
    "Petra Bezruče",
    "Petra Rezka",
    "Petra Slezáka",
    "Petrbokova",
    "Petrklíčová",
    "Petrohradská",
    "Petrovická",
    "Petrovská",
    "Petrská",
    "Petrské Nám.",
    "Petrské Náměstí",
    "Petráčkova",
    "Petržílkova",
    "Petržílova",
    "Petýrkova",
    "Petříkova",
    "Petříkovská",
    "Petřínská",
    "Petřínská",
    "Petřínské Sady",
    "Petřínské Sady",
    "Pevnostní",
    "Pečárková",
    "Pešinova",
    "Peškova",
    "Pešlova",
    "Pešova",
    "Peštukova",
    "Pešákova",
    "Picassova",
    "Pickova",
    "Pihelská",
    "Pikovická",
    "Pikrtova",
    "Pilařská",
    "Pilníkovská",
    "Pilotů",
    "Pilovská",
    "Pilovská",
    "Pilská",
    "Pirinská",
    "Pirnerova",
    "Pitkovická",
    "Pitterova",
    "Pivcova",
    "Pivovarnická",
    "Pivovarská",
    "Pivoňková",
    "Pištěkova",
    "Placina",
    "Placina",
    "Plajnerova",
    "Plamínkové",
    "Plaská",
    "Platanová",
    "Platnéřská",
    "Platónova",
    "Plavecká",
    "Plavínová",
    "Plačická",
    "Plaňanská",
    "Plevenská",
    "Plečnikova",
    "Plhovská",
    "Plickova",
    "Plkovská",
    "Plojharova",
    "Ploskovická",
    "Ploučnická",
    "Plovdivská",
    "Plošná",
    "Ploštilova",
    "Plukovníka Mráze",
    "Plumlovská",
    "Plutova",
    "Plynární",
    "Plzeňská",
    "Plzeňská",
    "Plzeňská",
    "Plzeňská",
    "Plzeňská",
    "Plánická",
    "Pláničkova",
    "Poberova",
    "Pobočná",
    "Pobořská",
    "Poběžovická",
    "Pobřežní",
    "Pobřežní Cesta",
    "Pod Akáty",
    "Pod Altánem",
    "Pod Altánem",
    "Pod Andělkou",
    "Pod Areálem",
    "Pod Aritmou",
    "Pod Ateliéry",
    "Pod Bahnivkou",
    "Pod Balkánem",
    "Pod Barvířkou",
    "Pod Bateriemi",
    "Pod Baštami",
    "Pod Belvederem",
    "Pod Belárií",
    "Pod Beránkem",
    "Pod Beránkou",
    "Pod Betání",
    "Pod Bohdalcem I",
    "Pod Bohdalcem I",
    "Pod Bohdalcem Ii",
    "Pod Brentovou",
    "Pod Bruskou",
    "Pod Buďánkou",
    "Pod Bání",
    "Pod Březinou",
    "Pod Chaloupkami",
    "Pod Chodovem",
    "Pod Cihelnou",
    "Pod Cihelnou",
    "Pod Cukrákem",
    "Pod Císařkou",
    "Pod Dlážděnkou",
    "Pod Domky",
    "Pod Drinopolem",
    "Pod Dráhou",
    "Pod Duby",
    "Pod Dvorem",
    "Pod Dálnicí",
    "Pod Děkankou",
    "Pod Děkankou",
    "Pod Děvínem",
    "Pod Farou",
    "Pod Fialkou",
    "Pod Formankou",
    "Pod Fořtem",
    "Pod Garážemi",
    "Pod Habrovkou",
    "Pod Habrovou",
    "Pod Haltýřem",
    "Pod Harfou",
    "Pod Havlínem",
    "Pod Havránkou",
    "Pod Havránkou",
    "Pod Hliništěm",
    "Pod Hloubětínskou Zastávkou",
    "Pod Hláskem",
    "Pod Homolkou",
    "Pod Hotelem",
    "Pod Hořavkou",
    "Pod Hrachovkou",
    "Pod Hradbami",
    "Pod Hradem",
    "Pod Hranicí",
    "Pod Hrází",
    "Pod Hvězdou",
    "Pod Hvězdárnou",
    "Pod Hvězdárnou",
    "Pod Hybšmankou",
    "Pod Hájem",
    "Pod Hájkem",
    "Pod Hájovnou",
    "Pod Hřbitovem",
    "Pod Hřištěm",
    "Pod Jalovým Dvorem",
    "Pod Jankovem",
    "Pod Jarovem",
    "Pod Javory",
    "Pod Jiráskovou Čtvrtí",
    "Pod Juliskou",
    "Pod Kamínkou",
    "Pod Kapličkou",
    "Pod Kapličkou",
    "Pod Karlovarskou Silnicí",
    "Pod Karlovem",
    "Pod Kavalírkou",
    "Pod Kaštany",
    "Pod Kaštany",
    "Pod Kesnerkou",
    "Pod Kladenskou Silnicí",
    "Pod Klamovkou",
    "Pod Klapicí",
    "Pod Klaudiánkou",
    "Pod Klikovkou",
    "Pod Kopcem",
    "Pod Kostelem",
    "Pod Kotlaskou",
    "Pod Kotlářkou",
    "Pod Kotlářkou",
    "Pod Kotlářkou",
    "Pod Krejcárkem",
    "Pod Krocínkou",
    "Pod Královkou",
    "Pod Krčským Lesem",
    "Pod Kulturním Domem",
    "Pod Kynclovkou",
    "Pod Křížem",
    "Pod Křížkem",
    "Pod Labuťkou",
    "Pod Lahovskou",
    "Pod Lesem",
    "Pod Lesíkem",
    "Pod Letištěm",
    "Pod Lečí",
    "Pod Lipami",
    "Pod Lipkami",
    "Pod Lisem",
    "Pod Lisem",
    "Pod Lochkovem",
    "Pod Lomem",
    "Pod Lysinami",
    "Pod Lázní",
    "Pod Marjánkou",
    "Pod Markétou",
    "Pod Martinem",
    "Pod Meliškou",
    "Pod Mlýnkem",
    "Pod Mohylou",
    "Pod Mostem",
    "Pod Napětím",
    "Pod Nouzovem",
    "Pod Novou Školou",
    "Pod Novým Lesem",
    "Pod Novým Lesem",
    "Pod Nuselskými Schody",
    "Pod Náměstím",
    "Pod Náplavkou",
    "Pod Náplavkou",
    "Pod Náspem",
    "Pod Návsí",
    "Pod Oborou",
    "Pod Ovčínem",
    "Pod Ořechovkou",
    "Pod Palatou",
    "Pod Palírkou",
    "Pod Parukářkou",
    "Pod Paťankou",
    "Pod Paťankou",
    "Pod Pekařkou",
    "Pod Pekárnami",
    "Pod Petřinami",
    "Pod Plynojemem",
    "Pod Plynojemem",
    "Pod Plynojemem",
    "Pod Plískavou",
    "Pod Poštou",
    "Pod Pramenem",
    "Pod Prodejnou",
    "Pod Průsekem",
    "Pod Písečnou",
    "Pod Přehradou",
    "Pod Přesypem",
    "Pod Radnicí",
    "Pod Rapidem",
    "Pod Rapidem",
    "Pod Rapidem",
    "Pod Remízkem",
    "Pod Rovinou",
    "Pod Rozvodnou",
    "Pod Rybníkem",
    "Pod Rybníčkem",
    "Pod Sady",
    "Pod Salabkou",
    "Pod Sirénou",
    "Pod Skalkou",
    "Pod Skalou",
    "Pod Sklenářkou",
    "Pod Slovany",
    "Pod Smetankou",
    "Pod Sokolovnou",
    "Pod Soutratím",
    "Pod Spalovnou",
    "Pod Spiritkou",
    "Pod Spravedlností",
    "Pod Srázem",
    "Pod Stadiony",
    "Pod Stanicí",
    "Pod Starou Školou",
    "Pod Starákem",
    "Pod Statky",
    "Pod Strašnickou Vinicí",
    "Pod Strojírnami",
    "Pod Strání",
    "Pod Studánkou",
    "Pod Stupni",
    "Pod Stárkou",
    "Pod Stárkou",
    "Pod Stírkou",
    "Pod Svahem",
    "Pod Sychrovem I",
    "Pod Sychrovem I",
    "Pod Sychrovem I",
    "Pod Sychrovem Ii",
    "Pod Sídlištěm",
    "Pod Terasami",
    "Pod Terebkou",
    "Pod Topoly",
    "Pod Tratí",
    "Pod Turnovskou Tratí",
    "Pod Turnovskou Tratí",
    "Pod Táborem",
    "Pod Táborem",
    "Pod Třebešínem",
    "Pod Třešněmi",
    "Pod Třešňovkou",
    "Pod Urnovým Hájem",
    "Pod Valem",
    "Pod Vartou",
    "Pod Vavřincem",
    "Pod Velkým Hájem",
    "Pod Viaduktem",
    "Pod Vidoulí",
    "Pod Viktorkou",
    "Pod Vilami",
    "Pod Vinicemi",
    "Pod Vinicí",
    "Pod Vinohradem",
    "Pod Višňovkou",
    "Pod Vlachovkou",
    "Pod Vlastním Krovem",
    "Pod Vlkem",
    "Pod Vodojemem",
    "Pod Vodovodem",
    "Pod Vodárenskou Věží",
    "Pod Vrchem",
    "Pod Vrcholem",
    "Pod Vrstevnicí",
    "Pod Vrškem",
    "Pod Vrškem",
    "Pod Vršovickou Vodárnou I",
    "Pod Vršovickou Vodárnou Ii",
    "Pod Vršovickou Vodárnou Iii",
    "Pod Vsí",
    "Pod Vyhlídkou",
    "Pod Vysokou",
    "Pod Vysokou Mezí",
    "Pod Vysílačkou",
    "Pod Vyšehradem",
    "Pod Václavem",
    "Pod Vítkovem",
    "Pod Výtopnou",
    "Pod Výšinkou",
    "Pod Větrolamem",
    "Pod Větrovem",
    "Pod Věží",
    "Pod Zahradami",
    "Pod Zahrádkami",
    "Pod Zastávkou",
    "Pod Zatáčkou",
    "Pod Zbuzany",
    "Pod Zemankou",
    "Pod Zličínem",
    "Pod Zvonařkou",
    "Pod Zvoničkou",
    "Pod Zámečkem",
    "Pod Závěrkou",
    "Pod Útesy",
    "Pod Čertovou Skalou",
    "Pod Čihadlem",
    "Pod Čimickým Hájem",
    "Pod Šancemi",
    "Pod Školou",
    "Pod Šmukýřkou",
    "Pod Špejcharem",
    "Pod Špitálem",
    "Pod Štěpem",
    "Pod Žvahovem",
    "Podbabská",
    "Podbabská",
    "Podbělohorská",
    "Podbělová",
    "Podchýšská",
    "Podedvorská",
    "Podhajská Pole",
    "Podholí",
    "Podhorská",
    "Podhořská",
    "Podivínská",
    "Podjavorinské",
    "Podjezd",
    "Podkovářská",
    "Podkrkonošská",
    "Podkrkonošských Tkalců",
    "Podle Kačerova",
    "Podle Lomu",
    "Podle Lomu",
    "Podle Náhonu",
    "Podle Náhonu",
    "Podle Sadů",
    "Podle Trati",
    "Podlesek",
    "Podleská",
    "Podlesní",
    "Podlešínská",
    "Podlibská",
    "Podlipného",
    "Podlišovská",
    "Podlužanská",
    "Podléšková",
    "Podnikatelská",
    "Podnádražní",
    "Podohradská",
    "Podolanská",
    "Podolská",
    "Podolská",
    "Podolské Nábř.",
    "Podolské Nábřeží",
    "Podolské Schody",
    "Podpěrova",
    "Podskalská",
    "Podsychrovská",
    "Podvinný Mlýn",
    "Podvinný Mlýn",
    "Podzámecká",
    "Podéšťova",
    "Poděbradova",
    "Poděbradova",
    "Poděbradská",
    "Poděbradská",
    "Poděbradská",
    "Podůlší",
    "Pohledná",
    "Pohnertova",
    "Pohořelec",
    "Pohořelec",
    "Pokojná",
    "Pokorného",
    "Pokřivená",
    "Polabská",
    "Polabská",
    "Polaneckého",
    "Polední",
    "Polední",
    "Polenská",
    "Polepská",
    "Poleradská",
    "Polesná",
    "Polešovická",
    "Politických Vězňů",
    "Poličanská",
    "Poljanovova",
    "Polní",
    "Polovnická",
    "Polská",
    "Polygrafická",
    "Polákova",
    "Poláčkova",
    "Políkenská",
    "Polívkova",
    "Pomezní",
    "Pomněnková",
    "Pomořanská",
    "Ponrepova",
    "Poplužní",
    "Popovická",
    "Popovova",
    "Poslední",
    "Pospíchalova",
    "Pospíšilova",
    "Postlova",
    "Postranní",
    "Postupická",
    "Postřekovská",
    "Postřižínská",
    "Postřižínská",
    "Potocká",
    "Potoční",
    "Pouchova",
    "Poupětova",
    "Poustka",
    "Povltavská",
    "Povltavská",
    "Povltavská",
    "Povodňová",
    "Pozdeňská",
    "Poznaňská",
    "Počeradská",
    "Počernická",
    "Počernická",
    "Počátecká",
    "Počátecká",
    "Poříčanská",
    "Poříčanská",
    "Poříčská",
    "Pošepného Nám.",
    "Pošepného Náměstí",
    "Poštovská",
    "Požárnická",
    "Pplk. Nováčka",
    "Pplk. Sochora",
    "Prachatická",
    "Prachnerova",
    "Prachovická",
    "Prachovská",
    "Pramenná",
    "Pramenná",
    "Pravoúhlá",
    "Pravská",
    "Pravá",
    "Prašná",
    "Pražská",
    "Pražského",
    "Pražského Povstání",
    "Pražský Okruh",
    "Pražákovská",
    "Prefátova",
    "Preislerova",
    "Preláta",
    "Prelátská",
    "Preslova",
    "Primátorská",
    "Probluzská",
    "Proboštská",
    "Procházkova",
    "Prodloužená",
    "Prokofjevova",
    "Prokopka",
    "Prokopova",
    "Prokopovo Nám.",
    "Prokopovo Náměstí",
    "Prokopových",
    "Prokopská",
    "Prokopské Údolí",
    "Prokopské Údolí",
    "Prorektorská",
    "Prosecká",
    "Prosecká",
    "Prosecká",
    "Prosincová",
    "Prosluněná",
    "Prosná",
    "Prostřední",
    "Proti Proudu",
    "Protilehlá",
    "Protivínská",
    "Proutěná",
    "Prouzova",
    "Provaznická",
    "Provozní",
    "Prunéřovská",
    "Prusická",
    "Prusíkova",
    "Prušánecká",
    "Prvního Pluku",
    "Prvního Pluku",
    "Prvomájová",
    "Prácheňská",
    "Práčská",
    "Průběžná",
    "Průchodní",
    "Průchova",
    "Průhledová",
    "Průhonek",
    "Průhonek",
    "Průhonická",
    "Průhonská",
    "Průjezdná",
    "Průmyslová",
    "Průmyslová",
    "Průmyslová",
    "Průmyslová",
    "Průtažní",
    "Průčelní",
    "Průškova",
    "Psohlavců",
    "Pstružná",
    "Psárská",
    "Ptáčnická",
    "Puchmajerova",
    "Puchmajerova",
    "Pujmanové",
    "Pujmanové",
    "Pujmanové",
    "Purkrabská",
    "Purkyňova",
    "Putimská",
    "Pučova",
    "Puškinovo Nám.",
    "Puškinovo Náměstí",
    "Pyšelská",
    "Pálavská",
    "Pálkařská",
    "Pámelníková",
    "Pánkova",
    "Pátkova",
    "Pávovské Náměstí",
    "Písecká",
    "Píseckého",
    "Písečná",
    "Pískařská",
    "Pískovcová",
    "Pískovna",
    "Písková",
    "Písnická",
    "Písnická",
    "Písnické Zahrady",
    "Písčitá",
    "Píškova",
    "Píšovická",
    "Pöslova",
    "Púchovská",
    "Púchovská",
    "Pýchavková",
    "Pýrová",
    "Pěnkaví",
    "Pěstitelská",
    "Pětidomí",
    "Pětipeského",
    "Pěší",
    "Přecechtělova",
    "Přechodní",
    "Před Cibulkami",
    "Před Dráhou",
    "Před Mosty",
    "Před Nádražím",
    "Před Oborou",
    "Před Rybníkem",
    "Před Skalkami I",
    "Před Skalkami Ii",
    "Před Skálou",
    "Před Sokolovnou",
    "Před Tratí",
    "Před Ústavem",
    "Předbořská",
    "Předměřická",
    "Přední",
    "Předpolní",
    "Předposlední",
    "Předvoje",
    "Předvoje",
    "Předškolní",
    "Přeletová",
    "Přeloučská",
    "Přemyslova",
    "Přemyslovská",
    "Přemyslovská",
    "Přemyšlenská",
    "Přerušená",
    "Přesličková",
    "Přespolní",
    "Přetlucká",
    "Přeučilova",
    "Převoznická",
    "Přezletická",
    "Přeštická",
    "Přeštínská",
    "Přeťatá",
    "Při Hranici",
    "Při Hranici",
    "Při Trati",
    "Přibyslavská",
    "Přibíkova",
    "Přistoupimská",
    "Přádova",
    "Přátelství",
    "Příborská",
    "Příbramská",
    "Příběnická",
    "Příchovická",
    "Přídolská",
    "Příkrá",
    "Přílepská",
    "Přímské Nám.",
    "Přímské Náměstí",
    "Přímá",
    "Přímětická",
    "Přípotoční",
    "Přípřežní",
    "Přírodní",
    "Přístavní",
    "Přívorská",
    "Přívozní",
    "Příčka",
    "Příčná",
    "Pšeničná",
    "Pšenčíkova",
    "Pšovanská",
    "Pštrossova",
    "Půdova",
    "Půlkruhová",
    "Půlnoční",
    "Půtova",
    "R.A. Dvorského",
    "Rabasova",
    "Rabyňská",
    "Rackova",
    "Rackova Zahrada",
    "Radbuzská",
    "Radechovská",
    "Radešovská",
    "Radhošťská",
    "Radhošťská",
    "Radimova",
    "Radimovická",
    "Radimská",
    "Radiová",
    "Radiová",
    "Radistů",
    "Radkovská",
    "Radlická",
    "Radlická",
    "Radlická",
    "Radnické Schody",
    "Radomská",
    "Radonická",
    "Radostavická",
    "Radostná",
    "Radotínská",
    "Radotínská",
    "Radouňova",
    "Radouňova",
    "Radouňova",
    "Radova",
    "Radovská",
    "Radošovická",
    "Radvanická",
    "Radúzova",
    "Radčina",
    "Radějovská",
    "Raffaelova",
    "Raichlova",
    "Raisova",
    "Rajhradská",
    "Rajmonova",
    "Rajská",
    "Rakousova",
    "Rakovnická",
    "Rakovského",
    "Randova",
    "Ranská",
    "Ratajova",
    "Ratajská",
    "Ratbořská",
    "Ratibořická",
    "Ratibořská",
    "Ratibořská",
    "Ravennská",
    "Račická",
    "Račiněveská",
    "Rašilovova",
    "Rašova",
    "Rašovická",
    "Rašovská",
    "Rašínovo Nábř.",
    "Rašínovo Nábř.",
    "Rašínovo Nábřeží",
    "Rašínovo Nábřeží",
    "Rašínská",
    "Ražická",
    "Reinerova",
    "Rejchova",
    "Rejskova",
    "Rekreační",
    "Rektorská",
    "Rembrandtova",
    "Remízková",
    "Renoirova",
    "Resslova",
    "Revoluce",
    "Revoluční",
    "Revoluční",
    "Rezedová",
    "Rezlerova",
    "Rečkova",
    "Richtrova",
    "Riegrova",
    "Riegrovy Sady",
    "Rilská",
    "Ringhofferova",
    "Ringhofferova",
    "Rižská",
    "Roblínská",
    "Rochovská",
    "Rochovská",
    "Rodopská",
    "Rodovská",
    "Rodvinovská",
    "Roentgenova",
    "Rohanovská",
    "Rohanské Nábřeží",
    "Rohanský Ostrov",
    "Rohatecká",
    "Rohenická",
    "Rohlovská",
    "Rohová",
    "Rohozecká",
    "Rohožnická",
    "Roháčova",
    "Roithova",
    "Rojická",
    "Roklova",
    "Rokycanova",
    "Rokycanská",
    "Rokytnická",
    "Rokytná",
    "Rolnická",
    "Rolní",
    "Romaina Rollanda",
    "Romana Blahníka",
    "Ronalda Reagana",
    "Ronešova",
    "Ronkova",
    "Ronovská",
    "Rooseveltova",
    "Rorýsová",
    "Rosečská",
    "Rosická",
    "Rostislavova",
    "Rostoklatská",
    "Rostovská",
    "Rotavská",
    "Rotenská",
    "Roudnická",
    "Rousovická",
    "Rousínovská",
    "Rovenská",
    "Rovnoběžná",
    "Rovná",
    "Rozdělená",
    "Rozdělovská",
    "Rozhovická",
    "Rozkošného",
    "Rozkošská",
    "Rozmarýnová",
    "Rozrazilová",
    "Roztocká",
    "Roztylská",
    "Roztylské Náměstí",
    "Roztylské Sady",
    "Rozvadovská",
    "Rozvodova",
    "Rozvojová",
    "Rozárčina",
    "Rozýnova",
    "Rozšířená",
    "Ročovská",
    "Rošických",
    "Roškotova",
    "Rošovická",
    "Rožmberská",
    "Rožmitálská",
    "Rožnovská",
    "Rožďalovická",
    "Rtyňská",
    "Rubensova",
    "Rubeška",
    "Rubešova",
    "Rubličova",
    "Rubínová",
    "Rudečská",
    "Rudníkovská",
    "Rudolfa Holeky",
    "Rudoltická",
    "Rudoltická",
    "Rujanská",
    "Rumburská",
    "Rumunská",
    "Rumunská",
    "Ruprechtická",
    "Ruská",
    "Ruská",
    "Ruzyňská",
    "Ruzyňská",
    "Ruzyňské Schody",
    "Ružinovská",
    "Rybalkova",
    "Rybalkova",
    "Rybalkova",
    "Rybničná",
    "Rybná",
    "Rybova",
    "Rybářská",
    "Rybízová",
    "Rychnovská",
    "Rychtáře Petříka",
    "Rychtáře Šimona",
    "Rychtářská",
    "Rypkova",
    "Rytířova",
    "Rytířská",
    "Ryzcová",
    "Ryzlinková",
    "Ryšánkova",
    "Rájecká",
    "Rámová",
    "Rápošovská",
    "Rážova",
    "Révová",
    "Rýmařovská",
    "Rýnská",
    "Rýznerova",
    "Růženínová",
    "Růženínská",
    "Růženínská",
    "Růžová",
    "S. K. Neumanna",
    "Sabinova",
    "Sadařská",
    "Sadová",
    "Sadská",
    "Sadská",
    "Sady Bratří Čapků",
    "Safírová",
    "Salabova",
    "Salačova",
    "Salmovská",
    "Salvátorská",
    "Samcova",
    "Samohelova",
    "Samota U Podleského Rybníka",
    "Sarajevská",
    "Saratovská",
    "Sartoriova",
    "Sasanková",
    "Saská",
    "Satalická",
    "Saturnova",
    "Saudkova",
    "Sauerova",
    "Saveljevova",
    "Savojská",
    "Sazečská",
    "Sazečská",
    "Sazovická",
    "Sbíhavá I",
    "Sbíhavá Ii",
    "Schnirchova",
    "Schodišťová",
    "Schodová",
    "Schoellerova",
    "Schoellerova",
    "Schulhoffova",
    "Schwaigerova",
    "Schwarzenberská",
    "Schöfflerova",
    "Sdružení",
    "Sechterova",
    "Sedlecká",
    "Sedlovická",
    "Sedloňovská",
    "Sedlčanská",
    "Sedmidomky",
    "Sedmidomky",
    "Sedmikrásková",
    "Sedmnáctého Listopadu",
    "Seidlova",
    "Seifertova",
    "Sekaninova",
    "Sekeřická",
    "Sekorova",
    "Selmická",
    "Selská",
    "Selských Baterií",
    "Semanského",
    "Semická",
    "Semilská",
    "Semilská",
    "Seminární",
    "Seminářská",
    "Seminářská Zahrada",
    "Semonická",
    "Semtínská",
    "Semčická",
    "Sendražická",
    "Senegalská",
    "Senohrabská",
    "Senovážná",
    "Senovážné Nám.",
    "Senovážné Náměstí",
    "Senožatská",
    "Sestupná",
    "Sestupná",
    "Setbová",
    "Sevastopolská",
    "Severní I",
    "Severní Ii",
    "Severní Iii",
    "Severní Iv",
    "Severní Ix",
    "Severní V",
    "Severní Vi",
    "Severní Vii",
    "Severní Viii",
    "Severní X",
    "Severní Xi",
    "Severovýchodní I",
    "Severovýchodní Ii",
    "Severovýchodní Iii",
    "Severovýchodní Iv",
    "Severovýchodní V",
    "Severovýchodní Vi",
    "Severozápadní I",
    "Severozápadní Ii",
    "Severozápadní Iii",
    "Severozápadní Iv",
    "Severozápadní V",
    "Severozápadní Vi",
    "Severýnova",
    "Sevřená",
    "Seydlerova",
    "Sezemická",
    "Sezemínská",
    "Sezimova",
    "Sečská",
    "Sibeliova",
    "Sibiřské Nám.",
    "Sibiřské Náměstí",
    "Sicherova",
    "Sichrovského",
    "Siemensova",
    "Silurská",
    "Sinkulova",
    "Sinkulova",
    "Sitteho",
    "Siwiecova",
    "Skalecká",
    "Skalnatá",
    "Skalnická",
    "Skalní",
    "Skalská",
    "Skaláků",
    "Skandinávská",
    "Skandinávská",
    "Skautská",
    "Sklenská",
    "Skloněná",
    "Sklářská",
    "Skokanská",
    "Skorkovská",
    "Skorkovská",
    "Skotská",
    "Skořepka",
    "Skořicová",
    "Skryjská",
    "Skupova",
    "Skuteckého",
    "Skálova",
    "Skřivanova",
    "Skřivanská",
    "Skřivánčí",
    "Sladkovského Nám.",
    "Sladkovského Náměstí",
    "Sladovnická",
    "Slancova",
    "Slaná",
    "Slapská",
    "Slatinová",
    "Slatinská",
    "Slatiny",
    "Slatiňanská",
    "Slavatova",
    "Slaviborské Nám.",
    "Slaviborské Náměstí",
    "Slavická",
    "Slavičí",
    "Slavičínská",
    "Slavníkova",
    "Slavojova",
    "Slavonická",
    "Slavíkova",
    "Slavíkova",
    "Slavíkova",
    "Slavínského",
    "Slavíčkova",
    "Slavětínská",
    "Slepá I",
    "Slepá Ii",
    "Slezanů",
    "Slezská",
    "Slezská",
    "Sliačská",
    "Sliačská",
    "Slibná",
    "Slinková",
    "Slivenecká",
    "Slovanský Ostrov",
    "Slovačíkova",
    "Slovenská",
    "Slovenská",
    "Slovinská",
    "Slunečnicová",
    "Slunečná",
    "Sluneční",
    "Sluneční Nám.",
    "Sluneční Náměstí",
    "Slunná",
    "Sluštická",
    "Služeb",
    "Služeb",
    "Služská",
    "Sládkova",
    "Sládkovičova",
    "Slámova",
    "Slánská",
    "Slávy Horníka",
    "Slévačská",
    "Slévačská",
    "Slévačská",
    "Slídová",
    "Slívová",
    "Smaragdová",
    "Smetanovo Nábř.",
    "Smetanovo Nábřeží",
    "Smetáčkova",
    "Smidarská",
    "Smikova",
    "Smiřická",
    "Smiřického",
    "Smolenská",
    "Smolkova",
    "Smolíkova",
    "Smotlachova",
    "Smotlachova",
    "Smrková",
    "Smrčinská",
    "Smržovská",
    "Smržová",
    "Smíchovská",
    "Smíchovská",
    "Smíchovská",
    "Smírná",
    "Snopkova",
    "Sněmovní",
    "Sněženková",
    "Sněžná",
    "Sobolákova",
    "Soborská",
    "Sobotecká",
    "Sobínská",
    "Soběslavova",
    "Soběslavská",
    "Sobětická",
    "Sobětušská",
    "Soběšínská",
    "Sochařská",
    "Socháňova",
    "Sodomkova",
    "Sofijské Nám.",
    "Sofijské Náměstí",
    "Sojkovská",
    "Sojovická",
    "Sojčí",
    "Sojčí",
    "Sokolovská",
    "Sokolovská",
    "Sokolovská",
    "Sokolovská",
    "Sokolská",
    "Sokratova",
    "Solidarity",
    "Solnická",
    "Solná",
    "Sopotská",
    "Sosnovecká",
    "Souběžná I",
    "Souběžná Ii",
    "Souběžná Iii",
    "Souběžná Iv",
    "Soudní",
    "Soukalova",
    "Soukenická",
    "Soumarská",
    "Sousední",
    "Sousední",
    "Sousedská",
    "Sousedíkova",
    "Soustružnická",
    "Soustružnická",
    "Souvratní",
    "Součkova",
    "Sovenická",
    "Sovova",
    "Sovákova",
    "Soví Vršek",
    "Spinozova",
    "Spiritka",
    "Splavná",
    "Spodní",
    "Spojařů",
    "Spojenců",
    "Spojená",
    "Spojná",
    "Spojovací",
    "Spojovací",
    "Spojovací",
    "Spojovací",
    "Spojová",
    "Společná",
    "Spolská",
    "Spolupráce",
    "Sportovců",
    "Sportovců",
    "Sportovní",
    "Spotřebitelská",
    "Spořická",
    "Spořilovská",
    "Spytihněvova",
    "Spádná",
    "Spádová",
    "Spálená",
    "Spálená",
    "Spálený Mlýn",
    "Srbova",
    "Srbská",
    "Srbínská",
    "Srnečkova",
    "Srnčí",
    "Srnčí",
    "Srpnová",
    "Srázná",
    "Stachova",
    "Stadická",
    "Stadionová",
    "Stadiónová",
    "Stallichova",
    "Stamicova",
    "Staniční",
    "Starobylá",
    "Starochodovská",
    "Starochuchelská",
    "Starodejvická",
    "Starodubečská",
    "Starodvorská",
    "Staroklánovická",
    "Starokolínská",
    "Starokošířská",
    "Starolázeňská",
    "Staromlýnská",
    "Staromodřanská",
    "Staroměstské Nám.",
    "Staroměstské Náměstí",
    "Staropacká",
    "Staropramenná",
    "Starostrašnická",
    "Starostřešovická",
    "Starosuchdolská",
    "Staroújezdská",
    "Staročeská",
    "Stará Cesta",
    "Stará Náves",
    "Stará Obec",
    "Stará Spojovací",
    "Stará Stodůlecká",
    "Staré Nám.",
    "Staré Náměstí",
    "Staré Zámecké Schody",
    "Staré Zámecké Schody",
    "Starého",
    "Starý Lis",
    "Statenická",
    "Statková",
    "Stavbařů",
    "Stavební",
    "Stavitelská",
    "Stavovská",
    "Staňkova",
    "Staňkovka",
    "Staňkovská",
    "Stehlíkova",
    "Steinerova",
    "Stejskalova",
    "Stiessova",
    "Stinkovská",
    "Stochovská",
    "Stodůlecká",
    "Stojická",
    "Stoličkova",
    "Stoliňská",
    "Stoupající",
    "Stoupající",
    "Stradonická",
    "Strahovská",
    "Strahovské Nádvoří",
    "Strakatého",
    "Strakonická",
    "Strakonická",
    "Strakonická",
    "Strakonická",
    "Strakonická",
    "Strakonická",
    "Strakošová",
    "Strančická",
    "Stratovská",
    "Strašnická",
    "Strašnická",
    "Strašovská",
    "Strašínská",
    "Strmá",
    "Strmý Vrch",
    "Strnadova",
    "Strnady",
    "Strojická",
    "Strojnická",
    "Strojírenská",
    "Stromovka",
    "Stromovka",
    "Stropnická",
    "Stropnická",
    "Stropnická",
    "Strossmayerovo Nám.",
    "Strossmayerovo Náměstí",
    "Strouhalova",
    "Stroupežnického",
    "Struhařovská",
    "Strunkovská",
    "Stružky",
    "Stružná",
    "Strážkovická",
    "Strážnická",
    "Strážní",
    "Strážovská",
    "Stržná",
    "Studenecká",
    "Studentská",
    "Studená",
    "Studnická",
    "Studničkova",
    "Studniční",
    "Studánková",
    "Stulíková",
    "Stupická",
    "Stupkova",
    "Stupská",
    "Stupňová",
    "Stádlecká",
    "Stárkova",
    "Stýblova",
    "Střední",
    "Středohorská",
    "Středová",
    "Střekovská",
    "Střelecký Ostrov",
    "Střelečská",
    "Střelničná",
    "Střelničná",
    "Střemchová",
    "Střešovická",
    "Střešovická",
    "Střimelická",
    "Stříbrná",
    "Stříbrského",
    "Stříbrského",
    "Střížkovská",
    "Střížkovská",
    "Střížkovská",
    "Suchardova",
    "Suchdolská",
    "Suchdolská",
    "Suchdolská",
    "Suchdolské Nám.",
    "Suchdolské Náměstí",
    "Suchý Vršek",
    "Sudkova",
    "Sudoměřská",
    "Sudějovická",
    "Sukova",
    "Sulanského",
    "Sulická",
    "Sulická",
    "Sulova",
    "Sulovická",
    "Sumova",
    "Suppého",
    "Suttnerové",
    "Sušická",
    "Sušilova",
    "Svahová",
    "Svatavina",
    "Svatojánská",
    "Svatoplukova",
    "Svatoslavova",
    "Svatovítská",
    "Svatovítská",
    "Svatoňovická",
    "Svažitá",
    "Svijanská",
    "Svitavská",
    "Svitákova",
    "Svobodova",
    "Svobodova",
    "Svojetická",
    "Svojsíkova",
    "Svojšická",
    "Svojšovická",
    "Svornosti",
    "Svratecká",
    "Svárovská",
    "Svátkova",
    "Svážná",
    "Svépomoci",
    "Svépomocná",
    "Svépravická",
    "Svépravická",
    "Svídnická",
    "Svěceného",
    "Světická",
    "Světova",
    "Světská",
    "Sychrovská",
    "Symfonická",
    "Synkovická",
    "Synkovská",
    "Syrská",
    "Sádky",
    "Sádovská",
    "Sámova",
    "Sárská",
    "Sárská",
    "Sárská",
    "Sázavská",
    "Sáňkařská",
    "Sídlištní",
    "Sídlištní",
    "Sídliště",
    "Súdánská",
    "Sýkorčí",
    "Sýkovecká",
    "Tachlovická",
    "Tachovská",
    "Tachovské Nám.",
    "Tachovské Náměstí",
    "Tadrova",
    "Tajovského",
    "Talafúsova",
    "Talichova",
    "Talmberská",
    "Tanvaldská",
    "Tasovská",
    "Tatarkova",
    "Tatranská",
    "Tauerova",
    "Tauferova",
    "Taussigova",
    "Tavolníková",
    "Tařicová",
    "Taškentská",
    "Technická",
    "Technologická",
    "Tehovská",
    "Tejnická",
    "Tejnka",
    "Telčská",
    "Templová",
    "Tenisová",
    "Teplická",
    "Teplárenská",
    "Teplárenská",
    "Terasovitá",
    "Tererova",
    "Terezínská",
    "Terronská",
    "Tesaříkova",
    "Tetínská",
    "Theinova",
    "Thomayerova",
    "Thunovská",
    "Thurnova",
    "Thákurova",
    "Thámova",
    "Tibetská",
    "Tichnova",
    "Tichnova",
    "Tichonická",
    "Tichá",
    "Tichého",
    "Tigridova",
    "Tikovská",
    "Tilleho Nám.",
    "Tilleho Náměstí",
    "Tilschové",
    "Tiskařská",
    "Tismická",
    "Tišická",
    "Tlumačovská",
    "Tlustého",
    "Tobrucká",
    "Tolstého",
    "Tomanova",
    "Tomická",
    "Tomkova",
    "Tomsova",
    "Tomáškova",
    "Tomášská",
    "Tomíčkova",
    "Topasová",
    "Topolová",
    "Toruňská",
    "Toulovská",
    "Toušeňská",
    "Toušická",
    "Toužimská",
    "Toužimská",
    "Tovarova",
    "Tovačovského",
    "Tovární",
    "Točenská",
    "Točitá",
    "Trabantská",
    "Trachtova",
    "Trampotova",
    "Travnatá",
    "Travná",
    "Travná",
    "Trenčínská",
    "Trhanovské Náměstí",
    "Trmická",
    "Trnavská",
    "Trnavská",
    "Trnitá",
    "Trnkovo Nám.",
    "Trnkovo Náměstí",
    "Trnková",
    "Trnovanská",
    "Trní",
    "Trocnovská",
    "Troilova",
    "Trojanova",
    "Trojanův Mlýn",
    "Trojdílná",
    "Trojická",
    "Trojmezní",
    "Trojmezní",
    "Trojská",
    "Trojská",
    "Trojská",
    "Trojská",
    "Troskovická",
    "Trousilova",
    "Truhlářka",
    "Truhlářova",
    "Truhlářská",
    "Trutnovská",
    "Tryskovická",
    "Tryskovická",
    "Trytova",
    "Trávnická",
    "Trávníčkova",
    "Tréglova",
    "Tržiště",
    "Tuchoměřická",
    "Tuchorazská",
    "Tuchotická",
    "Tuháňská",
    "Tuklatská",
    "Tulešická",
    "Tulipánová",
    "Tulkova",
    "Tulská",
    "Tunelářů",
    "Tuniská",
    "Tupolevova",
    "Turgeněvova",
    "Turistická",
    "Turkmenská",
    "Turkovická",
    "Turkovská",
    "Turnovská",
    "Turnovského",
    "Turská",
    "Turínská",
    "Tusarova",
    "Tuřická",
    "Tušimická",
    "Tužebníková",
    "Tvrdonická",
    "Tvrdého",
    "Tychonova",
    "Tylišovská",
    "Tylovická",
    "Tylovo Nám.",
    "Tylovo Náměstí",
    "Tymiánová",
    "Tyrkysová",
    "Tyršova",
    "Táboritská",
    "Táborská",
    "Tádžická",
    "Táhlá",
    "Tálínská",
    "Türkova",
    "Týmlova",
    "Týmlova",
    "Týn",
    "Týnecká",
    "Týnská",
    "Týnská Ulička",
    "Týřovická",
    "Tělovýchovná",
    "Těšnov",
    "Těšovická",
    "Těšíkova",
    "Těšínská",
    "Třanovského",
    "Třebanická",
    "Třebechovická",
    "Třebenická",
    "Třebešovská",
    "Třebihošťská",
    "Třebohostická",
    "Třebonická",
    "Třeboradická",
    "Třebotovská",
    "Třeboňská",
    "Třebízského",
    "Třebějická",
    "Třebětínská",
    "Třešňová",
    "Třešňová",
    "Třešňová",
    "Třinecká",
    "Třtinová",
    "Třídomá",
    "Třístoličná",
    "Tůmova",
    "U Akademie",
    "U Akátů",
    "U Albrechtova Vrchu",
    "U Andělky",
    "U Arborky",
    "U Bakaláře",
    "U Balabenky",
    "U Bazénu",
    "U Bažantnice",
    "U Berounky",
    "U Beránky",
    "U Besedy",
    "U Blaženky",
    "U Boroviček",
    "U Botiče",
    "U Botiče",
    "U Božích Bojovníků",
    "U Branek",
    "U Bruských Kasáren",
    "U Brusnice",
    "U Brusnice",
    "U Bubce",
    "U Bulhara",
    "U Bulhara",
    "U Bílého Mlýnku",
    "U Břehu",
    "U Chaloupek",
    "U Chmelnice",
    "U Chodovského Hřbitova",
    "U Cibulky",
    "U Cihelny",
    "U Cikánky",
    "U Cukrovaru",
    "U Císařské Cesty",
    "U Dejvického Rybníčku",
    "U Demartinky",
    "U Divadla",
    "U Divadla",
    "U Dobešky",
    "U Dobráků",
    "U Dobráků",
    "U Dobřenských",
    "U Domu Služeb",
    "U Drahaně",
    "U Druhé Baterie",
    "U Druhé Baterie",
    "U Drupolu",
    "U Družstev",
    "U Družstva Ideál",
    "U Družstva Klid",
    "U Družstva Práce",
    "U Družstva Práce",
    "U Družstva Repo",
    "U Družstva Tempo",
    "U Družstva Život",
    "U Dráhy",
    "U Dráhy",
    "U Drážky",
    "U Drůbežárny",
    "U Dubečské Tvrze",
    "U Dubu",
    "U Dvojdomů",
    "U Dvora",
    "U Dvou Srpů",
    "U Dálnice",
    "U Dívčích Hradů",
    "U Dívčích Hradů",
    "U Děkanky",
    "U Dělnického Cvičiště",
    "U Dětského Domova",
    "U Dětského Hřiště",
    "U Elektry",
    "U Elektry",
    "U Elektrárny",
    "U Floriána",
    "U Fořta",
    "U Gabrielky",
    "U Garáží",
    "U Golfu",
    "U Gymnázia",
    "U Habeše",
    "U Habrovky",
    "U Hadovky",
    "U Harfy",
    "U Hasičské Zbrojnice",
    "U Hasičské Zbrojnice",
    "U Havlíčkových Sadů",
    "U Hellady",
    "U Hercovky",
    "U Hliníku",
    "U Hodin",
    "U Homolky",
    "U Hostavického Potoka",
    "U Hostivařského Nádraží",
    "U Hostivařského Nádraží",
    "U Hotelu",
    "U Hranic",
    "U Hrnčířského Rybníka",
    "U Hrocha",
    "U Hrušky",
    "U Hráze",
    "U Hudební Školy",
    "U Hvozdu",
    "U Hvězdy",
    "U Hvězdy",
    "U Háje",
    "U Hájku",
    "U Hájovny",
    "U Házů",
    "U Hřbitovů",
    "U Hřiště",
    "U Invalidovny",
    "U Jamské",
    "U Jankovky",
    "U Javoru",
    "U Jedličkova Ústavu",
    "U Jednoty",
    "U Jeslí",
    "U Jezera",
    "U Jezerky",
    "U Jezu",
    "U Jezírka",
    "U Jinonického Rybníčka",
    "U Jirkovské",
    "U Jizby",
    "U Járku",
    "U Jízdárny",
    "U Kabelovny",
    "U Kabelovny",
    "U Kaménky",
    "U Kamýku",
    "U Kanálky",
    "U Kapliček",
    "U Kapličky",
    "U Karlova Stánku",
    "U Kasáren",
    "U Kavalírky",
    "U Kazína",
    "U Kašny",
    "U Kaštanu",
    "U Kempinku",
    "U Kina",
    "U Klavírky",
    "U Klikovky",
    "U Klimentky",
    "U Kloubových Domů",
    "U Klubovny",
    "U Klubu",
    "U Kněžské Louky",
    "U Kola",
    "U Kolejí",
    "U Kolejí",
    "U Koloděj",
    "U Kolonie",
    "U Koloniálu",
    "U Kombinátu",
    "U Konečné",
    "U Koní",
    "U Kosinů",
    "U Kostela",
    "U Kostrounku",
    "U Kotlářky",
    "U Koupadel",
    "U Košíku",
    "U Krbu",
    "U Krbu",
    "U Krelovy Studánky",
    "U Kruhovky",
    "U Královské Louky",
    "U Krčské Vodárny",
    "U Krčského Nádraží",
    "U Kublova",
    "U Kunratického Lesa",
    "U Křižovatky",
    "U Kříže",
    "U Kříže",
    "U Křížku",
    "U Laboratoře",
    "U Ladronky",
    "U Lanové Dráhy",
    "U Ledáren",
    "U Lesa",
    "U Lesa",
    "U Lesíka",
    "U Letenského Sadu",
    "U Letiště",
    "U Letohrádku Královny Anny",
    "U Libeňského Pivovaru",
    "U Libeňského Zámku",
    "U Libušiných Lázní",
    "U Libušské Sokolovny",
    "U Lidového Domu",
    "U Lip",
    "U Lipové Aleje",
    "U Lisu",
    "U Loděnice",
    "U Lomu",
    "U Loskotů",
    "U Louky",
    "U Lužického Semináře",
    "U Lázeňky",
    "U Lázní",
    "U Lékárny",
    "U Líhní",
    "U Lípy",
    "U Malvazinky",
    "U Malé Řeky",
    "U Markéty",
    "U Mateřské Školy",
    "U Matěje",
    "U Maří Magdaleny",
    "U Meteoru",
    "U Mezníku",
    "U Michelské Školy",
    "U Michelského Lesa",
    "U Michelského Lesa",
    "U Michelského Mlýna",
    "U Milosrdných",
    "U Mlýna",
    "U Mlýna",
    "U Mlýnského Rybníka",
    "U Modré Školy",
    "U Modřanské Školy",
    "U Močálu",
    "U Mrázovky",
    "U Mydlárny",
    "U Myslivny",
    "U Městských Domů",
    "U Měšťanského Pivovaru",
    "U Měšťanských Škol",
    "U Nadýmače",
    "U Nemocenské Pojišťovny",
    "U Nemocnice",
    "U Nesypky",
    "U Nikolajky",
    "U Nové Dálnice",
    "U Nové Louky",
    "U Nové Školy",
    "U Nového Dvora",
    "U Nového Suchdola",
    "U Nového Suchdola",
    "U Nových Domů I",
    "U Nových Domů Ii",
    "U Nových Domů Iii",
    "U Nových Vil",
    "U Nádražní Lávky",
    "U Nádraží",
    "U Nádrže",
    "U Náhonu",
    "U Náhonu",
    "U Nákladového Nádraží",
    "U Nákladového Nádraží",
    "U Národní Galerie",
    "U Nás",
    "U Obce",
    "U Obecního Domu",
    "U Obecního Dvora",
    "U Obory",
    "U Okrouhlíku",
    "U Olšiček",
    "U Opatrovny",
    "U Ovčína",
    "U Palaty",
    "U Paliárky",
    "U Paloučku",
    "U Památníku",
    "U Panské Zahrady",
    "U Papírny",
    "U Parku",
    "U Parkánu",
    "U Parního Mlýna",
    "U Pastoušky",
    "U Pavilónu",
    "U Pazderek",
    "U Pejřárny",
    "U Pekařky",
    "U Pekáren",
    "U Pentlovky",
    "U Pergamenky",
    "U Pernikářky",
    "U Pernštejnských",
    "U Petřin",
    "U Pily",
    "U Plovárny",
    "U Plynárny",
    "U Plynárny",
    "U Plátenice",
    "U Podchodu",
    "U Podjezdu",
    "U Podolského Hřbitova",
    "U Podolského Sanatoria",
    "U Pohádky",
    "U Polikliniky",
    "U Pomníku",
    "U Potoka",
    "U Poustek",
    "U Poštovky",
    "U Pošty",
    "U Pramene",
    "U Prašné Brány",
    "U Prašného Mostu",
    "U Prašného Mostu",
    "U Pražských Lomů",
    "U Prefy",
    "U Prioru",
    "U Prknovky",
    "U Prodejny",
    "U Propusti",
    "U Prosecké Školy",
    "U Proseckého Kostela",
    "U První Baterie",
    "U První Baterie",
    "U Prádelny",
    "U Průhonu",
    "U Průseku",
    "U Pumpy",
    "U Párníků",
    "U Páté Baterie",
    "U Páté Baterie",
    "U Písecké Brány",
    "U Pískovny",
    "U Přechodu",
    "U Přehrady",
    "U Přejezdu",
    "U Půjčovny",
    "U Radiály",
    "U Radnice",
    "U Rajské Zahrady",
    "U Rakovky",
    "U Roháčových Kasáren",
    "U Rokytky",
    "U Rokytky",
    "U Rokytky",
    "U Rozkoše",
    "U Roztockého Háje",
    "U Rybníka",
    "U Rybníčka",
    "U Rybářství",
    "U Rychty",
    "U Rychty",
    "U Ryšánky",
    "U Ryšánky",
    "U Sadu",
    "U Sanatoria",
    "U Sanopzu",
    "U Santošky",
    "U Schodů",
    "U Sedlecké Školy",
    "U Seřadiště",
    "U Sila",
    "U Silnice",
    "U Silnice",
    "U Skalky",
    "U Skladu",
    "U Skládky",
    "U Skopců",
    "U Skály",
    "U Sladovny",
    "U Slavie",
    "U Sloupu",
    "U Slovanky",
    "U Slovanské Pojišťovny",
    "U Sluncové",
    "U Slévárny",
    "U Smaltovny",
    "U Smetanky",
    "U Smolnic",
    "U Smíchovského Hřbitova",
    "U Sokolovny",
    "U Soutoku",
    "U Sovových Mlýnů",
    "U Sparty",
    "U Splavu",
    "U Spojky",
    "U Spojů",
    "U Společenské Zahrady",
    "U Sportoviště",
    "U Spořitelny",
    "U Stanice",
    "U Staré Cihelny",
    "U Staré Plynárny",
    "U Staré Pošty",
    "U Staré Skládky",
    "U Staré Sokolovny",
    "U Staré Studánky",
    "U Staré Tvrze",
    "U Staré Školy",
    "U Staré Školy",
    "U Starého Hřbitova",
    "U Starého Hřiště",
    "U Starého Mlýna",
    "U Starého Nádraží",
    "U Starého Splavu",
    "U Starého Stadionu",
    "U Starého Stadiónu",
    "U Starého Židovského Hřbitova",
    "U Starého Židovského Hřbitova",
    "U Statku",
    "U Stavoservisu",
    "U Stojanu",
    "U Strouhy",
    "U Strže",
    "U Studny",
    "U Studánky",
    "U Studánky",
    "U Stárovny",
    "U Státní Dráhy",
    "U Státní Dráhy",
    "U Stírky",
    "U Střediska",
    "U Střešovických Hřišť",
    "U Sušičky",
    "U Svahu",
    "U Svatého Ducha",
    "U Svobodárny",
    "U Svodnice",
    "U Svornosti",
    "U Svépomoci",
    "U Světličky",
    "U Synagogy",
    "U Sádek",
    "U Sídliště",
    "U Tabulky",
    "U Technoplynu",
    "U Tenisu",
    "U Teplárny",
    "U Topíren",
    "U Továren",
    "U Transformační Stanice",
    "U Transformátoru",
    "U Trati",
    "U Trativodu",
    "U Trezorky",
    "U Trojice",
    "U Trojského Zámku",
    "U Trpce",
    "U Tržnice",
    "U Tvrze",
    "U Tyrše",
    "U Tyršovky",
    "U Tyršovy Školy",
    "U Třetí Baterie",
    "U Třešňovky",
    "U Třešňového Sadu",
    "U Tůně",
    "U Uhříněveské Obory",
    "U Uranie",
    "U Učiliště",
    "U Valu",
    "U Velké Skály",
    "U Vesny",
    "U Viktorky",
    "U Vinice",
    "U Viniček",
    "U Vinné Révy",
    "U Vinných Sklepů",
    "U Vinohradské Nemocnice",
    "U Vinohradského Hřbitova",
    "U Vinohradského Hřbitova",
    "U Vizerky",
    "U Višňovky",
    "U Višňovky",
    "U Vlachovky",
    "U Vlasačky",
    "U Vlečky",
    "U Vlečky",
    "U Vltavy",
    "U Voborníků",
    "U Vodice",
    "U Vodojemu",
    "U Vodojemu",
    "U Vodotoku",
    "U Vody",
    "U Vodárny",
    "U Vojanky",
    "U Vojenské Nemocnice",
    "U Vojtěšky",
    "U Vokovické Školy",
    "U Vorlíků",
    "U Vozovny",
    "U Vrbiček",
    "U Vrby",
    "U Vrtilky",
    "U Vršovického Hřbitova",
    "U Vršovického Hřbitova",
    "U Vršovického Nádraží",
    "U Vysočanského Cukrovaru",
    "U Vysočanského Pivovaru",
    "U Václava",
    "U Váhy",
    "U Vápenice",
    "U Vápenky",
    "U Vápenné Skály",
    "U Výkupního Střediska",
    "U Výstavby",
    "U Výstaviště",
    "U Výstaviště",
    "U Výzkumu",
    "U Včely",
    "U Větrníku",
    "U Větrolamu",
    "U Větrolamu",
    "U Věže",
    "U Waltrovky",
    "U Zahradnictví",
    "U Zahradního Města",
    "U Zahrady",
    "U Zahrádek",
    "U Zahrádkářské Kolonie",
    "U Zastávky",
    "U Zbrojnice",
    "U Zdravotního Ústavu",
    "U Zeleného Ptáka",
    "U Zemníku",
    "U Zeměpisného Ústavu",
    "U Zlaté Studně",
    "U Zličína",
    "U Zličína",
    "U Zličínského Hřiště",
    "U Zvonařky",
    "U Zvoničky",
    "U Záběhlického Zámku",
    "U Zájezdku",
    "U Zákrutu",
    "U Zámeckého Parku",
    "U Zámečku",
    "U Zámečnice",
    "U Zásobní Zahrady",
    "U Zátiší",
    "U Závodiště",
    "U Závor",
    "U Úlů",
    "U Čekárny",
    "U Černé Rokle",
    "U Červeného Mlýnku",
    "U Červeného Mlýnku",
    "U Českých Loděnic",
    "U Čihadel",
    "U Čističky",
    "U Čokoládoven",
    "U Čtvrté Baterie",
    "U Čtyř Domů",
    "U Řempa",
    "U Říčanky",
    "U Šalamounky",
    "U Šalamounky",
    "U Šesté Baterie",
    "U Šesté Baterie",
    "U Školičky",
    "U Školky",
    "U Školního Pole",
    "U Školské Zahrady",
    "U Školy",
    "U Štěpu",
    "U Šumavy",
    "U Šumavěnky",
    "U Šálkovny",
    "U Šíchů",
    "U Šípků",
    "U Železnice",
    "U Železničního Mostu",
    "U Železné Lávky",
    "U Želivky",
    "U Židovského Hřbitova",
    "U Žlábku",
    "U Županských",
    "Uhelný Trh",
    "Uherská",
    "Uhříněveská",
    "Ukončená",
    "Ukrajinská",
    "Uljanovská",
    "Ulrychova",
    "Ulčova",
    "Umělecká",
    "Ungarova",
    "Unhošťská",
    "Univerzitní",
    "Upolínová",
    "Upravená",
    "Uralská",
    "Urbanická",
    "Urbanova",
    "Urbánkova",
    "Urešova",
    "Uruguayská",
    "Urxova",
    "Utěšilova",
    "Uzavřená",
    "Uzbecká",
    "Uzoučká",
    "Učitelská",
    "Učňovská",
    "Užocká",
    "V Aleji",
    "V Alejích",
    "V Americe",
    "V Babyku",
    "V Bambouskách",
    "V Bažinách",
    "V Benátkách",
    "V Bezpečí",
    "V Bokách I",
    "V Bokách Ii",
    "V Bokách Iii",
    "V Borovičkách",
    "V Botanice",
    "V Brance",
    "V Brůdku",
    "V Brůdku",
    "V Bytovkách",
    "V Bílce",
    "V Březinkách",
    "V Březině",
    "V Březí",
    "V Břízkách",
    "V Celnici",
    "V Cestičkách",
    "V Cestkách",
    "V Chaloupkách",
    "V Chaloupkách",
    "V Chatách",
    "V Chotejně",
    "V Cibulkách",
    "V Cihelně",
    "V Cípu",
    "V Dolinách",
    "V Dolině",
    "V Dolině",
    "V Dolích",
    "V Domcích",
    "V Domově",
    "V Doubcích",
    "V Dílcích",
    "V Edenu",
    "V Haltýři",
    "V Hliništi",
    "V Hluboké",
    "V Hodkovičkách",
    "V Holešovičkách",
    "V Honu",
    "V Horkách",
    "V Horní Stromce",
    "V Hrobech",
    "V Humenci",
    "V Humenci",
    "V Humnech",
    "V Háji",
    "V Hájkách",
    "V Hájích",
    "V Hůrkách",
    "V Jahodách",
    "V Javorech",
    "V Javoříčku",
    "V Jehličině",
    "V Jehličí",
    "V Jezerách",
    "V Jezevčinách",
    "V Jezírkách",
    "V Jirchářích",
    "V Jámě",
    "V Kališti",
    "V Kališti",
    "V Kapslovně",
    "V Klukovicích",
    "V Kole",
    "V Kolkovně",
    "V Korytech",
    "V Korytech",
    "V Kotcích",
    "V Koutku",
    "V Koutě",
    "V Kratinách",
    "V Kruhu",
    "V Kuťatech",
    "V Kálku",
    "V Křepelkách",
    "V Křovinách",
    "V Křížkách",
    "V Ladech",
    "V Lesíčku",
    "V Lipinách",
    "V Lipinách",
    "V Lipkách",
    "V Lipách",
    "V Listnáčích",
    "V Lomech",
    "V Louce",
    "V Luhu",
    "V Lukách",
    "V Lučinách",
    "V Lužích",
    "V Lánech",
    "V Lázních",
    "V Lískách",
    "V Malých Domech I",
    "V Malých Domech Ii",
    "V Malých Domech Iii",
    "V Mezihoří",
    "V Milíři",
    "V Mokřinách",
    "V Mydlinkách",
    "V Nové Hostivaři",
    "V Nové Vsi",
    "V Nové Vsi",
    "V Nové Čtvrti",
    "V Novém Hloubětíně",
    "V Novém Hloubětíně",
    "V Nových Bohnicích",
    "V Nových Domcích",
    "V Nových Vokovicích",
    "V Náklích",
    "V Násypu",
    "V Nížinách",
    "V Oblouku",
    "V Občanském Domově",
    "V Obůrkách",
    "V Ochozu",
    "V Ohradě",
    "V Ohybu",
    "V Okruží",
    "V Okálech",
    "V Olšinách",
    "V Olšinách",
    "V Olšině",
    "V Ondřejově",
    "V Opatově",
    "V Osikách",
    "V Ostružiní",
    "V Oudolku",
    "V Ořeší",
    "V Pachmance",
    "V Padolině",
    "V Parcelách",
    "V Parku",
    "V Parníku",
    "V Pačátkách",
    "V Pařezinách",
    "V Pevnosti",
    "V Pevnosti",
    "V Pitkovičkách",
    "V Planinách",
    "V Platýzu",
    "V Pláni",
    "V Podbabě",
    "V Podhoří",
    "V Podhájí",
    "V Podhájí",
    "V Podluží",
    "V Podskalí",
    "V Podvrší",
    "V Podzámčí",
    "V Poli",
    "V Polích",
    "V Potokách",
    "V Potočinách",
    "V Potočkách",
    "V Prutinách",
    "V Průhledu",
    "V Průčelí",
    "V Pátém",
    "V Pískovně",
    "V Pěšinkách",
    "V Předním Hloubětíně",
    "V Předním Veleslavíně",
    "V Předpolí",
    "V Předpolí",
    "V Přelomu",
    "V Přístavu",
    "V Remízku",
    "V Rohožníku",
    "V Rohu",
    "V Roháčích",
    "V Rokli",
    "V Roklích",
    "V Rovinách",
    "V Rovinách",
    "V Rybníkách",
    "V Rybníčkách",
    "V Ráji",
    "V Ráji",
    "V Rákosí",
    "V Sadech",
    "V Sedlci",
    "V Sedlci",
    "V Slavětíně",
    "V Soudním",
    "V Stráni",
    "V Středu",
    "V Sudech",
    "V Sídlišti",
    "V Tehovičkách",
    "V Tišině",
    "V Trninách",
    "V Třešňovce",
    "V Tůních",
    "V Uličce",
    "V Uličkách",
    "V Zahradní Čtvrti",
    "V Zahradách",
    "V Zahrádkách",
    "V Zatáčce",
    "V Zeleni",
    "V Zeleném Údolí",
    "V Záhorském",
    "V Záhybu",
    "V Zákopech",
    "V Zákoutí",
    "V Zálesí",
    "V Zálomu",
    "V Zámcích",
    "V Zápolí",
    "V Zátiší",
    "V Zátočce",
    "V Závitu",
    "V Závětří",
    "V Zářezu",
    "V Údolí",
    "V Údolí Hvězd",
    "V Úhlu",
    "V Úhoru",
    "V Úvalu",
    "V Úvoze",
    "V Úzké",
    "V Úžlabině",
    "V Úžlabině",
    "V Čeňku",
    "V Štíhlách",
    "V Šáreckém Údolí",
    "V Žabokřiku",
    "V Žáčku",
    "V. P. Čkalova",
    "V. P. Čkalova",
    "Vachkova",
    "Vackova",
    "Vacovská",
    "Vacínova",
    "Vacínovská",
    "Vajdova",
    "Vajgarská",
    "Valcířská",
    "Valdická",
    "Valdovská",
    "Valdštejnská",
    "Valdštejnské Nám.",
    "Valdštejnské Náměstí",
    "Valentinská",
    "Valentinská",
    "Valentova",
    "Valečovská",
    "Valská",
    "Valtická",
    "Valtínovská",
    "Valčíkova",
    "Valšovská",
    "Vamberská",
    "Vanická",
    "Vaníčkova",
    "Vaníčkova",
    "Varhulíkové",
    "Varnsdorfská",
    "Varšavská",
    "Vavákova",
    "Vavřenova",
    "Vavřinecká",
    "Vazovova",
    "Vačkářova",
    "Vaňkova",
    "Vaňkova",
    "Vašátkova",
    "Ve Dvoře",
    "Ve Lhotce",
    "Ve Lhotce",
    "Ve Skalkách",
    "Ve Skalách",
    "Ve Skále",
    "Ve Slatinách",
    "Ve Smečkách",
    "Ve Smrčině",
    "Ve Stromořadí",
    "Ve Struhách",
    "Ve Struhách",
    "Ve Stráni",
    "Ve Studeném",
    "Ve Stínu",
    "Ve Střešovičkách",
    "Ve Střešovičkách",
    "Ve Svahu",
    "Ve Vilkách",
    "Ve Vilách",
    "Ve Višňovce",
    "Ve Vratech",
    "Ve Vrbách",
    "Ve Vrchu",
    "Ve Vrších",
    "Ve Výhledu",
    "Ve Výhledu",
    "Ve Výrech",
    "Ve Zliči",
    "Ve Štěpnici",
    "Ve Žlíbku",
    "Vedlejší",
    "Vehlovická",
    "Vejražkova",
    "Vejvanovského",
    "Vejvodova",
    "Velebného",
    "Velehradská",
    "Velemínská",
    "Velemínská",
    "Velenická",
    "Velenovského",
    "Veleslavínova",
    "Veleslavínská",
    "Veleslavínská",
    "Veletovská",
    "Veletržní",
    "Veletržní",
    "Veleňská",
    "Velešínská",
    "Velfloviců",
    "Velflíkova",
    "Velhartická",
    "Velichovská",
    "Velimská",
    "Velkoborská",
    "Velkoosecká",
    "Velkopřevorské Nám.",
    "Velkopřevorské Náměstí",
    "Velká Lada",
    "Velká Lada",
    "Velká Skála",
    "Velké Kunratické",
    "Veltruská",
    "Veltěžská",
    "Velvarská",
    "Velínská",
    "Venušina",
    "Verdiho",
    "Verdunská",
    "Verneřická",
    "Verneřická",
    "Vernéřovská",
    "Veronské Nám.",
    "Veselská",
    "Veská",
    "Veslařský Ostrov",
    "Vestavěná",
    "Vestecká",
    "Veverkova",
    "Večerní",
    "Vidimova",
    "Vidimská",
    "Vidlicová",
    "Vidlák",
    "Vidonická",
    "Vidoulská",
    "Vidovická",
    "Vietnamská",
    "Viklefova",
    "Vikova",
    "Viktora Huga",
    "Viktorinova",
    "Viktorčina",
    "Vikářská",
    "Vilová",
    "Vilímkova",
    "Vilímovská",
    "Vimperské Náměstí",
    "Vinařického",
    "Vinařská",
    "Viničná",
    "Vinohradská",
    "Vinohradská",
    "Vinohradská",
    "Vinohradská",
    "Vinohradská",
    "Vinohradská",
    "Vinohradská",
    "Vinohrady",
    "Vinopalnická",
    "Vinořská",
    "Vinořské Nám.",
    "Vinořské Náměstí",
    "Vinšova",
    "Violková",
    "Vitošská",
    "Vitíkova",
    "Vitějovská",
    "Vizovická",
    "Višňovka",
    "Višňovka",
    "Višňová",
    "Vlachova",
    "Vladimírova",
    "Vladislava Vančury",
    "Vladislavova",
    "Vladivostocká",
    "Vladycká",
    "Vlastibořská",
    "Vlastina",
    "Vlastina",
    "Vlastislavova",
    "Vlasty Buriana",
    "Vlasty Hilské",
    "Vlasty Průchové",
    "Vlasákova",
    "Vlašimská",
    "Vlašská",
    "Vlašská",
    "Vlaštovčí",
    "Vlkanovská",
    "Vlkova",
    "Vlkovická",
    "Vlnitá",
    "Vltavanů",
    "Vltavanů",
    "Vltavanů",
    "Vltavická",
    "Vltavská",
    "Vltavínová",
    "Vlárská",
    "Vlásenická",
    "Vlčická",
    "Vlčkova",
    "Vlčnovská",
    "Vnislavova",
    "Vnitřní",
    "Vnoučkova",
    "Vnější",
    "Voborského",
    "Vobrubova",
    "Vocelova",
    "Voctářova",
    "Voctářova",
    "Vodická",
    "Vodičkova",
    "Vodičkova",
    "Vodnická",
    "Vodní",
    "Vodochodská",
    "Vodojemská",
    "Vodácká",
    "Vodárenská",
    "Voděradská",
    "Vodňanská",
    "Vodňanského",
    "Vojenova",
    "Vojetická",
    "Vojická",
    "Vojkovická",
    "Vojslavická",
    "Vojtova",
    "Vojtíškova",
    "Vojtěšská",
    "Vojáčkova",
    "Vokovická",
    "Vokovická",
    "Vokrojova",
    "Vokáčova",
    "Vokřínská",
    "Volarská",
    "Volavkova",
    "Voleníkova",
    "Volkova",
    "Volkovova",
    "Voltova",
    "Volutová",
    "Volyňská",
    "Volšovská",
    "Volšovská",
    "Vondroušova",
    "Vorařská",
    "Voroněžská",
    "Voroněžská",
    "Voráčovská",
    "Voršilská",
    "Voskova",
    "Voskovcova",
    "Vosmíkových",
    "Vostrovská",
    "Vostrého",
    "Vosátkova",
    "Votavova",
    "Votická",
    "Votočkova",
    "Votrubova",
    "Votuzská",
    "Vozová",
    "Vozová",
    "Voňkova",
    "Voříškova",
    "Vošahlíkova",
    "Vožická",
    "Vrabčí",
    "Vranická",
    "Vranovská",
    "Vranská",
    "Vratimovská",
    "Vratislavova",
    "Vratislavská",
    "Vratičová",
    "Vraňanská",
    "Vrbenského",
    "Vrbická",
    "Vrbková",
    "Vrbova",
    "Vrbčanská",
    "Vrchlabská",
    "Vrchlického",
    "Vrchlického Sady",
    "Vrchovinská",
    "Vrátenská",
    "Vrátkovská",
    "Vrázova",
    "Vrážská",
    "Vrútecká",
    "Vršní",
    "Vršovická",
    "Vršovické Nám.",
    "Vršovické Náměstí",
    "Vršovka",
    "Vsetínská",
    "Vstavačová",
    "Vstupní",
    "Vybíralova",
    "Vycpálkova",
    "Vyderská",
    "Vydrova",
    "Vyhlídkova",
    "Vykoukových",
    "Vykáňská",
    "Vyskočilova",
    "Vysokovská",
    "Vysokoškolská",
    "Vysoká Cesta",
    "Vysočanská",
    "Vysočanská",
    "Vysočanská",
    "Vysočanské Nám.",
    "Vysočanské Náměstí",
    "Vyvýšená",
    "Vyšebrodská",
    "Vyšehradská",
    "Vyšší",
    "Vyžlovská",
    "Vzdušná",
    "Vzdálená",
    "Vzestupná",
    "Vzpoury",
    "Váchalova",
    "Václava Balého",
    "Václava Kovaříka",
    "Václava Rady",
    "Václava Trojana",
    "Václava Špačka",
    "Václavická",
    "Václavkova",
    "Václavská",
    "Václavské Nám.",
    "Václavské Náměstí",
    "Vágnerova",
    "Vánková",
    "Vápencová",
    "Vápenná",
    "Vápeníkova",
    "Vášova",
    "Vážská",
    "Vídeňská",
    "Vídeňská",
    "Vídeňská",
    "Vírská",
    "Víta Nejedlého",
    "Vítkova",
    "Vítkovická",
    "Vítovcova",
    "Vítovcova",
    "Vítězná",
    "Vítězná",
    "Vítězné Nám.",
    "Vítězné Nám.",
    "Vítězné Náměstí",
    "Vítězné Náměstí",
    "Východní",
    "Východní Nám.",
    "Východní Náměstí",
    "Výchozí",
    "Výhledová",
    "Výhledské Nám.",
    "Výhledské Náměstí",
    "Výjezdní",
    "Výjezdová",
    "Výletní",
    "Výletní",
    "Výmarova",
    "Výmolova",
    "Výpadová",
    "Výpadová",
    "Výravská",
    "Výrobní",
    "Výstaviště",
    "Výstavní",
    "Výstupní",
    "Výtoňská",
    "Výtvarnická",
    "Výtvarná",
    "Výzkumníků",
    "Včelařská",
    "Včelničná",
    "Věkova",
    "Věstonická",
    "Větrná",
    "Větrovcova",
    "Větrová",
    "Větrušická",
    "Vězeňská",
    "Vězeňská",
    "Věštínská",
    "Věšínova",
    "Věžická",
    "Vřesovická",
    "Vřesová",
    "Všehrdova",
    "Všejanská",
    "Všelipská",
    "Všerubská",
    "Všestarská",
    "Všetatská",
    "Všeňská",
    "Wagnerova",
    "Waldesova",
    "Washingtonova",
    "Wassermannova",
    "Wattova",
    "Weberova",
    "Weberova",
    "Weilova",
    "Weissova",
    "Wenzigova",
    "Wenzigova",
    "Werichova",
    "Wichterlova",
    "Wiedermannova",
    "Wiesenthalova",
    "Wilsonova",
    "Wilsonova",
    "Winklerova",
    "Wolfova",
    "Wolkerova",
    "Wuchterlova",
    "Xaveriova",
    "Xaverovská",
    "Za Archivem",
    "Za Arielem",
    "Za Avií",
    "Za Bažantnicí",
    "Za Botičem",
    "Za Brankou",
    "Za Brumlovkou",
    "Za Brůdkem",
    "Za Břízami",
    "Za Chalupami",
    "Za Cukrovarem",
    "Za Císařským Mlýnem",
    "Za Dolejšákem",
    "Za Drahou",
    "Za Dvorem",
    "Za Dálnicí",
    "Za Dálnicí",
    "Za Elektrárnou",
    "Za Elektrárnou",
    "Za Farou",
    "Za Fořtem",
    "Za Hanspaulkou",
    "Za Haštalem",
    "Za Hládkovem",
    "Za Horou",
    "Za Horou",
    "Za Hospodou",
    "Za Hrází",
    "Za Humny",
    "Za Hájem",
    "Za Hájem",
    "Za Hájovnou",
    "Za Hřbitovem",
    "Za Invalidovnou",
    "Za Jalovým Dvorem",
    "Za Jednotou",
    "Za Kajetánkou",
    "Za Kapličkou",
    "Za Karlínským Přístavem",
    "Za Kačabkou",
    "Za Klíčovem",
    "Za Knotkem",
    "Za Knotkem",
    "Za Kostelem",
    "Za Kovárnou",
    "Za Kovářským Rybníkem",
    "Za Křížem",
    "Za Křížkem",
    "Za Lesíkem",
    "Za Lidovým Domem",
    "Za Luhem",
    "Za Lužinami",
    "Za Lány",
    "Za Lázeňkou",
    "Za Mlýnem",
    "Za Mosty",
    "Za Mosty",
    "Za Mototechnou",
    "Za Můstkem",
    "Za Nadýmačem",
    "Za Novákovou Zahradou",
    "Za Návsí",
    "Za Obecním Úřadem",
    "Za Oborou",
    "Za Opravnou",
    "Za Opusem",
    "Za Ovčínem",
    "Za Papírnou",
    "Za Parkem",
    "Za Pavilónem",
    "Za Pekařkou",
    "Za Pekárnou",
    "Za Pivovarem",
    "Za Ploty",
    "Za Podjezdem",
    "Za Pohořelcem",
    "Za Pohádkou",
    "Za Potokem",
    "Za Poříčskou Branou",
    "Za Poříčskou Bránou",
    "Za Poštou",
    "Za Poštovskou Zahradou",
    "Za Poštovskou Zahradou",
    "Za Prodejnou",
    "Za Pruhy",
    "Za Průsekem",
    "Za Pískovnou",
    "Za Radostí",
    "Za Rokytkou",
    "Za Rybníkem",
    "Za Rybníčky",
    "Za Rybářstvím",
    "Za Rájem",
    "Za Sadem",
    "Za Sedmidomky",
    "Za Skalkou",
    "Za Skalkou",
    "Za Slatinami",
    "Za Slovankou",
    "Za Sokolovnou",
    "Za Stadionem",
    "Za Statkem",
    "Za Statky",
    "Za Stodolami",
    "Za Stodolou",
    "Za Strahovem",
    "Za Strašnickou Vozovnou",
    "Za Strašnickou Vozovnou",
    "Za Strojírnami",
    "Za Studánkou",
    "Za Střelnicí",
    "Za Sídlištěm",
    "Za Teplárnou",
    "Za Tratí",
    "Za Tratí",
    "Za Třebešínem",
    "Za Vackovem",
    "Za Valem",
    "Za Viaduktem",
    "Za Vinicí",
    "Za Vlasačkou",
    "Za Vodárnou",
    "Za Vokovickou Vozovnou",
    "Za Vokovickou Vozovnou",
    "Za Větrem",
    "Za Zahradami",
    "Za Zahradou",
    "Za Zastávkou",
    "Za Zelenou Liškou",
    "Za Zámečkem",
    "Za Černým Mostem",
    "Za Černým Mostem",
    "Za Černým Mostem",
    "Za Školkou",
    "Za Školou",
    "Za Šmatlíkem",
    "Za Železnicí",
    "Za Ženskými Domovy",
    "Za Žižkovskou Vozovnou",
    "Zacharská",
    "Zachova",
    "Zadní",
    "Zahrada Na Baště",
    "Zahradnická",
    "Zahradní",
    "Zahradníčkova",
    "Zahradníčkova",
    "Zahrádecká",
    "Zahrádecká",
    "Zahrádkářská",
    "Zahrádkářů",
    "Zaječická",
    "Zaječí",
    "Zaječí",
    "Zakouřilova",
    "Zakrytá",
    "Zakšínská",
    "Zalešanská",
    "Zalinská",
    "Zamašská",
    "Zamenhofova",
    "Zapadlá",
    "Zapomenutá",
    "Zapova",
    "Zapských",
    "Zastavěná",
    "Zastrčená",
    "Zavadilova",
    "Zavátá",
    "Zaříčanská",
    "Zbečenská",
    "Zborovská",
    "Zborovská",
    "Zbraslavská",
    "Zbraslavská",
    "Zbraslavské Nám.",
    "Zbraslavské Náměstí",
    "Zbrojnická",
    "Zbudovská",
    "Zbuzanská",
    "Zbuzkova",
    "Zbynická",
    "Zbyslavská",
    "Zbytinská",
    "Zbýšovská",
    "Zdaru",
    "Zdařilá",
    "Zderazská",
    "Zdeňky Nyplové",
    "Zdibská",
    "Zdická",
    "Zdiměřická",
    "Zdislavická",
    "Zdobnická",
    "Zdoňovská",
    "Zdíkovská",
    "Zelenečská",
    "Zelenečská",
    "Zelenkova",
    "Zelenky-Hajského",
    "Zelenohorská",
    "Zelená",
    "Zelená",
    "Zelená Louka",
    "Zelený Pruh",
    "Zelený Pruh",
    "Zelený Pruh",
    "Zelinářská",
    "Zemanka",
    "Zemské Právo",
    "Zemědělská",
    "Zengrova",
    "Zenklova",
    "Zenklova",
    "Zeyerova Alej",
    "Zhořelecká",
    "Zikova",
    "Zimova",
    "Zimákova",
    "Zkrácená",
    "Zlatnice",
    "Zlatnická",
    "Zlatokorunská",
    "Zlatá",
    "Zlatá Ulička U Daliborky",
    "Zlenická",
    "Zlešická",
    "Zlivská",
    "Zličínská",
    "Zličínská",
    "Zlonická",
    "Zlonínská",
    "Zlončická",
    "Zlíchovská",
    "Znojemská",
    "Zoubkova",
    "Zrzavého",
    "Ztracená",
    "Zubatého",
    "Zubrnická",
    "Zvolenská",
    "Zvolská",
    "Zvolská",
    "Zvonařova",
    "Zvonařovská",
    "Zvonařská",
    "Zvoncovitá",
    "Zvonická",
    "Zvonková",
    "Zvoníčkova",
    "Zvánovická",
    "Zvíkovská",
    "Záblatská",
    "Záblatská",
    "Zábranská",
    "Zábrodí",
    "Záběhlická",
    "Zádražanská",
    "Záhornická",
    "Záhorského",
    "Záhořanská",
    "Záhořanského",
    "Záhřebská",
    "Zájezdní",
    "Zákolanská",
    "Zákostelní",
    "Zákupská",
    "Zálesí",
    "Zálesí",
    "Zálesí",
    "Záluské",
    "Zálužanského",
    "Zálužická",
    "Zálužská",
    "Zálužská",
    "Zámecká",
    "Zámecké Schody",
    "Zámezí",
    "Zámišova",
    "Zámělská",
    "Západní",
    "Zápasnická",
    "Zápolská",
    "Zápotoční",
    "Zápská",
    "Zárubova",
    "Zárybnická",
    "Zárybničná",
    "Zárybská",
    "Zásadská",
    "Zásmucká",
    "Zátišská",
    "Zátiší",
    "Zátopkova",
    "Zátoňská",
    "Závadova",
    "Záveská",
    "Závist",
    "Závišova",
    "Závišova",
    "Závodní",
    "Závrchy",
    "Závěrka",
    "Zázvorkova",
    "Zářijová",
    "Zítkova",
    "Zívrova",
    "Zúžená",
    "Údlická",
    "Údolní",
    "Údolní",
    "Údolí Hvězd",
    "Úhlavská",
    "Úhlová",
    "Újezd",
    "Újezd",
    "Újezdská",
    "Úlibická",
    "Únorová",
    "Únětická",
    "Únětická",
    "Úpická",
    "Úprkova",
    "Úpská",
    "Úslavská",
    "Ústavní",
    "Ústecká",
    "Ústecká",
    "Ústřední",
    "Útulná",
    "Útulná",
    "Úvalská",
    "Úvoz",
    "Úvoz",
    "Úvozová",
    "Úzká",
    "Čajkovského",
    "Čakovická",
    "Čakovická",
    "Čankovská",
    "Čapkova",
    "Častavina",
    "Častonická",
    "Čechova",
    "Čechtická",
    "Čechurova",
    "Čedičová",
    "Čejetická",
    "Čejkovická",
    "Čekanková",
    "Čekanková",
    "Čekanovská",
    "Čelakovského Sady",
    "Čelakovského Sady",
    "Čeljabinská",
    "Čelkovická",
    "Čelná",
    "Čelákovická",
    "Čenkovská",
    "Čenovická",
    "Čentická",
    "Čenětická",
    "Čeperská",
    "Čeradická",
    "Čerchovská",
    "Čermákova",
    "Černická",
    "Černilovská",
    "Černičná",
    "Černochova",
    "Černockého",
    "Černohorského",
    "Černokostelecká",
    "Černokostelecká",
    "Černokostelecká",
    "Černomořská",
    "Černotínská",
    "Černovická",
    "Černošická",
    "Černá",
    "Černého",
    "Černínova",
    "Černínská",
    "Čerpadlová",
    "Čertouská",
    "Čertouská",
    "Čertův Vršek",
    "Červencová",
    "Červenkova",
    "Červená",
    "Červená Báň",
    "Červený Mlýn",
    "Červeňanského",
    "Červnová",
    "Čerčanská",
    "Českobratrská",
    "Českobrodská",
    "Českobrodská",
    "Českobrodská",
    "Českobrodská",
    "Českobrodská",
    "Českobrodská",
    "Českobrodská",
    "Českobrodská",
    "Českodubská",
    "Českolipská",
    "Českolipská",
    "Českomalínská",
    "Českomoravská",
    "Českomoravská",
    "Československého Exilu",
    "Československého Exilu",
    "Česká",
    "České Družiny",
    "Českého Červeného Kříže",
    "Čestlická",
    "Čestmírova",
    "Česákova",
    "Čečelická",
    "Čeňkova",
    "Češovská",
    "Čibuzská",
    "Čihákova",
    "Čiklova",
    "Čiklova",
    "Čimelická",
    "Čimická",
    "Čimická",
    "Čimická",
    "Čimická",
    "Čirůvková",
    "Čistovická",
    "Čmelická",
    "Čs. Armády",
    "Čs. Tankistů",
    "Čtyřdílná",
    "Čtyřkolská",
    "Čumpelíkova",
    "Čuprova",
    "Čábelecká",
    "Čápova",
    "Čáslavská",
    "Čílova",
    "Čílova",
    "Čínská",
    "Čínská",
    "Čížovská",
    "Ďáblická",
    "Ďáblická",
    "Ďáblická",
    "Řadová",
    "Řehořova",
    "Řepečská",
    "Řepná",
    "Řeporyjská",
    "Řeporyjská",
    "Řeporyjská",
    "Řeporyjské Náměstí",
    "Řepová",
    "Řepská",
    "Řepíková",
    "Řepínská",
    "Řepčická",
    "Řepčická",
    "Řetězokovářů",
    "Řetězová",
    "Řevnická",
    "Řevnická",
    "Řeznická",
    "Řezáčovo Nám.",
    "Řezáčovo Náměstí",
    "Řečického",
    "Řešetovská",
    "Řešovská",
    "Řipská",
    "Řipská",
    "Řásnovka",
    "Říjnová",
    "Římovská",
    "Římovská",
    "Římská",
    "Říčanova",
    "Říčanská",
    "Říční",
    "Šachovská",
    "Šafaříkova",
    "Šafránecká",
    "Šafránkova",
    "Šafránová",
    "Šafářova",
    "Šakvická",
    "Šaldova",
    "Šalounova",
    "Šalvějová",
    "Šanovská",
    "Šantrochova",
    "Šatrova",
    "Šatrova",
    "Šebelova",
    "Šeberovská",
    "Šebestiánská",
    "Šebkova",
    "Šedivého",
    "Šedova",
    "Šejbalové",
    "Šemberova",
    "Šenovská",
    "Šermířská",
    "Šermířská",
    "Šestajovická",
    "Šestajovická",
    "Šestidomí",
    "Šetelíkova",
    "Ševce Matouše",
    "Ševčenkova",
    "Ševčíkova",
    "Šeříková",
    "Šeříková",
    "Šibřinská",
    "Šikmá",
    "Šimanovská",
    "Šimkova",
    "Šimonova",
    "Šimáčkova",
    "Šimůnkova",
    "Šircova",
    "Široká",
    "Široká",
    "Šiškova",
    "Školní",
    "Školská",
    "Škroupovo Nám.",
    "Škroupovo Náměstí",
    "Škrétova",
    "Škvorecká",
    "Škábova",
    "Šlechtitelská",
    "Šlejnická",
    "Šlikova",
    "Šlitrova",
    "Šluknovská",
    "Šmeralova",
    "Šmilovského",
    "Šmolíkova",
    "Šolínova",
    "Šostakovičovo Nám.",
    "Šostakovičovo Náměstí",
    "Španielova",
    "Španělská",
    "Špačkova",
    "Špeciánova",
    "Šperlova",
    "Špirkova",
    "Špitálská",
    "Šplechnerova",
    "Šporkova",
    "Špotzova",
    "Špálova",
    "Šrobárova",
    "Šrobárova",
    "Šromova",
    "Štamberk",
    "Štefkova",
    "Štefánikova",
    "Štemberova",
    "Šternberkova",
    "Šternova",
    "Šternovská",
    "Štichova",
    "Štiplova",
    "Štičkova",
    "Štiřínská",
    "Štochlova",
    "Štolbova",
    "Štolcova",
    "Štolmířská",
    "Štolmířská",
    "Štorchova",
    "Štorkánova",
    "Štramberská",
    "Štulcova",
    "Štupartská",
    "Štursova",
    "Štverákova",
    "Štychova",
    "Štychova",
    "Štíbrova",
    "Štíhlická",
    "Štítného",
    "Štítová",
    "Štúrova",
    "Štúrova",
    "Štěchovická",
    "Štěpanická",
    "Štěpařská",
    "Štěpničná",
    "Štěpánkova",
    "Štěpánovská",
    "Štěpánská",
    "Štěpánská",
    "Štěrboholská",
    "Štěrková",
    "Štětkova",
    "Štětínská",
    "Šubertova",
    "Šulcova",
    "Šultysova",
    "Šumavská",
    "Šumavského",
    "Šumberova",
    "Šumenská",
    "Šumická",
    "Šumperská",
    "Šustova",
    "Švabinského",
    "Švecova",
    "Švehlova",
    "Švehlova",
    "Švejcarovo Náměstí",
    "Švestková",
    "Švestková",
    "Švestková",
    "Švihovská",
    "Švábky",
    "Švábova",
    "Švédská",
    "Šárecká",
    "Šárovo Kolo",
    "Šárčina",
    "Šátalská",
    "Šífařská",
    "Šímova",
    "Šípková",
    "Šítkova",
    "Šťastného",
    "Šůrova",
    "Žabovřeská",
    "Žacléřská",
    "Žalanského",
    "Žalmanova",
    "Žalovská",
    "Žamberská",
    "Žampašská",
    "Žampiónová",
    "Žandovská",
    "Žatecká",
    "Žatecká",
    "Žateckých",
    "Ždírnická",
    "Žehuňská",
    "Žehušická",
    "Želetavská",
    "Železniční",
    "Železničářů",
    "Železnobrodská",
    "Železná",
    "Želivecká",
    "Želivka",
    "Želivská",
    "Želkovická",
    "Želnavská",
    "Ženíškova",
    "Žeretická",
    "Žermanická",
    "Žernosecká",
    "Žernovská",
    "Žerotínova",
    "Žherská",
    "Žichlínská",
    "Židlického",
    "Žilinská",
    "Žilovská",
    "Žinkovská",
    "Žirovnická",
    "Žitavská",
    "Žitavského",
    "Žitná",
    "Žitná",
    "Žitomírská",
    "Živanická",
    "Živcová",
    "Živcových",
    "Živonínská",
    "Žiželická",
    "Žižkova",
    "Žižkovo Nám.",
    "Žižkovo Náměstí",
    "Žlebská",
    "Žluťásková",
    "Žofie Podlipské",
    "Žufanova",
    "Žukovského",
    "Žukovského",
    "Žulová",
    "Županovická",
    "Žvahovská",
    "Žábova",
    "Žákovská",
    "Žárovická",
    "Žíšovská",
    "Žďárská"
  ];
});

// node_modules/faker/lib/locales/cz/address/street_name.js
var require_street_name2 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street}"
  ];
});

// node_modules/faker/lib/locales/cz/address/street_address.js
var require_street_address2 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_name} #{building_number}"
  ];
});

// node_modules/faker/lib/locales/cz/address/default_country.js
var require_default_country2 = __commonJS((exports, module) => {
  module["exports"] = [
    "Česká republika"
  ];
});

// node_modules/faker/lib/locales/cz/address/index.js
var require_address3 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.country = require_country2();
  address.building_number = require_building_number2();
  address.secondary_address = require_secondary_address2();
  address.postcode = require_postcode2();
  address.state = require_state2();
  address.state_abbr = require_state_abbr();
  address.time_zone = require_time_zone();
  address.city_name = require_city_name2();
  address.city = require_city2();
  address.street = require_street();
  address.street_name = require_street_name2();
  address.street_address = require_street_address2();
  address.default_country = require_default_country2();
});

// node_modules/faker/lib/locales/cz/company/suffix.js
var require_suffix3 = __commonJS((exports, module) => {
  module["exports"] = [
    "s.r.o.",
    "a.s.",
    "v.o.s."
  ];
});

// node_modules/faker/lib/locales/cz/company/adjective.js
var require_adjective = __commonJS((exports, module) => {
  module["exports"] = [
    "Adaptive",
    "Advanced",
    "Ameliorated",
    "Assimilated",
    "Automated",
    "Balanced",
    "Business-focused",
    "Centralized",
    "Cloned",
    "Compatible",
    "Configurable",
    "Cross-group",
    "Cross-platform",
    "Customer-focused",
    "Customizable",
    "Decentralized",
    "De-engineered",
    "Devolved",
    "Digitized",
    "Distributed",
    "Diverse",
    "Down-sized",
    "Enhanced",
    "Enterprise-wide",
    "Ergonomic",
    "Exclusive",
    "Expanded",
    "Extended",
    "Face to face",
    "Focused",
    "Front-line",
    "Fully-configurable",
    "Function-based",
    "Fundamental",
    "Future-proofed",
    "Grass-roots",
    "Horizontal",
    "Implemented",
    "Innovative",
    "Integrated",
    "Intuitive",
    "Inverse",
    "Managed",
    "Mandatory",
    "Monitored",
    "Multi-channelled",
    "Multi-lateral",
    "Multi-layered",
    "Multi-tiered",
    "Networked",
    "Object-based",
    "Open-architected",
    "Open-source",
    "Operative",
    "Optimized",
    "Optional",
    "Organic",
    "Organized",
    "Persevering",
    "Persistent",
    "Phased",
    "Polarised",
    "Pre-emptive",
    "Proactive",
    "Profit-focused",
    "Profound",
    "Programmable",
    "Progressive",
    "Public-key",
    "Quality-focused",
    "Reactive",
    "Realigned",
    "Re-contextualized",
    "Re-engineered",
    "Reduced",
    "Reverse-engineered",
    "Right-sized",
    "Robust",
    "Seamless",
    "Secured",
    "Self-enabling",
    "Sharable",
    "Stand-alone",
    "Streamlined",
    "Switchable",
    "Synchronised",
    "Synergistic",
    "Synergized",
    "Team-oriented",
    "Total",
    "Triple-buffered",
    "Universal",
    "Up-sized",
    "Upgradable",
    "User-centric",
    "User-friendly",
    "Versatile",
    "Virtual",
    "Visionary",
    "Vision-oriented"
  ];
});

// node_modules/faker/lib/locales/cz/company/descriptor.js
var require_descriptor = __commonJS((exports, module) => {
  module["exports"] = [
    "24 hour",
    "24/7",
    "3rd generation",
    "4th generation",
    "5th generation",
    "6th generation",
    "actuating",
    "analyzing",
    "asymmetric",
    "asynchronous",
    "attitude-oriented",
    "background",
    "bandwidth-monitored",
    "bi-directional",
    "bifurcated",
    "bottom-line",
    "clear-thinking",
    "client-driven",
    "client-server",
    "coherent",
    "cohesive",
    "composite",
    "context-sensitive",
    "contextually-based",
    "content-based",
    "dedicated",
    "demand-driven",
    "didactic",
    "directional",
    "discrete",
    "disintermediate",
    "dynamic",
    "eco-centric",
    "empowering",
    "encompassing",
    "even-keeled",
    "executive",
    "explicit",
    "exuding",
    "fault-tolerant",
    "foreground",
    "fresh-thinking",
    "full-range",
    "global",
    "grid-enabled",
    "heuristic",
    "high-level",
    "holistic",
    "homogeneous",
    "human-resource",
    "hybrid",
    "impactful",
    "incremental",
    "intangible",
    "interactive",
    "intermediate",
    "leading edge",
    "local",
    "logistical",
    "maximized",
    "methodical",
    "mission-critical",
    "mobile",
    "modular",
    "motivating",
    "multimedia",
    "multi-state",
    "multi-tasking",
    "national",
    "needs-based",
    "neutral",
    "next generation",
    "non-volatile",
    "object-oriented",
    "optimal",
    "optimizing",
    "radical",
    "real-time",
    "reciprocal",
    "regional",
    "responsive",
    "scalable",
    "secondary",
    "solution-oriented",
    "stable",
    "static",
    "systematic",
    "systemic",
    "system-worthy",
    "tangible",
    "tertiary",
    "transitional",
    "uniform",
    "upward-trending",
    "user-facing",
    "value-added",
    "web-enabled",
    "well-modulated",
    "zero administration",
    "zero defect",
    "zero tolerance"
  ];
});

// node_modules/faker/lib/locales/cz/company/noun.js
var require_noun = __commonJS((exports, module) => {
  module["exports"] = [
    "ability",
    "access",
    "adapter",
    "algorithm",
    "alliance",
    "analyzer",
    "application",
    "approach",
    "architecture",
    "archive",
    "artificial intelligence",
    "array",
    "attitude",
    "benchmark",
    "budgetary management",
    "capability",
    "capacity",
    "challenge",
    "circuit",
    "collaboration",
    "complexity",
    "concept",
    "conglomeration",
    "contingency",
    "core",
    "customer loyalty",
    "database",
    "data-warehouse",
    "definition",
    "emulation",
    "encoding",
    "encryption",
    "extranet",
    "firmware",
    "flexibility",
    "focus group",
    "forecast",
    "frame",
    "framework",
    "function",
    "functionalities",
    "Graphic Interface",
    "groupware",
    "Graphical User Interface",
    "hardware",
    "help-desk",
    "hierarchy",
    "hub",
    "implementation",
    "info-mediaries",
    "infrastructure",
    "initiative",
    "installation",
    "instruction set",
    "interface",
    "internet solution",
    "intranet",
    "knowledge user",
    "knowledge base",
    "local area network",
    "leverage",
    "matrices",
    "matrix",
    "methodology",
    "middleware",
    "migration",
    "model",
    "moderator",
    "monitoring",
    "moratorium",
    "neural-net",
    "open architecture",
    "open system",
    "orchestration",
    "paradigm",
    "parallelism",
    "policy",
    "portal",
    "pricing structure",
    "process improvement",
    "product",
    "productivity",
    "project",
    "projection",
    "protocol",
    "secured line",
    "service-desk",
    "software",
    "solution",
    "standardization",
    "strategy",
    "structure",
    "success",
    "superstructure",
    "support",
    "synergy",
    "system engine",
    "task-force",
    "throughput",
    "time-frame",
    "toolset",
    "utilisation",
    "website",
    "workforce"
  ];
});

// node_modules/faker/lib/locales/cz/company/bs_verb.js
var require_bs_verb = __commonJS((exports, module) => {
  module["exports"] = [
    "implement",
    "utilize",
    "integrate",
    "streamline",
    "optimize",
    "evolve",
    "transform",
    "embrace",
    "enable",
    "orchestrate",
    "leverage",
    "reinvent",
    "aggregate",
    "architect",
    "enhance",
    "incentivize",
    "morph",
    "empower",
    "envisioneer",
    "monetize",
    "harness",
    "facilitate",
    "seize",
    "disintermediate",
    "synergize",
    "strategize",
    "deploy",
    "brand",
    "grow",
    "target",
    "syndicate",
    "synthesize",
    "deliver",
    "mesh",
    "incubate",
    "engage",
    "maximize",
    "benchmark",
    "expedite",
    "reintermediate",
    "whiteboard",
    "visualize",
    "repurpose",
    "innovate",
    "scale",
    "unleash",
    "drive",
    "extend",
    "engineer",
    "revolutionize",
    "generate",
    "exploit",
    "transition",
    "e-enable",
    "iterate",
    "cultivate",
    "matrix",
    "productize",
    "redefine",
    "recontextualize"
  ];
});

// node_modules/faker/lib/locales/cz/company/bs_noun.js
var require_bs_noun = __commonJS((exports, module) => {
  module["exports"] = [
    "clicks-and-mortar",
    "value-added",
    "vertical",
    "proactive",
    "robust",
    "revolutionary",
    "scalable",
    "leading-edge",
    "innovative",
    "intuitive",
    "strategic",
    "e-business",
    "mission-critical",
    "sticky",
    "one-to-one",
    "24/7",
    "end-to-end",
    "global",
    "B2B",
    "B2C",
    "granular",
    "frictionless",
    "virtual",
    "viral",
    "dynamic",
    "24/365",
    "best-of-breed",
    "killer",
    "magnetic",
    "bleeding-edge",
    "web-enabled",
    "interactive",
    "dot-com",
    "sexy",
    "back-end",
    "real-time",
    "efficient",
    "front-end",
    "distributed",
    "seamless",
    "extensible",
    "turn-key",
    "world-class",
    "open-source",
    "cross-platform",
    "cross-media",
    "synergistic",
    "bricks-and-clicks",
    "out-of-the-box",
    "enterprise",
    "integrated",
    "impactful",
    "wireless",
    "transparent",
    "next-generation",
    "cutting-edge",
    "user-centric",
    "visionary",
    "customized",
    "ubiquitous",
    "plug-and-play",
    "collaborative",
    "compelling",
    "holistic",
    "rich",
    "synergies",
    "web-readiness",
    "paradigms",
    "markets",
    "partnerships",
    "infrastructures",
    "platforms",
    "initiatives",
    "channels",
    "eyeballs",
    "communities",
    "ROI",
    "solutions",
    "e-tailers",
    "e-services",
    "action-items",
    "portals",
    "niches",
    "technologies",
    "content",
    "vortals",
    "supply-chains",
    "convergence",
    "relationships",
    "architectures",
    "interfaces",
    "e-markets",
    "e-commerce",
    "systems",
    "bandwidth",
    "infomediaries",
    "models",
    "mindshare",
    "deliverables",
    "users",
    "schemas",
    "networks",
    "applications",
    "metrics",
    "e-business",
    "functionalities",
    "experiences",
    "web services",
    "methodologies"
  ];
});

// node_modules/faker/lib/locales/cz/company/name.js
var require_name4 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name} #{suffix}",
    "#{Name.man_last_name} a #{Name.man_last_name} #{suffix}"
  ];
});

// node_modules/faker/lib/locales/cz/company/index.js
var require_company3 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.suffix = require_suffix3();
  company.adjective = require_adjective();
  company.descriptor = require_descriptor();
  company.noun = require_noun();
  company.bs_verb = require_bs_verb();
  company.bs_noun = require_bs_noun();
  company.name = require_name4();
});

// node_modules/faker/lib/locales/cz/internet/free_email.js
var require_free_email2 = __commonJS((exports, module) => {
  module["exports"] = [
    "gmail.com",
    "seznam.cz",
    "centrum.cz",
    "volny.cz",
    "atlas.cz"
  ];
});

// node_modules/faker/lib/locales/cz/internet/domain_suffix.js
var require_domain_suffix2 = __commonJS((exports, module) => {
  module["exports"] = [
    "cz",
    "com",
    "net",
    "eu",
    "org"
  ];
});

// node_modules/faker/lib/locales/cz/internet/index.js
var require_internet3 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.free_email = require_free_email2();
  internet.domain_suffix = require_domain_suffix2();
});

// node_modules/faker/lib/locales/cz/lorem/words.js
var require_words = __commonJS((exports, module) => {
  module["exports"] = [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ];
});

// node_modules/faker/lib/locales/cz/lorem/supplemental.js
var require_supplemental = __commonJS((exports, module) => {
  module["exports"] = [
    "abbas",
    "abduco",
    "abeo",
    "abscido",
    "absconditus",
    "absens",
    "absorbeo",
    "absque",
    "abstergo",
    "absum",
    "abundans",
    "abutor",
    "accedo",
    "accendo",
    "acceptus",
    "accipio",
    "accommodo",
    "accusator",
    "acer",
    "acerbitas",
    "acervus",
    "acidus",
    "acies",
    "acquiro",
    "acsi",
    "adamo",
    "adaugeo",
    "addo",
    "adduco",
    "ademptio",
    "adeo",
    "adeptio",
    "adfectus",
    "adfero",
    "adficio",
    "adflicto",
    "adhaero",
    "adhuc",
    "adicio",
    "adimpleo",
    "adinventitias",
    "adipiscor",
    "adiuvo",
    "administratio",
    "admiratio",
    "admitto",
    "admoneo",
    "admoveo",
    "adnuo",
    "adopto",
    "adsidue",
    "adstringo",
    "adsuesco",
    "adsum",
    "adulatio",
    "adulescens",
    "adultus",
    "aduro",
    "advenio",
    "adversus",
    "advoco",
    "aedificium",
    "aeger",
    "aegre",
    "aegrotatio",
    "aegrus",
    "aeneus",
    "aequitas",
    "aequus",
    "aer",
    "aestas",
    "aestivus",
    "aestus",
    "aetas",
    "aeternus",
    "ager",
    "aggero",
    "aggredior",
    "agnitio",
    "agnosco",
    "ago",
    "ait",
    "aiunt",
    "alienus",
    "alii",
    "alioqui",
    "aliqua",
    "alius",
    "allatus",
    "alo",
    "alter",
    "altus",
    "alveus",
    "amaritudo",
    "ambitus",
    "ambulo",
    "amicitia",
    "amiculum",
    "amissio",
    "amita",
    "amitto",
    "amo",
    "amor",
    "amoveo",
    "amplexus",
    "amplitudo",
    "amplus",
    "ancilla",
    "angelus",
    "angulus",
    "angustus",
    "animadverto",
    "animi",
    "animus",
    "annus",
    "anser",
    "ante",
    "antea",
    "antepono",
    "antiquus",
    "aperio",
    "aperte",
    "apostolus",
    "apparatus",
    "appello",
    "appono",
    "appositus",
    "approbo",
    "apto",
    "aptus",
    "apud",
    "aqua",
    "ara",
    "aranea",
    "arbitro",
    "arbor",
    "arbustum",
    "arca",
    "arceo",
    "arcesso",
    "arcus",
    "argentum",
    "argumentum",
    "arguo",
    "arma",
    "armarium",
    "armo",
    "aro",
    "ars",
    "articulus",
    "artificiose",
    "arto",
    "arx",
    "ascisco",
    "ascit",
    "asper",
    "aspicio",
    "asporto",
    "assentator",
    "astrum",
    "atavus",
    "ater",
    "atqui",
    "atrocitas",
    "atrox",
    "attero",
    "attollo",
    "attonbitus",
    "auctor",
    "auctus",
    "audacia",
    "audax",
    "audentia",
    "audeo",
    "audio",
    "auditor",
    "aufero",
    "aureus",
    "auris",
    "aurum",
    "aut",
    "autem",
    "autus",
    "auxilium",
    "avaritia",
    "avarus",
    "aveho",
    "averto",
    "avoco",
    "baiulus",
    "balbus",
    "barba",
    "bardus",
    "basium",
    "beatus",
    "bellicus",
    "bellum",
    "bene",
    "beneficium",
    "benevolentia",
    "benigne",
    "bestia",
    "bibo",
    "bis",
    "blandior",
    "bonus",
    "bos",
    "brevis",
    "cado",
    "caecus",
    "caelestis",
    "caelum",
    "calamitas",
    "calcar",
    "calco",
    "calculus",
    "callide",
    "campana",
    "candidus",
    "canis",
    "canonicus",
    "canto",
    "capillus",
    "capio",
    "capitulus",
    "capto",
    "caput",
    "carbo",
    "carcer",
    "careo",
    "caries",
    "cariosus",
    "caritas",
    "carmen",
    "carpo",
    "carus",
    "casso",
    "caste",
    "casus",
    "catena",
    "caterva",
    "cattus",
    "cauda",
    "causa",
    "caute",
    "caveo",
    "cavus",
    "cedo",
    "celebrer",
    "celer",
    "celo",
    "cena",
    "cenaculum",
    "ceno",
    "censura",
    "centum",
    "cerno",
    "cernuus",
    "certe",
    "certo",
    "certus",
    "cervus",
    "cetera",
    "charisma",
    "chirographum",
    "cibo",
    "cibus",
    "cicuta",
    "cilicium",
    "cimentarius",
    "ciminatio",
    "cinis",
    "circumvenio",
    "cito",
    "civis",
    "civitas",
    "clam",
    "clamo",
    "claro",
    "clarus",
    "claudeo",
    "claustrum",
    "clementia",
    "clibanus",
    "coadunatio",
    "coaegresco",
    "coepi",
    "coerceo",
    "cogito",
    "cognatus",
    "cognomen",
    "cogo",
    "cohaero",
    "cohibeo",
    "cohors",
    "colligo",
    "colloco",
    "collum",
    "colo",
    "color",
    "coma",
    "combibo",
    "comburo",
    "comedo",
    "comes",
    "cometes",
    "comis",
    "comitatus",
    "commemoro",
    "comminor",
    "commodo",
    "communis",
    "comparo",
    "compello",
    "complectus",
    "compono",
    "comprehendo",
    "comptus",
    "conatus",
    "concedo",
    "concido",
    "conculco",
    "condico",
    "conduco",
    "confero",
    "confido",
    "conforto",
    "confugo",
    "congregatio",
    "conicio",
    "coniecto",
    "conitor",
    "coniuratio",
    "conor",
    "conqueror",
    "conscendo",
    "conservo",
    "considero",
    "conspergo",
    "constans",
    "consuasor",
    "contabesco",
    "contego",
    "contigo",
    "contra",
    "conturbo",
    "conventus",
    "convoco",
    "copia",
    "copiose",
    "cornu",
    "corona",
    "corpus",
    "correptius",
    "corrigo",
    "corroboro",
    "corrumpo",
    "coruscus",
    "cotidie",
    "crapula",
    "cras",
    "crastinus",
    "creator",
    "creber",
    "crebro",
    "credo",
    "creo",
    "creptio",
    "crepusculum",
    "cresco",
    "creta",
    "cribro",
    "crinis",
    "cruciamentum",
    "crudelis",
    "cruentus",
    "crur",
    "crustulum",
    "crux",
    "cubicularis",
    "cubitum",
    "cubo",
    "cui",
    "cuius",
    "culpa",
    "culpo",
    "cultellus",
    "cultura",
    "cum",
    "cunabula",
    "cunae",
    "cunctatio",
    "cupiditas",
    "cupio",
    "cuppedia",
    "cupressus",
    "cur",
    "cura",
    "curatio",
    "curia",
    "curiositas",
    "curis",
    "curo",
    "curriculum",
    "currus",
    "cursim",
    "curso",
    "cursus",
    "curto",
    "curtus",
    "curvo",
    "curvus",
    "custodia",
    "damnatio",
    "damno",
    "dapifer",
    "debeo",
    "debilito",
    "decens",
    "decerno",
    "decet",
    "decimus",
    "decipio",
    "decor",
    "decretum",
    "decumbo",
    "dedecor",
    "dedico",
    "deduco",
    "defaeco",
    "defendo",
    "defero",
    "defessus",
    "defetiscor",
    "deficio",
    "defigo",
    "defleo",
    "defluo",
    "defungo",
    "degenero",
    "degero",
    "degusto",
    "deinde",
    "delectatio",
    "delego",
    "deleo",
    "delibero",
    "delicate",
    "delinquo",
    "deludo",
    "demens",
    "demergo",
    "demitto",
    "demo",
    "demonstro",
    "demoror",
    "demulceo",
    "demum",
    "denego",
    "denique",
    "dens",
    "denuncio",
    "denuo",
    "deorsum",
    "depereo",
    "depono",
    "depopulo",
    "deporto",
    "depraedor",
    "deprecator",
    "deprimo",
    "depromo",
    "depulso",
    "deputo",
    "derelinquo",
    "derideo",
    "deripio",
    "desidero",
    "desino",
    "desipio",
    "desolo",
    "desparatus",
    "despecto",
    "despirmatio",
    "infit",
    "inflammatio",
    "paens",
    "patior",
    "patria",
    "patrocinor",
    "patruus",
    "pauci",
    "paulatim",
    "pauper",
    "pax",
    "peccatus",
    "pecco",
    "pecto",
    "pectus",
    "pecunia",
    "pecus",
    "peior",
    "pel",
    "ocer",
    "socius",
    "sodalitas",
    "sol",
    "soleo",
    "solio",
    "solitudo",
    "solium",
    "sollers",
    "sollicito",
    "solum",
    "solus",
    "solutio",
    "solvo",
    "somniculosus",
    "somnus",
    "sonitus",
    "sono",
    "sophismata",
    "sopor",
    "sordeo",
    "sortitus",
    "spargo",
    "speciosus",
    "spectaculum",
    "speculum",
    "sperno",
    "spero",
    "spes",
    "spiculum",
    "spiritus",
    "spoliatio",
    "sponte",
    "stabilis",
    "statim",
    "statua",
    "stella",
    "stillicidium",
    "stipes",
    "stips",
    "sto",
    "strenuus",
    "strues",
    "studio",
    "stultus",
    "suadeo",
    "suasoria",
    "sub",
    "subito",
    "subiungo",
    "sublime",
    "subnecto",
    "subseco",
    "substantia",
    "subvenio",
    "succedo",
    "succurro",
    "sufficio",
    "suffoco",
    "suffragium",
    "suggero",
    "sui",
    "sulum",
    "sum",
    "summa",
    "summisse",
    "summopere",
    "sumo",
    "sumptus",
    "supellex",
    "super",
    "suppellex",
    "supplanto",
    "suppono",
    "supra",
    "surculus",
    "surgo",
    "sursum",
    "suscipio",
    "suspendo",
    "sustineo",
    "suus",
    "synagoga",
    "tabella",
    "tabernus",
    "tabesco",
    "tabgo",
    "tabula",
    "taceo",
    "tactus",
    "taedium",
    "talio",
    "talis",
    "talus",
    "tam",
    "tamdiu",
    "tamen",
    "tametsi",
    "tamisium",
    "tamquam",
    "tandem",
    "tantillus",
    "tantum",
    "tardus",
    "tego",
    "temeritas",
    "temperantia",
    "templum",
    "temptatio",
    "tempus",
    "tenax",
    "tendo",
    "teneo",
    "tener",
    "tenuis",
    "tenus",
    "tepesco",
    "tepidus",
    "ter",
    "terebro",
    "teres",
    "terga",
    "tergeo",
    "tergiversatio",
    "tergo",
    "tergum",
    "termes",
    "terminatio",
    "tero",
    "terra",
    "terreo",
    "territo",
    "terror",
    "tersus",
    "tertius",
    "testimonium",
    "texo",
    "textilis",
    "textor",
    "textus",
    "thalassinus",
    "theatrum",
    "theca",
    "thema",
    "theologus",
    "thermae",
    "thesaurus",
    "thesis",
    "thorax",
    "thymbra",
    "thymum",
    "tibi",
    "timidus",
    "timor",
    "titulus",
    "tolero",
    "tollo",
    "tondeo",
    "tonsor",
    "torqueo",
    "torrens",
    "tot",
    "totidem",
    "toties",
    "totus",
    "tracto",
    "trado",
    "traho",
    "trans",
    "tredecim",
    "tremo",
    "trepide",
    "tres",
    "tribuo",
    "tricesimus",
    "triduana",
    "triginta",
    "tripudio",
    "tristis",
    "triumphus",
    "trucido",
    "truculenter",
    "tubineus",
    "tui",
    "tum",
    "tumultus",
    "tunc",
    "turba",
    "turbo",
    "turpe",
    "turpis",
    "tutamen",
    "tutis",
    "tyrannus",
    "uberrime",
    "ubi",
    "ulciscor",
    "ullus",
    "ulterius",
    "ultio",
    "ultra",
    "umbra",
    "umerus",
    "umquam",
    "una",
    "unde",
    "undique",
    "universe",
    "unus",
    "urbanus",
    "urbs",
    "uredo",
    "usitas",
    "usque",
    "ustilo",
    "ustulo",
    "usus",
    "uter",
    "uterque",
    "utilis",
    "utique",
    "utor",
    "utpote",
    "utrimque",
    "utroque",
    "utrum",
    "uxor",
    "vaco",
    "vacuus",
    "vado",
    "vae",
    "valde",
    "valens",
    "valeo",
    "valetudo",
    "validus",
    "vallum",
    "vapulus",
    "varietas",
    "varius",
    "vehemens",
    "vel",
    "velociter",
    "velum",
    "velut",
    "venia",
    "venio",
    "ventito",
    "ventosus",
    "ventus",
    "venustas",
    "ver",
    "verbera",
    "verbum",
    "vere",
    "verecundia",
    "vereor",
    "vergo",
    "veritas",
    "vero",
    "versus",
    "verto",
    "verumtamen",
    "verus",
    "vesco",
    "vesica",
    "vesper",
    "vespillo",
    "vester",
    "vestigium",
    "vestrum",
    "vetus",
    "via",
    "vicinus",
    "vicissitudo",
    "victoria",
    "victus",
    "videlicet",
    "video",
    "viduata",
    "viduo",
    "vigilo",
    "vigor",
    "vilicus",
    "vilis",
    "vilitas",
    "villa",
    "vinco",
    "vinculum",
    "vindico",
    "vinitor",
    "vinum",
    "vir",
    "virga",
    "virgo",
    "viridis",
    "viriliter",
    "virtus",
    "vis",
    "viscus",
    "vita",
    "vitiosus",
    "vitium",
    "vito",
    "vivo",
    "vix",
    "vobis",
    "vociferor",
    "voco",
    "volaticus",
    "volo",
    "volubilis",
    "voluntarius",
    "volup",
    "volutabrum",
    "volva",
    "vomer",
    "vomica",
    "vomito",
    "vorago",
    "vorax",
    "voro",
    "vos",
    "votum",
    "voveo",
    "vox",
    "vulariter",
    "vulgaris",
    "vulgivagus",
    "vulgo",
    "vulgus",
    "vulnero",
    "vulnus",
    "vulpes",
    "vulticulus",
    "vultuosus",
    "xiphias"
  ];
});

// node_modules/faker/lib/locales/cz/lorem/index.js
var require_lorem = __commonJS((exports, module) => {
  var lorem = {};
  module["exports"] = lorem;
  lorem.words = require_words();
  lorem.supplemental = require_supplemental();
});

// node_modules/faker/lib/locales/cz/name/male_first_name.js
var require_male_first_name2 = __commonJS((exports, module) => {
  module["exports"] = [
    "Abadon",
    "Abdon",
    "Ábel",
    "Abelard",
    "Abraham",
    "Abrahám",
    "Absolon",
    "Absolón",
    "Adalbert",
    "Adam",
    "Adin",
    "Adolf",
    "Adrian",
    "Adrián",
    "Agaton",
    "Achil",
    "Achiles",
    "Alan",
    "Alban",
    "Albert",
    "Albín",
    "Albrecht",
    "Aldo",
    "Alen",
    "Aleš",
    "Alexandr",
    "Alexej",
    "Alfons",
    "Alfréd",
    "Alois",
    "Alojz",
    "Alva",
    "Alvar",
    "Alvin",
    "Amadeus",
    "Amand",
    "Amát",
    "Ambrož",
    "Amos",
    "Ámos",
    "Anastáz",
    "Anatol",
    "Anděl",
    "Andělín",
    "Andrej",
    "Anselm",
    "Antal",
    "Antonín",
    "Aram",
    "Ariel",
    "Aristid",
    "Arkád",
    "Armand",
    "Armin",
    "Arne",
    "Arnold",
    "Arnošt",
    "Áron",
    "Árón",
    "Arpád",
    "Arsen",
    "Artur",
    "Artuš",
    "Arzen",
    "Atanas",
    "Atanáš",
    "Atila",
    "August",
    "Augustin",
    "Augustýn",
    "Aurel",
    "Aurelián",
    "Axel",
    "Baltazar",
    "Barnabáš",
    "Bartoloměj",
    "Basil",
    "Bazil",
    "Beatus",
    "Bedřich",
    "Benedikt",
    "Benjamin",
    "Benjamín",
    "Bernard",
    "Bertold",
    "Bertram",
    "Bivoj",
    "Blahomil",
    "Blahomír",
    "Blahoslav",
    "Blažej",
    "Bohdan",
    "Bohuchval",
    "Bohumil",
    "Bohumír",
    "Bohun",
    "Bohuslav",
    "Bohuš",
    "Bojan",
    "Bolemír",
    "Boleslav",
    "Bonifác",
    "Borek",
    "Boris",
    "Borislav",
    "Bořek",
    "Bořislav",
    "Bořivoj",
    "Božetěch",
    "Božidar",
    "Božislav",
    "Branimír",
    "Branislav",
    "Bratislav",
    "Bret",
    "Brian",
    "Brit",
    "Bronislav",
    "Bruno",
    "Břetislav",
    "Budimír",
    "Budislav",
    "Budivoj",
    "Cecil",
    "Cedrik",
    "Celestin",
    "Celestýn",
    "César",
    "Cézar",
    "Ctibor",
    "Ctirad",
    "Ctislav",
    "Cyprián",
    "Cyril",
    "Čeněk",
    "Čestmír",
    "Čistoslav",
    "Dag",
    "Dalibor",
    "Dalimil",
    "Dalimír",
    "Damián",
    "Dan",
    "Daniel",
    "Darek",
    "Darius",
    "David",
    "Denis",
    "Děpold",
    "Dětmar",
    "Dětřich",
    "Dezider",
    "Dimitrij",
    "Dino",
    "Dionýz",
    "Dionýzos",
    "Diviš",
    "Dluhoš",
    "Dobromil",
    "Dobromír",
    "Dobroslav",
    "Dominik",
    "Donald",
    "Donát",
    "Dorian",
    "Dorián",
    "Drahomil",
    "Drahomír",
    "Drahoň",
    "Drahoslav",
    "Drahoš",
    "Drahotín",
    "Drahutin",
    "Dušan",
    "Edgar",
    "Edmond",
    "Edmund",
    "Eduard",
    "Edvard",
    "Edvin",
    "Edvín",
    "Egmont",
    "Egon",
    "Eliáš",
    "Elizej",
    "Elizeus",
    "Elmar",
    "Elvis",
    "Emanuel",
    "Emanuel",
    "Emerich",
    "Emil",
    "Emilián",
    "Engelbert",
    "Erazim",
    "Erazmus",
    "Erhard",
    "Erich",
    "Erik",
    "Ernest",
    "Ernst",
    "Ervín",
    "Eugen",
    "Eusebius",
    "Evald",
    "Evan",
    "Evarist",
    "Evžen",
    "Ezechiel",
    "Ezra",
    "Fabián",
    "Faust",
    "Faustin",
    "Faustýn",
    "Fedor",
    "Felicián",
    "Felix",
    "Ferdinand",
    "Fidel",
    "Fidelius",
    "Filemon",
    "Filibert",
    "Filip",
    "Filomen",
    "Flavián",
    "Flavius",
    "Florentin",
    "Florentýn",
    "Florián",
    "Fortunát",
    "Fráňa",
    "Franc",
    "František",
    "Fridolín",
    "Gabin",
    "Gabriel",
    "Gál",
    "Garik",
    "Gaston",
    "Gedeon",
    "Gejza",
    "Genadij",
    "Gerald",
    "Gerard",
    "Gerazim",
    "Gerhard",
    "Géza",
    "Gilbert",
    "Gleb",
    "Glen",
    "Gorazd",
    "Gordon",
    "Gothard",
    "Gracián",
    "Grant",
    "Gunter",
    "Gűnter",
    "Gustav",
    "Hanuš",
    "Harald",
    "Harold",
    "Haštal",
    "Havel",
    "Helmut",
    "Herbert",
    "Herman",
    "Heřman",
    "Hilar",
    "Hilarius",
    "Hjalmar",
    "Homér",
    "Honor",
    "Honorius",
    "Horác",
    "Horst",
    "Horymír",
    "Hostimil",
    "Hostimír",
    "Hostislav",
    "Hostivít",
    "Hovard",
    "Hubert",
    "Hugo",
    "Hvězdoslav",
    "Hyacint",
    "Hynek",
    "Hypolit",
    "Chrabroš",
    "Chraniboj",
    "Chranibor",
    "Chranislav",
    "Chrudoš",
    "Chval",
    "Ignác",
    "Ignát",
    "Igor",
    "Ilja",
    "Inocenc",
    "Irenej",
    "Ireneus",
    "Irvin",
    "Isidor",
    "Ivan",
    "Ivar",
    "Ivo",
    "Ivor",
    "Izaiáš",
    "Izák",
    "Izidor",
    "Izmael",
    "Jacek",
    "Jáchym",
    "Jakub",
    "Jan",
    "Jarmil",
    "Jarolím",
    "Jaromil",
    "Jaromír",
    "Jaroslav",
    "Jason",
    "Jasoň",
    "Jeremiáš",
    "Jeroným",
    "Jiljí",
    "Jimram",
    "Jindřich",
    "Jiří",
    "Job",
    "Joel",
    "Jonáš",
    "Jonatan",
    "Jonathan",
    "Jordan",
    "Josef",
    "Jošt",
    "Jozef",
    "Jozue",
    "Juda",
    "Julián",
    "Julius",
    "Justin",
    "Justýn",
    "Kajetán",
    "Kamil",
    "Karel",
    "Kasián",
    "Kastor",
    "Kašpar",
    "Kazimír",
    "Kilián",
    "Kim",
    "Klaudián",
    "Klaudius",
    "Klement",
    "Kliment",
    "Knut",
    "Koloman",
    "Kolombín",
    "Kolumbán",
    "Kolumbín",
    "Konrád",
    "Konstantin",
    "Konstantýn",
    "Kornel",
    "Kornelius",
    "Kosma",
    "Kosmas",
    "Krasomil",
    "Krasoslav",
    "Kristián",
    "Kryšpín",
    "Kryštof",
    "Křesomysl",
    "Křišťan",
    "Kurt",
    "Květoň",
    "Květoslav",
    "Květoš",
    "Kvido",
    "Ladislav",
    "Lambert",
    "Lars",
    "Laurenc",
    "Lazar",
    "Leander",
    "Leandr",
    "Leo",
    "Leodegar",
    "Leon",
    "Leonard",
    "Leonid",
    "Leontýn",
    "Leopold",
    "Leoš",
    "Lešek",
    "Lev",
    "Libor",
    "Liboslav",
    "Lionel",
    "Livius",
    "Lorenc",
    "Lotar",
    "Lothar",
    "Lubomír",
    "Lubor",
    "Luboslav",
    "Luboš",
    "Lucián",
    "Lucius",
    "Luděk",
    "Ludivoj",
    "Ludomír",
    "Ludoslav",
    "Ludvík",
    "Lukáš",
    "Lukrecius",
    "Lumír",
    "Lutibor",
    "Lutobor",
    "Magnus",
    "Makar",
    "Manfred",
    "Manfréd",
    "Mansvet",
    "Manuel",
    "Marcel",
    "Marek",
    "Marian",
    "Marián",
    "Marin",
    "Mario",
    "Marius",
    "Martin",
    "Matěj",
    "Matouš",
    "Matyáš",
    "Max",
    "Maxim",
    "Maximilián",
    "Maxmilián",
    "Mečislav",
    "Medard",
    "Melichar",
    "Merlin",
    "Mervin",
    "Metod",
    "Metoděj",
    "Michael",
    "Michal",
    "Mikoláš",
    "Mikuláš",
    "Milan",
    "Milíč",
    "Milík",
    "Milivoj",
    "Miloň",
    "Milorad",
    "Miloslav",
    "Miloš",
    "Milota",
    "Milouš",
    "Milovan",
    "Milovín",
    "Milutín",
    "Mirek",
    "Mirko",
    "Miromil",
    "Miron",
    "Miroslav",
    "Mirtil",
    "Mlad",
    "Mladen",
    "Mnata",
    "Mnislav",
    "Modest",
    "Mojmír",
    "Mojžíš",
    "Morgan",
    "Moric",
    "Moris",
    "Mořic",
    "Mstislav",
    "Myron",
    "Myrtil",
    "Napoleon",
    "Narcis",
    "Natan",
    "Natanael",
    "Nathan",
    "Nathanael",
    "Něhoslav",
    "Neklan",
    "Nepomuk",
    "Nezamysl",
    "Nikita",
    "Nikodém",
    "Nikola",
    "Nikolas",
    "Norbert",
    "Norman",
    "Odolen",
    "Odon",
    "Oktavián",
    "Oktavius",
    "Olaf",
    "Olbram",
    "Oldřich",
    "Oleg",
    "Oliver",
    "Omar",
    "Ondřej",
    "Orest",
    "Oskar",
    "Osvald",
    "Ota",
    "Otakar",
    "Otmar",
    "Oto",
    "Otokar",
    "Otomar",
    "Ovidius",
    "Palmiro",
    "Pankrác",
    "Pantaleon",
    "Paris",
    "Parsival",
    "Paskal",
    "Patrik",
    "Pavel",
    "Pavlín",
    "Pelhřim",
    "Perikles",
    "Petr",
    "Petronius",
    "Pius",
    "Platon",
    "Platón",
    "Polykarp",
    "Pravdomil",
    "Pravomil",
    "Prokop",
    "Prosper",
    "Přemysl",
    "Přibyslav",
    "Radan",
    "Radegast",
    "Radek",
    "Radhost",
    "Radim",
    "Radimír",
    "Radislav",
    "Radivoj",
    "Radko",
    "Radmil",
    "Radomil",
    "Radomír",
    "Radoslav",
    "Radoš",
    "Radovan",
    "Radúz",
    "Radvan",
    "Rafael",
    "Raimund",
    "Rainald",
    "Rainer",
    "Rainhard",
    "Rainold",
    "Rajko",
    "Ralf",
    "Ramon",
    "Randolf",
    "Ranek",
    "Ranko",
    "Rastislav",
    "Ratibor",
    "Ratmír",
    "Redmond",
    "Reginald",
    "Remig",
    "Remus",
    "Renát",
    "René",
    "Richard",
    "Robert",
    "Robin",
    "Robinson",
    "Rodan",
    "Roderik",
    "Rodrigo",
    "Roger",
    "Roch",
    "Roland",
    "Rolf",
    "Roman",
    "Romeo",
    "Romuald",
    "Romul",
    "Romulus",
    "Ronald",
    "Rostislav",
    "Ruben",
    "Rudolf",
    "Rufus",
    "Rupert",
    "Ruprecht",
    "Ruslan",
    "Řehoř",
    "Sába",
    "Sámo",
    "Samson",
    "Samuel",
    "Saturnin",
    "Saul",
    "Sáva",
    "Sebastian",
    "Sebastián",
    "Sebestian",
    "Sedrik",
    "Serafín",
    "Serenus",
    "Sergej",
    "Servác",
    "Severín",
    "Sidon",
    "Sigfríd",
    "Silvan",
    "Silván",
    "Silvestr",
    "Silvius",
    "Simeon",
    "Simon",
    "Sinkler",
    "Sixt",
    "Sixtus",
    "Slávek",
    "Slaviboj",
    "Slavibor",
    "Slavoboj",
    "Slavoj",
    "Slavomil",
    "Slavomír",
    "Smil",
    "Soběslav",
    "Sokrat",
    "Soter",
    "Spytihněv",
    "Stanimír",
    "Stanislav",
    "Stojan",
    "Stojmír",
    "Svatoboj",
    "Svatobor",
    "Svatomír",
    "Svatopluk",
    "Svatoslav",
    "Sven",
    "Svetozar",
    "Šalamoun",
    "Šalomoun",
    "Šavel",
    "Šebastián",
    "Šimon",
    "Šťasta",
    "Štefan",
    "Štěpán",
    "Tadeáš",
    "Tankred",
    "Taras",
    "Teobald",
    "Teodor",
    "Teodorik",
    "Teodoz",
    "Teofan",
    "Teofil",
    "Terenc",
    "Terencius",
    "Theobald",
    "Theodor",
    "Theodorik",
    "Theofan",
    "Theofil",
    "Tiber",
    "Tiberius",
    "Tibor",
    "Tiburcius",
    "Tichomil",
    "Tichomír",
    "Tichon",
    "Timon",
    "Timotej",
    "Timoteus",
    "Timur",
    "Titus",
    "Tobiáš",
    "Tomáš",
    "Tomislav",
    "Tor",
    "Torkvát",
    "Torsten",
    "Tristan",
    "Udo",
    "Ulrich",
    "Upton",
    "Urban",
    "Uve",
    "Václav",
    "Vadim",
    "Valdemar",
    "Valentin",
    "Valentýn",
    "Valerián",
    "Valter",
    "Valtr",
    "Vasil",
    "Vavřinec",
    "Veleslav",
    "Velimír",
    "Velislav",
    "Věnceslav",
    "Vendelín",
    "Věnek",
    "Verner",
    "Věroslav",
    "Vidor",
    "Viktor",
    "Viktorin",
    "Viktorín",
    "Vilém",
    "Vilibald",
    "Vilmar",
    "Vincenc",
    "Virgil",
    "Virgin",
    "Vít",
    "Vítězslav",
    "Vitold",
    "Vítoslav",
    "Vivian",
    "Vladan",
    "Vladimír",
    "Vladislav",
    "Vladivoj",
    "Vlastimil",
    "Vlastimír",
    "Vlastislav",
    "Vlk",
    "Vojen",
    "Vojmil",
    "Vojmír",
    "Vojslav",
    "Vojtěch",
    "Vok",
    "Volfgang",
    "Vratislav",
    "Vsevolod",
    "Všeboj",
    "Všebor",
    "Všerad",
    "Všeslav",
    "Xaver",
    "Xaverius",
    "Záboj",
    "Zachar",
    "Zachariáš",
    "Záviš",
    "Zbislav",
    "Zbyhněv",
    "Zbyněk",
    "Zbyslav",
    "Zbyšek",
    "Zdeněk",
    "Zderad",
    "Zdeslav",
    "Zdík",
    "Zdirad",
    "Zdislav",
    "Zeno",
    "Zenon",
    "Zikmund",
    "Zlatan",
    "Zlatko",
    "Zlatomír",
    "Zoltán",
    "Zoran",
    "Zoroslav",
    "Zosim",
    "Zvonimír",
    "Žarko",
    "Ždan",
    "Želibor",
    "Želimír",
    "Želislav",
    "Želmír",
    "Žitomír",
    "Žitoslav",
    "Živan"
  ];
});

// node_modules/faker/lib/locales/cz/name/female_first_name.js
var require_female_first_name2 = __commonJS((exports, module) => {
  module["exports"] = [
    "Abigail",
    "Ada",
    "Adalberta",
    "Adéla",
    "Adelaida",
    "Adina",
    "Adolfa",
    "Adolfína",
    "Adriana",
    "Adriána",
    "Adriena",
    "Afra",
    "Agáta",
    "Aglaja",
    "Aida",
    "Alana",
    "Albena",
    "Alberta",
    "Albertina",
    "Albertýna",
    "Albína",
    "Alena",
    "Aleška",
    "Alexandra",
    "Alfréda",
    "Alice",
    "Alida",
    "Alina",
    "Alma",
    "Aloisie",
    "Alojzije",
    "Alžběta",
    "Amálie",
    "Amanda",
    "Amáta",
    "Amélie",
    "Anabela",
    "Anastázie",
    "Anatázie",
    "Anatolie",
    "Anatólie",
    "Anděla",
    "Andělína",
    "Andrea",
    "Aneta",
    "Anežka",
    "Angela",
    "Angelika",
    "Anita",
    "Anna",
    "Anselma",
    "Antonie",
    "Apolena",
    "Arabela",
    "Aranka",
    "Areta",
    "Ariadna",
    "Ariana",
    "Ariela",
    "Arleta",
    "Armida",
    "Arna",
    "Arnolda",
    "Arnoštka",
    "Astrid",
    "Astrida",
    "Atanázie",
    "Augusta",
    "Augustina",
    "Augustýna",
    "Aura",
    "Aurélie",
    "Aurora",
    "Babeta",
    "Barbara",
    "Barbora",
    "Beáta",
    "Beatrice",
    "Bedřiška",
    "Bela",
    "Běla",
    "Belinda",
    "Benedikta",
    "Berenika",
    "Berit",
    "Bernarda",
    "Berta",
    "Bertolda",
    "Bianka",
    "Bibiana",
    "Birgit",
    "Birgita",
    "Blahomila",
    "Blahomíra",
    "Blahoslava",
    "Blanka",
    "Blažena",
    "Bohdana",
    "Bohumila",
    "Bohumíra",
    "Bohuna",
    "Bohuslava",
    "Bohuše",
    "Bojana",
    "Bojislava",
    "Boleslava",
    "Borislava",
    "Bořislava",
    "Božena",
    "Božetěcha",
    "Božidara",
    "Branimíra",
    "Branislava",
    "Bratislava",
    "Brenda",
    "Brigita",
    "Brita",
    "Bronislava",
    "Bruna",
    "Brunhilda",
    "Břetislava",
    "Cecilie",
    "Cecílie",
    "Celestina",
    "Celestýna",
    "Celie",
    "Celina",
    "Ctibora",
    "Ctirada",
    "Ctislava",
    "Cyntie",
    "Cyrila",
    "Čeňka",
    "Čestmíra",
    "Čistoslava",
    "Dagmar",
    "Dagmara",
    "Dalibora",
    "Dalida",
    "Dalie",
    "Dalila",
    "Dalimila",
    "Dalimíra",
    "Damaris",
    "Damiana",
    "Damiána",
    "Dana",
    "Danica",
    "Daniela",
    "Danuše",
    "Danuta",
    "Daria",
    "Darie",
    "Darina",
    "Darja",
    "Davida",
    "Debora",
    "Delie",
    "Denisa",
    "Diana",
    "Dina",
    "Dita",
    "Diviška",
    "Dobrava",
    "Dobromila",
    "Dobromíra",
    "Dobroslava",
    "Dominika",
    "Donalda",
    "Donáta",
    "Dora",
    "Doris",
    "Dorota",
    "Doubrava",
    "Doubravka",
    "Drahomila",
    "Drahomíra",
    "Drahoslava",
    "Drahotína",
    "Drahuše",
    "Dulcinea",
    "Dušana",
    "Edita",
    "Eduarda",
    "Edvarda",
    "Egona",
    "Ela",
    "Elektra",
    "Elena",
    "Eleonora",
    "Elfrída",
    "Eliška",
    "Elsa",
    "Elvíra",
    "Elza",
    "Ema",
    "Emanuela",
    "Emilie",
    "Emílie",
    "Erika",
    "Erna",
    "Ervína",
    "Estela",
    "Ester",
    "Estera",
    "Etela",
    "Eufrozina",
    "Eufrozína",
    "Eugenie",
    "Eulálie",
    "Eunika",
    "Eusebie",
    "Eva",
    "Evelina",
    "Evelína",
    "Evženie",
    "Fabiána",
    "Fabie",
    "Fatima",
    "Faustina",
    "Faustýna",
    "Féba",
    "Fedora",
    "Felicie",
    "Felície",
    "Felicita",
    "Ferdinanda",
    "Fidelie",
    "Filipa",
    "Filoména",
    "Flavie",
    "Flora",
    "Flóra",
    "Florentina",
    "Florentýna",
    "Františka",
    "Frída",
    "Gabriela",
    "Gaja",
    "Gajana",
    "Galina",
    "Garika",
    "Gema",
    "Geralda",
    "Geraldina",
    "Gerarda",
    "Gerardina",
    "Gerda",
    "Gerharda",
    "Gertruda",
    "Gilberta",
    "Gina",
    "Gisela",
    "Gita",
    "Gizela",
    "Glorie",
    "Gordana",
    "Graciána",
    "Gracie",
    "Grácie",
    "Gražina",
    "Gréta",
    "Griselda",
    "Grizelda",
    "Gudrun",
    "Gustava",
    "Gvendolina",
    "Gvendolína",
    "Halina",
    "Hana",
    "Háta",
    "Havla",
    "Heda",
    "Hedvika",
    "Heidrun",
    "Helena",
    "Helga",
    "Herberta",
    "Hermína",
    "Herta",
    "Hilda",
    "Hortensie",
    "Hortenzie",
    "Horymíra",
    "Hostimila",
    "Hostimíra",
    "Hostislava",
    "Hvězdoslava",
    "Hyacinta",
    "Chranislava",
    "Iboja",
    "Ida",
    "Ignácie",
    "Ignáta",
    "Ildika",
    "Iljana",
    "Ilona",
    "Ilsa",
    "Ilza",
    "Ines",
    "Inesa",
    "Inéz",
    "Ingeborg",
    "Ingeborga",
    "Ingrid",
    "Ingrida",
    "Inka",
    "Irena",
    "Iris",
    "Irma",
    "Isabela",
    "Isidora",
    "Isolda",
    "Iva",
    "Ivana",
    "Iveta",
    "Ivona",
    "Izabela",
    "Izidora",
    "Izolda",
    "Jadrana",
    "Jadranka",
    "Jakuba",
    "Jakubka",
    "Jana",
    "Jarmila",
    "Jarolíma",
    "Jaromíra",
    "Jaroslava",
    "Jasmína",
    "Jasna",
    "Jasněna",
    "Jelena",
    "Jenovéfa",
    "Jesika",
    "Jindra",
    "Jindřiška",
    "Jiřina",
    "Jitka",
    "Johana",
    "Jolana",
    "Jolanta",
    "Jordana",
    "Jorga",
    "Josefa",
    "Josefína",
    "Jovana",
    "Jozefa",
    "Jozefína",
    "Judita",
    "Juliana",
    "Juliána",
    "Julie",
    "Justina",
    "Justýna",
    "Juta",
    "Kamila",
    "Karin",
    "Karina",
    "Karla",
    "Karmela",
    "Karmen",
    "Karolina",
    "Karolína",
    "Kateřina",
    "Katrin",
    "Katrina",
    "Kazi",
    "Kazimíra",
    "Kira",
    "Klára",
    "Klaudie",
    "Klementina",
    "Klementýna",
    "Kleopatra",
    "Klotylda",
    "Koleta",
    "Kolombína",
    "Kolumbína",
    "Konstance",
    "Konstancie",
    "Konsuela",
    "Konzuela",
    "Kora",
    "Kordula",
    "Korina",
    "Kornélie",
    "Krasava",
    "Krasomila",
    "Kristina",
    "Kristýna",
    "Kunhuta",
    "Květa",
    "Květoslava",
    "Květuše",
    "Lada",
    "Ladislava",
    "Larisa",
    "Laura",
    "Laurencie",
    "Lea",
    "Léda",
    "Leila",
    "Lejla",
    "Lena",
    "Lenka",
    "Leokádie",
    "Leona",
    "Leonora",
    "Leontina",
    "Leontýna",
    "Leopolda",
    "Leopoldina",
    "Leopoldýna",
    "Leticie",
    "Lia",
    "Liana",
    "Liběna",
    "Libora",
    "Liboslava",
    "Libuše",
    "Lidmila",
    "Liliana",
    "Lina",
    "Linda",
    "Livie",
    "Ljuba",
    "Lola",
    "Loreta",
    "Lorna",
    "Lota",
    "Lubomíra",
    "Luboslava",
    "Luciána",
    "Lucie",
    "Ludiše",
    "Luďka",
    "Ludmila",
    "Ludomíra",
    "Ludoslava",
    "Ludvika",
    "Ludvíka",
    "Luisa",
    "Lujza",
    "Lukrécie",
    "Lumíra",
    "Lydie",
    "Lýdie",
    "Mabel",
    "Mabela",
    "Magda",
    "Magdalena",
    "Magdaléna",
    "Mahulena",
    "Maja",
    "Mája",
    "Malvína",
    "Manon",
    "Manona",
    "Manuela",
    "Marcela",
    "Marcelína",
    "Margit",
    "Margita",
    "Mariana",
    "Marie",
    "Marieta",
    "Marika",
    "Marilyn",
    "Marina",
    "Mariola",
    "Marion",
    "Marisa",
    "Marita",
    "Markéta",
    "Marlena",
    "Marta",
    "Martina",
    "Matylda",
    "Maud",
    "Maxima",
    "Mečislava",
    "Medea",
    "Médea",
    "Melánie",
    "Melinda",
    "Melisa",
    "Melita",
    "Mercedes",
    "Michaela",
    "Michala",
    "Milada",
    "Milana",
    "Milena",
    "Miloslava",
    "Milred",
    "Miluše",
    "Mína",
    "Mira",
    "Mirabela",
    "Miranda",
    "Mirela",
    "Miriam",
    "Mirjam",
    "Mirka",
    "Miromila",
    "Miroslava",
    "Mnislava",
    "Mona",
    "Monika",
    "Muriel",
    "Muriela",
    "Myrna",
    "Naďa",
    "Naděžda",
    "Naneta",
    "Narcisa",
    "Natalie",
    "Natálie",
    "Nataša",
    "Neda",
    "Nela",
    "Nevena",
    "Nika",
    "Niké",
    "Nikodéma",
    "Nikol",
    "Nikola",
    "Nila",
    "Nina",
    "Noema",
    "Noemi",
    "Nona",
    "Nora",
    "Norberta",
    "Norma",
    "Odeta",
    "Ofélie",
    "Oktavie",
    "Oktávie",
    "Oldřiška",
    "Olga",
    "Oliva",
    "Olivie",
    "Olympie",
    "Ondřejka",
    "Otakara",
    "Otilie",
    "Otýlie",
    "Oxana",
    "Palmira",
    "Pamela",
    "Paskala",
    "Patricie",
    "Pavla",
    "Pavlína",
    "Pelagie",
    "Penelopa",
    "Perla",
    "Persida",
    "Perzida",
    "Petra",
    "Petrana",
    "Petronela",
    "Petronila",
    "Petruše",
    "Petula",
    "Pilar",
    "Polyxena",
    "Pravdomila",
    "Pravomila",
    "Pravoslav",
    "Pravoslava",
    "Priscila",
    "Priska",
    "Prokopa",
    "Přibyslava",
    "Radana",
    "Radimíra",
    "Radislava",
    "Radka",
    "Radmila",
    "Radomila",
    "Radomíra",
    "Radoslava",
    "Radovana",
    "Radslava",
    "Rafaela",
    "Ráchel",
    "Raisa",
    "Rajsa",
    "Ramona",
    "Rastislava",
    "Rebeka",
    "Regina",
    "Regína",
    "Renata",
    "Renáta",
    "René",
    "Ria",
    "Riana",
    "Richarda",
    "Rina",
    "Rita",
    "Roberta",
    "Robina",
    "Romana",
    "Rosa",
    "Rosalinda",
    "Rosamunda",
    "Rosana",
    "Rostislava",
    "Rovena",
    "Roxana",
    "Róza",
    "Rozálie",
    "Rozalinda",
    "Rozamunda",
    "Rozana",
    "Rozina",
    "Rozita",
    "Rozvita",
    "Rudolfa",
    "Rudolfina",
    "Rudolfína",
    "Rut",
    "Rút",
    "Růžena",
    "Řehořka",
    "Sabina",
    "Sabrina",
    "Salomea",
    "Salomena",
    "Samuela",
    "Sandra",
    "Sára",
    "Saskia",
    "Saskie",
    "Saxona",
    "Selena",
    "Selma",
    "Senta",
    "Serafína",
    "Serena",
    "Scholastika",
    "Sibyla",
    "Sidonie",
    "Silvána",
    "Silvie",
    "Simeona",
    "Simona",
    "Skarlet",
    "Skarleta",
    "Slavěna",
    "Slávka",
    "Slavomila",
    "Slavomíra",
    "Soběslava",
    "Sofie",
    "Sofronie",
    "Solveig",
    "Solveiga",
    "Soňa",
    "Sotira",
    "Stanislava",
    "Stáza",
    "Stela",
    "Svatava",
    "Svatoslava",
    "Světla",
    "Světlana",
    "Světluše",
    "Sylva",
    "Sylvie",
    "Sylvie",
    "Šárka",
    "Šarlota",
    "Šimona",
    "Štěpána",
    "Štěpánka",
    "Tamara",
    "Táňa",
    "Taťána",
    "Tea",
    "Tekla",
    "Teodora",
    "Teodozie",
    "Teofila",
    "Tereza",
    "Terezie",
    "Thea",
    "Theodora",
    "Theodosie",
    "Theofila",
    "Tomáška",
    "Toska",
    "Ulrika",
    "Una",
    "Uršula",
    "Václava",
    "Valburga",
    "Valdemara",
    "Valentina",
    "Valentýna",
    "Valerie",
    "Valérie",
    "Vanda",
    "Vanesa",
    "Věduna",
    "Veleslava",
    "Velislava",
    "Věnceslava",
    "Vendelína",
    "Vendula",
    "Vendulka",
    "Věnka",
    "Venuše",
    "Věra",
    "Verona",
    "Veronika",
    "Věroslava",
    "Věslava",
    "Vesna",
    "Viktorie",
    "Viléma",
    "Vilemína",
    "Vilma",
    "Vincencie",
    "Viola",
    "Violeta",
    "Virginie",
    "Virgínie",
    "Víta",
    "Vítězslava",
    "Viviana",
    "Vladana",
    "Vladěna",
    "Vladimíra",
    "Vladislava",
    "Vlasta",
    "Vlastimila",
    "Vlastimíra",
    "Vlastislava",
    "Vojmíra",
    "Vojslava",
    "Vojtěška",
    "Voršila",
    "Vratislava",
    "Xaverie",
    "Xenie",
    "Zaida",
    "Zaira",
    "Zbyhněva",
    "Zbyňka",
    "Zbyslava",
    "Zbyška",
    "Zdena",
    "Zdenka",
    "Zdeňka",
    "Zdeslava",
    "Zdislava",
    "Zenobie",
    "Zina",
    "Zinaida",
    "Zita",
    "Zlata",
    "Zlatomíra",
    "Zlatuše",
    "Zoe",
    "Zoja",
    "Zora",
    "Zoroslava",
    "Zuzana",
    "Zvonimíra",
    "Žakelina",
    "Žakelína",
    "Žaneta",
    "Ždana",
    "Želimíra",
    "Želislava",
    "Želmíra",
    "Žitomíra",
    "Žitoslava",
    "Živa",
    "Živana",
    "Žofie"
  ];
});

// node_modules/faker/lib/locales/cz/name/male_last_name.js
var require_male_last_name2 = __commonJS((exports, module) => {
  module["exports"] = [
    "Adam",
    "Adamec",
    "Adámek",
    "Albrecht",
    "Ambrož",
    "Anděl",
    "Andrle",
    "Antoš",
    "Bajer",
    "Baláž",
    "Balcar",
    "Balog",
    "Baloun",
    "Barák",
    "Baran",
    "Bareš",
    "Bárta",
    "Barták",
    "Bartoň",
    "Bartoš",
    "Bartošek",
    "Bartůněk",
    "Bašta",
    "Bauer",
    "Bayer",
    "Bažant",
    "Bečka",
    "Bečvář",
    "Bednář",
    "Bednařík",
    "Bělohlávek",
    "Benda",
    "Beneš",
    "Beran",
    "Beránek",
    "Berger",
    "Berka",
    "Berky",
    "Bernard",
    "Bezděk",
    "Bílek",
    "Bílý",
    "Bína",
    "Bittner",
    "Blaha",
    "Bláha",
    "Blažek",
    "Blecha",
    "Bobek",
    "Boček",
    "Boháč",
    "Boháček",
    "Böhm",
    "Borovička",
    "Bouček",
    "Bouda",
    "Bouška",
    "Brabec",
    "Brabenec",
    "Brada",
    "Bradáč",
    "Braun",
    "Brázda",
    "Brázdil",
    "Brejcha",
    "Březina",
    "Bříza",
    "Brož",
    "Brožek",
    "Brychta",
    "Bubeník",
    "Buček",
    "Buchta",
    "Burda",
    "Bureš",
    "Burian",
    "Buriánek",
    "Byrtus",
    "čada",
    "Caha",
    "čáp",
    "čapek",
    "čech",
    "čejka",
    "čermák",
    "černík",
    "černoch",
    "černohorský",
    "černý",
    "červeňák",
    "červenka",
    "červený",
    "červinka",
    "Chaloupka",
    "Chalupa",
    "Charvát",
    "Chládek",
    "Chlup",
    "Chmelař",
    "Chmelík",
    "Chovanec",
    "Chromý",
    "Chudoba",
    "Chvátal",
    "Chvojka",
    "Chytil",
    "Cibulka",
    "čihák",
    "Cihlář",
    "Císař",
    "čížek",
    "čonka",
    "Coufal",
    "čurda",
    "Daněk",
    "Daniel",
    "Daniš",
    "David",
    "Dědek",
    "Demeter",
    "Dittrich",
    "Diviš",
    "Dlouhý",
    "Dobeš",
    "Dobiáš",
    "Dobrovolný",
    "Dočekal",
    "Dočkal",
    "Dohnal",
    "Dokoupil",
    "Doleček",
    "Dolejš",
    "Dolejší",
    "Doležal",
    "Doležel",
    "Doskočil",
    "Dostál",
    "Doubek",
    "Doubrava",
    "Douša",
    "Drábek",
    "Drozd",
    "Dubský",
    "Duchoň",
    "Duda",
    "Dudek",
    "Dufek",
    "Dunka",
    "Dušek",
    "Dvořáček",
    "Dvořák",
    "Dvorský",
    "Eliáš",
    "Erben",
    "Fabián",
    "Fanta",
    "Farkaš",
    "Fejfar",
    "Fencl",
    "Ferenc",
    "Ferko",
    "Fiala",
    "Fiedler",
    "Filip",
    "Fischer",
    "Fišer",
    "Florián",
    "Fojtík",
    "Foltýn",
    "Forman",
    "Formánek",
    "Fořt",
    "Fousek",
    "Franc",
    "Franěk",
    "Frank",
    "Fridrich",
    "Frydrych",
    "Fuchs",
    "Fučík",
    "Fuksa",
    "Gábor",
    "Gabriel",
    "Gajdoš",
    "Gaži",
    "Gottwald",
    "Gregor",
    "Gruber",
    "Grundza",
    "Grygar",
    "Hájek",
    "Hajný",
    "Hála",
    "Hampl",
    "Hána",
    "Hanáček",
    "Hanák",
    "Hanousek",
    "Hanus",
    "Hanuš",
    "Hanzal",
    "Hanzl",
    "Hanzlík",
    "Hartman",
    "Hašek",
    "Havel",
    "Havelka",
    "Havlíček",
    "Havlík",
    "Havránek",
    "Heczko",
    "Heger",
    "Hejda",
    "Hejduk",
    "Hejl",
    "Hejna",
    "Hendrych",
    "Herman",
    "Heřman",
    "Heřmánek",
    "Hladík",
    "Hladký",
    "Hlaváč",
    "Hlaváček",
    "Hlavatý",
    "Hlávka",
    "Hloušek",
    "Hoffmann",
    "Hofman",
    "Holan",
    "Holas",
    "Holec",
    "Holeček",
    "Holík",
    "Holoubek",
    "Holub",
    "Holý",
    "Homola",
    "Homolka",
    "Hora",
    "Horáček",
    "Horák",
    "Hořejší",
    "Horký",
    "Horňák",
    "Horníček",
    "Horník",
    "Horský",
    "Horvát",
    "Horváth",
    "Hošek",
    "Houdek",
    "Houška",
    "Hovorka",
    "Hrabal",
    "Hrabovský",
    "Hradecký",
    "Hradil",
    "Hrbáček",
    "Hrbek",
    "Hrdina",
    "Hrdlička",
    "Hrdý",
    "Hrnčíř",
    "Hroch",
    "Hromádka",
    "Hron",
    "Hrubeš",
    "Hrubý",
    "Hruška",
    "Hrůza",
    "Hubáček",
    "Hudec",
    "Hudeček",
    "Hůlka",
    "Huml",
    "Husák",
    "Hušek",
    "Hýbl",
    "Hynek",
    "Jahoda",
    "Jakeš",
    "Jakl",
    "Jakoubek",
    "Jakubec",
    "Janáček",
    "Janák",
    "Janata",
    "Janča",
    "Jančík",
    "Janda",
    "Janeček",
    "Janečka",
    "Janíček",
    "Janík",
    "Janků",
    "Janota",
    "Janoušek",
    "Janovský",
    "Jansa",
    "Jánský",
    "Janů",
    "Jareš",
    "Jaroš",
    "Jašek",
    "Javůrek",
    "Jech",
    "Jedlička",
    "Jelen",
    "Jelínek",
    "Jeníček",
    "Jeřábek",
    "Jež",
    "Ježek",
    "Jílek",
    "Jindra",
    "Jíra",
    "Jirák",
    "Jiránek",
    "Jirásek",
    "Jiřík",
    "Jirka",
    "Jirků",
    "Jiroušek",
    "Jirsa",
    "John",
    "Jonáš",
    "Junek",
    "Jurčík",
    "Jurečka",
    "Juřica",
    "Juřík",
    "Kabát",
    "Kačírek",
    "Kadeřábek",
    "Kadlec",
    "Kafka",
    "Kaiser",
    "Kala",
    "Kaláb",
    "Kalaš",
    "Kalina",
    "Kalivoda",
    "Kalous",
    "Kalousek",
    "Kameník",
    "Kaňa",
    "Káňa",
    "Kaňka",
    "Kantor",
    "Kaplan",
    "Karas",
    "Karásek",
    "Karban",
    "Karel",
    "Karlík",
    "Kasal",
    "Kašík",
    "Kašpar",
    "Kašpárek",
    "Kavka",
    "Kazda",
    "Kindl",
    "Klečka",
    "Klein",
    "Klement",
    "Klíma",
    "Kliment",
    "Klimeš",
    "Klouček",
    "Klouda",
    "Knap",
    "Knotek",
    "Koch",
    "Kočí",
    "Kocián",
    "Kocman",
    "Kocourek",
    "Kohout",
    "Kohoutek",
    "Koláček",
    "Kolář",
    "Kolařík",
    "Kolek",
    "Kolman",
    "Komárek",
    "Komínek",
    "Konečný",
    "Koníček",
    "Kopal",
    "Kopeček",
    "Kopecký",
    "Kopečný",
    "Kopřiva",
    "Korbel",
    "Kořínek",
    "Kos",
    "Kosík",
    "Kosina",
    "Košťál",
    "Kostka",
    "Kotas",
    "Kotek",
    "Kotlár",
    "Kotrba",
    "Kouba",
    "Koubek",
    "Koudela",
    "Koudelka",
    "Koukal",
    "Kouřil",
    "Koutný",
    "Kováč",
    "Kovář",
    "Kovařík",
    "Kovářík",
    "Kozák",
    "Kozel",
    "Krajíček",
    "Král",
    "Králíček",
    "Králík",
    "Krátký",
    "Kratochvíl",
    "Kraus",
    "Krčmář",
    "Křeček",
    "Krejčí",
    "Krejčík",
    "Krejčíř",
    "Křenek",
    "Krištof",
    "Křivánek",
    "Kříž",
    "Křížek",
    "Kropáček",
    "Kroupa",
    "Krupa",
    "Krupička",
    "Krupka",
    "Kuba",
    "Kubánek",
    "Kubát",
    "Kubec",
    "Kubelka",
    "Kubeš",
    "Kubica",
    "Kubíček",
    "Kubík",
    "Kubín",
    "Kubiš",
    "Kuča",
    "Kučera",
    "Kuchař",
    "Kuchta",
    "Kudláček",
    "Kudrna",
    "Kukla",
    "Kulhánek",
    "Kulhavý",
    "Kunc",
    "Kuneš",
    "Kupec",
    "Kupka",
    "Kurka",
    "Kužel",
    "Kvapil",
    "Kvasnička",
    "Kyncl",
    "Kysela",
    "Lacina",
    "Lacko",
    "Lakatoš",
    "Landa",
    "Lang",
    "Langer",
    "Langr",
    "Látal",
    "Lavička",
    "Le",
    "Lebeda",
    "Levý",
    "Líbal",
    "Linhart",
    "Liška",
    "Lorenc",
    "Louda",
    "Ludvík",
    "Lukáč",
    "Lukáš",
    "Lukášek",
    "Lukeš",
    "Macák",
    "Macek",
    "Mach",
    "Mácha",
    "Machač",
    "Macháč",
    "Macháček",
    "Machala",
    "Machálek",
    "Macura",
    "Majer",
    "Maleček",
    "Málek",
    "Malík",
    "Malina",
    "Malý",
    "Maňák",
    "Mareček",
    "Marek",
    "Mareš",
    "Mařík",
    "Maršálek",
    "Maršík",
    "Martinec",
    "Martinek",
    "Martínek",
    "Mašek",
    "Masopust",
    "Matějíček",
    "Matějka",
    "Matouš",
    "Matoušek",
    "Matula",
    "Matuška",
    "Matyáš",
    "Matys",
    "Maxa",
    "Mayer",
    "Mazánek",
    "Medek",
    "Melichar",
    "Mencl",
    "Menšík",
    "Merta",
    "Michal",
    "Michalec",
    "Michálek",
    "Michalík",
    "Michna",
    "Mička",
    "Mika",
    "Míka",
    "Mikeš",
    "Miko",
    "Mikula",
    "Mikulášek",
    "Minář",
    "Minařík",
    "Mirga",
    "Mládek",
    "Mlčoch",
    "Mlejnek",
    "Mojžíš",
    "Mokrý",
    "Molnár",
    "Moravec",
    "Morávek",
    "Motl",
    "Motyčka",
    "Moučka",
    "Moudrý",
    "Mráček",
    "Mráz",
    "Mrázek",
    "Mrkvička",
    "Mucha",
    "Müller",
    "Műller",
    "Musil",
    "Mužík",
    "Myška",
    "Nagy",
    "Najman",
    "Navrátil",
    "Nečas",
    "Nedbal",
    "Nedoma",
    "Nedvěd",
    "Nejedlý",
    "Němec",
    "Němeček",
    "Nešpor",
    "Nesvadba",
    "Neubauer",
    "Neuman",
    "Neumann",
    "Nguyen",
    "Nguyen van",
    "Nosek",
    "Nováček",
    "Novák",
    "Novosad",
    "Novotný",
    "Nový",
    "Odehnal",
    "Oláh",
    "Oliva",
    "Ondra",
    "Ondráček",
    "Orság",
    "Otáhal",
    "Paleček",
    "Pánek",
    "Papež",
    "Pařízek",
    "Pašek",
    "Pátek",
    "Patočka",
    "Paul",
    "Pavel",
    "Pavelek",
    "Pavelka",
    "Pavlas",
    "Pavlica",
    "Pavlíček",
    "Pavlík",
    "Pavlů",
    "Pazdera",
    "Pech",
    "Pecha",
    "Pecháček",
    "Pecka",
    "Pekař",
    "Pekárek",
    "Pelc",
    "Pelikán",
    "Peřina",
    "Pernica",
    "Peroutka",
    "Pešek",
    "Peška",
    "Pešta",
    "Peterka",
    "Petr",
    "Petrák",
    "Petráš",
    "Petříček",
    "Petřík",
    "Petrů",
    "Pham",
    "Pícha",
    "Pilař",
    "Pilát",
    "Píša",
    "Pivoňka",
    "Plaček",
    "Plachý",
    "Plšek",
    "Pluhař",
    "Podzimek",
    "Pohl",
    "Pokorný",
    "Poláček",
    "Polách",
    "Polák",
    "Polanský",
    "Polášek",
    "Polívka",
    "Popelka",
    "Pospíchal",
    "Pospíšil",
    "Potůček",
    "Pour",
    "Prachař",
    "Prášek",
    "Pražák",
    "Prchal",
    "Přibyl",
    "Příhoda",
    "Přikryl",
    "Procházka",
    "Prokeš",
    "Prokop",
    "Prošek",
    "Provazník",
    "Průcha",
    "Průša",
    "Pšenička",
    "Ptáček",
    "Rác",
    "Rada",
    "Rak",
    "Rambousek",
    "Raška",
    "Rataj",
    "řeháček",
    "řehák",
    "řehoř",
    "Remeš",
    "řezáč",
    "Rezek",
    "řezníček",
    "Richter",
    "Richtr",
    "říha",
    "Roubal",
    "Rous",
    "Rozsypal",
    "Rudolf",
    "Růžek",
    "Růžička",
    "Ryba",
    "Rybář",
    "Rýdl",
    "Ryšavý",
    "Sadílek",
    "šafář",
    "šafařík",
    "šafránek",
    "šálek",
    "Samek",
    "šanda",
    "šašek",
    "Schejbal",
    "Schmidt",
    "Schneider",
    "Schwarz",
    "šebek",
    "šebela",
    "šebesta",
    "šeda",
    "šedivý",
    "Sedláček",
    "Sedlák",
    "Sedlář",
    "Sehnal",
    "Seidl",
    "Seifert",
    "Sekanina",
    "Semerád",
    "šenk",
    "šesták",
    "ševčík",
    "Severa",
    "Sikora",
    "šilhavý",
    "šíma",
    "šimáček",
    "šimák",
    "šimánek",
    "šimčík",
    "šimeček",
    "šimek",
    "šimon",
    "šimůnek",
    "šindelář",
    "šindler",
    "šíp",
    "šípek",
    "šír",
    "široký",
    "šiška",
    "Sivák",
    "Skácel",
    "Skala",
    "Skála",
    "Skalický",
    "Sklenář",
    "škoda",
    "Skopal",
    "Skořepa",
    "škrabal",
    "Skřivánek",
    "Slabý",
    "Sládek",
    "Sladký",
    "Sláma",
    "Slanina",
    "Slavíček",
    "Slavík",
    "šlechta",
    "Slezák",
    "Slováček",
    "Slovák",
    "Sluka",
    "Smejkal",
    "šmejkal",
    "Smékal",
    "šmerda",
    "Smetana",
    "šmíd",
    "Smola",
    "Smolík",
    "Smolka",
    "Smrčka",
    "Smrž",
    "Smutný",
    "šnajdr",
    "Sobek",
    "Sobotka",
    "Sochor",
    "Sojka",
    "Sokol",
    "šolc",
    "Sommer",
    "Souček",
    "Soukup",
    "Sova",
    "špaček",
    "Spáčil",
    "špička",
    "šplíchal",
    "Spurný",
    "šrámek",
    "Srb",
    "Staněk",
    "Stárek",
    "Starý",
    "šťastný",
    "štefan",
    "štefek",
    "štefl",
    "Stehlík",
    "Steiner",
    "Stejskal",
    "štěpán",
    "štěpánek",
    "štěrba",
    "Stibor",
    "Stoklasa",
    "Straka",
    "Stránský",
    "Strejček",
    "Strnad",
    "Strouhal",
    "Stuchlík",
    "Studený",
    "Studnička",
    "Stupka",
    "šubrt",
    "Suchánek",
    "Suchomel",
    "Suchý",
    "Suk",
    "šulc",
    "šustr",
    "šváb",
    "Svačina",
    "švanda",
    "švarc",
    "Svatoň",
    "Svatoš",
    "švec",
    "švehla",
    "švejda",
    "švestka",
    "Světlík",
    "Sviták",
    "Svoboda",
    "Svozil",
    "Sýkora",
    "Synek",
    "Syrový",
    "Táborský",
    "Tancoš",
    "Teplý",
    "Tesař",
    "Tichý",
    "Toman",
    "Tománek",
    "Tomáš",
    "Tomášek",
    "Tomeček",
    "Tomek",
    "Tomeš",
    "Tóth",
    "Tran",
    "Trávníček",
    "Trčka",
    "Tříska",
    "Trnka",
    "Trojan",
    "Truhlář",
    "Tuček",
    "Tůma",
    "Tureček",
    "Turek",
    "Tvrdík",
    "Tvrdý",
    "Uher",
    "Uhlíř",
    "Ulrich",
    "Urban",
    "Urbanec",
    "Urbánek",
    "Vacek",
    "Vácha",
    "Václavek",
    "Václavík",
    "Vaculík",
    "Vágner",
    "Vala",
    "Valášek",
    "Válek",
    "Valenta",
    "Valeš",
    "Váňa",
    "Vančura",
    "Vaněček",
    "Vaněk",
    "Vaníček",
    "Varga",
    "Vašák",
    "Vašek",
    "Vašíček",
    "Vávra",
    "Vavřík",
    "Večeřa",
    "Vejvoda",
    "Verner",
    "Veselý",
    "Veverka",
    "Vícha",
    "Vilímek",
    "Vinš",
    "Víšek",
    "Vít",
    "Vitásek",
    "Vítek",
    "Vlach",
    "Vlasák",
    "Vlček",
    "Vlk",
    "Vobořil",
    "Vodák",
    "Vodička",
    "Vodrážka",
    "Vojáček",
    "Vojta",
    "Vojtěch",
    "Vojtek",
    "Vojtíšek",
    "Vokoun",
    "Volek",
    "Volf",
    "Volný",
    "Vondra",
    "Vondráček",
    "Vondrák",
    "Voráček",
    "Vorel",
    "Voříšek",
    "Vorlíček",
    "Votava",
    "Votruba",
    "Vrabec",
    "Vrána",
    "Vrba",
    "Vrzal",
    "Vybíral",
    "Vydra",
    "Vymazal",
    "Vyskočil",
    "Vysloužil",
    "Wagner",
    "Walter",
    "Weber",
    "Weiss",
    "Winkler",
    "Wolf",
    "Zábranský",
    "žáček",
    "Zach",
    "Zahrádka",
    "Zahradník",
    "Zajíc",
    "Zajíček",
    "žák",
    "Zálešák",
    "Zámečník",
    "Zapletal",
    "Záruba",
    "Zatloukal",
    "Zavadil",
    "Zavřel",
    "Zbořil",
    "žďárský",
    "Zdražil",
    "Zedník",
    "Zelenka",
    "Zelený",
    "Zelinka",
    "Zeman",
    "Zemánek",
    "žemlička",
    "Zezula",
    "žídek",
    "žiga",
    "Zíka",
    "Zikmund",
    "Zima",
    "žižka",
    "Zlámal",
    "Zoubek",
    "Zouhar",
    "žůrek",
    "Zvěřina"
  ];
});

// node_modules/faker/lib/locales/cz/name/female_last_name.js
var require_female_last_name2 = __commonJS((exports, module) => {
  module["exports"] = [
    "Adamová",
    "Adamcová",
    "Adámková",
    "Albrechtová",
    "Ambrožová",
    "Andělová",
    "Andrleová",
    "Antošová",
    "Bajrová",
    "Balážová",
    "Balcarová",
    "Balogová",
    "Balounová",
    "Baráková",
    "Baranová",
    "Barešová",
    "Bártová",
    "Bartáková",
    "Bartoňová",
    "Bartošová",
    "Bartošková",
    "Bartůněková",
    "Baštová",
    "Baurová",
    "Bayrová",
    "Bažantová",
    "Bečková",
    "Bečvářová",
    "Bednářová",
    "Bednaříková",
    "Bělohlávková",
    "Bendová",
    "Benešová",
    "Beranová",
    "Beránková",
    "Bergrová",
    "Berková",
    "Berkyová",
    "Bernardová",
    "Bezděková",
    "Bílková",
    "Bílýová",
    "Bínová",
    "Bittnrová",
    "Blahová",
    "Bláhová",
    "Blažková",
    "Blechová",
    "Bobková",
    "Bočková",
    "Boháčová",
    "Boháčková",
    "Böhmová",
    "Borovičková",
    "Boučková",
    "Boudová",
    "Boušková",
    "Brabcová",
    "Brabencová",
    "Bradová",
    "Bradáčová",
    "Braunová",
    "Brázdová",
    "Brázdilová",
    "Brejchová",
    "Březinová",
    "Břízová",
    "Brožová",
    "Brožková",
    "Brychtová",
    "Bubeníková",
    "Bučková",
    "Buchtová",
    "Burdová",
    "Burešová",
    "Burianová",
    "Buriánková",
    "Byrtusová",
    "čadová",
    "Cahová",
    "čápová",
    "čapková",
    "čechová",
    "čejková",
    "čermáková",
    "černíková",
    "černochová",
    "černohorskýová",
    "černýová",
    "červeňáková",
    "červenková",
    "červenýová",
    "červinková",
    "Chaloupková",
    "Chalupová",
    "Charvátová",
    "Chládková",
    "Chlupová",
    "Chmelařová",
    "Chmelíková",
    "Chovancová",
    "Chromýová",
    "Chudobová",
    "Chvátalová",
    "Chvojková",
    "Chytilová",
    "Cibulková",
    "čiháková",
    "Cihlářová",
    "Císařová",
    "čížková",
    "čonková",
    "Coufalová",
    "čurdová",
    "Daněková",
    "Danilová",
    "Danišová",
    "Davidová",
    "Dědková",
    "Demetrová",
    "Dittrichová",
    "Divišová",
    "Dlouhýová",
    "Dobešová",
    "Dobiášová",
    "Dobrovolnýová",
    "Dočekalová",
    "Dočkalová",
    "Dohnalová",
    "Dokoupilová",
    "Dolečková",
    "Dolejšová",
    "Dolejšíová",
    "Doležalová",
    "Doležlová",
    "Doskočilová",
    "Dostálová",
    "Doubková",
    "Doubravová",
    "Doušová",
    "Drábková",
    "Drozdová",
    "Dubskýová",
    "Duchoňová",
    "Dudová",
    "Dudková",
    "Dufková",
    "Dunková",
    "Dušková",
    "Dvořáčková",
    "Dvořáková",
    "Dvorskýová",
    "Eliášová",
    "Erbnová",
    "Fabiánová",
    "Fantová",
    "Farkašová",
    "Fejfarová",
    "Fenclová",
    "Ferencová",
    "Ferkoová",
    "Fialová",
    "Fiedlrová",
    "Filipová",
    "Fischrová",
    "Fišrová",
    "Floriánová",
    "Fojtíková",
    "Foltýnová",
    "Formanová",
    "Formánková",
    "Fořtová",
    "Fousková",
    "Francová",
    "Franěková",
    "Franková",
    "Fridrichová",
    "Frydrychová",
    "Fuchsová",
    "Fučíková",
    "Fuksová",
    "Gáborová",
    "Gabrilová",
    "Gajdošová",
    "Gažiová",
    "Gottwaldová",
    "Gregorová",
    "Grubrová",
    "Grundzová",
    "Grygarová",
    "Hájková",
    "Hajnýová",
    "Hálová",
    "Hamplová",
    "Hánová",
    "Hanáčková",
    "Hanáková",
    "Hanousková",
    "Hanusová",
    "Hanušová",
    "Hanzalová",
    "Hanzlová",
    "Hanzlíková",
    "Hartmanová",
    "Hašková",
    "Havlová",
    "Havelková",
    "Havlíčková",
    "Havlíková",
    "Havránková",
    "Heczkoová",
    "Hegrová",
    "Hejdová",
    "Hejduková",
    "Hejlová",
    "Hejnová",
    "Hendrychová",
    "Hermanová",
    "Heřmanová",
    "Heřmánková",
    "Hladíková",
    "Hladkýová",
    "Hlaváčová",
    "Hlaváčková",
    "Hlavatýová",
    "Hlávková",
    "Hloušková",
    "Hoffmannová",
    "Hofmanová",
    "Holanová",
    "Holasová",
    "Holcová",
    "Holečková",
    "Holíková",
    "Holoubková",
    "Holubová",
    "Holýová",
    "Homolová",
    "Homolková",
    "Horová",
    "Horáčková",
    "Horáková",
    "Hořejšíová",
    "Horkýová",
    "Horňáková",
    "Horníčková",
    "Horníková",
    "Horskýová",
    "Horvátová",
    "Horváthová",
    "Hošková",
    "Houdková",
    "Houšková",
    "Hovorková",
    "Hrabalová",
    "Hrabovskýová",
    "Hradeckýová",
    "Hradilová",
    "Hrbáčková",
    "Hrbková",
    "Hrdinová",
    "Hrdličková",
    "Hrdýová",
    "Hrnčířová",
    "Hrochová",
    "Hromádková",
    "Hronová",
    "Hrubešová",
    "Hrubýová",
    "Hrušková",
    "Hrůzová",
    "Hubáčková",
    "Hudcová",
    "Hudečková",
    "Hůlková",
    "Humlová",
    "Husáková",
    "Hušková",
    "Hýblová",
    "Hynková",
    "Jahodová",
    "Jakešová",
    "Jaklová",
    "Jakoubková",
    "Jakubcová",
    "Janáčková",
    "Janáková",
    "Janatová",
    "Jančová",
    "Jančíková",
    "Jandová",
    "Janečková",
    "Janečková",
    "Janíčková",
    "Janíková",
    "Jankůová",
    "Janotová",
    "Janoušková",
    "Janovskýová",
    "Jansová",
    "Jánskýová",
    "Janůová",
    "Jarešová",
    "Jarošová",
    "Jašková",
    "Javůrková",
    "Jechová",
    "Jedličková",
    "Jelnová",
    "Jelínková",
    "Jeníčková",
    "Jeřábková",
    "Ježová",
    "Ježková",
    "Jílková",
    "Jindrová",
    "Jírová",
    "Jiráková",
    "Jiránková",
    "Jirásková",
    "Jiříková",
    "Jirková",
    "Jirkůová",
    "Jiroušková",
    "Jirsová",
    "Johnová",
    "Jonášová",
    "Junková",
    "Jurčíková",
    "Jurečková",
    "Juřicová",
    "Juříková",
    "Kabátová",
    "Kačírková",
    "Kadeřábková",
    "Kadlcová",
    "Kafková",
    "Kaisrová",
    "Kalová",
    "Kalábová",
    "Kalašová",
    "Kalinová",
    "Kalivodová",
    "Kalousová",
    "Kalousková",
    "Kameníková",
    "Kaňová",
    "Káňová",
    "Kaňková",
    "Kantorová",
    "Kaplanová",
    "Karasová",
    "Karásková",
    "Karbanová",
    "Karlová",
    "Karlíková",
    "Kasalová",
    "Kašíková",
    "Kašparová",
    "Kašpárková",
    "Kavková",
    "Kazdová",
    "Kindlová",
    "Klečková",
    "Kleinová",
    "Klementová",
    "Klímová",
    "Klimentová",
    "Klimešová",
    "Kloučková",
    "Kloudová",
    "Knapová",
    "Knotková",
    "Kochová",
    "Kočíová",
    "Kociánová",
    "Kocmanová",
    "Kocourková",
    "Kohoutová",
    "Kohoutková",
    "Koláčková",
    "Kolářová",
    "Kolaříková",
    "Kolková",
    "Kolmanová",
    "Komárková",
    "Komínková",
    "Konečnýová",
    "Koníčková",
    "Kopalová",
    "Kopečková",
    "Kopeckýová",
    "Kopečnýová",
    "Kopřivová",
    "Korblová",
    "Kořínková",
    "Kosová",
    "Kosíková",
    "Kosinová",
    "Košťálová",
    "Kostková",
    "Kotasová",
    "Kotková",
    "Kotlárová",
    "Kotrbová",
    "Koubová",
    "Koubková",
    "Koudelová",
    "Koudelková",
    "Koukalová",
    "Kouřilová",
    "Koutnýová",
    "Kováčová",
    "Kovářová",
    "Kovaříková",
    "Kováříková",
    "Kozáková",
    "Kozlová",
    "Krajíčková",
    "Králová",
    "Králíčková",
    "Králíková",
    "Krátkýová",
    "Kratochvílová",
    "Krausová",
    "Krčmářová",
    "Křečková",
    "Krejčíová",
    "Krejčíková",
    "Krejčířová",
    "Křenková",
    "Krištofová",
    "Křivánková",
    "Křížová",
    "Křížková",
    "Kropáčková",
    "Kroupová",
    "Krupová",
    "Krupičková",
    "Krupková",
    "Kubová",
    "Kubánková",
    "Kubátová",
    "Kubcová",
    "Kubelková",
    "Kubešová",
    "Kubicová",
    "Kubíčková",
    "Kubíková",
    "Kubínová",
    "Kubišová",
    "Kučová",
    "Kučerová",
    "Kuchařová",
    "Kuchtová",
    "Kudláčková",
    "Kudrnová",
    "Kuklová",
    "Kulhánková",
    "Kulhavýová",
    "Kuncová",
    "Kunešová",
    "Kupcová",
    "Kupková",
    "Kurková",
    "Kužlová",
    "Kvapilová",
    "Kvasničková",
    "Kynclová",
    "Kyselová",
    "Lacinová",
    "Lackoová",
    "Lakatošová",
    "Landová",
    "Langová",
    "Langrová",
    "Langrová",
    "Látalová",
    "Lavičková",
    "Leová",
    "Lebedová",
    "Levýová",
    "Líbalová",
    "Linhartová",
    "Lišková",
    "Lorencová",
    "Loudová",
    "Ludvíková",
    "Lukáčová",
    "Lukášová",
    "Lukášková",
    "Lukešová",
    "Macáková",
    "Macková",
    "Machová",
    "Máchová",
    "Machačová",
    "Macháčová",
    "Macháčková",
    "Machalová",
    "Machálková",
    "Macurová",
    "Majrová",
    "Malečková",
    "Málková",
    "Malíková",
    "Malinová",
    "Malýová",
    "Maňáková",
    "Marečková",
    "Marková",
    "Marešová",
    "Maříková",
    "Maršálková",
    "Maršíková",
    "Martincová",
    "Martinková",
    "Martínková",
    "Mašková",
    "Masopustová",
    "Matějíčková",
    "Matějková",
    "Matoušová",
    "Matoušková",
    "Matulová",
    "Matušková",
    "Matyášová",
    "Matysová",
    "Maxová",
    "Mayrová",
    "Mazánková",
    "Medková",
    "Melicharová",
    "Menclová",
    "Menšíková",
    "Mertová",
    "Michalová",
    "Michalcová",
    "Michálková",
    "Michalíková",
    "Michnová",
    "Mičková",
    "Miková",
    "Míková",
    "Mikešová",
    "Mikoová",
    "Mikulová",
    "Mikulášková",
    "Minářová",
    "Minaříková",
    "Mirgová",
    "Mládková",
    "Mlčochová",
    "Mlejnková",
    "Mojžíšová",
    "Mokrýová",
    "Molnárová",
    "Moravcová",
    "Morávková",
    "Motlová",
    "Motyčková",
    "Moučková",
    "Moudrýová",
    "Mráčková",
    "Mrázová",
    "Mrázková",
    "Mrkvičková",
    "Muchová",
    "Müllrová",
    "Műllrová",
    "Musilová",
    "Mužíková",
    "Myšková",
    "Nagyová",
    "Najmanová",
    "Navrátilová",
    "Nečasová",
    "Nedbalová",
    "Nedomová",
    "Nedvědová",
    "Nejedlýová",
    "Němcová",
    "Němečková",
    "Nešporová",
    "Nesvadbová",
    "Neubaurová",
    "Neumanová",
    "Neumannová",
    "Nguynová",
    "Nguyen vanová",
    "Nosková",
    "Nováčková",
    "Nováková",
    "Novosadová",
    "Novotnýová",
    "Novýová",
    "Odehnalová",
    "Oláhová",
    "Olivová",
    "Ondrová",
    "Ondráčková",
    "Orságová",
    "Otáhalová",
    "Palečková",
    "Pánková",
    "Papežová",
    "Pařízková",
    "Pašková",
    "Pátková",
    "Patočková",
    "Paulová",
    "Pavlová",
    "Pavelková",
    "Pavelková",
    "Pavlasová",
    "Pavlicová",
    "Pavlíčková",
    "Pavlíková",
    "Pavlůová",
    "Pazderová",
    "Pechová",
    "Pechová",
    "Pecháčková",
    "Pecková",
    "Pekařová",
    "Pekárková",
    "Pelcová",
    "Pelikánová",
    "Peřinová",
    "Pernicová",
    "Peroutková",
    "Pešková",
    "Pešková",
    "Peštová",
    "Peterková",
    "Petrová",
    "Petráková",
    "Petrášová",
    "Petříčková",
    "Petříková",
    "Petrůová",
    "Phamová",
    "Píchová",
    "Pilařová",
    "Pilátová",
    "Píšová",
    "Pivoňková",
    "Plačková",
    "Plachýová",
    "Plšková",
    "Pluhařová",
    "Podzimková",
    "Pohlová",
    "Pokornýová",
    "Poláčková",
    "Poláchová",
    "Poláková",
    "Polanskýová",
    "Polášková",
    "Polívková",
    "Popelková",
    "Pospíchalová",
    "Pospíšilová",
    "Potůčková",
    "Pourová",
    "Prachařová",
    "Prášková",
    "Pražáková",
    "Prchalová",
    "Přibylová",
    "Příhodová",
    "Přikrylová",
    "Procházková",
    "Prokešová",
    "Prokopová",
    "Prošková",
    "Provazníková",
    "Průchová",
    "Průšová",
    "Pšeničková",
    "Ptáčková",
    "Rácová",
    "Radová",
    "Raková",
    "Rambousková",
    "Rašková",
    "Ratajová",
    "řeháčková",
    "řeháková",
    "řehořová",
    "Remešová",
    "řezáčová",
    "Rezková",
    "řezníčková",
    "Richtrová",
    "Richtrová",
    "říhová",
    "Roubalová",
    "Rousová",
    "Rozsypalová",
    "Rudolfová",
    "Růžková",
    "Růžičková",
    "Rybová",
    "Rybářová",
    "Rýdlová",
    "Ryšavýová",
    "Sadílková",
    "šafářová",
    "šafaříková",
    "šafránková",
    "šálková",
    "Samková",
    "šandová",
    "šašková",
    "Schejbalová",
    "Schmidtová",
    "Schneidrová",
    "Schwarzová",
    "šebková",
    "šebelová",
    "šebestová",
    "šedová",
    "šedivýová",
    "Sedláčková",
    "Sedláková",
    "Sedlářová",
    "Sehnalová",
    "Seidlová",
    "Seifertová",
    "Sekaninová",
    "Semerádová",
    "šenková",
    "šestáková",
    "ševčíková",
    "Severová",
    "Sikorová",
    "šilhavýová",
    "šímová",
    "šimáčková",
    "šimáková",
    "šimánková",
    "šimčíková",
    "šimečková",
    "šimková",
    "šimonová",
    "šimůnková",
    "šindelářová",
    "šindlrová",
    "šípová",
    "šípková",
    "šírová",
    "širokýová",
    "šišková",
    "Siváková",
    "Skáclová",
    "Skalová",
    "Skálová",
    "Skalickýová",
    "Sklenářová",
    "škodová",
    "Skopalová",
    "Skořepová",
    "škrabalová",
    "Skřivánková",
    "Slabýová",
    "Sládková",
    "Sladkýová",
    "Slámová",
    "Slaninová",
    "Slavíčková",
    "Slavíková",
    "šlechtová",
    "Slezáková",
    "Slováčková",
    "Slováková",
    "Sluková",
    "Smejkalová",
    "šmejkalová",
    "Smékalová",
    "šmerdová",
    "Smetanová",
    "šmídová",
    "Smolová",
    "Smolíková",
    "Smolková",
    "Smrčková",
    "Smržová",
    "Smutnýová",
    "šnajdrová",
    "Sobková",
    "Sobotková",
    "Sochorová",
    "Sojková",
    "Sokolová",
    "šolcová",
    "Sommrová",
    "Součková",
    "Soukupová",
    "Sovová",
    "špačková",
    "Spáčilová",
    "špičková",
    "šplíchalová",
    "Spurnýová",
    "šrámková",
    "Srbová",
    "Staněková",
    "Stárková",
    "Starýová",
    "šťastnýová",
    "štefanová",
    "štefková",
    "šteflová",
    "Stehlíková",
    "Steinrová",
    "Stejskalová",
    "štěpánová",
    "štěpánková",
    "štěrbová",
    "Stiborová",
    "Stoklasová",
    "Straková",
    "Stránskýová",
    "Strejčková",
    "Strnadová",
    "Strouhalová",
    "Stuchlíková",
    "Studenýová",
    "Studničková",
    "Stupková",
    "šubrtová",
    "Suchánková",
    "Suchomlová",
    "Suchýová",
    "Suková",
    "šulcová",
    "šustrová",
    "švábová",
    "Svačinová",
    "švandová",
    "švarcová",
    "Svatoňová",
    "Svatošová",
    "švcová",
    "švehlová",
    "švejdová",
    "švestková",
    "Světlíková",
    "Svitáková",
    "Svobodová",
    "Svozilová",
    "Sýkorová",
    "Synková",
    "Syrovýová",
    "Táborskýová",
    "Tancošová",
    "Teplýová",
    "Tesařová",
    "Tichýová",
    "Tomanová",
    "Tománková",
    "Tomášová",
    "Tomášková",
    "Tomečková",
    "Tomková",
    "Tomešová",
    "Tóthová",
    "Tranová",
    "Trávníčková",
    "Trčková",
    "Třísková",
    "Trnková",
    "Trojanová",
    "Truhlářová",
    "Tučková",
    "Tůmová",
    "Turečková",
    "Turková",
    "Tvrdíková",
    "Tvrdýová",
    "Uhrová",
    "Uhlířová",
    "Ulrichová",
    "Urbanová",
    "Urbancová",
    "Urbánková",
    "Vacková",
    "Váchová",
    "Václavková",
    "Václavíková",
    "Vaculíková",
    "Vágnrová",
    "Valová",
    "Valášková",
    "Válková",
    "Valentová",
    "Valešová",
    "Váňová",
    "Vančurová",
    "Vaněčková",
    "Vaněková",
    "Vaníčková",
    "Vargová",
    "Vašáková",
    "Vašková",
    "Vašíčková",
    "Vávrová",
    "Vavříková",
    "Večeřová",
    "Vejvodová",
    "Vernrová",
    "Veselýová",
    "Veverková",
    "Víchová",
    "Vilímková",
    "Vinšová",
    "Víšková",
    "Vítová",
    "Vitásková",
    "Vítková",
    "Vlachová",
    "Vlasáková",
    "Vlčková",
    "Vlková",
    "Vobořilová",
    "Vodáková",
    "Vodičková",
    "Vodrážková",
    "Vojáčková",
    "Vojtová",
    "Vojtěchová",
    "Vojtková",
    "Vojtíšková",
    "Vokounová",
    "Volková",
    "Volfová",
    "Volnýová",
    "Vondrová",
    "Vondráčková",
    "Vondráková",
    "Voráčková",
    "Vorlová",
    "Voříšková",
    "Vorlíčková",
    "Votavová",
    "Votrubová",
    "Vrabcová",
    "Vránová",
    "Vrbová",
    "Vrzalová",
    "Vybíralová",
    "Vydrová",
    "Vymazalová",
    "Vyskočilová",
    "Vysloužilová",
    "Wagnrová",
    "Waltrová",
    "Webrová",
    "Weissová",
    "Winklrová",
    "Wolfová",
    "Zábranskýová",
    "žáčková",
    "Zachová",
    "Zahrádková",
    "Zahradníková",
    "Zajícová",
    "Zajíčková",
    "žáková",
    "Zálešáková",
    "Zámečníková",
    "Zapletalová",
    "Zárubová",
    "Zatloukalová",
    "Zavadilová",
    "Zavřlová",
    "Zbořilová",
    "žďárskýová",
    "Zdražilová",
    "Zedníková",
    "Zelenková",
    "Zelenýová",
    "Zelinková",
    "Zemanová",
    "Zemánková",
    "žemličková",
    "Zezulová",
    "žídková",
    "žigová",
    "Zíková",
    "Zikmundová",
    "Zimová",
    "žižková",
    "Zlámalová",
    "Zoubková",
    "Zouharová",
    "žůrková",
    "Zvěřinová"
  ];
});

// node_modules/faker/lib/locales/cz/name/prefix.js
var require_prefix3 = __commonJS((exports, module) => {
  module["exports"] = [
    "Ing.",
    "Mgr.",
    "JUDr.",
    "MUDr."
  ];
});

// node_modules/faker/lib/locales/cz/name/suffix.js
var require_suffix4 = __commonJS((exports, module) => {
  module["exports"] = [
    "Phd."
  ];
});

// node_modules/faker/lib/locales/cz/name/title.js
var require_title = __commonJS((exports, module) => {
  module["exports"] = {
    descriptor: [
      "Lead",
      "Senior",
      "Direct",
      "Corporate",
      "Dynamic",
      "Future",
      "Product",
      "National",
      "Regional",
      "District",
      "Central",
      "Global",
      "Customer",
      "Investor",
      "Dynamic",
      "International",
      "Legacy",
      "Forward",
      "Internal",
      "Human",
      "Chief",
      "Principal"
    ],
    level: [
      "Solutions",
      "Program",
      "Brand",
      "Security",
      "Research",
      "Marketing",
      "Directives",
      "Implementation",
      "Integration",
      "Functionality",
      "Response",
      "Paradigm",
      "Tactics",
      "Identity",
      "Markets",
      "Group",
      "Division",
      "Applications",
      "Optimization",
      "Operations",
      "Infrastructure",
      "Intranet",
      "Communications",
      "Web",
      "Branding",
      "Quality",
      "Assurance",
      "Mobility",
      "Accounts",
      "Data",
      "Creative",
      "Configuration",
      "Accountability",
      "Interactions",
      "Factors",
      "Usability",
      "Metrics"
    ],
    job: [
      "Supervisor",
      "Associate",
      "Executive",
      "Liason",
      "Officer",
      "Manager",
      "Engineer",
      "Specialist",
      "Director",
      "Coordinator",
      "Administrator",
      "Architect",
      "Analyst",
      "Designer",
      "Planner",
      "Orchestrator",
      "Technician",
      "Developer",
      "Producer",
      "Consultant",
      "Assistant",
      "Facilitator",
      "Agent",
      "Representative",
      "Strategist"
    ]
  };
});

// node_modules/faker/lib/locales/cz/name/name.js
var require_name6 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{prefix} #{man_first_name} #{man_last_name}",
    "#{prefix} #{woman_first_name} #{woman_last_name}",
    "#{man_first_name} #{man_last_name} #{suffix}",
    "#{woman_first_name} #{woman_last_name} #{suffix}",
    "#{man_first_name} #{man_last_name}",
    "#{man_first_name} #{man_last_name}",
    "#{man_first_name} #{man_last_name}",
    "#{woman_first_name} #{woman_last_name}",
    "#{woman_first_name} #{woman_last_name}",
    "#{woman_first_name} #{woman_last_name}"
  ];
});

// node_modules/faker/lib/locales/cz/name/index.js
var require_name5 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.male_first_name = require_male_first_name2();
  name2.female_first_name = require_female_first_name2();
  name2.male_last_name = require_male_last_name2();
  name2.female_last_name = require_female_last_name2();
  name2.prefix = require_prefix3();
  name2.suffix = require_suffix4();
  name2.title = require_title();
  name2.name = require_name6();
});

// node_modules/faker/lib/locales/cz/phone_number/formats.js
var require_formats2 = __commonJS((exports, module) => {
  module["exports"] = [
    "601 ### ###",
    "737 ### ###",
    "736 ### ###",
    "### ### ###",
    "+420 ### ### ###",
    "00420 ### ### ###"
  ];
});

// node_modules/faker/lib/locales/cz/phone_number/index.js
var require_phone_number2 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats2();
});

// node_modules/faker/lib/locales/cz/date/month.js
var require_month2 = __commonJS((exports, module) => {
  module["exports"] = {
    wide: [
      "Leden",
      "Únor",
      "Březen",
      "Duben",
      "Květen",
      "Červen",
      "Červenec",
      "Srpen",
      "Září",
      "Říjen",
      "Listopad",
      "Prosinec"
    ],
    wide_context: [
      "Leden",
      "Únor",
      "Březen",
      "Duben",
      "Květen",
      "Červen",
      "Červenec",
      "Srpen",
      "Září",
      "Říjen",
      "Listopad",
      "Prosinec"
    ],
    abbr: [
      "Led",
      "Úno",
      "Bře",
      "Dub",
      "Kvě",
      "Čer",
      "Črc",
      "Srp",
      "Zář",
      "Říj",
      "Lis",
      "Pro"
    ],
    abbr_context: [
      "Led",
      "Úno",
      "Bře",
      "Dub",
      "Kvě",
      "Čer",
      "Črc",
      "Srp",
      "Zář",
      "Říj",
      "Lis",
      "Pro"
    ]
  };
});

// node_modules/faker/lib/locales/cz/date/weekday.js
var require_weekday2 = __commonJS((exports, module) => {
  module["exports"] = {
    wide: [
      "Pondělí",
      "Úterý",
      "Středa",
      "čtvrtek",
      "Pátek",
      "Sobota",
      "Neděle"
    ],
    wide_context: [
      "Pondělí",
      "Úterý",
      "Středa",
      "čtvrtek",
      "Pátek",
      "Sobota",
      "Neděle"
    ],
    abbr: [
      "Po",
      "Út",
      "St",
      "čt",
      "Pá",
      "So",
      "Ne"
    ],
    abbr_context: [
      "Po",
      "Út",
      "St",
      "čt",
      "Pá",
      "So",
      "Ne"
    ]
  };
});

// node_modules/faker/lib/locales/cz/date/index.js
var require_date3 = __commonJS((exports, module) => {
  var date2 = {};
  module["exports"] = date2;
  date2.month = require_month2();
  date2.weekday = require_weekday2();
});

// node_modules/faker/lib/locales/cz/index.js
var require_cz = __commonJS((exports, module) => {
  var cz = {};
  module["exports"] = cz;
  cz.title = "Czech";
  cz.address = require_address3();
  cz.company = require_company3();
  cz.internet = require_internet3();
  cz.lorem = require_lorem();
  cz.name = require_name5();
  cz.phone_number = require_phone_number2();
  cz.date = require_date3();
});

// node_modules/faker/lib/locales/de/address/city_prefix.js
var require_city_prefix = __commonJS((exports, module) => {
  module["exports"] = [
    "Nord",
    "Ost",
    "West",
    "Süd",
    "Neu",
    "Alt",
    "Bad"
  ];
});

// node_modules/faker/lib/locales/de/address/city_suffix.js
var require_city_suffix = __commonJS((exports, module) => {
  module["exports"] = [
    "stadt",
    "dorf",
    "land",
    "scheid",
    "burg"
  ];
});

// node_modules/faker/lib/locales/de/address/country.js
var require_country3 = __commonJS((exports, module) => {
  module["exports"] = [
    "Ägypten",
    "Äquatorialguinea",
    "Äthiopien",
    "Österreich",
    "Afghanistan",
    "Albanien",
    "Algerien",
    "Amerikanisch-Samoa",
    "Amerikanische Jungferninseln",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antarktis",
    "Antigua und Barbuda",
    "Argentinien",
    "Armenien",
    "Aruba",
    "Aserbaidschan",
    "Australien",
    "Bahamas",
    "Bahrain",
    "Bangladesch",
    "Barbados",
    "Belarus",
    "Belgien",
    "Belize",
    "Benin",
    "die Bermudas",
    "Bhutan",
    "Bolivien",
    "Bosnien und Herzegowina",
    "Botsuana",
    "Bouvetinsel",
    "Brasilien",
    "Britische Jungferninseln",
    "Britisches Territorium im Indischen Ozean",
    "Brunei Darussalam",
    "Bulgarien",
    "Burkina Faso",
    "Burundi",
    "Chile",
    "China",
    "Cookinseln",
    "Costa Rica",
    "Dänemark",
    "Demokratische Republik Kongo",
    "Demokratische Volksrepublik Korea",
    "Deutschland",
    "Dominica",
    "Dominikanische Republik",
    "Dschibuti",
    "Ecuador",
    "El Salvador",
    "Eritrea",
    "Estland",
    "Färöer",
    "Falklandinseln",
    "Fidschi",
    "Finnland",
    "Frankreich",
    "Französisch-Guayana",
    "Französisch-Polynesien",
    "Französische Gebiete im südlichen Indischen Ozean",
    "Gabun",
    "Gambia",
    "Georgien",
    "Ghana",
    "Gibraltar",
    "Grönland",
    "Grenada",
    "Griechenland",
    "Guadeloupe",
    "Guam",
    "Guatemala",
    "Guinea",
    "Guinea-Bissau",
    "Guyana",
    "Haiti",
    "Heard und McDonaldinseln",
    "Honduras",
    "Hongkong",
    "Indien",
    "Indonesien",
    "Irak",
    "Iran",
    "Irland",
    "Island",
    "Israel",
    "Italien",
    "Jamaika",
    "Japan",
    "Jemen",
    "Jordanien",
    "Jugoslawien",
    "Kaimaninseln",
    "Kambodscha",
    "Kamerun",
    "Kanada",
    "Kap Verde",
    "Kasachstan",
    "Katar",
    "Kenia",
    "Kirgisistan",
    "Kiribati",
    "Kleinere amerikanische Überseeinseln",
    "Kokosinseln",
    "Kolumbien",
    "Komoren",
    "Kongo",
    "Kroatien",
    "Kuba",
    "Kuwait",
    "Laos",
    "Lesotho",
    "Lettland",
    "Libanon",
    "Liberia",
    "Libyen",
    "Liechtenstein",
    "Litauen",
    "Luxemburg",
    "Macau",
    "Madagaskar",
    "Malawi",
    "Malaysia",
    "Malediven",
    "Mali",
    "Malta",
    "ehemalige jugoslawische Republik Mazedonien",
    "Marokko",
    "Marshallinseln",
    "Martinique",
    "Mauretanien",
    "Mauritius",
    "Mayotte",
    "Mexiko",
    "Mikronesien",
    "Monaco",
    "Mongolei",
    "Montserrat",
    "Mosambik",
    "Myanmar",
    "Nördliche Marianen",
    "Namibia",
    "Nauru",
    "Nepal",
    "Neukaledonien",
    "Neuseeland",
    "Nicaragua",
    "Niederländische Antillen",
    "Niederlande",
    "Niger",
    "Nigeria",
    "Niue",
    "Norfolkinsel",
    "Norwegen",
    "Oman",
    "Osttimor",
    "Pakistan",
    "Palau",
    "Panama",
    "Papua-Neuguinea",
    "Paraguay",
    "Peru",
    "Philippinen",
    "Pitcairninseln",
    "Polen",
    "Portugal",
    "Puerto Rico",
    "Réunion",
    "Republik Korea",
    "Republik Moldau",
    "Ruanda",
    "Rumänien",
    "Russische Föderation",
    "São Tomé und Príncipe",
    "Südafrika",
    "Südgeorgien und Südliche Sandwichinseln",
    "Salomonen",
    "Sambia",
    "Samoa",
    "San Marino",
    "Saudi-Arabien",
    "Schweden",
    "Schweiz",
    "Senegal",
    "Seychellen",
    "Sierra Leone",
    "Simbabwe",
    "Singapur",
    "Slowakei",
    "Slowenien",
    "Somalien",
    "Spanien",
    "Sri Lanka",
    "St. Helena",
    "St. Kitts und Nevis",
    "St. Lucia",
    "St. Pierre und Miquelon",
    "St. Vincent und die Grenadinen",
    "Sudan",
    "Surinam",
    "Svalbard und Jan Mayen",
    "Swasiland",
    "Syrien",
    "Türkei",
    "Tadschikistan",
    "Taiwan",
    "Tansania",
    "Thailand",
    "Togo",
    "Tokelau",
    "Tonga",
    "Trinidad und Tobago",
    "Tschad",
    "Tschechische Republik",
    "Tunesien",
    "Turkmenistan",
    "Turks- und Caicosinseln",
    "Tuvalu",
    "Uganda",
    "Ukraine",
    "Ungarn",
    "Uruguay",
    "Usbekistan",
    "Vanuatu",
    "Vatikanstadt",
    "Venezuela",
    "Vereinigte Arabische Emirate",
    "Vereinigte Staaten",
    "Vereinigtes Königreich",
    "Vietnam",
    "Wallis und Futuna",
    "Weihnachtsinsel",
    "Westsahara",
    "Zentralafrikanische Republik",
    "Zypern"
  ];
});

// node_modules/faker/lib/locales/de/address/street_root.js
var require_street_root = __commonJS((exports, module) => {
  module["exports"] = [
    "Ackerweg",
    "Adalbert-Stifter-Str.",
    "Adalbertstr.",
    "Adolf-Baeyer-Str.",
    "Adolf-Kaschny-Str.",
    "Adolf-Reichwein-Str.",
    "Adolfsstr.",
    "Ahornweg",
    "Ahrstr.",
    "Akazienweg",
    "Albert-Einstein-Str.",
    "Albert-Schweitzer-Str.",
    "Albertus-Magnus-Str.",
    "Albert-Zarthe-Weg",
    "Albin-Edelmann-Str.",
    "Albrecht-Haushofer-Str.",
    "Aldegundisstr.",
    "Alexanderstr.",
    "Alfred-Delp-Str.",
    "Alfred-Kubin-Str.",
    "Alfred-Stock-Str.",
    "Alkenrather Str.",
    "Allensteiner Str.",
    "Alsenstr.",
    "Alt Steinbücheler Weg",
    "Alte Garten",
    "Alte Heide",
    "Alte Landstr.",
    "Alte Ziegelei",
    "Altenberger Str.",
    "Altenhof",
    "Alter Grenzweg",
    "Altstadtstr.",
    "Am Alten Gaswerk",
    "Am Alten Schafstall",
    "Am Arenzberg",
    "Am Benthal",
    "Am Birkenberg",
    "Am Blauen Berg",
    "Am Borsberg",
    "Am Brungen",
    "Am Büchelter Hof",
    "Am Buttermarkt",
    "Am Ehrenfriedhof",
    "Am Eselsdamm",
    "Am Falkenberg",
    "Am Frankenberg",
    "Am Gesundheitspark",
    "Am Gierlichshof",
    "Am Graben",
    "Am Hagelkreuz",
    "Am Hang",
    "Am Heidkamp",
    "Am Hemmelrather Hof",
    "Am Hofacker",
    "Am Hohen Ufer",
    "Am Höllers Eck",
    "Am Hühnerberg",
    "Am Jägerhof",
    "Am Junkernkamp",
    "Am Kemperstiegel",
    "Am Kettnersbusch",
    "Am Kiesberg",
    "Am Klösterchen",
    "Am Knechtsgraben",
    "Am Köllerweg",
    "Am Köttersbach",
    "Am Kreispark",
    "Am Kronefeld",
    "Am Küchenhof",
    "Am Kühnsbusch",
    "Am Lindenfeld",
    "Am Märchen",
    "Am Mittelberg",
    "Am Mönchshof",
    "Am Mühlenbach",
    "Am Neuenhof",
    "Am Nonnenbruch",
    "Am Plattenbusch",
    "Am Quettinger Feld",
    "Am Rosenhügel",
    "Am Sandberg",
    "Am Scherfenbrand",
    "Am Schokker",
    "Am Silbersee",
    "Am Sonnenhang",
    "Am Sportplatz",
    "Am Stadtpark",
    "Am Steinberg",
    "Am Telegraf",
    "Am Thelenhof",
    "Am Vogelkreuz",
    "Am Vogelsang",
    "Am Vogelsfeldchen",
    "Am Wambacher Hof",
    "Am Wasserturm",
    "Am Weidenbusch",
    "Am Weiher",
    "Am Weingarten",
    "Am Werth",
    "Amselweg",
    "An den Irlen",
    "An den Rheinauen",
    "An der Bergerweide",
    "An der Dingbank",
    "An der Evangelischen Kirche",
    "An der Evgl. Kirche",
    "An der Feldgasse",
    "An der Fettehenne",
    "An der Kante",
    "An der Laach",
    "An der Lehmkuhle",
    "An der Lichtenburg",
    "An der Luisenburg",
    "An der Robertsburg",
    "An der Schmitten",
    "An der Schusterinsel",
    "An der Steinrütsch",
    "An St. Andreas",
    "An St. Remigius",
    "Andreasstr.",
    "Ankerweg",
    "Annette-Kolb-Str.",
    "Apenrader Str.",
    "Arnold-Ohletz-Str.",
    "Atzlenbacher Str.",
    "Auerweg",
    "Auestr.",
    "Auf dem Acker",
    "Auf dem Blahnenhof",
    "Auf dem Bohnbüchel",
    "Auf dem Bruch",
    "Auf dem End",
    "Auf dem Forst",
    "Auf dem Herberg",
    "Auf dem Lehn",
    "Auf dem Stein",
    "Auf dem Weierberg",
    "Auf dem Weiherhahn",
    "Auf den Reien",
    "Auf der Donnen",
    "Auf der Grieße",
    "Auf der Ohmer",
    "Auf der Weide",
    "Auf'm Berg",
    "Auf'm Kamp",
    "Augustastr.",
    "August-Kekulé-Str.",
    "A.-W.-v.-Hofmann-Str.",
    "Bahnallee",
    "Bahnhofstr.",
    "Baltrumstr.",
    "Bamberger Str.",
    "Baumberger Str.",
    "Bebelstr.",
    "Beckers Kämpchen",
    "Beerenstr.",
    "Beethovenstr.",
    "Behringstr.",
    "Bendenweg",
    "Bensberger Str.",
    "Benzstr.",
    "Bergische Landstr.",
    "Bergstr.",
    "Berliner Platz",
    "Berliner Str.",
    "Bernhard-Letterhaus-Str.",
    "Bernhard-Lichtenberg-Str.",
    "Bernhard-Ridder-Str.",
    "Bernsteinstr.",
    "Bertha-Middelhauve-Str.",
    "Bertha-von-Suttner-Str.",
    "Bertolt-Brecht-Str.",
    "Berzeliusstr.",
    "Bielertstr.",
    "Biesenbach",
    "Billrothstr.",
    "Birkenbergstr.",
    "Birkengartenstr.",
    "Birkenweg",
    "Bismarckstr.",
    "Bitterfelder Str.",
    "Blankenburg",
    "Blaukehlchenweg",
    "Blütenstr.",
    "Boberstr.",
    "Böcklerstr.",
    "Bodelschwinghstr.",
    "Bodestr.",
    "Bogenstr.",
    "Bohnenkampsweg",
    "Bohofsweg",
    "Bonifatiusstr.",
    "Bonner Str.",
    "Borkumstr.",
    "Bornheimer Str.",
    "Borsigstr.",
    "Borussiastr.",
    "Bracknellstr.",
    "Brahmsweg",
    "Brandenburger Str.",
    "Breidenbachstr.",
    "Breslauer Str.",
    "Bruchhauser Str.",
    "Brückenstr.",
    "Brucknerstr.",
    "Brüder-Bonhoeffer-Str.",
    "Buchenweg",
    "Bürgerbuschweg",
    "Burgloch",
    "Burgplatz",
    "Burgstr.",
    "Burgweg",
    "Bürriger Weg",
    "Burscheider Str.",
    "Buschkämpchen",
    "Butterheider Str.",
    "Carl-Duisberg-Platz",
    "Carl-Duisberg-Str.",
    "Carl-Leverkus-Str.",
    "Carl-Maria-von-Weber-Platz",
    "Carl-Maria-von-Weber-Str.",
    "Carlo-Mierendorff-Str.",
    "Carl-Rumpff-Str.",
    "Carl-von-Ossietzky-Str.",
    "Charlottenburger Str.",
    "Christian-Heß-Str.",
    "Claasbruch",
    "Clemens-Winkler-Str.",
    "Concordiastr.",
    "Cranachstr.",
    "Dahlemer Str.",
    "Daimlerstr.",
    "Damaschkestr.",
    "Danziger Str.",
    "Debengasse",
    "Dechant-Fein-Str.",
    "Dechant-Krey-Str.",
    "Deichtorstr.",
    "Dhünnberg",
    "Dhünnstr.",
    "Dianastr.",
    "Diedenhofener Str.",
    "Diepental",
    "Diepenthaler Str.",
    "Dieselstr.",
    "Dillinger Str.",
    "Distelkamp",
    "Dohrgasse",
    "Domblick",
    "Dönhoffstr.",
    "Dornierstr.",
    "Drachenfelsstr.",
    "Dr.-August-Blank-Str.",
    "Dresdener Str.",
    "Driescher Hecke",
    "Drosselweg",
    "Dudweilerstr.",
    "Dünenweg",
    "Dünfelder Str.",
    "Dünnwalder Grenzweg",
    "Düppeler Str.",
    "Dürerstr.",
    "Dürscheider Weg",
    "Düsseldorfer Str.",
    "Edelrather Weg",
    "Edmund-Husserl-Str.",
    "Eduard-Spranger-Str.",
    "Ehrlichstr.",
    "Eichenkamp",
    "Eichenweg",
    "Eidechsenweg",
    "Eifelstr.",
    "Eifgenstr.",
    "Eintrachtstr.",
    "Elbestr.",
    "Elisabeth-Langgässer-Str.",
    "Elisabethstr.",
    "Elisabeth-von-Thadden-Str.",
    "Elisenstr.",
    "Elsa-Brändström-Str.",
    "Elsbachstr.",
    "Else-Lasker-Schüler-Str.",
    "Elsterstr.",
    "Emil-Fischer-Str.",
    "Emil-Nolde-Str.",
    "Engelbertstr.",
    "Engstenberger Weg",
    "Entenpfuhl",
    "Erbelegasse",
    "Erftstr.",
    "Erfurter Str.",
    "Erich-Heckel-Str.",
    "Erich-Klausener-Str.",
    "Erich-Ollenhauer-Str.",
    "Erlenweg",
    "Ernst-Bloch-Str.",
    "Ernst-Ludwig-Kirchner-Str.",
    "Erzbergerstr.",
    "Eschenallee",
    "Eschenweg",
    "Esmarchstr.",
    "Espenweg",
    "Euckenstr.",
    "Eulengasse",
    "Eulenkamp",
    "Ewald-Flamme-Str.",
    "Ewald-Röll-Str.",
    "Fährstr.",
    "Farnweg",
    "Fasanenweg",
    "Faßbacher Hof",
    "Felderstr.",
    "Feldkampstr.",
    "Feldsiefer Weg",
    "Feldsiefer Wiesen",
    "Feldstr.",
    "Feldtorstr.",
    "Felix-von-Roll-Str.",
    "Ferdinand-Lassalle-Str.",
    "Fester Weg",
    "Feuerbachstr.",
    "Feuerdornweg",
    "Fichtenweg",
    "Fichtestr.",
    "Finkelsteinstr.",
    "Finkenweg",
    "Fixheider Str.",
    "Flabbenhäuschen",
    "Flensburger Str.",
    "Fliederweg",
    "Florastr.",
    "Florianweg",
    "Flotowstr.",
    "Flurstr.",
    "Föhrenweg",
    "Fontanestr.",
    "Forellental",
    "Fortunastr.",
    "Franz-Esser-Str.",
    "Franz-Hitze-Str.",
    "Franz-Kail-Str.",
    "Franz-Marc-Str.",
    "Freiburger Str.",
    "Freiheitstr.",
    "Freiherr-vom-Stein-Str.",
    "Freudenthal",
    "Freudenthaler Weg",
    "Fridtjof-Nansen-Str.",
    "Friedenberger Str.",
    "Friedensstr.",
    "Friedhofstr.",
    "Friedlandstr.",
    "Friedlieb-Ferdinand-Runge-Str.",
    "Friedrich-Bayer-Str.",
    "Friedrich-Bergius-Platz",
    "Friedrich-Ebert-Platz",
    "Friedrich-Ebert-Str.",
    "Friedrich-Engels-Str.",
    "Friedrich-List-Str.",
    "Friedrich-Naumann-Str.",
    "Friedrich-Sertürner-Str.",
    "Friedrichstr.",
    "Friedrich-Weskott-Str.",
    "Friesenweg",
    "Frischenberg",
    "Fritz-Erler-Str.",
    "Fritz-Henseler-Str.",
    "Fröbelstr.",
    "Fürstenbergplatz",
    "Fürstenbergstr.",
    "Gabriele-Münter-Str.",
    "Gartenstr.",
    "Gebhardstr.",
    "Geibelstr.",
    "Gellertstr.",
    "Georg-von-Vollmar-Str.",
    "Gerhard-Domagk-Str.",
    "Gerhart-Hauptmann-Str.",
    "Gerichtsstr.",
    "Geschwister-Scholl-Str.",
    "Gezelinallee",
    "Gierener Weg",
    "Ginsterweg",
    "Gisbert-Cremer-Str.",
    "Glücksburger Str.",
    "Gluckstr.",
    "Gneisenaustr.",
    "Goetheplatz",
    "Goethestr.",
    "Golo-Mann-Str.",
    "Görlitzer Str.",
    "Görresstr.",
    "Graebestr.",
    "Graf-Galen-Platz",
    "Gregor-Mendel-Str.",
    "Greifswalder Str.",
    "Grillenweg",
    "Gronenborner Weg",
    "Große Kirchstr.",
    "Grunder Wiesen",
    "Grundermühle",
    "Grundermühlenhof",
    "Grundermühlenweg",
    "Grüner Weg",
    "Grunewaldstr.",
    "Grünstr.",
    "Günther-Weisenborn-Str.",
    "Gustav-Freytag-Str.",
    "Gustav-Heinemann-Str.",
    "Gustav-Radbruch-Str.",
    "Gut Reuschenberg",
    "Gutenbergstr.",
    "Haberstr.",
    "Habichtgasse",
    "Hafenstr.",
    "Hagenauer Str.",
    "Hahnenblecher",
    "Halenseestr.",
    "Halfenleimbach",
    "Hallesche Str.",
    "Halligstr.",
    "Hamberger Str.",
    "Hammerweg",
    "Händelstr.",
    "Hannah-Höch-Str.",
    "Hans-Arp-Str.",
    "Hans-Gerhard-Str.",
    "Hans-Sachs-Str.",
    "Hans-Schlehahn-Str.",
    "Hans-von-Dohnanyi-Str.",
    "Hardenbergstr.",
    "Haselweg",
    "Hauptstr.",
    "Haus-Vorster-Str.",
    "Hauweg",
    "Havelstr.",
    "Havensteinstr.",
    "Haydnstr.",
    "Hebbelstr.",
    "Heckenweg",
    "Heerweg",
    "Hegelstr.",
    "Heidberg",
    "Heidehöhe",
    "Heidestr.",
    "Heimstättenweg",
    "Heinrich-Böll-Str.",
    "Heinrich-Brüning-Str.",
    "Heinrich-Claes-Str.",
    "Heinrich-Heine-Str.",
    "Heinrich-Hörlein-Str.",
    "Heinrich-Lübke-Str.",
    "Heinrich-Lützenkirchen-Weg",
    "Heinrichstr.",
    "Heinrich-Strerath-Str.",
    "Heinrich-von-Kleist-Str.",
    "Heinrich-von-Stephan-Str.",
    "Heisterbachstr.",
    "Helenenstr.",
    "Helmestr.",
    "Hemmelrather Weg",
    "Henry-T.-v.-Böttinger-Str.",
    "Herderstr.",
    "Heribertstr.",
    "Hermann-Ehlers-Str.",
    "Hermann-Hesse-Str.",
    "Hermann-König-Str.",
    "Hermann-Löns-Str.",
    "Hermann-Milde-Str.",
    "Hermann-Nörrenberg-Str.",
    "Hermann-von-Helmholtz-Str.",
    "Hermann-Waibel-Str.",
    "Herzogstr.",
    "Heymannstr.",
    "Hindenburgstr.",
    "Hirzenberg",
    "Hitdorfer Kirchweg",
    "Hitdorfer Str.",
    "Höfer Mühle",
    "Höfer Weg",
    "Hohe Str.",
    "Höhenstr.",
    "Höltgestal",
    "Holunderweg",
    "Holzer Weg",
    "Holzer Wiesen",
    "Hornpottweg",
    "Hubertusweg",
    "Hufelandstr.",
    "Hufer Weg",
    "Humboldtstr.",
    "Hummelsheim",
    "Hummelweg",
    "Humperdinckstr.",
    "Hüscheider Gärten",
    "Hüscheider Str.",
    "Hütte",
    "Ilmstr.",
    "Im Bergischen Heim",
    "Im Bruch",
    "Im Buchenhain",
    "Im Bühl",
    "Im Burgfeld",
    "Im Dorf",
    "Im Eisholz",
    "Im Friedenstal",
    "Im Frohental",
    "Im Grunde",
    "Im Hederichsfeld",
    "Im Jücherfeld",
    "Im Kalkfeld",
    "Im Kirberg",
    "Im Kirchfeld",
    "Im Kreuzbruch",
    "Im Mühlenfeld",
    "Im Nesselrader Kamp",
    "Im Oberdorf",
    "Im Oberfeld",
    "Im Rosengarten",
    "Im Rottland",
    "Im Scheffengarten",
    "Im Staderfeld",
    "Im Steinfeld",
    "Im Weidenblech",
    "Im Winkel",
    "Im Ziegelfeld",
    "Imbach",
    "Imbacher Weg",
    "Immenweg",
    "In den Blechenhöfen",
    "In den Dehlen",
    "In der Birkenau",
    "In der Dasladen",
    "In der Felderhütten",
    "In der Hartmannswiese",
    "In der Höhle",
    "In der Schaafsdellen",
    "In der Wasserkuhl",
    "In der Wüste",
    "In Holzhausen",
    "Insterstr.",
    "Jacob-Fröhlen-Str.",
    "Jägerstr.",
    "Jahnstr.",
    "Jakob-Eulenberg-Weg",
    "Jakobistr.",
    "Jakob-Kaiser-Str.",
    "Jenaer Str.",
    "Johannes-Baptist-Str.",
    "Johannes-Dott-Str.",
    "Johannes-Popitz-Str.",
    "Johannes-Wislicenus-Str.",
    "Johannisburger Str.",
    "Johann-Janssen-Str.",
    "Johann-Wirtz-Weg",
    "Josefstr.",
    "Jüch",
    "Julius-Doms-Str.",
    "Julius-Leber-Str.",
    "Kaiserplatz",
    "Kaiserstr.",
    "Kaiser-Wilhelm-Allee",
    "Kalkstr.",
    "Kämpchenstr.",
    "Kämpenwiese",
    "Kämper Weg",
    "Kamptalweg",
    "Kanalstr.",
    "Kandinskystr.",
    "Kantstr.",
    "Kapellenstr.",
    "Karl-Arnold-Str.",
    "Karl-Bosch-Str.",
    "Karl-Bückart-Str.",
    "Karl-Carstens-Ring",
    "Karl-Friedrich-Goerdeler-Str.",
    "Karl-Jaspers-Str.",
    "Karl-König-Str.",
    "Karl-Krekeler-Str.",
    "Karl-Marx-Str.",
    "Karlstr.",
    "Karl-Ulitzka-Str.",
    "Karl-Wichmann-Str.",
    "Karl-Wingchen-Str.",
    "Käsenbrod",
    "Käthe-Kollwitz-Str.",
    "Katzbachstr.",
    "Kerschensteinerstr.",
    "Kiefernweg",
    "Kieler Str.",
    "Kieselstr.",
    "Kiesweg",
    "Kinderhausen",
    "Kleiberweg",
    "Kleine Kirchstr.",
    "Kleingansweg",
    "Kleinheider Weg",
    "Klief",
    "Kneippstr.",
    "Knochenbergsweg",
    "Kochergarten",
    "Kocherstr.",
    "Kockelsberg",
    "Kolberger Str.",
    "Kolmarer Str.",
    "Kölner Gasse",
    "Kölner Str.",
    "Kolpingstr.",
    "Königsberger Platz",
    "Konrad-Adenauer-Platz",
    "Köpenicker Str.",
    "Kopernikusstr.",
    "Körnerstr.",
    "Köschenberg",
    "Köttershof",
    "Kreuzbroicher Str.",
    "Kreuzkamp",
    "Krummer Weg",
    "Kruppstr.",
    "Kuhlmannweg",
    "Kump",
    "Kumper Weg",
    "Kunstfeldstr.",
    "Küppersteger Str.",
    "Kursiefen",
    "Kursiefer Weg",
    "Kurtekottenweg",
    "Kurt-Schumacher-Ring",
    "Kyllstr.",
    "Langenfelder Str.",
    "Längsleimbach",
    "Lärchenweg",
    "Legienstr.",
    "Lehner Mühle",
    "Leichlinger Str.",
    "Leimbacher Hof",
    "Leinestr.",
    "Leineweberstr.",
    "Leipziger Str.",
    "Lerchengasse",
    "Lessingstr.",
    "Libellenweg",
    "Lichstr.",
    "Liebigstr.",
    "Lindenstr.",
    "Lingenfeld",
    "Linienstr.",
    "Lippe",
    "Löchergraben",
    "Löfflerstr.",
    "Loheweg",
    "Lohrbergstr.",
    "Lohrstr.",
    "Löhstr.",
    "Lortzingstr.",
    "Lötzener Str.",
    "Löwenburgstr.",
    "Lucasstr.",
    "Ludwig-Erhard-Platz",
    "Ludwig-Girtler-Str.",
    "Ludwig-Knorr-Str.",
    "Luisenstr.",
    "Lupinenweg",
    "Lurchenweg",
    "Lützenkirchener Str.",
    "Lycker Str.",
    "Maashofstr.",
    "Manforter Str.",
    "Marc-Chagall-Str.",
    "Maria-Dresen-Str.",
    "Maria-Terwiel-Str.",
    "Marie-Curie-Str.",
    "Marienburger Str.",
    "Mariendorfer Str.",
    "Marienwerderstr.",
    "Marie-Schlei-Str.",
    "Marktplatz",
    "Markusweg",
    "Martin-Buber-Str.",
    "Martin-Heidegger-Str.",
    "Martin-Luther-Str.",
    "Masurenstr.",
    "Mathildenweg",
    "Maurinusstr.",
    "Mauspfad",
    "Max-Beckmann-Str.",
    "Max-Delbrück-Str.",
    "Max-Ernst-Str.",
    "Max-Holthausen-Platz",
    "Max-Horkheimer-Str.",
    "Max-Liebermann-Str.",
    "Max-Pechstein-Str.",
    "Max-Planck-Str.",
    "Max-Scheler-Str.",
    "Max-Schönenberg-Str.",
    "Maybachstr.",
    "Meckhofer Feld",
    "Meisenweg",
    "Memelstr.",
    "Menchendahler Str.",
    "Mendelssohnstr.",
    "Merziger Str.",
    "Mettlacher Str.",
    "Metzer Str.",
    "Michaelsweg",
    "Miselohestr.",
    "Mittelstr.",
    "Mohlenstr.",
    "Moltkestr.",
    "Monheimer Str.",
    "Montanusstr.",
    "Montessoriweg",
    "Moosweg",
    "Morsbroicher Str.",
    "Moselstr.",
    "Moskauer Str.",
    "Mozartstr.",
    "Mühlenweg",
    "Muhrgasse",
    "Muldestr.",
    "Mülhausener Str.",
    "Mülheimer Str.",
    "Münsters Gäßchen",
    "Münzstr.",
    "Müritzstr.",
    "Myliusstr.",
    "Nachtigallenweg",
    "Nauener Str.",
    "Neißestr.",
    "Nelly-Sachs-Str.",
    "Netzestr.",
    "Neuendriesch",
    "Neuenhausgasse",
    "Neuenkamp",
    "Neujudenhof",
    "Neukronenberger Str.",
    "Neustadtstr.",
    "Nicolai-Hartmann-Str.",
    "Niederblecher",
    "Niederfeldstr.",
    "Nietzschestr.",
    "Nikolaus-Groß-Str.",
    "Nobelstr.",
    "Norderneystr.",
    "Nordstr.",
    "Ober dem Hof",
    "Obere Lindenstr.",
    "Obere Str.",
    "Oberölbach",
    "Odenthaler Str.",
    "Oderstr.",
    "Okerstr.",
    "Olof-Palme-Str.",
    "Ophovener Str.",
    "Opladener Platz",
    "Opladener Str.",
    "Ortelsburger Str.",
    "Oskar-Moll-Str.",
    "Oskar-Schlemmer-Str.",
    "Oststr.",
    "Oswald-Spengler-Str.",
    "Otto-Dix-Str.",
    "Otto-Grimm-Str.",
    "Otto-Hahn-Str.",
    "Otto-Müller-Str.",
    "Otto-Stange-Str.",
    "Ottostr.",
    "Otto-Varnhagen-Str.",
    "Otto-Wels-Str.",
    "Ottweilerstr.",
    "Oulustr.",
    "Overfeldweg",
    "Pappelweg",
    "Paracelsusstr.",
    "Parkstr.",
    "Pastor-Louis-Str.",
    "Pastor-Scheibler-Str.",
    "Pastorskamp",
    "Paul-Klee-Str.",
    "Paul-Löbe-Str.",
    "Paulstr.",
    "Peenestr.",
    "Pescher Busch",
    "Peschstr.",
    "Pestalozzistr.",
    "Peter-Grieß-Str.",
    "Peter-Joseph-Lenné-Str.",
    "Peter-Neuenheuser-Str.",
    "Petersbergstr.",
    "Peterstr.",
    "Pfarrer-Jekel-Str.",
    "Pfarrer-Klein-Str.",
    "Pfarrer-Röhr-Str.",
    "Pfeilshofstr.",
    "Philipp-Ott-Str.",
    "Piet-Mondrian-Str.",
    "Platanenweg",
    "Pommernstr.",
    "Porschestr.",
    "Poststr.",
    "Potsdamer Str.",
    "Pregelstr.",
    "Prießnitzstr.",
    "Pützdelle",
    "Quarzstr.",
    "Quettinger Str.",
    "Rat-Deycks-Str.",
    "Rathenaustr.",
    "Ratherkämp",
    "Ratiborer Str.",
    "Raushofstr.",
    "Regensburger Str.",
    "Reinickendorfer Str.",
    "Renkgasse",
    "Rennbaumplatz",
    "Rennbaumstr.",
    "Reuschenberger Str.",
    "Reusrather Str.",
    "Reuterstr.",
    "Rheinallee",
    "Rheindorfer Str.",
    "Rheinstr.",
    "Rhein-Wupper-Platz",
    "Richard-Wagner-Str.",
    "Rilkestr.",
    "Ringstr.",
    "Robert-Blum-Str.",
    "Robert-Koch-Str.",
    "Robert-Medenwald-Str.",
    "Rolandstr.",
    "Romberg",
    "Röntgenstr.",
    "Roonstr.",
    "Ropenstall",
    "Ropenstaller Weg",
    "Rosenthal",
    "Rostocker Str.",
    "Rotdornweg",
    "Röttgerweg",
    "Rückertstr.",
    "Rudolf-Breitscheid-Str.",
    "Rudolf-Mann-Platz",
    "Rudolf-Stracke-Str.",
    "Ruhlachplatz",
    "Ruhlachstr.",
    "Rüttersweg",
    "Saalestr.",
    "Saarbrücker Str.",
    "Saarlauterner Str.",
    "Saarstr.",
    "Salamanderweg",
    "Samlandstr.",
    "Sanddornstr.",
    "Sandstr.",
    "Sauerbruchstr.",
    "Schäfershütte",
    "Scharnhorststr.",
    "Scheffershof",
    "Scheidemannstr.",
    "Schellingstr.",
    "Schenkendorfstr.",
    "Schießbergstr.",
    "Schillerstr.",
    "Schlangenhecke",
    "Schlebuscher Heide",
    "Schlebuscher Str.",
    "Schlebuschrath",
    "Schlehdornstr.",
    "Schleiermacherstr.",
    "Schloßstr.",
    "Schmalenbruch",
    "Schnepfenflucht",
    "Schöffenweg",
    "Schöllerstr.",
    "Schöne Aussicht",
    "Schöneberger Str.",
    "Schopenhauerstr.",
    "Schubertplatz",
    "Schubertstr.",
    "Schulberg",
    "Schulstr.",
    "Schumannstr.",
    "Schwalbenweg",
    "Schwarzastr.",
    "Sebastianusweg",
    "Semmelweisstr.",
    "Siebelplatz",
    "Siemensstr.",
    "Solinger Str.",
    "Sonderburger Str.",
    "Spandauer Str.",
    "Speestr.",
    "Sperberweg",
    "Sperlingsweg",
    "Spitzwegstr.",
    "Sporrenberger Mühle",
    "Spreestr.",
    "St. Ingberter Str.",
    "Starenweg",
    "Stauffenbergstr.",
    "Stefan-Zweig-Str.",
    "Stegerwaldstr.",
    "Steglitzer Str.",
    "Steinbücheler Feld",
    "Steinbücheler Str.",
    "Steinstr.",
    "Steinweg",
    "Stephan-Lochner-Str.",
    "Stephanusstr.",
    "Stettiner Str.",
    "Stixchesstr.",
    "Stöckenstr.",
    "Stralsunder Str.",
    "Straßburger Str.",
    "Stresemannplatz",
    "Strombergstr.",
    "Stromstr.",
    "Stüttekofener Str.",
    "Sudestr.",
    "Sürderstr.",
    "Syltstr.",
    "Talstr.",
    "Tannenbergstr.",
    "Tannenweg",
    "Taubenweg",
    "Teitscheider Weg",
    "Telegrafenstr.",
    "Teltower Str.",
    "Tempelhofer Str.",
    "Theodor-Adorno-Str.",
    "Theodor-Fliedner-Str.",
    "Theodor-Gierath-Str.",
    "Theodor-Haubach-Str.",
    "Theodor-Heuss-Ring",
    "Theodor-Storm-Str.",
    "Theodorstr.",
    "Thomas-Dehler-Str.",
    "Thomas-Morus-Str.",
    "Thomas-von-Aquin-Str.",
    "Tönges Feld",
    "Torstr.",
    "Treptower Str.",
    "Treuburger Str.",
    "Uhlandstr.",
    "Ulmenweg",
    "Ulmer Str.",
    "Ulrichstr.",
    "Ulrich-von-Hassell-Str.",
    "Umlag",
    "Unstrutstr.",
    "Unter dem Schildchen",
    "Unterölbach",
    "Unterstr.",
    "Uppersberg",
    "Van\\'t-Hoff-Str.",
    "Veit-Stoß-Str.",
    "Vereinsstr.",
    "Viktor-Meyer-Str.",
    "Vincent-van-Gogh-Str.",
    "Virchowstr.",
    "Voigtslach",
    "Volhardstr.",
    "Völklinger Str.",
    "Von-Brentano-Str.",
    "Von-Diergardt-Str.",
    "Von-Eichendorff-Str.",
    "Von-Ketteler-Str.",
    "Von-Knoeringen-Str.",
    "Von-Pettenkofer-Str.",
    "Von-Siebold-Str.",
    "Wacholderweg",
    "Waldstr.",
    "Walter-Flex-Str.",
    "Walter-Hempel-Str.",
    "Walter-Hochapfel-Str.",
    "Walter-Nernst-Str.",
    "Wannseestr.",
    "Warnowstr.",
    "Warthestr.",
    "Weddigenstr.",
    "Weichselstr.",
    "Weidenstr.",
    "Weidfeldstr.",
    "Weiherfeld",
    "Weiherstr.",
    "Weinhäuser Str.",
    "Weißdornweg",
    "Weißenseestr.",
    "Weizkamp",
    "Werftstr.",
    "Werkstättenstr.",
    "Werner-Heisenberg-Str.",
    "Werrastr.",
    "Weyerweg",
    "Widdauener Str.",
    "Wiebertshof",
    "Wiehbachtal",
    "Wiembachallee",
    "Wiesdorfer Platz",
    "Wiesenstr.",
    "Wilhelm-Busch-Str.",
    "Wilhelm-Hastrich-Str.",
    "Wilhelm-Leuschner-Str.",
    "Wilhelm-Liebknecht-Str.",
    "Wilhelmsgasse",
    "Wilhelmstr.",
    "Willi-Baumeister-Str.",
    "Willy-Brandt-Ring",
    "Winand-Rossi-Str.",
    "Windthorststr.",
    "Winkelweg",
    "Winterberg",
    "Wittenbergstr.",
    "Wolf-Vostell-Str.",
    "Wolkenburgstr.",
    "Wupperstr.",
    "Wuppertalstr.",
    "Wüstenhof",
    "Yitzhak-Rabin-Str.",
    "Zauberkuhle",
    "Zedernweg",
    "Zehlendorfer Str.",
    "Zehntenweg",
    "Zeisigweg",
    "Zeppelinstr.",
    "Zschopaustr.",
    "Zum Claashäuschen",
    "Zündhütchenweg",
    "Zur Alten Brauerei",
    "Zur alten Fabrik"
  ];
});

// node_modules/faker/lib/locales/de/address/building_number.js
var require_building_number3 = __commonJS((exports, module) => {
  module["exports"] = [
    "###",
    "##",
    "#",
    "##a",
    "##b",
    "##c"
  ];
});

// node_modules/faker/lib/locales/de/address/secondary_address.js
var require_secondary_address3 = __commonJS((exports, module) => {
  module["exports"] = [
    "Apt. ###",
    "Zimmer ###",
    "# OG"
  ];
});

// node_modules/faker/lib/locales/de/address/postcode.js
var require_postcode3 = __commonJS((exports, module) => {
  module["exports"] = [
    "#####",
    "#####"
  ];
});

// node_modules/faker/lib/locales/de/address/state.js
var require_state3 = __commonJS((exports, module) => {
  module["exports"] = [
    "Baden-Württemberg",
    "Bayern",
    "Berlin",
    "Brandenburg",
    "Bremen",
    "Hamburg",
    "Hessen",
    "Mecklenburg-Vorpommern",
    "Niedersachsen",
    "Nordrhein-Westfalen",
    "Rheinland-Pfalz",
    "Saarland",
    "Sachsen",
    "Sachsen-Anhalt",
    "Schleswig-Holstein",
    "Thüringen"
  ];
});

// node_modules/faker/lib/locales/de/address/state_abbr.js
var require_state_abbr2 = __commonJS((exports, module) => {
  module["exports"] = [
    "BW",
    "BY",
    "BE",
    "BB",
    "HB",
    "HH",
    "HE",
    "MV",
    "NI",
    "NW",
    "RP",
    "SL",
    "SN",
    "ST",
    "SH",
    "TH"
  ];
});

// node_modules/faker/lib/locales/de/address/city.js
var require_city3 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{city_prefix} #{Name.first_name}#{city_suffix}",
    "#{city_prefix} #{Name.first_name}",
    "#{Name.first_name}#{city_suffix}",
    "#{Name.last_name}#{city_suffix}"
  ];
});

// node_modules/faker/lib/locales/de/address/street_name.js
var require_street_name3 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_root}"
  ];
});

// node_modules/faker/lib/locales/de/address/street_address.js
var require_street_address3 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_name} #{building_number}"
  ];
});

// node_modules/faker/lib/locales/de/address/default_country.js
var require_default_country3 = __commonJS((exports, module) => {
  module["exports"] = [
    "Deutschland"
  ];
});

// node_modules/faker/lib/locales/de/address/index.js
var require_address4 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.city_prefix = require_city_prefix();
  address.city_suffix = require_city_suffix();
  address.country = require_country3();
  address.street_root = require_street_root();
  address.building_number = require_building_number3();
  address.secondary_address = require_secondary_address3();
  address.postcode = require_postcode3();
  address.state = require_state3();
  address.state_abbr = require_state_abbr2();
  address.city = require_city3();
  address.street_name = require_street_name3();
  address.street_address = require_street_address3();
  address.default_country = require_default_country3();
});

// node_modules/faker/lib/locales/de/company/suffix.js
var require_suffix5 = __commonJS((exports, module) => {
  module["exports"] = [
    "GmbH",
    "AG",
    "Gruppe",
    "KG",
    "GmbH & Co. KG",
    "UG",
    "OHG"
  ];
});

// node_modules/faker/lib/locales/de/company/legal_form.js
var require_legal_form = __commonJS((exports, module) => {
  module["exports"] = [
    "GmbH",
    "AG",
    "Gruppe",
    "KG",
    "GmbH & Co. KG",
    "UG",
    "OHG"
  ];
});

// node_modules/faker/lib/locales/de/company/name.js
var require_name7 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} und #{Name.last_name}"
  ];
});

// node_modules/faker/lib/locales/de/company/index.js
var require_company4 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.suffix = require_suffix5();
  company.legal_form = require_legal_form();
  company.name = require_name7();
});

// node_modules/faker/lib/locales/de/internet/free_email.js
var require_free_email3 = __commonJS((exports, module) => {
  module["exports"] = [
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ];
});

// node_modules/faker/lib/locales/de/internet/domain_suffix.js
var require_domain_suffix3 = __commonJS((exports, module) => {
  module["exports"] = [
    "com",
    "info",
    "name",
    "net",
    "org",
    "de",
    "ch"
  ];
});

// node_modules/faker/lib/locales/de/internet/index.js
var require_internet4 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.free_email = require_free_email3();
  internet.domain_suffix = require_domain_suffix3();
});

// node_modules/faker/lib/locales/de/lorem/words.js
var require_words2 = __commonJS((exports, module) => {
  module["exports"] = [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ];
});

// node_modules/faker/lib/locales/de/lorem/index.js
var require_lorem2 = __commonJS((exports, module) => {
  var lorem = {};
  module["exports"] = lorem;
  lorem.words = require_words2();
});

// node_modules/faker/lib/locales/de/name/first_name.js
var require_first_name = __commonJS((exports, module) => {
  module["exports"] = [
    "Aaron",
    "Abdul",
    "Abdullah",
    "Adam",
    "Adrian",
    "Adriano",
    "Ahmad",
    "Ahmed",
    "Ahmet",
    "Alan",
    "Albert",
    "Alessandro",
    "Alessio",
    "Alex",
    "Alexander",
    "Alfred",
    "Ali",
    "Amar",
    "Amir",
    "Amon",
    "Andre",
    "Andreas",
    "Andrew",
    "Angelo",
    "Ansgar",
    "Anthony",
    "Anton",
    "Antonio",
    "Arda",
    "Arian",
    "Armin",
    "Arne",
    "Arno",
    "Arthur",
    "Artur",
    "Arved",
    "Arvid",
    "Ayman",
    "Baran",
    "Baris",
    "Bastian",
    "Batuhan",
    "Bela",
    "Ben",
    "Benedikt",
    "Benjamin",
    "Bennet",
    "Bennett",
    "Benno",
    "Bent",
    "Berat",
    "Berkay",
    "Bernd",
    "Bilal",
    "Bjarne",
    "Björn",
    "Bo",
    "Boris",
    "Brandon",
    "Brian",
    "Bruno",
    "Bryan",
    "Burak",
    "Calvin",
    "Can",
    "Carl",
    "Carlo",
    "Carlos",
    "Caspar",
    "Cedric",
    "Cedrik",
    "Cem",
    "Charlie",
    "Chris",
    "Christian",
    "Christiano",
    "Christoph",
    "Christopher",
    "Claas",
    "Clemens",
    "Colin",
    "Collin",
    "Conner",
    "Connor",
    "Constantin",
    "Corvin",
    "Curt",
    "Damian",
    "Damien",
    "Daniel",
    "Danilo",
    "Danny",
    "Darian",
    "Dario",
    "Darius",
    "Darren",
    "David",
    "Davide",
    "Davin",
    "Dean",
    "Deniz",
    "Dennis",
    "Denny",
    "Devin",
    "Diego",
    "Dion",
    "Domenic",
    "Domenik",
    "Dominic",
    "Dominik",
    "Dorian",
    "Dustin",
    "Dylan",
    "Ecrin",
    "Eddi",
    "Eddy",
    "Edgar",
    "Edwin",
    "Efe",
    "Ege",
    "Elia",
    "Eliah",
    "Elias",
    "Elijah",
    "Emanuel",
    "Emil",
    "Emilian",
    "Emilio",
    "Emir",
    "Emirhan",
    "Emre",
    "Enes",
    "Enno",
    "Enrico",
    "Eren",
    "Eric",
    "Erik",
    "Etienne",
    "Fabian",
    "Fabien",
    "Fabio",
    "Fabrice",
    "Falk",
    "Felix",
    "Ferdinand",
    "Fiete",
    "Filip",
    "Finlay",
    "Finley",
    "Finn",
    "Finnley",
    "Florian",
    "Francesco",
    "Franz",
    "Frederic",
    "Frederick",
    "Frederik",
    "Friedrich",
    "Fritz",
    "Furkan",
    "Fynn",
    "Gabriel",
    "Georg",
    "Gerrit",
    "Gian",
    "Gianluca",
    "Gino",
    "Giuliano",
    "Giuseppe",
    "Gregor",
    "Gustav",
    "Hagen",
    "Hamza",
    "Hannes",
    "Hanno",
    "Hans",
    "Hasan",
    "Hassan",
    "Hauke",
    "Hendrik",
    "Hennes",
    "Henning",
    "Henri",
    "Henrick",
    "Henrik",
    "Henry",
    "Hugo",
    "Hussein",
    "Ian",
    "Ibrahim",
    "Ilias",
    "Ilja",
    "Ilyas",
    "Immanuel",
    "Ismael",
    "Ismail",
    "Ivan",
    "Iven",
    "Jack",
    "Jacob",
    "Jaden",
    "Jakob",
    "Jamal",
    "James",
    "Jamie",
    "Jan",
    "Janek",
    "Janis",
    "Janne",
    "Jannek",
    "Jannes",
    "Jannik",
    "Jannis",
    "Jano",
    "Janosch",
    "Jared",
    "Jari",
    "Jarne",
    "Jarno",
    "Jaron",
    "Jason",
    "Jasper",
    "Jay",
    "Jayden",
    "Jayson",
    "Jean",
    "Jens",
    "Jeremias",
    "Jeremie",
    "Jeremy",
    "Jermaine",
    "Jerome",
    "Jesper",
    "Jesse",
    "Jim",
    "Jimmy",
    "Joe",
    "Joel",
    "Joey",
    "Johann",
    "Johannes",
    "John",
    "Johnny",
    "Jon",
    "Jona",
    "Jonah",
    "Jonas",
    "Jonathan",
    "Jonte",
    "Joost",
    "Jordan",
    "Joris",
    "Joscha",
    "Joschua",
    "Josef",
    "Joseph",
    "Josh",
    "Joshua",
    "Josua",
    "Juan",
    "Julian",
    "Julien",
    "Julius",
    "Juri",
    "Justin",
    "Justus",
    "Kaan",
    "Kai",
    "Kalle",
    "Karim",
    "Karl",
    "Karlo",
    "Kay",
    "Keanu",
    "Kenan",
    "Kenny",
    "Keno",
    "Kerem",
    "Kerim",
    "Kevin",
    "Kian",
    "Kilian",
    "Kim",
    "Kimi",
    "Kjell",
    "Klaas",
    "Klemens",
    "Konrad",
    "Konstantin",
    "Koray",
    "Korbinian",
    "Kurt",
    "Lars",
    "Lasse",
    "Laurence",
    "Laurens",
    "Laurenz",
    "Laurin",
    "Lean",
    "Leander",
    "Leandro",
    "Leif",
    "Len",
    "Lenn",
    "Lennard",
    "Lennart",
    "Lennert",
    "Lennie",
    "Lennox",
    "Lenny",
    "Leo",
    "Leon",
    "Leonard",
    "Leonardo",
    "Leonhard",
    "Leonidas",
    "Leopold",
    "Leroy",
    "Levent",
    "Levi",
    "Levin",
    "Lewin",
    "Lewis",
    "Liam",
    "Lian",
    "Lias",
    "Lino",
    "Linus",
    "Lio",
    "Lion",
    "Lionel",
    "Logan",
    "Lorenz",
    "Lorenzo",
    "Loris",
    "Louis",
    "Luan",
    "Luc",
    "Luca",
    "Lucas",
    "Lucian",
    "Lucien",
    "Ludwig",
    "Luis",
    "Luiz",
    "Luk",
    "Luka",
    "Lukas",
    "Luke",
    "Lutz",
    "Maddox",
    "Mads",
    "Magnus",
    "Maik",
    "Maksim",
    "Malik",
    "Malte",
    "Manuel",
    "Marc",
    "Marcel",
    "Marco",
    "Marcus",
    "Marek",
    "Marian",
    "Mario",
    "Marius",
    "Mark",
    "Marko",
    "Markus",
    "Marlo",
    "Marlon",
    "Marten",
    "Martin",
    "Marvin",
    "Marwin",
    "Mateo",
    "Mathis",
    "Matis",
    "Mats",
    "Matteo",
    "Mattes",
    "Matthias",
    "Matthis",
    "Matti",
    "Mattis",
    "Maurice",
    "Max",
    "Maxim",
    "Maximilian",
    "Mehmet",
    "Meik",
    "Melvin",
    "Merlin",
    "Mert",
    "Michael",
    "Michel",
    "Mick",
    "Miguel",
    "Mika",
    "Mikail",
    "Mike",
    "Milan",
    "Milo",
    "Mio",
    "Mirac",
    "Mirco",
    "Mirko",
    "Mohamed",
    "Mohammad",
    "Mohammed",
    "Moritz",
    "Morten",
    "Muhammed",
    "Murat",
    "Mustafa",
    "Nathan",
    "Nathanael",
    "Nelson",
    "Neo",
    "Nevio",
    "Nick",
    "Niclas",
    "Nico",
    "Nicolai",
    "Nicolas",
    "Niels",
    "Nikita",
    "Niklas",
    "Niko",
    "Nikolai",
    "Nikolas",
    "Nils",
    "Nino",
    "Noah",
    "Noel",
    "Norman",
    "Odin",
    "Oke",
    "Ole",
    "Oliver",
    "Omar",
    "Onur",
    "Oscar",
    "Oskar",
    "Pascal",
    "Patrice",
    "Patrick",
    "Paul",
    "Peer",
    "Pepe",
    "Peter",
    "Phil",
    "Philip",
    "Philipp",
    "Pierre",
    "Piet",
    "Pit",
    "Pius",
    "Quentin",
    "Quirin",
    "Rafael",
    "Raik",
    "Ramon",
    "Raphael",
    "Rasmus",
    "Raul",
    "Rayan",
    "René",
    "Ricardo",
    "Riccardo",
    "Richard",
    "Rick",
    "Rico",
    "Robert",
    "Robin",
    "Rocco",
    "Roman",
    "Romeo",
    "Ron",
    "Ruben",
    "Ryan",
    "Said",
    "Salih",
    "Sam",
    "Sami",
    "Sammy",
    "Samuel",
    "Sandro",
    "Santino",
    "Sascha",
    "Sean",
    "Sebastian",
    "Selim",
    "Semih",
    "Shawn",
    "Silas",
    "Simeon",
    "Simon",
    "Sinan",
    "Sky",
    "Stefan",
    "Steffen",
    "Stephan",
    "Steve",
    "Steven",
    "Sven",
    "Sönke",
    "Sören",
    "Taha",
    "Tamino",
    "Tammo",
    "Tarik",
    "Tayler",
    "Taylor",
    "Teo",
    "Theo",
    "Theodor",
    "Thies",
    "Thilo",
    "Thomas",
    "Thorben",
    "Thore",
    "Thorge",
    "Tiago",
    "Til",
    "Till",
    "Tillmann",
    "Tim",
    "Timm",
    "Timo",
    "Timon",
    "Timothy",
    "Tino",
    "Titus",
    "Tizian",
    "Tjark",
    "Tobias",
    "Tom",
    "Tommy",
    "Toni",
    "Tony",
    "Torben",
    "Tore",
    "Tristan",
    "Tyler",
    "Tyron",
    "Umut",
    "Valentin",
    "Valentino",
    "Veit",
    "Victor",
    "Viktor",
    "Vin",
    "Vincent",
    "Vito",
    "Vitus",
    "Wilhelm",
    "Willi",
    "William",
    "Willy",
    "Xaver",
    "Yannic",
    "Yannick",
    "Yannik",
    "Yannis",
    "Yasin",
    "Youssef",
    "Yunus",
    "Yusuf",
    "Yven",
    "Yves",
    "Ömer",
    "Aaliyah",
    "Abby",
    "Abigail",
    "Ada",
    "Adelina",
    "Adriana",
    "Aileen",
    "Aimee",
    "Alana",
    "Alea",
    "Alena",
    "Alessa",
    "Alessia",
    "Alexa",
    "Alexandra",
    "Alexia",
    "Alexis",
    "Aleyna",
    "Alia",
    "Alica",
    "Alice",
    "Alicia",
    "Alina",
    "Alisa",
    "Alisha",
    "Alissa",
    "Aliya",
    "Aliyah",
    "Allegra",
    "Alma",
    "Alyssa",
    "Amalia",
    "Amanda",
    "Amelia",
    "Amelie",
    "Amina",
    "Amira",
    "Amy",
    "Ana",
    "Anabel",
    "Anastasia",
    "Andrea",
    "Angela",
    "Angelina",
    "Angelique",
    "Anja",
    "Ann",
    "Anna",
    "Annabel",
    "Annabell",
    "Annabelle",
    "Annalena",
    "Anne",
    "Anneke",
    "Annelie",
    "Annemarie",
    "Anni",
    "Annie",
    "Annika",
    "Anny",
    "Anouk",
    "Antonia",
    "Arda",
    "Ariana",
    "Ariane",
    "Arwen",
    "Ashley",
    "Asya",
    "Aurelia",
    "Aurora",
    "Ava",
    "Ayleen",
    "Aylin",
    "Ayse",
    "Azra",
    "Betty",
    "Bianca",
    "Bianka",
    "Caitlin",
    "Cara",
    "Carina",
    "Carla",
    "Carlotta",
    "Carmen",
    "Carolin",
    "Carolina",
    "Caroline",
    "Cassandra",
    "Catharina",
    "Catrin",
    "Cecile",
    "Cecilia",
    "Celia",
    "Celina",
    "Celine",
    "Ceyda",
    "Ceylin",
    "Chantal",
    "Charleen",
    "Charlotta",
    "Charlotte",
    "Chayenne",
    "Cheyenne",
    "Chiara",
    "Christin",
    "Christina",
    "Cindy",
    "Claire",
    "Clara",
    "Clarissa",
    "Colleen",
    "Collien",
    "Cora",
    "Corinna",
    "Cosima",
    "Dana",
    "Daniela",
    "Daria",
    "Darleen",
    "Defne",
    "Delia",
    "Denise",
    "Diana",
    "Dilara",
    "Dina",
    "Dorothea",
    "Ecrin",
    "Eda",
    "Eileen",
    "Ela",
    "Elaine",
    "Elanur",
    "Elea",
    "Elena",
    "Eleni",
    "Eleonora",
    "Eliana",
    "Elif",
    "Elina",
    "Elisa",
    "Elisabeth",
    "Ella",
    "Ellen",
    "Elli",
    "Elly",
    "Elsa",
    "Emelie",
    "Emely",
    "Emilia",
    "Emilie",
    "Emily",
    "Emma",
    "Emmely",
    "Emmi",
    "Emmy",
    "Enie",
    "Enna",
    "Enya",
    "Esma",
    "Estelle",
    "Esther",
    "Eva",
    "Evelin",
    "Evelina",
    "Eveline",
    "Evelyn",
    "Fabienne",
    "Fatima",
    "Fatma",
    "Felicia",
    "Felicitas",
    "Felina",
    "Femke",
    "Fenja",
    "Fine",
    "Finia",
    "Finja",
    "Finnja",
    "Fiona",
    "Flora",
    "Florentine",
    "Francesca",
    "Franka",
    "Franziska",
    "Frederike",
    "Freya",
    "Frida",
    "Frieda",
    "Friederike",
    "Giada",
    "Gina",
    "Giulia",
    "Giuliana",
    "Greta",
    "Hailey",
    "Hana",
    "Hanna",
    "Hannah",
    "Heidi",
    "Helen",
    "Helena",
    "Helene",
    "Helin",
    "Henriette",
    "Henrike",
    "Hermine",
    "Ida",
    "Ilayda",
    "Imke",
    "Ina",
    "Ines",
    "Inga",
    "Inka",
    "Irem",
    "Isa",
    "Isabel",
    "Isabell",
    "Isabella",
    "Isabelle",
    "Ivonne",
    "Jacqueline",
    "Jamie",
    "Jamila",
    "Jana",
    "Jane",
    "Janin",
    "Janina",
    "Janine",
    "Janna",
    "Janne",
    "Jara",
    "Jasmin",
    "Jasmina",
    "Jasmine",
    "Jella",
    "Jenna",
    "Jennifer",
    "Jenny",
    "Jessica",
    "Jessy",
    "Jette",
    "Jil",
    "Jill",
    "Joana",
    "Joanna",
    "Joelina",
    "Joeline",
    "Joelle",
    "Johanna",
    "Joleen",
    "Jolie",
    "Jolien",
    "Jolin",
    "Jolina",
    "Joline",
    "Jona",
    "Jonah",
    "Jonna",
    "Josefin",
    "Josefine",
    "Josephin",
    "Josephine",
    "Josie",
    "Josy",
    "Joy",
    "Joyce",
    "Judith",
    "Judy",
    "Jule",
    "Julia",
    "Juliana",
    "Juliane",
    "Julie",
    "Julienne",
    "Julika",
    "Julina",
    "Juna",
    "Justine",
    "Kaja",
    "Karina",
    "Karla",
    "Karlotta",
    "Karolina",
    "Karoline",
    "Kassandra",
    "Katarina",
    "Katharina",
    "Kathrin",
    "Katja",
    "Katrin",
    "Kaya",
    "Kayra",
    "Kiana",
    "Kiara",
    "Kim",
    "Kimberley",
    "Kimberly",
    "Kira",
    "Klara",
    "Korinna",
    "Kristin",
    "Kyra",
    "Laila",
    "Lana",
    "Lara",
    "Larissa",
    "Laura",
    "Laureen",
    "Lavinia",
    "Lea",
    "Leah",
    "Leana",
    "Leandra",
    "Leann",
    "Lee",
    "Leila",
    "Lena",
    "Lene",
    "Leni",
    "Lenia",
    "Lenja",
    "Lenya",
    "Leona",
    "Leoni",
    "Leonie",
    "Leonora",
    "Leticia",
    "Letizia",
    "Levke",
    "Leyla",
    "Lia",
    "Liah",
    "Liana",
    "Lili",
    "Lilia",
    "Lilian",
    "Liliana",
    "Lilith",
    "Lilli",
    "Lillian",
    "Lilly",
    "Lily",
    "Lina",
    "Linda",
    "Lindsay",
    "Line",
    "Linn",
    "Linnea",
    "Lisa",
    "Lisann",
    "Lisanne",
    "Liv",
    "Livia",
    "Liz",
    "Lola",
    "Loreen",
    "Lorena",
    "Lotta",
    "Lotte",
    "Louisa",
    "Louise",
    "Luana",
    "Luca",
    "Lucia",
    "Lucie",
    "Lucienne",
    "Lucy",
    "Luisa",
    "Luise",
    "Luka",
    "Luna",
    "Luzie",
    "Lya",
    "Lydia",
    "Lyn",
    "Lynn",
    "Madeleine",
    "Madita",
    "Madleen",
    "Madlen",
    "Magdalena",
    "Maike",
    "Mailin",
    "Maira",
    "Maja",
    "Malena",
    "Malia",
    "Malin",
    "Malina",
    "Mandy",
    "Mara",
    "Marah",
    "Mareike",
    "Maren",
    "Maria",
    "Mariam",
    "Marie",
    "Marieke",
    "Mariella",
    "Marika",
    "Marina",
    "Marisa",
    "Marissa",
    "Marit",
    "Marla",
    "Marleen",
    "Marlen",
    "Marlena",
    "Marlene",
    "Marta",
    "Martha",
    "Mary",
    "Maryam",
    "Mathilda",
    "Mathilde",
    "Matilda",
    "Maxi",
    "Maxima",
    "Maxine",
    "Maya",
    "Mayra",
    "Medina",
    "Medine",
    "Meike",
    "Melanie",
    "Melek",
    "Melike",
    "Melina",
    "Melinda",
    "Melis",
    "Melisa",
    "Melissa",
    "Merle",
    "Merve",
    "Meryem",
    "Mette",
    "Mia",
    "Michaela",
    "Michelle",
    "Mieke",
    "Mila",
    "Milana",
    "Milena",
    "Milla",
    "Mina",
    "Mira",
    "Miray",
    "Miriam",
    "Mirja",
    "Mona",
    "Monique",
    "Nadine",
    "Nadja",
    "Naemi",
    "Nancy",
    "Naomi",
    "Natalia",
    "Natalie",
    "Nathalie",
    "Neele",
    "Nela",
    "Nele",
    "Nelli",
    "Nelly",
    "Nia",
    "Nicole",
    "Nika",
    "Nike",
    "Nikita",
    "Nila",
    "Nina",
    "Nisa",
    "Noemi",
    "Nora",
    "Olivia",
    "Patricia",
    "Patrizia",
    "Paula",
    "Paulina",
    "Pauline",
    "Penelope",
    "Philine",
    "Phoebe",
    "Pia",
    "Rahel",
    "Rania",
    "Rebecca",
    "Rebekka",
    "Riana",
    "Rieke",
    "Rike",
    "Romina",
    "Romy",
    "Ronja",
    "Rosa",
    "Rosalie",
    "Ruby",
    "Sabrina",
    "Sahra",
    "Sally",
    "Salome",
    "Samantha",
    "Samia",
    "Samira",
    "Sandra",
    "Sandy",
    "Sanja",
    "Saphira",
    "Sara",
    "Sarah",
    "Saskia",
    "Selin",
    "Selina",
    "Selma",
    "Sena",
    "Sidney",
    "Sienna",
    "Silja",
    "Sina",
    "Sinja",
    "Smilla",
    "Sofia",
    "Sofie",
    "Sonja",
    "Sophia",
    "Sophie",
    "Soraya",
    "Stefanie",
    "Stella",
    "Stephanie",
    "Stina",
    "Sude",
    "Summer",
    "Susanne",
    "Svea",
    "Svenja",
    "Sydney",
    "Tabea",
    "Talea",
    "Talia",
    "Tamara",
    "Tamia",
    "Tamina",
    "Tanja",
    "Tara",
    "Tarja",
    "Teresa",
    "Tessa",
    "Thalea",
    "Thalia",
    "Thea",
    "Theresa",
    "Tia",
    "Tina",
    "Tomke",
    "Tuana",
    "Valentina",
    "Valeria",
    "Valerie",
    "Vanessa",
    "Vera",
    "Veronika",
    "Victoria",
    "Viktoria",
    "Viola",
    "Vivian",
    "Vivien",
    "Vivienne",
    "Wibke",
    "Wiebke",
    "Xenia",
    "Yara",
    "Yaren",
    "Yasmin",
    "Ylvi",
    "Ylvie",
    "Yvonne",
    "Zara",
    "Zehra",
    "Zeynep",
    "Zoe",
    "Zoey",
    "Zoé"
  ];
});

// node_modules/faker/lib/locales/de/name/last_name.js
var require_last_name = __commonJS((exports, module) => {
  module["exports"] = [
    "Abel",
    "Abicht",
    "Abraham",
    "Abramovic",
    "Abt",
    "Achilles",
    "Achkinadze",
    "Ackermann",
    "Adam",
    "Adams",
    "Ade",
    "Agostini",
    "Ahlke",
    "Ahrenberg",
    "Ahrens",
    "Aigner",
    "Albert",
    "Albrecht",
    "Alexa",
    "Alexander",
    "Alizadeh",
    "Allgeyer",
    "Amann",
    "Amberg",
    "Anding",
    "Anggreny",
    "Apitz",
    "Arendt",
    "Arens",
    "Arndt",
    "Aryee",
    "Aschenbroich",
    "Assmus",
    "Astafei",
    "Auer",
    "Axmann",
    "Baarck",
    "Bachmann",
    "Badane",
    "Bader",
    "Baganz",
    "Bahl",
    "Bak",
    "Balcer",
    "Balck",
    "Balkow",
    "Balnuweit",
    "Balzer",
    "Banse",
    "Barr",
    "Bartels",
    "Barth",
    "Barylla",
    "Baseda",
    "Battke",
    "Bauer",
    "Bauermeister",
    "Baumann",
    "Baumeister",
    "Bauschinger",
    "Bauschke",
    "Bayer",
    "Beavogui",
    "Beck",
    "Beckel",
    "Becker",
    "Beckmann",
    "Bedewitz",
    "Beele",
    "Beer",
    "Beggerow",
    "Beh",
    "Behr",
    "Behrenbruch",
    "Belz",
    "Bender",
    "Benecke",
    "Benner",
    "Benninger",
    "Benzing",
    "Berends",
    "Berger",
    "Berner",
    "Berning",
    "Bertenbreiter",
    "Best",
    "Bethke",
    "Betz",
    "Beushausen",
    "Beutelspacher",
    "Beyer",
    "Biba",
    "Bichler",
    "Bickel",
    "Biedermann",
    "Bieler",
    "Bielert",
    "Bienasch",
    "Bienias",
    "Biesenbach",
    "Bigdeli",
    "Birkemeyer",
    "Bittner",
    "Blank",
    "Blaschek",
    "Blassneck",
    "Bloch",
    "Blochwitz",
    "Blockhaus",
    "Blum",
    "Blume",
    "Bock",
    "Bode",
    "Bogdashin",
    "Bogenrieder",
    "Bohge",
    "Bolm",
    "Borgschulze",
    "Bork",
    "Bormann",
    "Bornscheuer",
    "Borrmann",
    "Borsch",
    "Boruschewski",
    "Bos",
    "Bosler",
    "Bourrouag",
    "Bouschen",
    "Boxhammer",
    "Boyde",
    "Bozsik",
    "Brand",
    "Brandenburg",
    "Brandis",
    "Brandt",
    "Brauer",
    "Braun",
    "Brehmer",
    "Breitenstein",
    "Bremer",
    "Bremser",
    "Brenner",
    "Brettschneider",
    "Breu",
    "Breuer",
    "Briesenick",
    "Bringmann",
    "Brinkmann",
    "Brix",
    "Broening",
    "Brosch",
    "Bruckmann",
    "Bruder",
    "Bruhns",
    "Brunner",
    "Bruns",
    "Bräutigam",
    "Brömme",
    "Brüggmann",
    "Buchholz",
    "Buchrucker",
    "Buder",
    "Bultmann",
    "Bunjes",
    "Burger",
    "Burghagen",
    "Burkhard",
    "Burkhardt",
    "Burmeister",
    "Busch",
    "Buschbaum",
    "Busemann",
    "Buss",
    "Busse",
    "Bussmann",
    "Byrd",
    "Bäcker",
    "Böhm",
    "Bönisch",
    "Börgeling",
    "Börner",
    "Böttner",
    "Büchele",
    "Bühler",
    "Büker",
    "Büngener",
    "Bürger",
    "Bürklein",
    "Büscher",
    "Büttner",
    "Camara",
    "Carlowitz",
    "Carlsohn",
    "Caspari",
    "Caspers",
    "Chapron",
    "Christ",
    "Cierpinski",
    "Clarius",
    "Cleem",
    "Cleve",
    "Co",
    "Conrad",
    "Cordes",
    "Cornelsen",
    "Cors",
    "Cotthardt",
    "Crews",
    "Cronjäger",
    "Crosskofp",
    "Da",
    "Dahm",
    "Dahmen",
    "Daimer",
    "Damaske",
    "Danneberg",
    "Danner",
    "Daub",
    "Daubner",
    "Daudrich",
    "Dauer",
    "Daum",
    "Dauth",
    "Dautzenberg",
    "De",
    "Decker",
    "Deckert",
    "Deerberg",
    "Dehmel",
    "Deja",
    "Delonge",
    "Demut",
    "Dengler",
    "Denner",
    "Denzinger",
    "Derr",
    "Dertmann",
    "Dethloff",
    "Deuschle",
    "Dieckmann",
    "Diedrich",
    "Diekmann",
    "Dienel",
    "Dies",
    "Dietrich",
    "Dietz",
    "Dietzsch",
    "Diezel",
    "Dilla",
    "Dingelstedt",
    "Dippl",
    "Dittmann",
    "Dittmar",
    "Dittmer",
    "Dix",
    "Dobbrunz",
    "Dobler",
    "Dohring",
    "Dolch",
    "Dold",
    "Dombrowski",
    "Donie",
    "Doskoczynski",
    "Dragu",
    "Drechsler",
    "Drees",
    "Dreher",
    "Dreier",
    "Dreissigacker",
    "Dressler",
    "Drews",
    "Duma",
    "Dutkiewicz",
    "Dyett",
    "Dylus",
    "Dächert",
    "Döbel",
    "Döring",
    "Dörner",
    "Dörre",
    "Dück",
    "Eberhard",
    "Eberhardt",
    "Ecker",
    "Eckhardt",
    "Edorh",
    "Effler",
    "Eggenmueller",
    "Ehm",
    "Ehmann",
    "Ehrig",
    "Eich",
    "Eichmann",
    "Eifert",
    "Einert",
    "Eisenlauer",
    "Ekpo",
    "Elbe",
    "Eleyth",
    "Elss",
    "Emert",
    "Emmelmann",
    "Ender",
    "Engel",
    "Engelen",
    "Engelmann",
    "Eplinius",
    "Erdmann",
    "Erhardt",
    "Erlei",
    "Erm",
    "Ernst",
    "Ertl",
    "Erwes",
    "Esenwein",
    "Esser",
    "Evers",
    "Everts",
    "Ewald",
    "Fahner",
    "Faller",
    "Falter",
    "Farber",
    "Fassbender",
    "Faulhaber",
    "Fehrig",
    "Feld",
    "Felke",
    "Feller",
    "Fenner",
    "Fenske",
    "Feuerbach",
    "Fietz",
    "Figl",
    "Figura",
    "Filipowski",
    "Filsinger",
    "Fincke",
    "Fink",
    "Finke",
    "Fischer",
    "Fitschen",
    "Fleischer",
    "Fleischmann",
    "Floder",
    "Florczak",
    "Flore",
    "Flottmann",
    "Forkel",
    "Forst",
    "Frahmeke",
    "Frank",
    "Franke",
    "Franta",
    "Frantz",
    "Franz",
    "Franzis",
    "Franzmann",
    "Frauen",
    "Frauendorf",
    "Freigang",
    "Freimann",
    "Freimuth",
    "Freisen",
    "Frenzel",
    "Frey",
    "Fricke",
    "Fried",
    "Friedek",
    "Friedenberg",
    "Friedmann",
    "Friedrich",
    "Friess",
    "Frisch",
    "Frohn",
    "Frosch",
    "Fuchs",
    "Fuhlbrügge",
    "Fusenig",
    "Fust",
    "Förster",
    "Gaba",
    "Gabius",
    "Gabler",
    "Gadschiew",
    "Gakstädter",
    "Galander",
    "Gamlin",
    "Gamper",
    "Gangnus",
    "Ganzmann",
    "Garatva",
    "Gast",
    "Gastel",
    "Gatzka",
    "Gauder",
    "Gebhardt",
    "Geese",
    "Gehre",
    "Gehrig",
    "Gehring",
    "Gehrke",
    "Geiger",
    "Geisler",
    "Geissler",
    "Gelling",
    "Gens",
    "Gerbennow",
    "Gerdel",
    "Gerhardt",
    "Gerschler",
    "Gerson",
    "Gesell",
    "Geyer",
    "Ghirmai",
    "Ghosh",
    "Giehl",
    "Gierisch",
    "Giesa",
    "Giesche",
    "Gilde",
    "Glatting",
    "Goebel",
    "Goedicke",
    "Goldbeck",
    "Goldfuss",
    "Goldkamp",
    "Goldkühle",
    "Goller",
    "Golling",
    "Gollnow",
    "Golomski",
    "Gombert",
    "Gotthardt",
    "Gottschalk",
    "Gotz",
    "Goy",
    "Gradzki",
    "Graf",
    "Grams",
    "Grasse",
    "Gratzky",
    "Grau",
    "Greb",
    "Green",
    "Greger",
    "Greithanner",
    "Greschner",
    "Griem",
    "Griese",
    "Grimm",
    "Gromisch",
    "Gross",
    "Grosser",
    "Grossheim",
    "Grosskopf",
    "Grothaus",
    "Grothkopp",
    "Grotke",
    "Grube",
    "Gruber",
    "Grundmann",
    "Gruning",
    "Gruszecki",
    "Gröss",
    "Grötzinger",
    "Grün",
    "Grüner",
    "Gummelt",
    "Gunkel",
    "Gunther",
    "Gutjahr",
    "Gutowicz",
    "Gutschank",
    "Göbel",
    "Göckeritz",
    "Göhler",
    "Görlich",
    "Görmer",
    "Götz",
    "Götzelmann",
    "Güldemeister",
    "Günther",
    "Günz",
    "Gürbig",
    "Haack",
    "Haaf",
    "Habel",
    "Hache",
    "Hackbusch",
    "Hackelbusch",
    "Hadfield",
    "Hadwich",
    "Haferkamp",
    "Hahn",
    "Hajek",
    "Hallmann",
    "Hamann",
    "Hanenberger",
    "Hannecker",
    "Hanniske",
    "Hansen",
    "Hardy",
    "Hargasser",
    "Harms",
    "Harnapp",
    "Harter",
    "Harting",
    "Hartlieb",
    "Hartmann",
    "Hartwig",
    "Hartz",
    "Haschke",
    "Hasler",
    "Hasse",
    "Hassfeld",
    "Haug",
    "Hauke",
    "Haupt",
    "Haverney",
    "Heberstreit",
    "Hechler",
    "Hecht",
    "Heck",
    "Hedermann",
    "Hehl",
    "Heidelmann",
    "Heidler",
    "Heinemann",
    "Heinig",
    "Heinke",
    "Heinrich",
    "Heinze",
    "Heiser",
    "Heist",
    "Hellmann",
    "Helm",
    "Helmke",
    "Helpling",
    "Hengmith",
    "Henkel",
    "Hennes",
    "Henry",
    "Hense",
    "Hensel",
    "Hentel",
    "Hentschel",
    "Hentschke",
    "Hepperle",
    "Herberger",
    "Herbrand",
    "Hering",
    "Hermann",
    "Hermecke",
    "Herms",
    "Herold",
    "Herrmann",
    "Herschmann",
    "Hertel",
    "Herweg",
    "Herwig",
    "Herzenberg",
    "Hess",
    "Hesse",
    "Hessek",
    "Hessler",
    "Hetzler",
    "Heuck",
    "Heydemüller",
    "Hiebl",
    "Hildebrand",
    "Hildenbrand",
    "Hilgendorf",
    "Hillard",
    "Hiller",
    "Hingsen",
    "Hingst",
    "Hinrichs",
    "Hirsch",
    "Hirschberg",
    "Hirt",
    "Hodea",
    "Hoffman",
    "Hoffmann",
    "Hofmann",
    "Hohenberger",
    "Hohl",
    "Hohn",
    "Hohnheiser",
    "Hold",
    "Holdt",
    "Holinski",
    "Holl",
    "Holtfreter",
    "Holz",
    "Holzdeppe",
    "Holzner",
    "Hommel",
    "Honz",
    "Hooss",
    "Hoppe",
    "Horak",
    "Horn",
    "Horna",
    "Hornung",
    "Hort",
    "Howard",
    "Huber",
    "Huckestein",
    "Hudak",
    "Huebel",
    "Hugo",
    "Huhn",
    "Hujo",
    "Huke",
    "Huls",
    "Humbert",
    "Huneke",
    "Huth",
    "Häber",
    "Häfner",
    "Höcke",
    "Höft",
    "Höhne",
    "Hönig",
    "Hördt",
    "Hübenbecker",
    "Hübl",
    "Hübner",
    "Hügel",
    "Hüttcher",
    "Hütter",
    "Ibe",
    "Ihly",
    "Illing",
    "Isak",
    "Isekenmeier",
    "Itt",
    "Jacob",
    "Jacobs",
    "Jagusch",
    "Jahn",
    "Jahnke",
    "Jakobs",
    "Jakubczyk",
    "Jambor",
    "Jamrozy",
    "Jander",
    "Janich",
    "Janke",
    "Jansen",
    "Jarets",
    "Jaros",
    "Jasinski",
    "Jasper",
    "Jegorov",
    "Jellinghaus",
    "Jeorga",
    "Jerschabek",
    "Jess",
    "John",
    "Jonas",
    "Jossa",
    "Jucken",
    "Jung",
    "Jungbluth",
    "Jungton",
    "Just",
    "Jürgens",
    "Kaczmarek",
    "Kaesmacher",
    "Kahl",
    "Kahlert",
    "Kahles",
    "Kahlmeyer",
    "Kaiser",
    "Kalinowski",
    "Kallabis",
    "Kallensee",
    "Kampf",
    "Kampschulte",
    "Kappe",
    "Kappler",
    "Karhoff",
    "Karrass",
    "Karst",
    "Karsten",
    "Karus",
    "Kass",
    "Kasten",
    "Kastner",
    "Katzinski",
    "Kaufmann",
    "Kaul",
    "Kausemann",
    "Kawohl",
    "Kazmarek",
    "Kedzierski",
    "Keil",
    "Keiner",
    "Keller",
    "Kelm",
    "Kempe",
    "Kemper",
    "Kempter",
    "Kerl",
    "Kern",
    "Kesselring",
    "Kesselschläger",
    "Kette",
    "Kettenis",
    "Keutel",
    "Kick",
    "Kiessling",
    "Kinadeter",
    "Kinzel",
    "Kinzy",
    "Kirch",
    "Kirst",
    "Kisabaka",
    "Klaas",
    "Klabuhn",
    "Klapper",
    "Klauder",
    "Klaus",
    "Kleeberg",
    "Kleiber",
    "Klein",
    "Kleinert",
    "Kleininger",
    "Kleinmann",
    "Kleinsteuber",
    "Kleiss",
    "Klemme",
    "Klimczak",
    "Klinger",
    "Klink",
    "Klopsch",
    "Klose",
    "Kloss",
    "Kluge",
    "Kluwe",
    "Knabe",
    "Kneifel",
    "Knetsch",
    "Knies",
    "Knippel",
    "Knobel",
    "Knoblich",
    "Knoll",
    "Knorr",
    "Knorscheidt",
    "Knut",
    "Kobs",
    "Koch",
    "Kochan",
    "Kock",
    "Koczulla",
    "Koderisch",
    "Koehl",
    "Koehler",
    "Koenig",
    "Koester",
    "Kofferschlager",
    "Koha",
    "Kohle",
    "Kohlmann",
    "Kohnle",
    "Kohrt",
    "Koj",
    "Kolb",
    "Koleiski",
    "Kolokas",
    "Komoll",
    "Konieczny",
    "Konig",
    "Konow",
    "Konya",
    "Koob",
    "Kopf",
    "Kosenkow",
    "Koster",
    "Koszewski",
    "Koubaa",
    "Kovacs",
    "Kowalick",
    "Kowalinski",
    "Kozakiewicz",
    "Krabbe",
    "Kraft",
    "Kral",
    "Kramer",
    "Krauel",
    "Kraus",
    "Krause",
    "Krauspe",
    "Kreb",
    "Krebs",
    "Kreissig",
    "Kresse",
    "Kreutz",
    "Krieger",
    "Krippner",
    "Krodinger",
    "Krohn",
    "Krol",
    "Kron",
    "Krueger",
    "Krug",
    "Kruger",
    "Krull",
    "Kruschinski",
    "Krämer",
    "Kröckert",
    "Kröger",
    "Krüger",
    "Kubera",
    "Kufahl",
    "Kuhlee",
    "Kuhnen",
    "Kulimann",
    "Kulma",
    "Kumbernuss",
    "Kummle",
    "Kunz",
    "Kupfer",
    "Kupprion",
    "Kuprion",
    "Kurnicki",
    "Kurrat",
    "Kurschilgen",
    "Kuschewitz",
    "Kuschmann",
    "Kuske",
    "Kustermann",
    "Kutscherauer",
    "Kutzner",
    "Kwadwo",
    "Kähler",
    "Käther",
    "Köhler",
    "Köhrbrück",
    "Köhre",
    "Kölotzei",
    "König",
    "Köpernick",
    "Köseoglu",
    "Kúhn",
    "Kúhnert",
    "Kühn",
    "Kühnel",
    "Kühnemund",
    "Kühnert",
    "Kühnke",
    "Küsters",
    "Küter",
    "Laack",
    "Lack",
    "Ladewig",
    "Lakomy",
    "Lammert",
    "Lamos",
    "Landmann",
    "Lang",
    "Lange",
    "Langfeld",
    "Langhirt",
    "Lanig",
    "Lauckner",
    "Lauinger",
    "Laurén",
    "Lausecker",
    "Laux",
    "Laws",
    "Lax",
    "Leberer",
    "Lehmann",
    "Lehner",
    "Leibold",
    "Leide",
    "Leimbach",
    "Leipold",
    "Leist",
    "Leiter",
    "Leiteritz",
    "Leitheim",
    "Leiwesmeier",
    "Lenfers",
    "Lenk",
    "Lenz",
    "Lenzen",
    "Leo",
    "Lepthin",
    "Lesch",
    "Leschnik",
    "Letzelter",
    "Lewin",
    "Lewke",
    "Leyckes",
    "Lg",
    "Lichtenfeld",
    "Lichtenhagen",
    "Lichtl",
    "Liebach",
    "Liebe",
    "Liebich",
    "Liebold",
    "Lieder",
    "Lienshöft",
    "Linden",
    "Lindenberg",
    "Lindenmayer",
    "Lindner",
    "Linke",
    "Linnenbaum",
    "Lippe",
    "Lipske",
    "Lipus",
    "Lischka",
    "Lobinger",
    "Logsch",
    "Lohmann",
    "Lohre",
    "Lohse",
    "Lokar",
    "Loogen",
    "Lorenz",
    "Losch",
    "Loska",
    "Lott",
    "Loy",
    "Lubina",
    "Ludolf",
    "Lufft",
    "Lukoschek",
    "Lutje",
    "Lutz",
    "Löser",
    "Löwa",
    "Lübke",
    "Maak",
    "Maczey",
    "Madetzky",
    "Madubuko",
    "Mai",
    "Maier",
    "Maisch",
    "Malek",
    "Malkus",
    "Mallmann",
    "Malucha",
    "Manns",
    "Manz",
    "Marahrens",
    "Marchewski",
    "Margis",
    "Markowski",
    "Marl",
    "Marner",
    "Marquart",
    "Marschek",
    "Martel",
    "Marten",
    "Martin",
    "Marx",
    "Marxen",
    "Mathes",
    "Mathies",
    "Mathiszik",
    "Matschke",
    "Mattern",
    "Matthes",
    "Matula",
    "Mau",
    "Maurer",
    "Mauroff",
    "May",
    "Maybach",
    "Mayer",
    "Mebold",
    "Mehl",
    "Mehlhorn",
    "Mehlorn",
    "Meier",
    "Meisch",
    "Meissner",
    "Meloni",
    "Melzer",
    "Menga",
    "Menne",
    "Mensah",
    "Mensing",
    "Merkel",
    "Merseburg",
    "Mertens",
    "Mesloh",
    "Metzger",
    "Metzner",
    "Mewes",
    "Meyer",
    "Michallek",
    "Michel",
    "Mielke",
    "Mikitenko",
    "Milde",
    "Minah",
    "Mintzlaff",
    "Mockenhaupt",
    "Moede",
    "Moedl",
    "Moeller",
    "Moguenara",
    "Mohr",
    "Mohrhard",
    "Molitor",
    "Moll",
    "Moller",
    "Molzan",
    "Montag",
    "Moormann",
    "Mordhorst",
    "Morgenstern",
    "Morhelfer",
    "Moritz",
    "Moser",
    "Motchebon",
    "Motzenbbäcker",
    "Mrugalla",
    "Muckenthaler",
    "Mues",
    "Muller",
    "Mulrain",
    "Mächtig",
    "Mäder",
    "Möcks",
    "Mögenburg",
    "Möhsner",
    "Möldner",
    "Möllenbeck",
    "Möller",
    "Möllinger",
    "Mörsch",
    "Mühleis",
    "Müller",
    "Münch",
    "Nabein",
    "Nabow",
    "Nagel",
    "Nannen",
    "Nastvogel",
    "Nau",
    "Naubert",
    "Naumann",
    "Ne",
    "Neimke",
    "Nerius",
    "Neubauer",
    "Neubert",
    "Neuendorf",
    "Neumair",
    "Neumann",
    "Neupert",
    "Neurohr",
    "Neuschwander",
    "Newton",
    "Ney",
    "Nicolay",
    "Niedermeier",
    "Nieklauson",
    "Niklaus",
    "Nitzsche",
    "Noack",
    "Nodler",
    "Nolte",
    "Normann",
    "Norris",
    "Northoff",
    "Nowak",
    "Nussbeck",
    "Nwachukwu",
    "Nytra",
    "Nöh",
    "Oberem",
    "Obergföll",
    "Obermaier",
    "Ochs",
    "Oeser",
    "Olbrich",
    "Onnen",
    "Ophey",
    "Oppong",
    "Orth",
    "Orthmann",
    "Oschkenat",
    "Osei",
    "Osenberg",
    "Ostendarp",
    "Ostwald",
    "Otte",
    "Otto",
    "Paesler",
    "Pajonk",
    "Pallentin",
    "Panzig",
    "Paschke",
    "Patzwahl",
    "Paukner",
    "Peselman",
    "Peter",
    "Peters",
    "Petzold",
    "Pfeiffer",
    "Pfennig",
    "Pfersich",
    "Pfingsten",
    "Pflieger",
    "Pflügner",
    "Philipp",
    "Pichlmaier",
    "Piesker",
    "Pietsch",
    "Pingpank",
    "Pinnock",
    "Pippig",
    "Pitschugin",
    "Plank",
    "Plass",
    "Platzer",
    "Plauk",
    "Plautz",
    "Pletsch",
    "Plotzitzka",
    "Poehn",
    "Poeschl",
    "Pogorzelski",
    "Pohl",
    "Pohland",
    "Pohle",
    "Polifka",
    "Polizzi",
    "Pollmächer",
    "Pomp",
    "Ponitzsch",
    "Porsche",
    "Porth",
    "Poschmann",
    "Poser",
    "Pottel",
    "Prah",
    "Prange",
    "Prediger",
    "Pressler",
    "Preuk",
    "Preuss",
    "Prey",
    "Priemer",
    "Proske",
    "Pusch",
    "Pöche",
    "Pöge",
    "Raabe",
    "Rabenstein",
    "Rach",
    "Radtke",
    "Rahn",
    "Ranftl",
    "Rangen",
    "Ranz",
    "Rapp",
    "Rath",
    "Rau",
    "Raubuch",
    "Raukuc",
    "Rautenkranz",
    "Rehwagen",
    "Reiber",
    "Reichardt",
    "Reichel",
    "Reichling",
    "Reif",
    "Reifenrath",
    "Reimann",
    "Reinberg",
    "Reinelt",
    "Reinhardt",
    "Reinke",
    "Reitze",
    "Renk",
    "Rentz",
    "Renz",
    "Reppin",
    "Restle",
    "Restorff",
    "Retzke",
    "Reuber",
    "Reumann",
    "Reus",
    "Reuss",
    "Reusse",
    "Rheder",
    "Rhoden",
    "Richards",
    "Richter",
    "Riedel",
    "Riediger",
    "Rieger",
    "Riekmann",
    "Riepl",
    "Riermeier",
    "Riester",
    "Riethmüller",
    "Rietmüller",
    "Rietscher",
    "Ringel",
    "Ringer",
    "Rink",
    "Ripken",
    "Ritosek",
    "Ritschel",
    "Ritter",
    "Rittweg",
    "Ritz",
    "Roba",
    "Rockmeier",
    "Rodehau",
    "Rodowski",
    "Roecker",
    "Roggatz",
    "Rohländer",
    "Rohrer",
    "Rokossa",
    "Roleder",
    "Roloff",
    "Roos",
    "Rosbach",
    "Roschinsky",
    "Rose",
    "Rosenauer",
    "Rosenbauer",
    "Rosenthal",
    "Rosksch",
    "Rossberg",
    "Rossler",
    "Roth",
    "Rother",
    "Ruch",
    "Ruckdeschel",
    "Rumpf",
    "Rupprecht",
    "Ruth",
    "Ryjikh",
    "Ryzih",
    "Rädler",
    "Räntsch",
    "Rödiger",
    "Röse",
    "Röttger",
    "Rücker",
    "Rüdiger",
    "Rüter",
    "Sachse",
    "Sack",
    "Saflanis",
    "Sagafe",
    "Sagonas",
    "Sahner",
    "Saile",
    "Sailer",
    "Salow",
    "Salzer",
    "Salzmann",
    "Sammert",
    "Sander",
    "Sarvari",
    "Sattelmaier",
    "Sauer",
    "Sauerland",
    "Saumweber",
    "Savoia",
    "Scc",
    "Schacht",
    "Schaefer",
    "Schaffarzik",
    "Schahbasian",
    "Scharf",
    "Schedler",
    "Scheer",
    "Schelk",
    "Schellenbeck",
    "Schembera",
    "Schenk",
    "Scherbarth",
    "Scherer",
    "Schersing",
    "Scherz",
    "Scheurer",
    "Scheuring",
    "Scheytt",
    "Schielke",
    "Schieskow",
    "Schildhauer",
    "Schilling",
    "Schima",
    "Schimmer",
    "Schindzielorz",
    "Schirmer",
    "Schirrmeister",
    "Schlachter",
    "Schlangen",
    "Schlawitz",
    "Schlechtweg",
    "Schley",
    "Schlicht",
    "Schlitzer",
    "Schmalzle",
    "Schmid",
    "Schmidt",
    "Schmidtchen",
    "Schmitt",
    "Schmitz",
    "Schmuhl",
    "Schneider",
    "Schnelting",
    "Schnieder",
    "Schniedermeier",
    "Schnürer",
    "Schoberg",
    "Scholz",
    "Schonberg",
    "Schondelmaier",
    "Schorr",
    "Schott",
    "Schottmann",
    "Schouren",
    "Schrader",
    "Schramm",
    "Schreck",
    "Schreiber",
    "Schreiner",
    "Schreiter",
    "Schroder",
    "Schröder",
    "Schuermann",
    "Schuff",
    "Schuhaj",
    "Schuldt",
    "Schult",
    "Schulte",
    "Schultz",
    "Schultze",
    "Schulz",
    "Schulze",
    "Schumacher",
    "Schumann",
    "Schupp",
    "Schuri",
    "Schuster",
    "Schwab",
    "Schwalm",
    "Schwanbeck",
    "Schwandke",
    "Schwanitz",
    "Schwarthoff",
    "Schwartz",
    "Schwarz",
    "Schwarzer",
    "Schwarzkopf",
    "Schwarzmeier",
    "Schwatlo",
    "Schweisfurth",
    "Schwennen",
    "Schwerdtner",
    "Schwidde",
    "Schwirkschlies",
    "Schwuchow",
    "Schäfer",
    "Schäffel",
    "Schäffer",
    "Schäning",
    "Schöckel",
    "Schönball",
    "Schönbeck",
    "Schönberg",
    "Schönebeck",
    "Schönenberger",
    "Schönfeld",
    "Schönherr",
    "Schönlebe",
    "Schötz",
    "Schüler",
    "Schüppel",
    "Schütz",
    "Schütze",
    "Seeger",
    "Seelig",
    "Sehls",
    "Seibold",
    "Seidel",
    "Seiders",
    "Seigel",
    "Seiler",
    "Seitz",
    "Semisch",
    "Senkel",
    "Sewald",
    "Siebel",
    "Siebert",
    "Siegling",
    "Sielemann",
    "Siemon",
    "Siener",
    "Sievers",
    "Siewert",
    "Sihler",
    "Sillah",
    "Simon",
    "Sinnhuber",
    "Sischka",
    "Skibicki",
    "Sladek",
    "Slotta",
    "Smieja",
    "Soboll",
    "Sokolowski",
    "Soller",
    "Sollner",
    "Sommer",
    "Somssich",
    "Sonn",
    "Sonnabend",
    "Spahn",
    "Spank",
    "Spelmeyer",
    "Spiegelburg",
    "Spielvogel",
    "Spinner",
    "Spitzmüller",
    "Splinter",
    "Sporrer",
    "Sprenger",
    "Spöttel",
    "Stahl",
    "Stang",
    "Stanger",
    "Stauss",
    "Steding",
    "Steffen",
    "Steffny",
    "Steidl",
    "Steigauf",
    "Stein",
    "Steinecke",
    "Steinert",
    "Steinkamp",
    "Steinmetz",
    "Stelkens",
    "Stengel",
    "Stengl",
    "Stenzel",
    "Stepanov",
    "Stephan",
    "Stern",
    "Steuk",
    "Stief",
    "Stifel",
    "Stoll",
    "Stolle",
    "Stolz",
    "Storl",
    "Storp",
    "Stoutjesdijk",
    "Stratmann",
    "Straub",
    "Strausa",
    "Streck",
    "Streese",
    "Strege",
    "Streit",
    "Streller",
    "Strieder",
    "Striezel",
    "Strogies",
    "Strohschank",
    "Strunz",
    "Strutz",
    "Stube",
    "Stöckert",
    "Stöppler",
    "Stöwer",
    "Stürmer",
    "Suffa",
    "Sujew",
    "Sussmann",
    "Suthe",
    "Sutschet",
    "Swillims",
    "Szendrei",
    "Sören",
    "Sürth",
    "Tafelmeier",
    "Tang",
    "Tasche",
    "Taufratshofer",
    "Tegethof",
    "Teichmann",
    "Tepper",
    "Terheiden",
    "Terlecki",
    "Teufel",
    "Theele",
    "Thieke",
    "Thimm",
    "Thiomas",
    "Thomas",
    "Thriene",
    "Thränhardt",
    "Thust",
    "Thyssen",
    "Thöne",
    "Tidow",
    "Tiedtke",
    "Tietze",
    "Tilgner",
    "Tillack",
    "Timmermann",
    "Tischler",
    "Tischmann",
    "Tittman",
    "Tivontschik",
    "Tonat",
    "Tonn",
    "Trampeli",
    "Trauth",
    "Trautmann",
    "Travan",
    "Treff",
    "Tremmel",
    "Tress",
    "Tsamonikian",
    "Tschiers",
    "Tschirch",
    "Tuch",
    "Tucholke",
    "Tudow",
    "Tuschmo",
    "Tächl",
    "Többen",
    "Töpfer",
    "Uhlemann",
    "Uhlig",
    "Uhrig",
    "Uibel",
    "Uliczka",
    "Ullmann",
    "Ullrich",
    "Umbach",
    "Umlauft",
    "Umminger",
    "Unger",
    "Unterpaintner",
    "Urban",
    "Urbaniak",
    "Urbansky",
    "Urhig",
    "Vahlensieck",
    "Van",
    "Vangermain",
    "Vater",
    "Venghaus",
    "Verniest",
    "Verzi",
    "Vey",
    "Viellehner",
    "Vieweg",
    "Voelkel",
    "Vogel",
    "Vogelgsang",
    "Vogt",
    "Voigt",
    "Vokuhl",
    "Volk",
    "Volker",
    "Volkmann",
    "Von",
    "Vona",
    "Vontein",
    "Wachenbrunner",
    "Wachtel",
    "Wagner",
    "Waibel",
    "Wakan",
    "Waldmann",
    "Wallner",
    "Wallstab",
    "Walter",
    "Walther",
    "Walton",
    "Walz",
    "Wanner",
    "Wartenberg",
    "Waschbüsch",
    "Wassilew",
    "Wassiluk",
    "Weber",
    "Wehrsen",
    "Weidlich",
    "Weidner",
    "Weigel",
    "Weight",
    "Weiler",
    "Weimer",
    "Weis",
    "Weiss",
    "Weller",
    "Welsch",
    "Welz",
    "Welzel",
    "Weniger",
    "Wenk",
    "Werle",
    "Werner",
    "Werrmann",
    "Wessel",
    "Wessinghage",
    "Weyel",
    "Wezel",
    "Wichmann",
    "Wickert",
    "Wiebe",
    "Wiechmann",
    "Wiegelmann",
    "Wierig",
    "Wiese",
    "Wieser",
    "Wilhelm",
    "Wilky",
    "Will",
    "Willwacher",
    "Wilts",
    "Wimmer",
    "Winkelmann",
    "Winkler",
    "Winter",
    "Wischek",
    "Wischer",
    "Wissing",
    "Wittich",
    "Wittl",
    "Wolf",
    "Wolfarth",
    "Wolff",
    "Wollenberg",
    "Wollmann",
    "Woytkowska",
    "Wujak",
    "Wurm",
    "Wyludda",
    "Wölpert",
    "Wöschler",
    "Wühn",
    "Wünsche",
    "Zach",
    "Zaczkiewicz",
    "Zahn",
    "Zaituc",
    "Zandt",
    "Zanner",
    "Zapletal",
    "Zauber",
    "Zeidler",
    "Zekl",
    "Zender",
    "Zeuch",
    "Zeyen",
    "Zeyhle",
    "Ziegler",
    "Zimanyi",
    "Zimmer",
    "Zimmermann",
    "Zinser",
    "Zintl",
    "Zipp",
    "Zipse",
    "Zschunke",
    "Zuber",
    "Zwiener",
    "Zümsande",
    "Östringer",
    "Überacker"
  ];
});

// node_modules/faker/lib/locales/de/name/prefix.js
var require_prefix4 = __commonJS((exports, module) => {
  module["exports"] = [
    "Hr.",
    "Fr.",
    "Dr.",
    "Prof. Dr."
  ];
});

// node_modules/faker/lib/locales/de/name/nobility_title_prefix.js
var require_nobility_title_prefix = __commonJS((exports, module) => {
  module["exports"] = [
    "zu",
    "von",
    "vom",
    "von der"
  ];
});

// node_modules/faker/lib/locales/de/name/name.js
var require_name9 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{nobility_title_prefix} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}"
  ];
});

// node_modules/faker/lib/locales/de/name/index.js
var require_name8 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name = require_first_name();
  name2.last_name = require_last_name();
  name2.prefix = require_prefix4();
  name2.nobility_title_prefix = require_nobility_title_prefix();
  name2.name = require_name9();
});

// node_modules/faker/lib/locales/de/phone_number/formats.js
var require_formats4 = __commonJS((exports, module) => {
  module["exports"] = [
    "(0###) #########",
    "(0####) #######",
    "+49-###-#######",
    "+49-####-########"
  ];
});

// node_modules/faker/lib/locales/de/phone_number/index.js
var require_phone_number3 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats4();
});

// node_modules/faker/lib/locales/de/cell_phone/formats.js
var require_formats3 = __commonJS((exports, module) => {
  module["exports"] = [
    "+49-1##-#######",
    "+49-1###-########"
  ];
});

// node_modules/faker/lib/locales/de/cell_phone/index.js
var require_cell_phone = __commonJS((exports, module) => {
  var cell_phone = {};
  module["exports"] = cell_phone;
  cell_phone.formats = require_formats3();
});

// node_modules/faker/lib/locales/de/index.js
var require_de = __commonJS((exports, module) => {
  var de = {};
  module["exports"] = de;
  de.title = "German";
  de.address = require_address4();
  de.company = require_company4();
  de.internet = require_internet4();
  de.lorem = require_lorem2();
  de.name = require_name8();
  de.phone_number = require_phone_number3();
  de.cell_phone = require_cell_phone();
});

// node_modules/faker/lib/locales/de_AT/address/country.js
var require_country4 = __commonJS((exports, module) => {
  module["exports"] = [
    "Ägypten",
    "Äquatorialguinea",
    "Äthiopien",
    "Österreich",
    "Afghanistan",
    "Albanien",
    "Algerien",
    "Amerikanisch-Samoa",
    "Amerikanische Jungferninseln",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antarktis",
    "Antigua und Barbuda",
    "Argentinien",
    "Armenien",
    "Aruba",
    "Aserbaidschan",
    "Australien",
    "Bahamas",
    "Bahrain",
    "Bangladesch",
    "Barbados",
    "Belarus",
    "Belgien",
    "Belize",
    "Benin",
    "die Bermudas",
    "Bhutan",
    "Bolivien",
    "Bosnien und Herzegowina",
    "Botsuana",
    "Bouvetinsel",
    "Brasilien",
    "Britische Jungferninseln",
    "Britisches Territorium im Indischen Ozean",
    "Brunei Darussalam",
    "Bulgarien",
    "Burkina Faso",
    "Burundi",
    "Chile",
    "China",
    "Cookinseln",
    "Costa Rica",
    "Dänemark",
    "Demokratische Republik Kongo",
    "Demokratische Volksrepublik Korea",
    "Deutschland",
    "Dominica",
    "Dominikanische Republik",
    "Dschibuti",
    "Ecuador",
    "El Salvador",
    "Eritrea",
    "Estland",
    "Färöer",
    "Falklandinseln",
    "Fidschi",
    "Finnland",
    "Frankreich",
    "Französisch-Guayana",
    "Französisch-Polynesien",
    "Französische Gebiete im südlichen Indischen Ozean",
    "Gabun",
    "Gambia",
    "Georgien",
    "Ghana",
    "Gibraltar",
    "Grönland",
    "Grenada",
    "Griechenland",
    "Guadeloupe",
    "Guam",
    "Guatemala",
    "Guinea",
    "Guinea-Bissau",
    "Guyana",
    "Haiti",
    "Heard und McDonaldinseln",
    "Honduras",
    "Hongkong",
    "Indien",
    "Indonesien",
    "Irak",
    "Iran",
    "Irland",
    "Island",
    "Israel",
    "Italien",
    "Jamaika",
    "Japan",
    "Jemen",
    "Jordanien",
    "Jugoslawien",
    "Kaimaninseln",
    "Kambodscha",
    "Kamerun",
    "Kanada",
    "Kap Verde",
    "Kasachstan",
    "Katar",
    "Kenia",
    "Kirgisistan",
    "Kiribati",
    "Kleinere amerikanische Überseeinseln",
    "Kokosinseln",
    "Kolumbien",
    "Komoren",
    "Kongo",
    "Kroatien",
    "Kuba",
    "Kuwait",
    "Laos",
    "Lesotho",
    "Lettland",
    "Libanon",
    "Liberia",
    "Libyen",
    "Liechtenstein",
    "Litauen",
    "Luxemburg",
    "Macau",
    "Madagaskar",
    "Malawi",
    "Malaysia",
    "Malediven",
    "Mali",
    "Malta",
    "ehemalige jugoslawische Republik Mazedonien",
    "Marokko",
    "Marshallinseln",
    "Martinique",
    "Mauretanien",
    "Mauritius",
    "Mayotte",
    "Mexiko",
    "Mikronesien",
    "Monaco",
    "Mongolei",
    "Montserrat",
    "Mosambik",
    "Myanmar",
    "Nördliche Marianen",
    "Namibia",
    "Nauru",
    "Nepal",
    "Neukaledonien",
    "Neuseeland",
    "Nicaragua",
    "Niederländische Antillen",
    "Niederlande",
    "Niger",
    "Nigeria",
    "Niue",
    "Norfolkinsel",
    "Norwegen",
    "Oman",
    "Osttimor",
    "Pakistan",
    "Palau",
    "Panama",
    "Papua-Neuguinea",
    "Paraguay",
    "Peru",
    "Philippinen",
    "Pitcairninseln",
    "Polen",
    "Portugal",
    "Puerto Rico",
    "Réunion",
    "Republik Korea",
    "Republik Moldau",
    "Ruanda",
    "Rumänien",
    "Russische Föderation",
    "São Tomé und Príncipe",
    "Südafrika",
    "Südgeorgien und Südliche Sandwichinseln",
    "Salomonen",
    "Sambia",
    "Samoa",
    "San Marino",
    "Saudi-Arabien",
    "Schweden",
    "Schweiz",
    "Senegal",
    "Seychellen",
    "Sierra Leone",
    "Simbabwe",
    "Singapur",
    "Slowakei",
    "Slowenien",
    "Somalien",
    "Spanien",
    "Sri Lanka",
    "St. Helena",
    "St. Kitts und Nevis",
    "St. Lucia",
    "St. Pierre und Miquelon",
    "St. Vincent und die Grenadinen",
    "Sudan",
    "Surinam",
    "Svalbard und Jan Mayen",
    "Swasiland",
    "Syrien",
    "Türkei",
    "Tadschikistan",
    "Taiwan",
    "Tansania",
    "Thailand",
    "Togo",
    "Tokelau",
    "Tonga",
    "Trinidad und Tobago",
    "Tschad",
    "Tschechische Republik",
    "Tunesien",
    "Turkmenistan",
    "Turks- und Caicosinseln",
    "Tuvalu",
    "Uganda",
    "Ukraine",
    "Ungarn",
    "Uruguay",
    "Usbekistan",
    "Vanuatu",
    "Vatikanstadt",
    "Venezuela",
    "Vereinigte Arabische Emirate",
    "Vereinigte Staaten",
    "Vereinigtes Königreich",
    "Vietnam",
    "Wallis und Futuna",
    "Weihnachtsinsel",
    "Westsahara",
    "Zentralafrikanische Republik",
    "Zypern"
  ];
});

// node_modules/faker/lib/locales/de_AT/address/street_root.js
var require_street_root2 = __commonJS((exports, module) => {
  module["exports"] = [
    "Ahorn",
    "Ahorngasse (St. Andrä)",
    "Alleestraße (Poysbrunn)",
    "Alpenlandstraße",
    "Alte Poststraße",
    "Alte Ufergasse",
    "Am Kronawett (Hagenbrunn)",
    "Am Mühlwasser",
    "Am Rebenhang",
    "Am Sternweg",
    "Anton Wildgans-Straße",
    "Auer-von-Welsbach-Weg",
    "Auf der Stift",
    "Aufeldgasse",
    "Bahngasse",
    "Bahnhofstraße",
    "Bahnstraße (Gerhaus)",
    "Basteigasse",
    "Berggasse",
    "Bergstraße",
    "Birkenweg",
    "Blasiussteig",
    "Blattur",
    "Bruderhofgasse",
    "Brunnelligasse",
    "Bühelweg",
    "Darnautgasse",
    "Donaugasse",
    "Dorfplatz (Haselbach)",
    "Dr.-Oberreiter-Straße",
    "Dr.Karl Holoubek-Str.",
    "Drautal Bundesstraße",
    "Dürnrohrer Straße",
    "Ebenthalerstraße",
    "Eckgrabenweg",
    "Erlenstraße",
    "Erlenweg",
    "Eschenweg",
    "Etrichgasse",
    "Fassergasse",
    "Feichteggerwiese",
    "Feld-Weg",
    "Feldgasse",
    "Feldstapfe",
    "Fischpointweg",
    "Flachbergstraße",
    "Flurweg",
    "Franz Schubert-Gasse",
    "Franz-Schneeweiß-Weg",
    "Franz-von-Assisi-Straße",
    "Fritz-Pregl-Straße",
    "Fuchsgrubenweg",
    "Födlerweg",
    "Föhrenweg",
    "Fünfhaus (Paasdorf)",
    "Gabelsbergerstraße",
    "Gartenstraße",
    "Geigen",
    "Geigergasse",
    "Gemeindeaugasse",
    "Gemeindeplatz",
    "Georg-Aichinger-Straße",
    "Glanfeldbachweg",
    "Graben (Burgauberg)",
    "Grub",
    "Gröretgasse",
    "Grünbach",
    "Gösting",
    "Hainschwang",
    "Hans-Mauracher-Straße",
    "Hart",
    "Teichstraße",
    "Hauptplatz",
    "Hauptstraße",
    "Heideweg",
    "Heinrich Landauer Gasse",
    "Helenengasse",
    "Hermann von Gilmweg",
    "Hermann-Löns-Gasse",
    "Herminengasse",
    "Hernstorferstraße",
    "Hirsdorf",
    "Hochfeistritz",
    "Hochhaus Neue Donau",
    "Hof",
    "Hussovits Gasse",
    "Höggen",
    "Hütten",
    "Janzgasse",
    "Jochriemgutstraße",
    "Johann-Strauß-Gasse",
    "Julius-Raab-Straße",
    "Kahlenberger Straße",
    "Karl Kraft-Straße",
    "Kegelprielstraße",
    "Keltenberg-Eponaweg",
    "Kennedybrücke",
    "Kerpelystraße",
    "Kindergartenstraße",
    "Kinderheimgasse",
    "Kirchenplatz",
    "Kirchweg",
    "Klagenfurter Straße",
    "Klamm",
    "Kleinbaumgarten",
    "Klingergasse",
    "Koloniestraße",
    "Konrad-Duden-Gasse",
    "Krankenhausstraße",
    "Kubinstraße",
    "Köhldorfergasse",
    "Lackenweg",
    "Lange Mekotte",
    "Leifling",
    "Leopold Frank-Straße (Pellendorf)",
    "Lerchengasse (Pirka)",
    "Lichtensternsiedlung V",
    "Lindenhofstraße",
    "Lindenweg",
    "Luegstraße",
    "Maierhof",
    "Malerweg",
    "Mitterweg",
    "Mittlere Hauptstraße",
    "Moosbachgasse",
    "Morettigasse",
    "Musikpavillon Riezlern",
    "Mühlboden",
    "Mühle",
    "Mühlenweg",
    "Neustiftgasse",
    "Niederegg",
    "Niedergams",
    "Nordwestbahnbrücke",
    "Oberbödenalm",
    "Obere Berggasse",
    "Oedt",
    "Am Färberberg",
    "Ottogasse",
    "Paul Peters-Gasse",
    "Perspektivstraße",
    "Poppichl",
    "Privatweg",
    "Prixgasse",
    "Pyhra",
    "Radetzkystraße",
    "Raiden",
    "Reichensteinstraße",
    "Reitbauernstraße",
    "Reiterweg",
    "Reitschulgasse",
    "Ringweg",
    "Rupertistraße",
    "Römerstraße",
    "Römerweg",
    "Sackgasse",
    "Schaunbergerstraße",
    "Schloßweg",
    "Schulgasse (Langeck)",
    "Schönholdsiedlung",
    "Seeblick",
    "Seestraße",
    "Semriacherstraße",
    "Simling",
    "Sipbachzeller Straße",
    "Sonnenweg",
    "Spargelfeldgasse",
    "Spiesmayrweg",
    "Sportplatzstraße",
    "St.Ulrich",
    "Steilmannstraße",
    "Steingrüneredt",
    "Strassfeld",
    "Straßerau",
    "Stöpflweg",
    "Stüra",
    "Taferngasse",
    "Tennweg",
    "Thomas Koschat-Gasse",
    "Tiroler Straße",
    "Torrogasse",
    "Uferstraße (Schwarzau am Steinfeld)",
    "Unterdörfl",
    "Unterer Sonnrainweg",
    "Verwaltersiedlung",
    "Waldhang",
    "Wasen",
    "Weidenstraße",
    "Weiherweg",
    "Wettsteingasse",
    "Wiener Straße",
    "Windisch",
    "Zebragasse",
    "Zellerstraße",
    "Ziehrerstraße",
    "Zulechnerweg",
    "Zwergjoch",
    "Ötzbruck"
  ];
});

// node_modules/faker/lib/locales/de_AT/address/building_number.js
var require_building_number4 = __commonJS((exports, module) => {
  module["exports"] = [
    "###",
    "##",
    "#",
    "##a",
    "##b",
    "##c"
  ];
});

// node_modules/faker/lib/locales/de_AT/address/secondary_address.js
var require_secondary_address4 = __commonJS((exports, module) => {
  module["exports"] = [
    "Apt. ###",
    "Zimmer ###",
    "# OG"
  ];
});

// node_modules/faker/lib/locales/de_AT/address/postcode.js
var require_postcode4 = __commonJS((exports, module) => {
  module["exports"] = [
    "####"
  ];
});

// node_modules/faker/lib/locales/de_AT/address/state.js
var require_state4 = __commonJS((exports, module) => {
  module["exports"] = [
    "Burgenland",
    "Kärnten",
    "Niederösterreich",
    "Oberösterreich",
    "Salzburg",
    "Steiermark",
    "Tirol",
    "Vorarlberg",
    "Wien"
  ];
});

// node_modules/faker/lib/locales/de_AT/address/state_abbr.js
var require_state_abbr3 = __commonJS((exports, module) => {
  module["exports"] = [
    "Bgld.",
    "Ktn.",
    "NÖ",
    "OÖ",
    "Sbg.",
    "Stmk.",
    "T",
    "Vbg.",
    "W"
  ];
});

// node_modules/faker/lib/locales/de_AT/address/city_name.js
var require_city_name3 = __commonJS((exports, module) => {
  module["exports"] = [
    "Aigen im Mühlkreis",
    "Allerheiligen bei Wildon",
    "Altenfelden",
    "Arriach",
    "Axams",
    "Baumgartenberg",
    "Bergern im Dunkelsteinerwald",
    "Berndorf bei Salzburg",
    "Bregenz",
    "Breitenbach am Inn",
    "Deutsch-Wagram",
    "Dienten am Hochkönig",
    "Dietach",
    "Dornbirn",
    "Dürnkrut",
    "Eben im Pongau",
    "Ebenthal in Kärnten",
    "Eichgraben",
    "Eisenstadt",
    "Ellmau",
    "Feistritz am Wechsel",
    "Finkenberg",
    "Fiss",
    "Frantschach-St. Gertraud",
    "Fritzens",
    "Gams bei Hieflau",
    "Geiersberg",
    "Graz",
    "Großhöflein",
    "Gößnitz",
    "Hartl",
    "Hausleiten",
    "Herzogenburg",
    "Hinterhornbach",
    "Hochwolkersdorf",
    "Ilz",
    "Ilztal",
    "Innerbraz",
    "Innsbruck",
    "Itter",
    "Jagerberg",
    "Jeging",
    "Johnsbach",
    "Johnsdorf-Brunn",
    "Jungholz",
    "Kirchdorf am Inn",
    "Klagenfurt",
    "Kottes-Purk",
    "Krumau am Kamp",
    "Krumbach",
    "Lavamünd",
    "Lech",
    "Linz",
    "Ludesch",
    "Lödersdorf",
    "Marbach an der Donau",
    "Mattsee",
    "Mautern an der Donau",
    "Mauterndorf",
    "Mitterbach am Erlaufsee",
    "Neudorf bei Passail",
    "Neudorf bei Staatz",
    "Neukirchen an der Enknach",
    "Neustift an der Lafnitz",
    "Niederleis",
    "Oberndorf in Tirol",
    "Oberstorcha",
    "Oberwaltersdorf",
    "Oed-Oehling",
    "Ort im Innkreis",
    "Pilgersdorf",
    "Pitschgau",
    "Pollham",
    "Preitenegg",
    "Purbach am Neusiedler See",
    "Rabenwald",
    "Raiding",
    "Rastenfeld",
    "Ratten",
    "Rettenegg",
    "Salzburg",
    "Sankt Johann im Saggautal",
    "St. Peter am Kammersberg",
    "St. Pölten",
    "St. Veit an der Glan",
    "Taxenbach",
    "Tragwein",
    "Trebesing",
    "Trieben",
    "Turnau",
    "Ungerdorf",
    "Unterauersbach",
    "Unterstinkenbrunn",
    "Untertilliach",
    "Uttendorf",
    "Vals",
    "Velden am Wörther See",
    "Viehhofen",
    "Villach",
    "Vitis",
    "Waidhofen an der Thaya",
    "Waldkirchen am Wesen",
    "Weißkirchen an der Traun",
    "Wien",
    "Wimpassing im Schwarzatale",
    "Ybbs an der Donau",
    "Ybbsitz",
    "Yspertal",
    "Zeillern",
    "Zell am Pettenfirst",
    "Zell an der Pram",
    "Zerlach",
    "Zwölfaxing",
    "Öblarn",
    "Übelbach",
    "Überackern",
    "Übersaxen",
    "Übersbach"
  ];
});

// node_modules/faker/lib/locales/de_AT/address/city.js
var require_city4 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{city_name}"
  ];
});

// node_modules/faker/lib/locales/de_AT/address/street_name.js
var require_street_name4 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_root}"
  ];
});

// node_modules/faker/lib/locales/de_AT/address/street_address.js
var require_street_address4 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_name} #{building_number}"
  ];
});

// node_modules/faker/lib/locales/de_AT/address/default_country.js
var require_default_country4 = __commonJS((exports, module) => {
  module["exports"] = [
    "Österreich"
  ];
});

// node_modules/faker/lib/locales/de_AT/address/index.js
var require_address5 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.country = require_country4();
  address.street_root = require_street_root2();
  address.building_number = require_building_number4();
  address.secondary_address = require_secondary_address4();
  address.postcode = require_postcode4();
  address.state = require_state4();
  address.state_abbr = require_state_abbr3();
  address.city_name = require_city_name3();
  address.city = require_city4();
  address.street_name = require_street_name4();
  address.street_address = require_street_address4();
  address.default_country = require_default_country4();
});

// node_modules/faker/lib/locales/de_AT/company/suffix.js
var require_suffix6 = __commonJS((exports, module) => {
  module["exports"] = [
    "GmbH",
    "AG",
    "Gruppe",
    "KG",
    "GmbH & Co. KG",
    "UG",
    "OHG"
  ];
});

// node_modules/faker/lib/locales/de_AT/company/legal_form.js
var require_legal_form2 = __commonJS((exports, module) => {
  module["exports"] = [
    "GmbH",
    "AG",
    "Gruppe",
    "KG",
    "GmbH & Co. KG",
    "UG",
    "OHG"
  ];
});

// node_modules/faker/lib/locales/de_AT/company/name.js
var require_name10 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} und #{Name.last_name}"
  ];
});

// node_modules/faker/lib/locales/de_AT/company/index.js
var require_company5 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.suffix = require_suffix6();
  company.legal_form = require_legal_form2();
  company.name = require_name10();
});

// node_modules/faker/lib/locales/de_AT/internet/free_email.js
var require_free_email4 = __commonJS((exports, module) => {
  module["exports"] = [
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ];
});

// node_modules/faker/lib/locales/de_AT/internet/domain_suffix.js
var require_domain_suffix4 = __commonJS((exports, module) => {
  module["exports"] = [
    "com",
    "info",
    "name",
    "net",
    "org",
    "de",
    "ch",
    "at"
  ];
});

// node_modules/faker/lib/locales/de_AT/internet/index.js
var require_internet5 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.free_email = require_free_email4();
  internet.domain_suffix = require_domain_suffix4();
});

// node_modules/faker/lib/locales/de_AT/name/first_name.js
var require_first_name2 = __commonJS((exports, module) => {
  module["exports"] = [
    "Aaron",
    "Abdul",
    "Abdullah",
    "Adam",
    "Adrian",
    "Adriano",
    "Ahmad",
    "Ahmed",
    "Ahmet",
    "Alan",
    "Albert",
    "Alessandro",
    "Alessio",
    "Alex",
    "Alexander",
    "Alfred",
    "Ali",
    "Amar",
    "Amir",
    "Amon",
    "Andre",
    "Andreas",
    "Andrew",
    "Angelo",
    "Ansgar",
    "Anthony",
    "Anton",
    "Antonio",
    "Arda",
    "Arian",
    "Armin",
    "Arne",
    "Arno",
    "Arthur",
    "Artur",
    "Arved",
    "Arvid",
    "Ayman",
    "Baran",
    "Baris",
    "Bastian",
    "Batuhan",
    "Bela",
    "Ben",
    "Benedikt",
    "Benjamin",
    "Bennet",
    "Bennett",
    "Benno",
    "Bent",
    "Berat",
    "Berkay",
    "Bernd",
    "Bilal",
    "Bjarne",
    "Björn",
    "Bo",
    "Boris",
    "Brandon",
    "Brian",
    "Bruno",
    "Bryan",
    "Burak",
    "Calvin",
    "Can",
    "Carl",
    "Carlo",
    "Carlos",
    "Caspar",
    "Cedric",
    "Cedrik",
    "Cem",
    "Charlie",
    "Chris",
    "Christian",
    "Christiano",
    "Christoph",
    "Christopher",
    "Claas",
    "Clemens",
    "Colin",
    "Collin",
    "Conner",
    "Connor",
    "Constantin",
    "Corvin",
    "Curt",
    "Damian",
    "Damien",
    "Daniel",
    "Danilo",
    "Danny",
    "Darian",
    "Dario",
    "Darius",
    "Darren",
    "David",
    "Davide",
    "Davin",
    "Dean",
    "Deniz",
    "Dennis",
    "Denny",
    "Devin",
    "Diego",
    "Dion",
    "Domenic",
    "Domenik",
    "Dominic",
    "Dominik",
    "Dorian",
    "Dustin",
    "Dylan",
    "Ecrin",
    "Eddi",
    "Eddy",
    "Edgar",
    "Edwin",
    "Efe",
    "Ege",
    "Elia",
    "Eliah",
    "Elias",
    "Elijah",
    "Emanuel",
    "Emil",
    "Emilian",
    "Emilio",
    "Emir",
    "Emirhan",
    "Emre",
    "Enes",
    "Enno",
    "Enrico",
    "Eren",
    "Eric",
    "Erik",
    "Etienne",
    "Fabian",
    "Fabien",
    "Fabio",
    "Fabrice",
    "Falk",
    "Felix",
    "Ferdinand",
    "Fiete",
    "Filip",
    "Finlay",
    "Finley",
    "Finn",
    "Finnley",
    "Florian",
    "Francesco",
    "Franz",
    "Frederic",
    "Frederick",
    "Frederik",
    "Friedrich",
    "Fritz",
    "Furkan",
    "Fynn",
    "Gabriel",
    "Georg",
    "Gerrit",
    "Gian",
    "Gianluca",
    "Gino",
    "Giuliano",
    "Giuseppe",
    "Gregor",
    "Gustav",
    "Hagen",
    "Hamza",
    "Hannes",
    "Hanno",
    "Hans",
    "Hasan",
    "Hassan",
    "Hauke",
    "Hendrik",
    "Hennes",
    "Henning",
    "Henri",
    "Henrick",
    "Henrik",
    "Henry",
    "Hugo",
    "Hussein",
    "Ian",
    "Ibrahim",
    "Ilias",
    "Ilja",
    "Ilyas",
    "Immanuel",
    "Ismael",
    "Ismail",
    "Ivan",
    "Iven",
    "Jack",
    "Jacob",
    "Jaden",
    "Jakob",
    "Jamal",
    "James",
    "Jamie",
    "Jan",
    "Janek",
    "Janis",
    "Janne",
    "Jannek",
    "Jannes",
    "Jannik",
    "Jannis",
    "Jano",
    "Janosch",
    "Jared",
    "Jari",
    "Jarne",
    "Jarno",
    "Jaron",
    "Jason",
    "Jasper",
    "Jay",
    "Jayden",
    "Jayson",
    "Jean",
    "Jens",
    "Jeremias",
    "Jeremie",
    "Jeremy",
    "Jermaine",
    "Jerome",
    "Jesper",
    "Jesse",
    "Jim",
    "Jimmy",
    "Joe",
    "Joel",
    "Joey",
    "Johann",
    "Johannes",
    "John",
    "Johnny",
    "Jon",
    "Jona",
    "Jonah",
    "Jonas",
    "Jonathan",
    "Jonte",
    "Joost",
    "Jordan",
    "Joris",
    "Joscha",
    "Joschua",
    "Josef",
    "Joseph",
    "Josh",
    "Joshua",
    "Josua",
    "Juan",
    "Julian",
    "Julien",
    "Julius",
    "Juri",
    "Justin",
    "Justus",
    "Kaan",
    "Kai",
    "Kalle",
    "Karim",
    "Karl",
    "Karlo",
    "Kay",
    "Keanu",
    "Kenan",
    "Kenny",
    "Keno",
    "Kerem",
    "Kerim",
    "Kevin",
    "Kian",
    "Kilian",
    "Kim",
    "Kimi",
    "Kjell",
    "Klaas",
    "Klemens",
    "Konrad",
    "Konstantin",
    "Koray",
    "Korbinian",
    "Kurt",
    "Lars",
    "Lasse",
    "Laurence",
    "Laurens",
    "Laurenz",
    "Laurin",
    "Lean",
    "Leander",
    "Leandro",
    "Leif",
    "Len",
    "Lenn",
    "Lennard",
    "Lennart",
    "Lennert",
    "Lennie",
    "Lennox",
    "Lenny",
    "Leo",
    "Leon",
    "Leonard",
    "Leonardo",
    "Leonhard",
    "Leonidas",
    "Leopold",
    "Leroy",
    "Levent",
    "Levi",
    "Levin",
    "Lewin",
    "Lewis",
    "Liam",
    "Lian",
    "Lias",
    "Lino",
    "Linus",
    "Lio",
    "Lion",
    "Lionel",
    "Logan",
    "Lorenz",
    "Lorenzo",
    "Loris",
    "Louis",
    "Luan",
    "Luc",
    "Luca",
    "Lucas",
    "Lucian",
    "Lucien",
    "Ludwig",
    "Luis",
    "Luiz",
    "Luk",
    "Luka",
    "Lukas",
    "Luke",
    "Lutz",
    "Maddox",
    "Mads",
    "Magnus",
    "Maik",
    "Maksim",
    "Malik",
    "Malte",
    "Manuel",
    "Marc",
    "Marcel",
    "Marco",
    "Marcus",
    "Marek",
    "Marian",
    "Mario",
    "Marius",
    "Mark",
    "Marko",
    "Markus",
    "Marlo",
    "Marlon",
    "Marten",
    "Martin",
    "Marvin",
    "Marwin",
    "Mateo",
    "Mathis",
    "Matis",
    "Mats",
    "Matteo",
    "Mattes",
    "Matthias",
    "Matthis",
    "Matti",
    "Mattis",
    "Maurice",
    "Max",
    "Maxim",
    "Maximilian",
    "Mehmet",
    "Meik",
    "Melvin",
    "Merlin",
    "Mert",
    "Michael",
    "Michel",
    "Mick",
    "Miguel",
    "Mika",
    "Mikail",
    "Mike",
    "Milan",
    "Milo",
    "Mio",
    "Mirac",
    "Mirco",
    "Mirko",
    "Mohamed",
    "Mohammad",
    "Mohammed",
    "Moritz",
    "Morten",
    "Muhammed",
    "Murat",
    "Mustafa",
    "Nathan",
    "Nathanael",
    "Nelson",
    "Neo",
    "Nevio",
    "Nick",
    "Niclas",
    "Nico",
    "Nicolai",
    "Nicolas",
    "Niels",
    "Nikita",
    "Niklas",
    "Niko",
    "Nikolai",
    "Nikolas",
    "Nils",
    "Nino",
    "Noah",
    "Noel",
    "Norman",
    "Odin",
    "Oke",
    "Ole",
    "Oliver",
    "Omar",
    "Onur",
    "Oscar",
    "Oskar",
    "Pascal",
    "Patrice",
    "Patrick",
    "Paul",
    "Peer",
    "Pepe",
    "Peter",
    "Phil",
    "Philip",
    "Philipp",
    "Pierre",
    "Piet",
    "Pit",
    "Pius",
    "Quentin",
    "Quirin",
    "Rafael",
    "Raik",
    "Ramon",
    "Raphael",
    "Rasmus",
    "Raul",
    "Rayan",
    "René",
    "Ricardo",
    "Riccardo",
    "Richard",
    "Rick",
    "Rico",
    "Robert",
    "Robin",
    "Rocco",
    "Roman",
    "Romeo",
    "Ron",
    "Ruben",
    "Ryan",
    "Said",
    "Salih",
    "Sam",
    "Sami",
    "Sammy",
    "Samuel",
    "Sandro",
    "Santino",
    "Sascha",
    "Sean",
    "Sebastian",
    "Selim",
    "Semih",
    "Shawn",
    "Silas",
    "Simeon",
    "Simon",
    "Sinan",
    "Sky",
    "Stefan",
    "Steffen",
    "Stephan",
    "Steve",
    "Steven",
    "Sven",
    "Sönke",
    "Sören",
    "Taha",
    "Tamino",
    "Tammo",
    "Tarik",
    "Tayler",
    "Taylor",
    "Teo",
    "Theo",
    "Theodor",
    "Thies",
    "Thilo",
    "Thomas",
    "Thorben",
    "Thore",
    "Thorge",
    "Tiago",
    "Til",
    "Till",
    "Tillmann",
    "Tim",
    "Timm",
    "Timo",
    "Timon",
    "Timothy",
    "Tino",
    "Titus",
    "Tizian",
    "Tjark",
    "Tobias",
    "Tom",
    "Tommy",
    "Toni",
    "Tony",
    "Torben",
    "Tore",
    "Tristan",
    "Tyler",
    "Tyron",
    "Umut",
    "Valentin",
    "Valentino",
    "Veit",
    "Victor",
    "Viktor",
    "Vin",
    "Vincent",
    "Vito",
    "Vitus",
    "Wilhelm",
    "Willi",
    "William",
    "Willy",
    "Xaver",
    "Yannic",
    "Yannick",
    "Yannik",
    "Yannis",
    "Yasin",
    "Youssef",
    "Yunus",
    "Yusuf",
    "Yven",
    "Yves",
    "Ömer",
    "Aaliyah",
    "Abby",
    "Abigail",
    "Ada",
    "Adelina",
    "Adriana",
    "Aileen",
    "Aimee",
    "Alana",
    "Alea",
    "Alena",
    "Alessa",
    "Alessia",
    "Alexa",
    "Alexandra",
    "Alexia",
    "Alexis",
    "Aleyna",
    "Alia",
    "Alica",
    "Alice",
    "Alicia",
    "Alina",
    "Alisa",
    "Alisha",
    "Alissa",
    "Aliya",
    "Aliyah",
    "Allegra",
    "Alma",
    "Alyssa",
    "Amalia",
    "Amanda",
    "Amelia",
    "Amelie",
    "Amina",
    "Amira",
    "Amy",
    "Ana",
    "Anabel",
    "Anastasia",
    "Andrea",
    "Angela",
    "Angelina",
    "Angelique",
    "Anja",
    "Ann",
    "Anna",
    "Annabel",
    "Annabell",
    "Annabelle",
    "Annalena",
    "Anne",
    "Anneke",
    "Annelie",
    "Annemarie",
    "Anni",
    "Annie",
    "Annika",
    "Anny",
    "Anouk",
    "Antonia",
    "Arda",
    "Ariana",
    "Ariane",
    "Arwen",
    "Ashley",
    "Asya",
    "Aurelia",
    "Aurora",
    "Ava",
    "Ayleen",
    "Aylin",
    "Ayse",
    "Azra",
    "Betty",
    "Bianca",
    "Bianka",
    "Caitlin",
    "Cara",
    "Carina",
    "Carla",
    "Carlotta",
    "Carmen",
    "Carolin",
    "Carolina",
    "Caroline",
    "Cassandra",
    "Catharina",
    "Catrin",
    "Cecile",
    "Cecilia",
    "Celia",
    "Celina",
    "Celine",
    "Ceyda",
    "Ceylin",
    "Chantal",
    "Charleen",
    "Charlotta",
    "Charlotte",
    "Chayenne",
    "Cheyenne",
    "Chiara",
    "Christin",
    "Christina",
    "Cindy",
    "Claire",
    "Clara",
    "Clarissa",
    "Colleen",
    "Collien",
    "Cora",
    "Corinna",
    "Cosima",
    "Dana",
    "Daniela",
    "Daria",
    "Darleen",
    "Defne",
    "Delia",
    "Denise",
    "Diana",
    "Dilara",
    "Dina",
    "Dorothea",
    "Ecrin",
    "Eda",
    "Eileen",
    "Ela",
    "Elaine",
    "Elanur",
    "Elea",
    "Elena",
    "Eleni",
    "Eleonora",
    "Eliana",
    "Elif",
    "Elina",
    "Elisa",
    "Elisabeth",
    "Ella",
    "Ellen",
    "Elli",
    "Elly",
    "Elsa",
    "Emelie",
    "Emely",
    "Emilia",
    "Emilie",
    "Emily",
    "Emma",
    "Emmely",
    "Emmi",
    "Emmy",
    "Enie",
    "Enna",
    "Enya",
    "Esma",
    "Estelle",
    "Esther",
    "Eva",
    "Evelin",
    "Evelina",
    "Eveline",
    "Evelyn",
    "Fabienne",
    "Fatima",
    "Fatma",
    "Felicia",
    "Felicitas",
    "Felina",
    "Femke",
    "Fenja",
    "Fine",
    "Finia",
    "Finja",
    "Finnja",
    "Fiona",
    "Flora",
    "Florentine",
    "Francesca",
    "Franka",
    "Franziska",
    "Frederike",
    "Freya",
    "Frida",
    "Frieda",
    "Friederike",
    "Giada",
    "Gina",
    "Giulia",
    "Giuliana",
    "Greta",
    "Hailey",
    "Hana",
    "Hanna",
    "Hannah",
    "Heidi",
    "Helen",
    "Helena",
    "Helene",
    "Helin",
    "Henriette",
    "Henrike",
    "Hermine",
    "Ida",
    "Ilayda",
    "Imke",
    "Ina",
    "Ines",
    "Inga",
    "Inka",
    "Irem",
    "Isa",
    "Isabel",
    "Isabell",
    "Isabella",
    "Isabelle",
    "Ivonne",
    "Jacqueline",
    "Jamie",
    "Jamila",
    "Jana",
    "Jane",
    "Janin",
    "Janina",
    "Janine",
    "Janna",
    "Janne",
    "Jara",
    "Jasmin",
    "Jasmina",
    "Jasmine",
    "Jella",
    "Jenna",
    "Jennifer",
    "Jenny",
    "Jessica",
    "Jessy",
    "Jette",
    "Jil",
    "Jill",
    "Joana",
    "Joanna",
    "Joelina",
    "Joeline",
    "Joelle",
    "Johanna",
    "Joleen",
    "Jolie",
    "Jolien",
    "Jolin",
    "Jolina",
    "Joline",
    "Jona",
    "Jonah",
    "Jonna",
    "Josefin",
    "Josefine",
    "Josephin",
    "Josephine",
    "Josie",
    "Josy",
    "Joy",
    "Joyce",
    "Judith",
    "Judy",
    "Jule",
    "Julia",
    "Juliana",
    "Juliane",
    "Julie",
    "Julienne",
    "Julika",
    "Julina",
    "Juna",
    "Justine",
    "Kaja",
    "Karina",
    "Karla",
    "Karlotta",
    "Karolina",
    "Karoline",
    "Kassandra",
    "Katarina",
    "Katharina",
    "Kathrin",
    "Katja",
    "Katrin",
    "Kaya",
    "Kayra",
    "Kiana",
    "Kiara",
    "Kim",
    "Kimberley",
    "Kimberly",
    "Kira",
    "Klara",
    "Korinna",
    "Kristin",
    "Kyra",
    "Laila",
    "Lana",
    "Lara",
    "Larissa",
    "Laura",
    "Laureen",
    "Lavinia",
    "Lea",
    "Leah",
    "Leana",
    "Leandra",
    "Leann",
    "Lee",
    "Leila",
    "Lena",
    "Lene",
    "Leni",
    "Lenia",
    "Lenja",
    "Lenya",
    "Leona",
    "Leoni",
    "Leonie",
    "Leonora",
    "Leticia",
    "Letizia",
    "Levke",
    "Leyla",
    "Lia",
    "Liah",
    "Liana",
    "Lili",
    "Lilia",
    "Lilian",
    "Liliana",
    "Lilith",
    "Lilli",
    "Lillian",
    "Lilly",
    "Lily",
    "Lina",
    "Linda",
    "Lindsay",
    "Line",
    "Linn",
    "Linnea",
    "Lisa",
    "Lisann",
    "Lisanne",
    "Liv",
    "Livia",
    "Liz",
    "Lola",
    "Loreen",
    "Lorena",
    "Lotta",
    "Lotte",
    "Louisa",
    "Louise",
    "Luana",
    "Luca",
    "Lucia",
    "Lucie",
    "Lucienne",
    "Lucy",
    "Luisa",
    "Luise",
    "Luka",
    "Luna",
    "Luzie",
    "Lya",
    "Lydia",
    "Lyn",
    "Lynn",
    "Madeleine",
    "Madita",
    "Madleen",
    "Madlen",
    "Magdalena",
    "Maike",
    "Mailin",
    "Maira",
    "Maja",
    "Malena",
    "Malia",
    "Malin",
    "Malina",
    "Mandy",
    "Mara",
    "Marah",
    "Mareike",
    "Maren",
    "Maria",
    "Mariam",
    "Marie",
    "Marieke",
    "Mariella",
    "Marika",
    "Marina",
    "Marisa",
    "Marissa",
    "Marit",
    "Marla",
    "Marleen",
    "Marlen",
    "Marlena",
    "Marlene",
    "Marta",
    "Martha",
    "Mary",
    "Maryam",
    "Mathilda",
    "Mathilde",
    "Matilda",
    "Maxi",
    "Maxima",
    "Maxine",
    "Maya",
    "Mayra",
    "Medina",
    "Medine",
    "Meike",
    "Melanie",
    "Melek",
    "Melike",
    "Melina",
    "Melinda",
    "Melis",
    "Melisa",
    "Melissa",
    "Merle",
    "Merve",
    "Meryem",
    "Mette",
    "Mia",
    "Michaela",
    "Michelle",
    "Mieke",
    "Mila",
    "Milana",
    "Milena",
    "Milla",
    "Mina",
    "Mira",
    "Miray",
    "Miriam",
    "Mirja",
    "Mona",
    "Monique",
    "Nadine",
    "Nadja",
    "Naemi",
    "Nancy",
    "Naomi",
    "Natalia",
    "Natalie",
    "Nathalie",
    "Neele",
    "Nela",
    "Nele",
    "Nelli",
    "Nelly",
    "Nia",
    "Nicole",
    "Nika",
    "Nike",
    "Nikita",
    "Nila",
    "Nina",
    "Nisa",
    "Noemi",
    "Nora",
    "Olivia",
    "Patricia",
    "Patrizia",
    "Paula",
    "Paulina",
    "Pauline",
    "Penelope",
    "Philine",
    "Phoebe",
    "Pia",
    "Rahel",
    "Rania",
    "Rebecca",
    "Rebekka",
    "Riana",
    "Rieke",
    "Rike",
    "Romina",
    "Romy",
    "Ronja",
    "Rosa",
    "Rosalie",
    "Ruby",
    "Sabrina",
    "Sahra",
    "Sally",
    "Salome",
    "Samantha",
    "Samia",
    "Samira",
    "Sandra",
    "Sandy",
    "Sanja",
    "Saphira",
    "Sara",
    "Sarah",
    "Saskia",
    "Selin",
    "Selina",
    "Selma",
    "Sena",
    "Sidney",
    "Sienna",
    "Silja",
    "Sina",
    "Sinja",
    "Smilla",
    "Sofia",
    "Sofie",
    "Sonja",
    "Sophia",
    "Sophie",
    "Soraya",
    "Stefanie",
    "Stella",
    "Stephanie",
    "Stina",
    "Sude",
    "Summer",
    "Susanne",
    "Svea",
    "Svenja",
    "Sydney",
    "Tabea",
    "Talea",
    "Talia",
    "Tamara",
    "Tamia",
    "Tamina",
    "Tanja",
    "Tara",
    "Tarja",
    "Teresa",
    "Tessa",
    "Thalea",
    "Thalia",
    "Thea",
    "Theresa",
    "Tia",
    "Tina",
    "Tomke",
    "Tuana",
    "Valentina",
    "Valeria",
    "Valerie",
    "Vanessa",
    "Vera",
    "Veronika",
    "Victoria",
    "Viktoria",
    "Viola",
    "Vivian",
    "Vivien",
    "Vivienne",
    "Wibke",
    "Wiebke",
    "Xenia",
    "Yara",
    "Yaren",
    "Yasmin",
    "Ylvi",
    "Ylvie",
    "Yvonne",
    "Zara",
    "Zehra",
    "Zeynep",
    "Zoe",
    "Zoey",
    "Zoé"
  ];
});

// node_modules/faker/lib/locales/de_AT/name/last_name.js
var require_last_name2 = __commonJS((exports, module) => {
  module["exports"] = [
    "Abel",
    "Abicht",
    "Abraham",
    "Abramovic",
    "Abt",
    "Achilles",
    "Achkinadze",
    "Ackermann",
    "Adam",
    "Adams",
    "Ade",
    "Agostini",
    "Ahlke",
    "Ahrenberg",
    "Ahrens",
    "Aigner",
    "Albert",
    "Albrecht",
    "Alexa",
    "Alexander",
    "Alizadeh",
    "Allgeyer",
    "Amann",
    "Amberg",
    "Anding",
    "Anggreny",
    "Apitz",
    "Arendt",
    "Arens",
    "Arndt",
    "Aryee",
    "Aschenbroich",
    "Assmus",
    "Astafei",
    "Auer",
    "Axmann",
    "Baarck",
    "Bachmann",
    "Badane",
    "Bader",
    "Baganz",
    "Bahl",
    "Bak",
    "Balcer",
    "Balck",
    "Balkow",
    "Balnuweit",
    "Balzer",
    "Banse",
    "Barr",
    "Bartels",
    "Barth",
    "Barylla",
    "Baseda",
    "Battke",
    "Bauer",
    "Bauermeister",
    "Baumann",
    "Baumeister",
    "Bauschinger",
    "Bauschke",
    "Bayer",
    "Beavogui",
    "Beck",
    "Beckel",
    "Becker",
    "Beckmann",
    "Bedewitz",
    "Beele",
    "Beer",
    "Beggerow",
    "Beh",
    "Behr",
    "Behrenbruch",
    "Belz",
    "Bender",
    "Benecke",
    "Benner",
    "Benninger",
    "Benzing",
    "Berends",
    "Berger",
    "Berner",
    "Berning",
    "Bertenbreiter",
    "Best",
    "Bethke",
    "Betz",
    "Beushausen",
    "Beutelspacher",
    "Beyer",
    "Biba",
    "Bichler",
    "Bickel",
    "Biedermann",
    "Bieler",
    "Bielert",
    "Bienasch",
    "Bienias",
    "Biesenbach",
    "Bigdeli",
    "Birkemeyer",
    "Bittner",
    "Blank",
    "Blaschek",
    "Blassneck",
    "Bloch",
    "Blochwitz",
    "Blockhaus",
    "Blum",
    "Blume",
    "Bock",
    "Bode",
    "Bogdashin",
    "Bogenrieder",
    "Bohge",
    "Bolm",
    "Borgschulze",
    "Bork",
    "Bormann",
    "Bornscheuer",
    "Borrmann",
    "Borsch",
    "Boruschewski",
    "Bos",
    "Bosler",
    "Bourrouag",
    "Bouschen",
    "Boxhammer",
    "Boyde",
    "Bozsik",
    "Brand",
    "Brandenburg",
    "Brandis",
    "Brandt",
    "Brauer",
    "Braun",
    "Brehmer",
    "Breitenstein",
    "Bremer",
    "Bremser",
    "Brenner",
    "Brettschneider",
    "Breu",
    "Breuer",
    "Briesenick",
    "Bringmann",
    "Brinkmann",
    "Brix",
    "Broening",
    "Brosch",
    "Bruckmann",
    "Bruder",
    "Bruhns",
    "Brunner",
    "Bruns",
    "Bräutigam",
    "Brömme",
    "Brüggmann",
    "Buchholz",
    "Buchrucker",
    "Buder",
    "Bultmann",
    "Bunjes",
    "Burger",
    "Burghagen",
    "Burkhard",
    "Burkhardt",
    "Burmeister",
    "Busch",
    "Buschbaum",
    "Busemann",
    "Buss",
    "Busse",
    "Bussmann",
    "Byrd",
    "Bäcker",
    "Böhm",
    "Bönisch",
    "Börgeling",
    "Börner",
    "Böttner",
    "Büchele",
    "Bühler",
    "Büker",
    "Büngener",
    "Bürger",
    "Bürklein",
    "Büscher",
    "Büttner",
    "Camara",
    "Carlowitz",
    "Carlsohn",
    "Caspari",
    "Caspers",
    "Chapron",
    "Christ",
    "Cierpinski",
    "Clarius",
    "Cleem",
    "Cleve",
    "Co",
    "Conrad",
    "Cordes",
    "Cornelsen",
    "Cors",
    "Cotthardt",
    "Crews",
    "Cronjäger",
    "Crosskofp",
    "Da",
    "Dahm",
    "Dahmen",
    "Daimer",
    "Damaske",
    "Danneberg",
    "Danner",
    "Daub",
    "Daubner",
    "Daudrich",
    "Dauer",
    "Daum",
    "Dauth",
    "Dautzenberg",
    "De",
    "Decker",
    "Deckert",
    "Deerberg",
    "Dehmel",
    "Deja",
    "Delonge",
    "Demut",
    "Dengler",
    "Denner",
    "Denzinger",
    "Derr",
    "Dertmann",
    "Dethloff",
    "Deuschle",
    "Dieckmann",
    "Diedrich",
    "Diekmann",
    "Dienel",
    "Dies",
    "Dietrich",
    "Dietz",
    "Dietzsch",
    "Diezel",
    "Dilla",
    "Dingelstedt",
    "Dippl",
    "Dittmann",
    "Dittmar",
    "Dittmer",
    "Dix",
    "Dobbrunz",
    "Dobler",
    "Dohring",
    "Dolch",
    "Dold",
    "Dombrowski",
    "Donie",
    "Doskoczynski",
    "Dragu",
    "Drechsler",
    "Drees",
    "Dreher",
    "Dreier",
    "Dreissigacker",
    "Dressler",
    "Drews",
    "Duma",
    "Dutkiewicz",
    "Dyett",
    "Dylus",
    "Dächert",
    "Döbel",
    "Döring",
    "Dörner",
    "Dörre",
    "Dück",
    "Eberhard",
    "Eberhardt",
    "Ecker",
    "Eckhardt",
    "Edorh",
    "Effler",
    "Eggenmueller",
    "Ehm",
    "Ehmann",
    "Ehrig",
    "Eich",
    "Eichmann",
    "Eifert",
    "Einert",
    "Eisenlauer",
    "Ekpo",
    "Elbe",
    "Eleyth",
    "Elss",
    "Emert",
    "Emmelmann",
    "Ender",
    "Engel",
    "Engelen",
    "Engelmann",
    "Eplinius",
    "Erdmann",
    "Erhardt",
    "Erlei",
    "Erm",
    "Ernst",
    "Ertl",
    "Erwes",
    "Esenwein",
    "Esser",
    "Evers",
    "Everts",
    "Ewald",
    "Fahner",
    "Faller",
    "Falter",
    "Farber",
    "Fassbender",
    "Faulhaber",
    "Fehrig",
    "Feld",
    "Felke",
    "Feller",
    "Fenner",
    "Fenske",
    "Feuerbach",
    "Fietz",
    "Figl",
    "Figura",
    "Filipowski",
    "Filsinger",
    "Fincke",
    "Fink",
    "Finke",
    "Fischer",
    "Fitschen",
    "Fleischer",
    "Fleischmann",
    "Floder",
    "Florczak",
    "Flore",
    "Flottmann",
    "Forkel",
    "Forst",
    "Frahmeke",
    "Frank",
    "Franke",
    "Franta",
    "Frantz",
    "Franz",
    "Franzis",
    "Franzmann",
    "Frauen",
    "Frauendorf",
    "Freigang",
    "Freimann",
    "Freimuth",
    "Freisen",
    "Frenzel",
    "Frey",
    "Fricke",
    "Fried",
    "Friedek",
    "Friedenberg",
    "Friedmann",
    "Friedrich",
    "Friess",
    "Frisch",
    "Frohn",
    "Frosch",
    "Fuchs",
    "Fuhlbrügge",
    "Fusenig",
    "Fust",
    "Förster",
    "Gaba",
    "Gabius",
    "Gabler",
    "Gadschiew",
    "Gakstädter",
    "Galander",
    "Gamlin",
    "Gamper",
    "Gangnus",
    "Ganzmann",
    "Garatva",
    "Gast",
    "Gastel",
    "Gatzka",
    "Gauder",
    "Gebhardt",
    "Geese",
    "Gehre",
    "Gehrig",
    "Gehring",
    "Gehrke",
    "Geiger",
    "Geisler",
    "Geissler",
    "Gelling",
    "Gens",
    "Gerbennow",
    "Gerdel",
    "Gerhardt",
    "Gerschler",
    "Gerson",
    "Gesell",
    "Geyer",
    "Ghirmai",
    "Ghosh",
    "Giehl",
    "Gierisch",
    "Giesa",
    "Giesche",
    "Gilde",
    "Glatting",
    "Goebel",
    "Goedicke",
    "Goldbeck",
    "Goldfuss",
    "Goldkamp",
    "Goldkühle",
    "Goller",
    "Golling",
    "Gollnow",
    "Golomski",
    "Gombert",
    "Gotthardt",
    "Gottschalk",
    "Gotz",
    "Goy",
    "Gradzki",
    "Graf",
    "Grams",
    "Grasse",
    "Gratzky",
    "Grau",
    "Greb",
    "Green",
    "Greger",
    "Greithanner",
    "Greschner",
    "Griem",
    "Griese",
    "Grimm",
    "Gromisch",
    "Gross",
    "Grosser",
    "Grossheim",
    "Grosskopf",
    "Grothaus",
    "Grothkopp",
    "Grotke",
    "Grube",
    "Gruber",
    "Grundmann",
    "Gruning",
    "Gruszecki",
    "Gröss",
    "Grötzinger",
    "Grün",
    "Grüner",
    "Gummelt",
    "Gunkel",
    "Gunther",
    "Gutjahr",
    "Gutowicz",
    "Gutschank",
    "Göbel",
    "Göckeritz",
    "Göhler",
    "Görlich",
    "Görmer",
    "Götz",
    "Götzelmann",
    "Güldemeister",
    "Günther",
    "Günz",
    "Gürbig",
    "Haack",
    "Haaf",
    "Habel",
    "Hache",
    "Hackbusch",
    "Hackelbusch",
    "Hadfield",
    "Hadwich",
    "Haferkamp",
    "Hahn",
    "Hajek",
    "Hallmann",
    "Hamann",
    "Hanenberger",
    "Hannecker",
    "Hanniske",
    "Hansen",
    "Hardy",
    "Hargasser",
    "Harms",
    "Harnapp",
    "Harter",
    "Harting",
    "Hartlieb",
    "Hartmann",
    "Hartwig",
    "Hartz",
    "Haschke",
    "Hasler",
    "Hasse",
    "Hassfeld",
    "Haug",
    "Hauke",
    "Haupt",
    "Haverney",
    "Heberstreit",
    "Hechler",
    "Hecht",
    "Heck",
    "Hedermann",
    "Hehl",
    "Heidelmann",
    "Heidler",
    "Heinemann",
    "Heinig",
    "Heinke",
    "Heinrich",
    "Heinze",
    "Heiser",
    "Heist",
    "Hellmann",
    "Helm",
    "Helmke",
    "Helpling",
    "Hengmith",
    "Henkel",
    "Hennes",
    "Henry",
    "Hense",
    "Hensel",
    "Hentel",
    "Hentschel",
    "Hentschke",
    "Hepperle",
    "Herberger",
    "Herbrand",
    "Hering",
    "Hermann",
    "Hermecke",
    "Herms",
    "Herold",
    "Herrmann",
    "Herschmann",
    "Hertel",
    "Herweg",
    "Herwig",
    "Herzenberg",
    "Hess",
    "Hesse",
    "Hessek",
    "Hessler",
    "Hetzler",
    "Heuck",
    "Heydemüller",
    "Hiebl",
    "Hildebrand",
    "Hildenbrand",
    "Hilgendorf",
    "Hillard",
    "Hiller",
    "Hingsen",
    "Hingst",
    "Hinrichs",
    "Hirsch",
    "Hirschberg",
    "Hirt",
    "Hodea",
    "Hoffman",
    "Hoffmann",
    "Hofmann",
    "Hohenberger",
    "Hohl",
    "Hohn",
    "Hohnheiser",
    "Hold",
    "Holdt",
    "Holinski",
    "Holl",
    "Holtfreter",
    "Holz",
    "Holzdeppe",
    "Holzner",
    "Hommel",
    "Honz",
    "Hooss",
    "Hoppe",
    "Horak",
    "Horn",
    "Horna",
    "Hornung",
    "Hort",
    "Howard",
    "Huber",
    "Huckestein",
    "Hudak",
    "Huebel",
    "Hugo",
    "Huhn",
    "Hujo",
    "Huke",
    "Huls",
    "Humbert",
    "Huneke",
    "Huth",
    "Häber",
    "Häfner",
    "Höcke",
    "Höft",
    "Höhne",
    "Hönig",
    "Hördt",
    "Hübenbecker",
    "Hübl",
    "Hübner",
    "Hügel",
    "Hüttcher",
    "Hütter",
    "Ibe",
    "Ihly",
    "Illing",
    "Isak",
    "Isekenmeier",
    "Itt",
    "Jacob",
    "Jacobs",
    "Jagusch",
    "Jahn",
    "Jahnke",
    "Jakobs",
    "Jakubczyk",
    "Jambor",
    "Jamrozy",
    "Jander",
    "Janich",
    "Janke",
    "Jansen",
    "Jarets",
    "Jaros",
    "Jasinski",
    "Jasper",
    "Jegorov",
    "Jellinghaus",
    "Jeorga",
    "Jerschabek",
    "Jess",
    "John",
    "Jonas",
    "Jossa",
    "Jucken",
    "Jung",
    "Jungbluth",
    "Jungton",
    "Just",
    "Jürgens",
    "Kaczmarek",
    "Kaesmacher",
    "Kahl",
    "Kahlert",
    "Kahles",
    "Kahlmeyer",
    "Kaiser",
    "Kalinowski",
    "Kallabis",
    "Kallensee",
    "Kampf",
    "Kampschulte",
    "Kappe",
    "Kappler",
    "Karhoff",
    "Karrass",
    "Karst",
    "Karsten",
    "Karus",
    "Kass",
    "Kasten",
    "Kastner",
    "Katzinski",
    "Kaufmann",
    "Kaul",
    "Kausemann",
    "Kawohl",
    "Kazmarek",
    "Kedzierski",
    "Keil",
    "Keiner",
    "Keller",
    "Kelm",
    "Kempe",
    "Kemper",
    "Kempter",
    "Kerl",
    "Kern",
    "Kesselring",
    "Kesselschläger",
    "Kette",
    "Kettenis",
    "Keutel",
    "Kick",
    "Kiessling",
    "Kinadeter",
    "Kinzel",
    "Kinzy",
    "Kirch",
    "Kirst",
    "Kisabaka",
    "Klaas",
    "Klabuhn",
    "Klapper",
    "Klauder",
    "Klaus",
    "Kleeberg",
    "Kleiber",
    "Klein",
    "Kleinert",
    "Kleininger",
    "Kleinmann",
    "Kleinsteuber",
    "Kleiss",
    "Klemme",
    "Klimczak",
    "Klinger",
    "Klink",
    "Klopsch",
    "Klose",
    "Kloss",
    "Kluge",
    "Kluwe",
    "Knabe",
    "Kneifel",
    "Knetsch",
    "Knies",
    "Knippel",
    "Knobel",
    "Knoblich",
    "Knoll",
    "Knorr",
    "Knorscheidt",
    "Knut",
    "Kobs",
    "Koch",
    "Kochan",
    "Kock",
    "Koczulla",
    "Koderisch",
    "Koehl",
    "Koehler",
    "Koenig",
    "Koester",
    "Kofferschlager",
    "Koha",
    "Kohle",
    "Kohlmann",
    "Kohnle",
    "Kohrt",
    "Koj",
    "Kolb",
    "Koleiski",
    "Kolokas",
    "Komoll",
    "Konieczny",
    "Konig",
    "Konow",
    "Konya",
    "Koob",
    "Kopf",
    "Kosenkow",
    "Koster",
    "Koszewski",
    "Koubaa",
    "Kovacs",
    "Kowalick",
    "Kowalinski",
    "Kozakiewicz",
    "Krabbe",
    "Kraft",
    "Kral",
    "Kramer",
    "Krauel",
    "Kraus",
    "Krause",
    "Krauspe",
    "Kreb",
    "Krebs",
    "Kreissig",
    "Kresse",
    "Kreutz",
    "Krieger",
    "Krippner",
    "Krodinger",
    "Krohn",
    "Krol",
    "Kron",
    "Krueger",
    "Krug",
    "Kruger",
    "Krull",
    "Kruschinski",
    "Krämer",
    "Kröckert",
    "Kröger",
    "Krüger",
    "Kubera",
    "Kufahl",
    "Kuhlee",
    "Kuhnen",
    "Kulimann",
    "Kulma",
    "Kumbernuss",
    "Kummle",
    "Kunz",
    "Kupfer",
    "Kupprion",
    "Kuprion",
    "Kurnicki",
    "Kurrat",
    "Kurschilgen",
    "Kuschewitz",
    "Kuschmann",
    "Kuske",
    "Kustermann",
    "Kutscherauer",
    "Kutzner",
    "Kwadwo",
    "Kähler",
    "Käther",
    "Köhler",
    "Köhrbrück",
    "Köhre",
    "Kölotzei",
    "König",
    "Köpernick",
    "Köseoglu",
    "Kúhn",
    "Kúhnert",
    "Kühn",
    "Kühnel",
    "Kühnemund",
    "Kühnert",
    "Kühnke",
    "Küsters",
    "Küter",
    "Laack",
    "Lack",
    "Ladewig",
    "Lakomy",
    "Lammert",
    "Lamos",
    "Landmann",
    "Lang",
    "Lange",
    "Langfeld",
    "Langhirt",
    "Lanig",
    "Lauckner",
    "Lauinger",
    "Laurén",
    "Lausecker",
    "Laux",
    "Laws",
    "Lax",
    "Leberer",
    "Lehmann",
    "Lehner",
    "Leibold",
    "Leide",
    "Leimbach",
    "Leipold",
    "Leist",
    "Leiter",
    "Leiteritz",
    "Leitheim",
    "Leiwesmeier",
    "Lenfers",
    "Lenk",
    "Lenz",
    "Lenzen",
    "Leo",
    "Lepthin",
    "Lesch",
    "Leschnik",
    "Letzelter",
    "Lewin",
    "Lewke",
    "Leyckes",
    "Lg",
    "Lichtenfeld",
    "Lichtenhagen",
    "Lichtl",
    "Liebach",
    "Liebe",
    "Liebich",
    "Liebold",
    "Lieder",
    "Lienshöft",
    "Linden",
    "Lindenberg",
    "Lindenmayer",
    "Lindner",
    "Linke",
    "Linnenbaum",
    "Lippe",
    "Lipske",
    "Lipus",
    "Lischka",
    "Lobinger",
    "Logsch",
    "Lohmann",
    "Lohre",
    "Lohse",
    "Lokar",
    "Loogen",
    "Lorenz",
    "Losch",
    "Loska",
    "Lott",
    "Loy",
    "Lubina",
    "Ludolf",
    "Lufft",
    "Lukoschek",
    "Lutje",
    "Lutz",
    "Löser",
    "Löwa",
    "Lübke",
    "Maak",
    "Maczey",
    "Madetzky",
    "Madubuko",
    "Mai",
    "Maier",
    "Maisch",
    "Malek",
    "Malkus",
    "Mallmann",
    "Malucha",
    "Manns",
    "Manz",
    "Marahrens",
    "Marchewski",
    "Margis",
    "Markowski",
    "Marl",
    "Marner",
    "Marquart",
    "Marschek",
    "Martel",
    "Marten",
    "Martin",
    "Marx",
    "Marxen",
    "Mathes",
    "Mathies",
    "Mathiszik",
    "Matschke",
    "Mattern",
    "Matthes",
    "Matula",
    "Mau",
    "Maurer",
    "Mauroff",
    "May",
    "Maybach",
    "Mayer",
    "Mebold",
    "Mehl",
    "Mehlhorn",
    "Mehlorn",
    "Meier",
    "Meisch",
    "Meissner",
    "Meloni",
    "Melzer",
    "Menga",
    "Menne",
    "Mensah",
    "Mensing",
    "Merkel",
    "Merseburg",
    "Mertens",
    "Mesloh",
    "Metzger",
    "Metzner",
    "Mewes",
    "Meyer",
    "Michallek",
    "Michel",
    "Mielke",
    "Mikitenko",
    "Milde",
    "Minah",
    "Mintzlaff",
    "Mockenhaupt",
    "Moede",
    "Moedl",
    "Moeller",
    "Moguenara",
    "Mohr",
    "Mohrhard",
    "Molitor",
    "Moll",
    "Moller",
    "Molzan",
    "Montag",
    "Moormann",
    "Mordhorst",
    "Morgenstern",
    "Morhelfer",
    "Moritz",
    "Moser",
    "Motchebon",
    "Motzenbbäcker",
    "Mrugalla",
    "Muckenthaler",
    "Mues",
    "Muller",
    "Mulrain",
    "Mächtig",
    "Mäder",
    "Möcks",
    "Mögenburg",
    "Möhsner",
    "Möldner",
    "Möllenbeck",
    "Möller",
    "Möllinger",
    "Mörsch",
    "Mühleis",
    "Müller",
    "Münch",
    "Nabein",
    "Nabow",
    "Nagel",
    "Nannen",
    "Nastvogel",
    "Nau",
    "Naubert",
    "Naumann",
    "Ne",
    "Neimke",
    "Nerius",
    "Neubauer",
    "Neubert",
    "Neuendorf",
    "Neumair",
    "Neumann",
    "Neupert",
    "Neurohr",
    "Neuschwander",
    "Newton",
    "Ney",
    "Nicolay",
    "Niedermeier",
    "Nieklauson",
    "Niklaus",
    "Nitzsche",
    "Noack",
    "Nodler",
    "Nolte",
    "Normann",
    "Norris",
    "Northoff",
    "Nowak",
    "Nussbeck",
    "Nwachukwu",
    "Nytra",
    "Nöh",
    "Oberem",
    "Obergföll",
    "Obermaier",
    "Ochs",
    "Oeser",
    "Olbrich",
    "Onnen",
    "Ophey",
    "Oppong",
    "Orth",
    "Orthmann",
    "Oschkenat",
    "Osei",
    "Osenberg",
    "Ostendarp",
    "Ostwald",
    "Otte",
    "Otto",
    "Paesler",
    "Pajonk",
    "Pallentin",
    "Panzig",
    "Paschke",
    "Patzwahl",
    "Paukner",
    "Peselman",
    "Peter",
    "Peters",
    "Petzold",
    "Pfeiffer",
    "Pfennig",
    "Pfersich",
    "Pfingsten",
    "Pflieger",
    "Pflügner",
    "Philipp",
    "Pichlmaier",
    "Piesker",
    "Pietsch",
    "Pingpank",
    "Pinnock",
    "Pippig",
    "Pitschugin",
    "Plank",
    "Plass",
    "Platzer",
    "Plauk",
    "Plautz",
    "Pletsch",
    "Plotzitzka",
    "Poehn",
    "Poeschl",
    "Pogorzelski",
    "Pohl",
    "Pohland",
    "Pohle",
    "Polifka",
    "Polizzi",
    "Pollmächer",
    "Pomp",
    "Ponitzsch",
    "Porsche",
    "Porth",
    "Poschmann",
    "Poser",
    "Pottel",
    "Prah",
    "Prange",
    "Prediger",
    "Pressler",
    "Preuk",
    "Preuss",
    "Prey",
    "Priemer",
    "Proske",
    "Pusch",
    "Pöche",
    "Pöge",
    "Raabe",
    "Rabenstein",
    "Rach",
    "Radtke",
    "Rahn",
    "Ranftl",
    "Rangen",
    "Ranz",
    "Rapp",
    "Rath",
    "Rau",
    "Raubuch",
    "Raukuc",
    "Rautenkranz",
    "Rehwagen",
    "Reiber",
    "Reichardt",
    "Reichel",
    "Reichling",
    "Reif",
    "Reifenrath",
    "Reimann",
    "Reinberg",
    "Reinelt",
    "Reinhardt",
    "Reinke",
    "Reitze",
    "Renk",
    "Rentz",
    "Renz",
    "Reppin",
    "Restle",
    "Restorff",
    "Retzke",
    "Reuber",
    "Reumann",
    "Reus",
    "Reuss",
    "Reusse",
    "Rheder",
    "Rhoden",
    "Richards",
    "Richter",
    "Riedel",
    "Riediger",
    "Rieger",
    "Riekmann",
    "Riepl",
    "Riermeier",
    "Riester",
    "Riethmüller",
    "Rietmüller",
    "Rietscher",
    "Ringel",
    "Ringer",
    "Rink",
    "Ripken",
    "Ritosek",
    "Ritschel",
    "Ritter",
    "Rittweg",
    "Ritz",
    "Roba",
    "Rockmeier",
    "Rodehau",
    "Rodowski",
    "Roecker",
    "Roggatz",
    "Rohländer",
    "Rohrer",
    "Rokossa",
    "Roleder",
    "Roloff",
    "Roos",
    "Rosbach",
    "Roschinsky",
    "Rose",
    "Rosenauer",
    "Rosenbauer",
    "Rosenthal",
    "Rosksch",
    "Rossberg",
    "Rossler",
    "Roth",
    "Rother",
    "Ruch",
    "Ruckdeschel",
    "Rumpf",
    "Rupprecht",
    "Ruth",
    "Ryjikh",
    "Ryzih",
    "Rädler",
    "Räntsch",
    "Rödiger",
    "Röse",
    "Röttger",
    "Rücker",
    "Rüdiger",
    "Rüter",
    "Sachse",
    "Sack",
    "Saflanis",
    "Sagafe",
    "Sagonas",
    "Sahner",
    "Saile",
    "Sailer",
    "Salow",
    "Salzer",
    "Salzmann",
    "Sammert",
    "Sander",
    "Sarvari",
    "Sattelmaier",
    "Sauer",
    "Sauerland",
    "Saumweber",
    "Savoia",
    "Scc",
    "Schacht",
    "Schaefer",
    "Schaffarzik",
    "Schahbasian",
    "Scharf",
    "Schedler",
    "Scheer",
    "Schelk",
    "Schellenbeck",
    "Schembera",
    "Schenk",
    "Scherbarth",
    "Scherer",
    "Schersing",
    "Scherz",
    "Scheurer",
    "Scheuring",
    "Scheytt",
    "Schielke",
    "Schieskow",
    "Schildhauer",
    "Schilling",
    "Schima",
    "Schimmer",
    "Schindzielorz",
    "Schirmer",
    "Schirrmeister",
    "Schlachter",
    "Schlangen",
    "Schlawitz",
    "Schlechtweg",
    "Schley",
    "Schlicht",
    "Schlitzer",
    "Schmalzle",
    "Schmid",
    "Schmidt",
    "Schmidtchen",
    "Schmitt",
    "Schmitz",
    "Schmuhl",
    "Schneider",
    "Schnelting",
    "Schnieder",
    "Schniedermeier",
    "Schnürer",
    "Schoberg",
    "Scholz",
    "Schonberg",
    "Schondelmaier",
    "Schorr",
    "Schott",
    "Schottmann",
    "Schouren",
    "Schrader",
    "Schramm",
    "Schreck",
    "Schreiber",
    "Schreiner",
    "Schreiter",
    "Schroder",
    "Schröder",
    "Schuermann",
    "Schuff",
    "Schuhaj",
    "Schuldt",
    "Schult",
    "Schulte",
    "Schultz",
    "Schultze",
    "Schulz",
    "Schulze",
    "Schumacher",
    "Schumann",
    "Schupp",
    "Schuri",
    "Schuster",
    "Schwab",
    "Schwalm",
    "Schwanbeck",
    "Schwandke",
    "Schwanitz",
    "Schwarthoff",
    "Schwartz",
    "Schwarz",
    "Schwarzer",
    "Schwarzkopf",
    "Schwarzmeier",
    "Schwatlo",
    "Schweisfurth",
    "Schwennen",
    "Schwerdtner",
    "Schwidde",
    "Schwirkschlies",
    "Schwuchow",
    "Schäfer",
    "Schäffel",
    "Schäffer",
    "Schäning",
    "Schöckel",
    "Schönball",
    "Schönbeck",
    "Schönberg",
    "Schönebeck",
    "Schönenberger",
    "Schönfeld",
    "Schönherr",
    "Schönlebe",
    "Schötz",
    "Schüler",
    "Schüppel",
    "Schütz",
    "Schütze",
    "Seeger",
    "Seelig",
    "Sehls",
    "Seibold",
    "Seidel",
    "Seiders",
    "Seigel",
    "Seiler",
    "Seitz",
    "Semisch",
    "Senkel",
    "Sewald",
    "Siebel",
    "Siebert",
    "Siegling",
    "Sielemann",
    "Siemon",
    "Siener",
    "Sievers",
    "Siewert",
    "Sihler",
    "Sillah",
    "Simon",
    "Sinnhuber",
    "Sischka",
    "Skibicki",
    "Sladek",
    "Slotta",
    "Smieja",
    "Soboll",
    "Sokolowski",
    "Soller",
    "Sollner",
    "Sommer",
    "Somssich",
    "Sonn",
    "Sonnabend",
    "Spahn",
    "Spank",
    "Spelmeyer",
    "Spiegelburg",
    "Spielvogel",
    "Spinner",
    "Spitzmüller",
    "Splinter",
    "Sporrer",
    "Sprenger",
    "Spöttel",
    "Stahl",
    "Stang",
    "Stanger",
    "Stauss",
    "Steding",
    "Steffen",
    "Steffny",
    "Steidl",
    "Steigauf",
    "Stein",
    "Steinecke",
    "Steinert",
    "Steinkamp",
    "Steinmetz",
    "Stelkens",
    "Stengel",
    "Stengl",
    "Stenzel",
    "Stepanov",
    "Stephan",
    "Stern",
    "Steuk",
    "Stief",
    "Stifel",
    "Stoll",
    "Stolle",
    "Stolz",
    "Storl",
    "Storp",
    "Stoutjesdijk",
    "Stratmann",
    "Straub",
    "Strausa",
    "Streck",
    "Streese",
    "Strege",
    "Streit",
    "Streller",
    "Strieder",
    "Striezel",
    "Strogies",
    "Strohschank",
    "Strunz",
    "Strutz",
    "Stube",
    "Stöckert",
    "Stöppler",
    "Stöwer",
    "Stürmer",
    "Suffa",
    "Sujew",
    "Sussmann",
    "Suthe",
    "Sutschet",
    "Swillims",
    "Szendrei",
    "Sören",
    "Sürth",
    "Tafelmeier",
    "Tang",
    "Tasche",
    "Taufratshofer",
    "Tegethof",
    "Teichmann",
    "Tepper",
    "Terheiden",
    "Terlecki",
    "Teufel",
    "Theele",
    "Thieke",
    "Thimm",
    "Thiomas",
    "Thomas",
    "Thriene",
    "Thränhardt",
    "Thust",
    "Thyssen",
    "Thöne",
    "Tidow",
    "Tiedtke",
    "Tietze",
    "Tilgner",
    "Tillack",
    "Timmermann",
    "Tischler",
    "Tischmann",
    "Tittman",
    "Tivontschik",
    "Tonat",
    "Tonn",
    "Trampeli",
    "Trauth",
    "Trautmann",
    "Travan",
    "Treff",
    "Tremmel",
    "Tress",
    "Tsamonikian",
    "Tschiers",
    "Tschirch",
    "Tuch",
    "Tucholke",
    "Tudow",
    "Tuschmo",
    "Tächl",
    "Többen",
    "Töpfer",
    "Uhlemann",
    "Uhlig",
    "Uhrig",
    "Uibel",
    "Uliczka",
    "Ullmann",
    "Ullrich",
    "Umbach",
    "Umlauft",
    "Umminger",
    "Unger",
    "Unterpaintner",
    "Urban",
    "Urbaniak",
    "Urbansky",
    "Urhig",
    "Vahlensieck",
    "Van",
    "Vangermain",
    "Vater",
    "Venghaus",
    "Verniest",
    "Verzi",
    "Vey",
    "Viellehner",
    "Vieweg",
    "Voelkel",
    "Vogel",
    "Vogelgsang",
    "Vogt",
    "Voigt",
    "Vokuhl",
    "Volk",
    "Volker",
    "Volkmann",
    "Von",
    "Vona",
    "Vontein",
    "Wachenbrunner",
    "Wachtel",
    "Wagner",
    "Waibel",
    "Wakan",
    "Waldmann",
    "Wallner",
    "Wallstab",
    "Walter",
    "Walther",
    "Walton",
    "Walz",
    "Wanner",
    "Wartenberg",
    "Waschbüsch",
    "Wassilew",
    "Wassiluk",
    "Weber",
    "Wehrsen",
    "Weidlich",
    "Weidner",
    "Weigel",
    "Weight",
    "Weiler",
    "Weimer",
    "Weis",
    "Weiss",
    "Weller",
    "Welsch",
    "Welz",
    "Welzel",
    "Weniger",
    "Wenk",
    "Werle",
    "Werner",
    "Werrmann",
    "Wessel",
    "Wessinghage",
    "Weyel",
    "Wezel",
    "Wichmann",
    "Wickert",
    "Wiebe",
    "Wiechmann",
    "Wiegelmann",
    "Wierig",
    "Wiese",
    "Wieser",
    "Wilhelm",
    "Wilky",
    "Will",
    "Willwacher",
    "Wilts",
    "Wimmer",
    "Winkelmann",
    "Winkler",
    "Winter",
    "Wischek",
    "Wischer",
    "Wissing",
    "Wittich",
    "Wittl",
    "Wolf",
    "Wolfarth",
    "Wolff",
    "Wollenberg",
    "Wollmann",
    "Woytkowska",
    "Wujak",
    "Wurm",
    "Wyludda",
    "Wölpert",
    "Wöschler",
    "Wühn",
    "Wünsche",
    "Zach",
    "Zaczkiewicz",
    "Zahn",
    "Zaituc",
    "Zandt",
    "Zanner",
    "Zapletal",
    "Zauber",
    "Zeidler",
    "Zekl",
    "Zender",
    "Zeuch",
    "Zeyen",
    "Zeyhle",
    "Ziegler",
    "Zimanyi",
    "Zimmer",
    "Zimmermann",
    "Zinser",
    "Zintl",
    "Zipp",
    "Zipse",
    "Zschunke",
    "Zuber",
    "Zwiener",
    "Zümsande",
    "Östringer",
    "Überacker"
  ];
});

// node_modules/faker/lib/locales/de_AT/name/prefix.js
var require_prefix5 = __commonJS((exports, module) => {
  module["exports"] = [
    "Dr.",
    "Prof. Dr."
  ];
});

// node_modules/faker/lib/locales/de_AT/name/nobility_title_prefix.js
var require_nobility_title_prefix2 = __commonJS((exports, module) => {
  module["exports"] = [
    "zu",
    "von",
    "vom",
    "von der"
  ];
});

// node_modules/faker/lib/locales/de_AT/name/name.js
var require_name12 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{nobility_title_prefix} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}"
  ];
});

// node_modules/faker/lib/locales/de_AT/name/index.js
var require_name11 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name = require_first_name2();
  name2.last_name = require_last_name2();
  name2.prefix = require_prefix5();
  name2.nobility_title_prefix = require_nobility_title_prefix2();
  name2.name = require_name12();
});

// node_modules/faker/lib/locales/de_AT/phone_number/formats.js
var require_formats6 = __commonJS((exports, module) => {
  module["exports"] = [
    "01 #######",
    "01#######",
    "+43-1-#######",
    "+431#######",
    "0#### ####",
    "0#########",
    "+43-####-####",
    "+43 ########"
  ];
});

// node_modules/faker/lib/locales/de_AT/phone_number/index.js
var require_phone_number4 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats6();
});

// node_modules/faker/lib/locales/de_AT/cell_phone/formats.js
var require_formats5 = __commonJS((exports, module) => {
  module["exports"] = [
    "+43-6##-#######",
    "06##-########",
    "+436#########",
    "06##########"
  ];
});

// node_modules/faker/lib/locales/de_AT/cell_phone/index.js
var require_cell_phone2 = __commonJS((exports, module) => {
  var cell_phone = {};
  module["exports"] = cell_phone;
  cell_phone.formats = require_formats5();
});

// node_modules/faker/lib/locales/de_AT/index.js
var require_de_AT = __commonJS((exports, module) => {
  var de_AT = {};
  module["exports"] = de_AT;
  de_AT.title = "German (Austria)";
  de_AT.address = require_address5();
  de_AT.company = require_company5();
  de_AT.internet = require_internet5();
  de_AT.name = require_name11();
  de_AT.phone_number = require_phone_number4();
  de_AT.cell_phone = require_cell_phone2();
});

// node_modules/faker/lib/locales/de_CH/address/country_code.js
var require_country_code = __commonJS((exports, module) => {
  module["exports"] = [
    "CH",
    "CH",
    "CH",
    "DE",
    "AT",
    "US",
    "LI",
    "US",
    "HK",
    "VN"
  ];
});

// node_modules/faker/lib/locales/de_CH/address/postcode.js
var require_postcode5 = __commonJS((exports, module) => {
  module["exports"] = [
    "1###",
    "2###",
    "3###",
    "4###",
    "5###",
    "6###",
    "7###",
    "8###",
    "9###"
  ];
});

// node_modules/faker/lib/locales/de_CH/address/default_country.js
var require_default_country5 = __commonJS((exports, module) => {
  module["exports"] = [
    "Schweiz"
  ];
});

// node_modules/faker/lib/locales/de_CH/address/index.js
var require_address6 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.country_code = require_country_code();
  address.postcode = require_postcode5();
  address.default_country = require_default_country5();
});

// node_modules/faker/lib/locales/de_CH/company/suffix.js
var require_suffix7 = __commonJS((exports, module) => {
  module["exports"] = [
    "AG",
    "GmbH",
    "und Söhne",
    "und Partner",
    "& Co.",
    "Gruppe",
    "LLC",
    "Inc."
  ];
});

// node_modules/faker/lib/locales/de_CH/company/name.js
var require_name13 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} und #{Name.last_name}"
  ];
});

// node_modules/faker/lib/locales/de_CH/company/index.js
var require_company6 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.suffix = require_suffix7();
  company.name = require_name13();
});

// node_modules/faker/lib/locales/de_CH/internet/domain_suffix.js
var require_domain_suffix5 = __commonJS((exports, module) => {
  module["exports"] = [
    "com",
    "net",
    "biz",
    "ch",
    "de",
    "li",
    "at",
    "ch",
    "ch"
  ];
});

// node_modules/faker/lib/locales/de_CH/internet/index.js
var require_internet6 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.domain_suffix = require_domain_suffix5();
});

// node_modules/faker/lib/locales/de_CH/name/first_name.js
var require_first_name3 = __commonJS((exports, module) => {
  module["exports"] = [
    "Adolf",
    "Adrian",
    "Agnes",
    "Alain",
    "Albert",
    "Alberto",
    "Aldo",
    "Alex",
    "Alexander",
    "Alexandre",
    "Alfons",
    "Alfred",
    "Alice",
    "Alois",
    "André",
    "Andrea",
    "Andreas",
    "Angela",
    "Angelo",
    "Anita",
    "Anna",
    "Anne",
    "Anne-Marie",
    "Annemarie",
    "Antoine",
    "Anton",
    "Antonio",
    "Armin",
    "Arnold",
    "Arthur",
    "Astrid",
    "Barbara",
    "Beat",
    "Beatrice",
    "Beatrix",
    "Bernadette",
    "Bernard",
    "Bernhard",
    "Bettina",
    "Brigitta",
    "Brigitte",
    "Bruno",
    "Carlo",
    "Carmen",
    "Caroline",
    "Catherine",
    "Chantal",
    "Charles",
    "Charlotte",
    "Christa",
    "Christian",
    "Christiane",
    "Christina",
    "Christine",
    "Christoph",
    "Christophe",
    "Claire",
    "Claude",
    "Claudia",
    "Claudine",
    "Claudio",
    "Corinne",
    "Cornelia",
    "Daniel",
    "Daniela",
    "Daniele",
    "Danielle",
    "David",
    "Denis",
    "Denise",
    "Didier",
    "Dieter",
    "Dominik",
    "Dominique",
    "Dora",
    "Doris",
    "Edgar",
    "Edith",
    "Eduard",
    "Edwin",
    "Eliane",
    "Elisabeth",
    "Elsa",
    "Elsbeth",
    "Emil",
    "Enrico",
    "Eric",
    "Erica",
    "Erich",
    "Erika",
    "Ernst",
    "Erwin",
    "Esther",
    "Eugen",
    "Eva",
    "Eveline",
    "Evelyne",
    "Fabienne",
    "Felix",
    "Ferdinand",
    "Florence",
    "Francesco",
    "Francis",
    "Franco",
    "François",
    "Françoise",
    "Frank",
    "Franz",
    "Franziska",
    "Frédéric",
    "Fredy",
    "Fridolin",
    "Friedrich",
    "Fritz",
    "Gabriel",
    "Gabriela",
    "Gabrielle",
    "Georg",
    "Georges",
    "Gérald",
    "Gérard",
    "Gerhard",
    "Gertrud",
    "Gianni",
    "Gilbert",
    "Giorgio",
    "Giovanni",
    "Gisela",
    "Giuseppe",
    "Gottfried",
    "Guido",
    "Guy",
    "Hanna",
    "Hans",
    "Hans-Peter",
    "Hans-Rudolf",
    "Hans-Ulrich",
    "Hansjörg",
    "Hanspeter",
    "Hansruedi",
    "Hansueli",
    "Harry",
    "Heidi",
    "Heinrich",
    "Heinz",
    "Helen",
    "Helena",
    "Helene",
    "Helmut",
    "Henri",
    "Herbert",
    "Hermann",
    "Hildegard",
    "Hubert",
    "Hugo",
    "Ingrid",
    "Irene",
    "Iris",
    "Isabelle",
    "Jacqueline",
    "Jacques",
    "Jakob",
    "Jan",
    "Janine",
    "Jean",
    "Jean-Claude",
    "Jean-Daniel",
    "Jean-François",
    "Jean-Jacques",
    "Jean-Louis",
    "Jean-Luc",
    "Jean-Marc",
    "Jean-Marie",
    "Jean-Paul",
    "Jean-Pierre",
    "Johann",
    "Johanna",
    "Johannes",
    "John",
    "Jolanda",
    "Jörg",
    "Josef",
    "Joseph",
    "Josette",
    "Josiane",
    "Judith",
    "Julia",
    "Jürg",
    "Karin",
    "Karl",
    "Katharina",
    "Klaus",
    "Konrad",
    "Kurt",
    "Laura",
    "Laurence",
    "Laurent",
    "Leo",
    "Liliane",
    "Liselotte",
    "Louis",
    "Luca",
    "Luigi",
    "Lukas",
    "Lydia",
    "Madeleine",
    "Maja",
    "Manfred",
    "Manuel",
    "Manuela",
    "Marc",
    "Marcel",
    "Marco",
    "Margrit",
    "Margrith",
    "Maria",
    "Marianne",
    "Mario",
    "Marion",
    "Markus",
    "Marlène",
    "Marlies",
    "Marlis",
    "Martha",
    "Martin",
    "Martina",
    "Martine",
    "Massimo",
    "Matthias",
    "Maurice",
    "Max",
    "Maya",
    "Michael",
    "Michel",
    "Michele",
    "Micheline",
    "Monica",
    "Monika",
    "Monique",
    "Myriam",
    "Nadia",
    "Nadja",
    "Nathalie",
    "Nelly",
    "Nicolas",
    "Nicole",
    "Niklaus",
    "Norbert",
    "Olivier",
    "Oskar",
    "Otto",
    "Paola",
    "Paolo",
    "Pascal",
    "Patricia",
    "Patrick",
    "Paul",
    "Peter",
    "Petra",
    "Philipp",
    "Philippe",
    "Pia",
    "Pierre",
    "Pierre-Alain",
    "Pierre-André",
    "Pius",
    "Priska",
    "Rainer",
    "Raymond",
    "Regina",
    "Regula",
    "Reinhard",
    "Remo",
    "Renata",
    "Renate",
    "Renato",
    "Rene",
    "René",
    "Reto",
    "Richard",
    "Rita",
    "Robert",
    "Roberto",
    "Roger",
    "Roland",
    "Rolf",
    "Roman",
    "Rosa",
    "Rosemarie",
    "Rosmarie",
    "Rudolf",
    "Ruedi",
    "Ruth",
    "Sabine",
    "Samuel",
    "Sandra",
    "Sandro",
    "Serge",
    "Silvia",
    "Silvio",
    "Simon",
    "Simone",
    "Sonia",
    "Sonja",
    "Stefan",
    "Stephan",
    "Stéphane",
    "Stéphanie",
    "Susanna",
    "Susanne",
    "Suzanne",
    "Sylvia",
    "Sylvie",
    "Theo",
    "Theodor",
    "Therese",
    "Thomas",
    "Toni",
    "Ueli",
    "Ulrich",
    "Urs",
    "Ursula",
    "Verena",
    "Véronique",
    "Victor",
    "Viktor",
    "Vreni",
    "Walter",
    "Werner",
    "Willi",
    "Willy",
    "Wolfgang",
    "Yolande",
    "Yves",
    "Yvette",
    "Yvonne"
  ];
});

// node_modules/faker/lib/locales/de_CH/name/last_name.js
var require_last_name3 = __commonJS((exports, module) => {
  module["exports"] = [
    "Ackermann",
    "Aebi",
    "Albrecht",
    "Ammann",
    "Amrein",
    "Arnold",
    "Bachmann",
    "Bader",
    "Bär",
    "Bättig",
    "Bauer",
    "Baumann",
    "Baumgartner",
    "Baur",
    "Beck",
    "Benz",
    "Berger",
    "Bernasconi",
    "Betschart",
    "Bianchi",
    "Bieri",
    "Blaser",
    "Blum",
    "Bolliger",
    "Bosshard",
    "Braun",
    "Brun",
    "Brunner",
    "Bucher",
    "Bühler",
    "Bühlmann",
    "Burri",
    "Christen",
    "Egger",
    "Egli",
    "Eichenberger",
    "Erni",
    "Ernst",
    "Eugster",
    "Fankhauser",
    "Favre",
    "Fehr",
    "Felber",
    "Felder",
    "Ferrari",
    "Fischer",
    "Flückiger",
    "Forster",
    "Frei",
    "Frey",
    "Frick",
    "Friedli",
    "Fuchs",
    "Furrer",
    "Gasser",
    "Geiger",
    "Gerber",
    "Gfeller",
    "Giger",
    "Gloor",
    "Graf",
    "Grob",
    "Gross",
    "Gut",
    "Haas",
    "Häfliger",
    "Hafner",
    "Hartmann",
    "Hasler",
    "Hauser",
    "Hermann",
    "Herzog",
    "Hess",
    "Hirt",
    "Hodel",
    "Hofer",
    "Hoffmann",
    "Hofmann",
    "Hofstetter",
    "Hotz",
    "Huber",
    "Hug",
    "Hunziker",
    "Hürlimann",
    "Imhof",
    "Isler",
    "Iten",
    "Jäggi",
    "Jenni",
    "Jost",
    "Kägi",
    "Kaiser",
    "Kälin",
    "Käser",
    "Kaufmann",
    "Keller",
    "Kern",
    "Kessler",
    "Knecht",
    "Koch",
    "Kohler",
    "Kuhn",
    "Küng",
    "Kunz",
    "Lang",
    "Lanz",
    "Lehmann",
    "Leu",
    "Leunberger",
    "Lüscher",
    "Lustenberger",
    "Lüthi",
    "Lutz",
    "Mäder",
    "Maier",
    "Marti",
    "Martin",
    "Maurer",
    "Mayer",
    "Meier",
    "Meili",
    "Meister",
    "Merz",
    "Mettler",
    "Meyer",
    "Michel",
    "Moser",
    "Müller",
    "Näf",
    "Ott",
    "Peter",
    "Pfister",
    "Portmann",
    "Probst",
    "Rey",
    "Ritter",
    "Roos",
    "Roth",
    "Rüegg",
    "Schäfer",
    "Schaller",
    "Schär",
    "Schärer",
    "Schaub",
    "Scheidegger",
    "Schenk",
    "Scherrer",
    "Schlatter",
    "Schmid",
    "Schmidt",
    "Schneider",
    "Schnyder",
    "Schoch",
    "Schuler",
    "Schumacher",
    "Schürch",
    "Schwab",
    "Schwarz",
    "Schweizer",
    "Seiler",
    "Senn",
    "Sidler",
    "Siegrist",
    "Sigrist",
    "Spörri",
    "Stadelmann",
    "Stalder",
    "Staub",
    "Stauffer",
    "Steffen",
    "Steiger",
    "Steiner",
    "Steinmann",
    "Stettler",
    "Stocker",
    "Stöckli",
    "Stucki",
    "Studer",
    "Stutz",
    "Suter",
    "Sutter",
    "Tanner",
    "Thommen",
    "Tobler",
    "Vogel",
    "Vogt",
    "Wagner",
    "Walder",
    "Walter",
    "Weber",
    "Wegmann",
    "Wehrli",
    "Weibel",
    "Wenger",
    "Wettstein",
    "Widmer",
    "Winkler",
    "Wirth",
    "Wirz",
    "Wolf",
    "Wüthrich",
    "Wyss",
    "Zbinden",
    "Zehnder",
    "Ziegler",
    "Zimmermann",
    "Zingg",
    "Zollinger",
    "Zürcher"
  ];
});

// node_modules/faker/lib/locales/de_CH/name/prefix.js
var require_prefix6 = __commonJS((exports, module) => {
  module["exports"] = [
    "Hr.",
    "Fr.",
    "Dr."
  ];
});

// node_modules/faker/lib/locales/de_CH/name/name.js
var require_name15 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}"
  ];
});

// node_modules/faker/lib/locales/de_CH/name/index.js
var require_name14 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name = require_first_name3();
  name2.last_name = require_last_name3();
  name2.prefix = require_prefix6();
  name2.name = require_name15();
});

// node_modules/faker/lib/locales/de_CH/phone_number/formats.js
var require_formats7 = __commonJS((exports, module) => {
  module["exports"] = [
    "0800 ### ###",
    "0800 ## ## ##",
    "0## ### ## ##",
    "0## ### ## ##",
    "+41 ## ### ## ##",
    "0900 ### ###",
    "076 ### ## ##",
    "+4178 ### ## ##",
    "0041 79 ### ## ##"
  ];
});

// node_modules/faker/lib/locales/de_CH/phone_number/index.js
var require_phone_number5 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats7();
});

// node_modules/faker/lib/locales/de_CH/index.js
var require_de_CH = __commonJS((exports, module) => {
  var de_CH = {};
  module["exports"] = de_CH;
  de_CH.title = "German (Switzerland)";
  de_CH.address = require_address6();
  de_CH.company = require_company6();
  de_CH.internet = require_internet6();
  de_CH.name = require_name14();
  de_CH.phone_number = require_phone_number5();
});

// node_modules/faker/lib/locales/en/address/city_prefix.js
var require_city_prefix2 = __commonJS((exports, module) => {
  module["exports"] = [
    "North",
    "East",
    "West",
    "South",
    "New",
    "Lake",
    "Port"
  ];
});

// node_modules/faker/lib/locales/en/address/city_suffix.js
var require_city_suffix2 = __commonJS((exports, module) => {
  module["exports"] = [
    "town",
    "ton",
    "land",
    "ville",
    "berg",
    "burgh",
    "borough",
    "bury",
    "view",
    "port",
    "mouth",
    "stad",
    "furt",
    "chester",
    "mouth",
    "fort",
    "haven",
    "side",
    "shire"
  ];
});

// node_modules/faker/lib/locales/en/address/county.js
var require_county = __commonJS((exports, module) => {
  module["exports"] = [
    "Avon",
    "Bedfordshire",
    "Berkshire",
    "Borders",
    "Buckinghamshire",
    "Cambridgeshire"
  ];
});

// node_modules/faker/lib/locales/en/address/country.js
var require_country5 = __commonJS((exports, module) => {
  module["exports"] = [
    "Afghanistan",
    "Albania",
    "Algeria",
    "American Samoa",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antarctica (the territory South of 60 deg S)",
    "Antigua and Barbuda",
    "Argentina",
    "Armenia",
    "Aruba",
    "Australia",
    "Austria",
    "Azerbaijan",
    "Bahamas",
    "Bahrain",
    "Bangladesh",
    "Barbados",
    "Belarus",
    "Belgium",
    "Belize",
    "Benin",
    "Bermuda",
    "Bhutan",
    "Bolivia",
    "Bosnia and Herzegovina",
    "Botswana",
    "Bouvet Island (Bouvetoya)",
    "Brazil",
    "British Indian Ocean Territory (Chagos Archipelago)",
    "Brunei Darussalam",
    "Bulgaria",
    "Burkina Faso",
    "Burundi",
    "Cambodia",
    "Cameroon",
    "Canada",
    "Cape Verde",
    "Cayman Islands",
    "Central African Republic",
    "Chad",
    "Chile",
    "China",
    "Christmas Island",
    "Cocos (Keeling) Islands",
    "Colombia",
    "Comoros",
    "Congo",
    "Cook Islands",
    "Costa Rica",
    "Cote d'Ivoire",
    "Croatia",
    "Cuba",
    "Cyprus",
    "Czech Republic",
    "Denmark",
    "Djibouti",
    "Dominica",
    "Dominican Republic",
    "Ecuador",
    "Egypt",
    "El Salvador",
    "Equatorial Guinea",
    "Eritrea",
    "Estonia",
    "Ethiopia",
    "Faroe Islands",
    "Falkland Islands (Malvinas)",
    "Fiji",
    "Finland",
    "France",
    "French Guiana",
    "French Polynesia",
    "French Southern Territories",
    "Gabon",
    "Gambia",
    "Georgia",
    "Germany",
    "Ghana",
    "Gibraltar",
    "Greece",
    "Greenland",
    "Grenada",
    "Guadeloupe",
    "Guam",
    "Guatemala",
    "Guernsey",
    "Guinea",
    "Guinea-Bissau",
    "Guyana",
    "Haiti",
    "Heard Island and McDonald Islands",
    "Holy See (Vatican City State)",
    "Honduras",
    "Hong Kong",
    "Hungary",
    "Iceland",
    "India",
    "Indonesia",
    "Iran",
    "Iraq",
    "Ireland",
    "Isle of Man",
    "Israel",
    "Italy",
    "Jamaica",
    "Japan",
    "Jersey",
    "Jordan",
    "Kazakhstan",
    "Kenya",
    "Kiribati",
    "Democratic People's Republic of Korea",
    "Republic of Korea",
    "Kuwait",
    "Kyrgyz Republic",
    "Lao People's Democratic Republic",
    "Latvia",
    "Lebanon",
    "Lesotho",
    "Liberia",
    "Libyan Arab Jamahiriya",
    "Liechtenstein",
    "Lithuania",
    "Luxembourg",
    "Macao",
    "Macedonia",
    "Madagascar",
    "Malawi",
    "Malaysia",
    "Maldives",
    "Mali",
    "Malta",
    "Marshall Islands",
    "Martinique",
    "Mauritania",
    "Mauritius",
    "Mayotte",
    "Mexico",
    "Micronesia",
    "Moldova",
    "Monaco",
    "Mongolia",
    "Montenegro",
    "Montserrat",
    "Morocco",
    "Mozambique",
    "Myanmar",
    "Namibia",
    "Nauru",
    "Nepal",
    "Netherlands Antilles",
    "Netherlands",
    "New Caledonia",
    "New Zealand",
    "Nicaragua",
    "Niger",
    "Nigeria",
    "Niue",
    "Norfolk Island",
    "Northern Mariana Islands",
    "Norway",
    "Oman",
    "Pakistan",
    "Palau",
    "Palestinian Territory",
    "Panama",
    "Papua New Guinea",
    "Paraguay",
    "Peru",
    "Philippines",
    "Pitcairn Islands",
    "Poland",
    "Portugal",
    "Puerto Rico",
    "Qatar",
    "Reunion",
    "Romania",
    "Russian Federation",
    "Rwanda",
    "Saint Barthelemy",
    "Saint Helena",
    "Saint Kitts and Nevis",
    "Saint Lucia",
    "Saint Martin",
    "Saint Pierre and Miquelon",
    "Saint Vincent and the Grenadines",
    "Samoa",
    "San Marino",
    "Sao Tome and Principe",
    "Saudi Arabia",
    "Senegal",
    "Serbia",
    "Seychelles",
    "Sierra Leone",
    "Singapore",
    "Slovakia (Slovak Republic)",
    "Slovenia",
    "Solomon Islands",
    "Somalia",
    "South Africa",
    "South Georgia and the South Sandwich Islands",
    "Spain",
    "Sri Lanka",
    "Sudan",
    "Suriname",
    "Svalbard & Jan Mayen Islands",
    "Swaziland",
    "Sweden",
    "Switzerland",
    "Syrian Arab Republic",
    "Taiwan",
    "Tajikistan",
    "Tanzania",
    "Thailand",
    "Timor-Leste",
    "Togo",
    "Tokelau",
    "Tonga",
    "Trinidad and Tobago",
    "Tunisia",
    "Turkey",
    "Turkmenistan",
    "Turks and Caicos Islands",
    "Tuvalu",
    "Uganda",
    "Ukraine",
    "United Arab Emirates",
    "United Kingdom",
    "United States of America",
    "United States Minor Outlying Islands",
    "Uruguay",
    "Uzbekistan",
    "Vanuatu",
    "Venezuela",
    "Vietnam",
    "Virgin Islands, British",
    "Virgin Islands, U.S.",
    "Wallis and Futuna",
    "Western Sahara",
    "Yemen",
    "Zambia",
    "Zimbabwe"
  ];
});

// node_modules/faker/lib/locales/en/address/country_code.js
var require_country_code2 = __commonJS((exports, module) => {
  module["exports"] = [
    "AD",
    "AE",
    "AF",
    "AG",
    "AI",
    "AL",
    "AM",
    "AO",
    "AQ",
    "AR",
    "AS",
    "AT",
    "AU",
    "AW",
    "AX",
    "AZ",
    "BA",
    "BB",
    "BD",
    "BE",
    "BF",
    "BG",
    "BH",
    "BI",
    "BJ",
    "BL",
    "BM",
    "BN",
    "BO",
    "BQ",
    "BQ",
    "BR",
    "BS",
    "BT",
    "BV",
    "BW",
    "BY",
    "BZ",
    "CA",
    "CC",
    "CD",
    "CF",
    "CG",
    "CH",
    "CI",
    "CK",
    "CL",
    "CM",
    "CN",
    "CO",
    "CR",
    "CU",
    "CV",
    "CW",
    "CX",
    "CY",
    "CZ",
    "DE",
    "DJ",
    "DK",
    "DM",
    "DO",
    "DZ",
    "EC",
    "EE",
    "EG",
    "EH",
    "ER",
    "ES",
    "ET",
    "FI",
    "FJ",
    "FK",
    "FM",
    "FO",
    "FR",
    "GA",
    "GB",
    "GD",
    "GE",
    "GF",
    "GG",
    "GH",
    "GI",
    "GL",
    "GM",
    "GN",
    "GP",
    "GQ",
    "GR",
    "GS",
    "GT",
    "GU",
    "GW",
    "GY",
    "HK",
    "HM",
    "HN",
    "HR",
    "HT",
    "HU",
    "ID",
    "IE",
    "IL",
    "IM",
    "IN",
    "IO",
    "IQ",
    "IR",
    "IS",
    "IT",
    "JE",
    "JM",
    "JO",
    "JP",
    "KE",
    "KG",
    "KH",
    "KI",
    "KM",
    "KN",
    "KP",
    "KR",
    "KW",
    "KY",
    "KZ",
    "LA",
    "LB",
    "LC",
    "LI",
    "LK",
    "LR",
    "LS",
    "LT",
    "LU",
    "LV",
    "LY",
    "MA",
    "MC",
    "MD",
    "ME",
    "MF",
    "MG",
    "MH",
    "MK",
    "ML",
    "MM",
    "MN",
    "MO",
    "MP",
    "MQ",
    "MR",
    "MS",
    "MT",
    "MU",
    "MV",
    "MW",
    "MX",
    "MY",
    "MZ",
    "NA",
    "NC",
    "NE",
    "NF",
    "NG",
    "NI",
    "NL",
    "NO",
    "NP",
    "NR",
    "NU",
    "NZ",
    "OM",
    "PA",
    "PE",
    "PF",
    "PG",
    "PH",
    "PK",
    "PL",
    "PM",
    "PN",
    "PR",
    "PS",
    "PT",
    "PW",
    "PY",
    "QA",
    "RE",
    "RO",
    "RS",
    "RU",
    "RW",
    "SA",
    "SB",
    "SC",
    "SD",
    "SE",
    "SG",
    "SH",
    "SI",
    "SJ",
    "SK",
    "SL",
    "SM",
    "SN",
    "SO",
    "SR",
    "SS",
    "ST",
    "SV",
    "SX",
    "SY",
    "SZ",
    "TC",
    "TD",
    "TF",
    "TG",
    "TH",
    "TJ",
    "TK",
    "TL",
    "TM",
    "TN",
    "TO",
    "TR",
    "TT",
    "TV",
    "TW",
    "TZ",
    "UA",
    "UG",
    "UM",
    "US",
    "UY",
    "UZ",
    "VA",
    "VC",
    "VE",
    "VG",
    "VI",
    "VN",
    "VU",
    "WF",
    "WS",
    "YE",
    "YT",
    "ZA",
    "ZM",
    "ZW"
  ];
});

// node_modules/faker/lib/locales/en/address/building_number.js
var require_building_number5 = __commonJS((exports, module) => {
  module["exports"] = [
    "#####",
    "####",
    "###"
  ];
});

// node_modules/faker/lib/locales/en/address/street_suffix.js
var require_street_suffix2 = __commonJS((exports, module) => {
  module["exports"] = [
    "Alley",
    "Avenue",
    "Branch",
    "Bridge",
    "Brook",
    "Brooks",
    "Burg",
    "Burgs",
    "Bypass",
    "Camp",
    "Canyon",
    "Cape",
    "Causeway",
    "Center",
    "Centers",
    "Circle",
    "Circles",
    "Cliff",
    "Cliffs",
    "Club",
    "Common",
    "Corner",
    "Corners",
    "Course",
    "Court",
    "Courts",
    "Cove",
    "Coves",
    "Creek",
    "Crescent",
    "Crest",
    "Crossing",
    "Crossroad",
    "Curve",
    "Dale",
    "Dam",
    "Divide",
    "Drive",
    "Drive",
    "Drives",
    "Estate",
    "Estates",
    "Expressway",
    "Extension",
    "Extensions",
    "Fall",
    "Falls",
    "Ferry",
    "Field",
    "Fields",
    "Flat",
    "Flats",
    "Ford",
    "Fords",
    "Forest",
    "Forge",
    "Forges",
    "Fork",
    "Forks",
    "Fort",
    "Freeway",
    "Garden",
    "Gardens",
    "Gateway",
    "Glen",
    "Glens",
    "Green",
    "Greens",
    "Grove",
    "Groves",
    "Harbor",
    "Harbors",
    "Haven",
    "Heights",
    "Highway",
    "Hill",
    "Hills",
    "Hollow",
    "Inlet",
    "Inlet",
    "Island",
    "Island",
    "Islands",
    "Islands",
    "Isle",
    "Isle",
    "Junction",
    "Junctions",
    "Key",
    "Keys",
    "Knoll",
    "Knolls",
    "Lake",
    "Lakes",
    "Land",
    "Landing",
    "Lane",
    "Light",
    "Lights",
    "Loaf",
    "Lock",
    "Locks",
    "Locks",
    "Lodge",
    "Lodge",
    "Loop",
    "Mall",
    "Manor",
    "Manors",
    "Meadow",
    "Meadows",
    "Mews",
    "Mill",
    "Mills",
    "Mission",
    "Mission",
    "Motorway",
    "Mount",
    "Mountain",
    "Mountain",
    "Mountains",
    "Mountains",
    "Neck",
    "Orchard",
    "Oval",
    "Overpass",
    "Park",
    "Parks",
    "Parkway",
    "Parkways",
    "Pass",
    "Passage",
    "Path",
    "Pike",
    "Pine",
    "Pines",
    "Place",
    "Plain",
    "Plains",
    "Plains",
    "Plaza",
    "Plaza",
    "Point",
    "Points",
    "Port",
    "Port",
    "Ports",
    "Ports",
    "Prairie",
    "Prairie",
    "Radial",
    "Ramp",
    "Ranch",
    "Rapid",
    "Rapids",
    "Rest",
    "Ridge",
    "Ridges",
    "River",
    "Road",
    "Road",
    "Roads",
    "Roads",
    "Route",
    "Row",
    "Rue",
    "Run",
    "Shoal",
    "Shoals",
    "Shore",
    "Shores",
    "Skyway",
    "Spring",
    "Springs",
    "Springs",
    "Spur",
    "Spurs",
    "Square",
    "Square",
    "Squares",
    "Squares",
    "Station",
    "Station",
    "Stravenue",
    "Stravenue",
    "Stream",
    "Stream",
    "Street",
    "Street",
    "Streets",
    "Summit",
    "Summit",
    "Terrace",
    "Throughway",
    "Trace",
    "Track",
    "Trafficway",
    "Trail",
    "Trail",
    "Tunnel",
    "Tunnel",
    "Turnpike",
    "Turnpike",
    "Underpass",
    "Union",
    "Unions",
    "Valley",
    "Valleys",
    "Via",
    "Viaduct",
    "View",
    "Views",
    "Village",
    "Village",
    "Villages",
    "Ville",
    "Vista",
    "Vista",
    "Walk",
    "Walks",
    "Wall",
    "Way",
    "Ways",
    "Well",
    "Wells"
  ];
});

// node_modules/faker/lib/locales/en/address/secondary_address.js
var require_secondary_address5 = __commonJS((exports, module) => {
  module["exports"] = [
    "Apt. ###",
    "Suite ###"
  ];
});

// node_modules/faker/lib/locales/en/address/postcode.js
var require_postcode6 = __commonJS((exports, module) => {
  module["exports"] = [
    "#####",
    "#####-####"
  ];
});

// node_modules/faker/lib/locales/en/address/postcode_by_state.js
var require_postcode_by_state = __commonJS((exports, module) => {
  module["exports"] = [
    "#####",
    "#####-####"
  ];
});

// node_modules/faker/lib/locales/en/address/state.js
var require_state5 = __commonJS((exports, module) => {
  module["exports"] = [
    "Alabama",
    "Alaska",
    "Arizona",
    "Arkansas",
    "California",
    "Colorado",
    "Connecticut",
    "Delaware",
    "Florida",
    "Georgia",
    "Hawaii",
    "Idaho",
    "Illinois",
    "Indiana",
    "Iowa",
    "Kansas",
    "Kentucky",
    "Louisiana",
    "Maine",
    "Maryland",
    "Massachusetts",
    "Michigan",
    "Minnesota",
    "Mississippi",
    "Missouri",
    "Montana",
    "Nebraska",
    "Nevada",
    "New Hampshire",
    "New Jersey",
    "New Mexico",
    "New York",
    "North Carolina",
    "North Dakota",
    "Ohio",
    "Oklahoma",
    "Oregon",
    "Pennsylvania",
    "Rhode Island",
    "South Carolina",
    "South Dakota",
    "Tennessee",
    "Texas",
    "Utah",
    "Vermont",
    "Virginia",
    "Washington",
    "West Virginia",
    "Wisconsin",
    "Wyoming"
  ];
});

// node_modules/faker/lib/locales/en/address/state_abbr.js
var require_state_abbr4 = __commonJS((exports, module) => {
  module["exports"] = [
    "AL",
    "AK",
    "AZ",
    "AR",
    "CA",
    "CO",
    "CT",
    "DE",
    "FL",
    "GA",
    "HI",
    "ID",
    "IL",
    "IN",
    "IA",
    "KS",
    "KY",
    "LA",
    "ME",
    "MD",
    "MA",
    "MI",
    "MN",
    "MS",
    "MO",
    "MT",
    "NE",
    "NV",
    "NH",
    "NJ",
    "NM",
    "NY",
    "NC",
    "ND",
    "OH",
    "OK",
    "OR",
    "PA",
    "RI",
    "SC",
    "SD",
    "TN",
    "TX",
    "UT",
    "VT",
    "VA",
    "WA",
    "WV",
    "WI",
    "WY"
  ];
});

// node_modules/faker/lib/locales/en/address/time_zone.js
var require_time_zone2 = __commonJS((exports, module) => {
  module["exports"] = [
    "Pacific/Midway",
    "Pacific/Pago_Pago",
    "Pacific/Honolulu",
    "America/Juneau",
    "America/Los_Angeles",
    "America/Tijuana",
    "America/Denver",
    "America/Phoenix",
    "America/Chihuahua",
    "America/Mazatlan",
    "America/Chicago",
    "America/Regina",
    "America/Mexico_City",
    "America/Mexico_City",
    "America/Monterrey",
    "America/Guatemala",
    "America/New_York",
    "America/Indiana/Indianapolis",
    "America/Bogota",
    "America/Lima",
    "America/Lima",
    "America/Halifax",
    "America/Caracas",
    "America/La_Paz",
    "America/Santiago",
    "America/St_Johns",
    "America/Sao_Paulo",
    "America/Argentina/Buenos_Aires",
    "America/Guyana",
    "America/Godthab",
    "Atlantic/South_Georgia",
    "Atlantic/Azores",
    "Atlantic/Cape_Verde",
    "Europe/Dublin",
    "Europe/London",
    "Europe/Lisbon",
    "Europe/London",
    "Africa/Casablanca",
    "Africa/Monrovia",
    "Etc/UTC",
    "Europe/Belgrade",
    "Europe/Bratislava",
    "Europe/Budapest",
    "Europe/Ljubljana",
    "Europe/Prague",
    "Europe/Sarajevo",
    "Europe/Skopje",
    "Europe/Warsaw",
    "Europe/Zagreb",
    "Europe/Brussels",
    "Europe/Copenhagen",
    "Europe/Madrid",
    "Europe/Paris",
    "Europe/Amsterdam",
    "Europe/Berlin",
    "Europe/Berlin",
    "Europe/Rome",
    "Europe/Stockholm",
    "Europe/Vienna",
    "Africa/Algiers",
    "Europe/Bucharest",
    "Africa/Cairo",
    "Europe/Helsinki",
    "Europe/Kiev",
    "Europe/Riga",
    "Europe/Sofia",
    "Europe/Tallinn",
    "Europe/Vilnius",
    "Europe/Athens",
    "Europe/Istanbul",
    "Europe/Minsk",
    "Asia/Jerusalem",
    "Africa/Harare",
    "Africa/Johannesburg",
    "Europe/Moscow",
    "Europe/Moscow",
    "Europe/Moscow",
    "Asia/Kuwait",
    "Asia/Riyadh",
    "Africa/Nairobi",
    "Asia/Baghdad",
    "Asia/Tehran",
    "Asia/Muscat",
    "Asia/Muscat",
    "Asia/Baku",
    "Asia/Tbilisi",
    "Asia/Yerevan",
    "Asia/Kabul",
    "Asia/Yekaterinburg",
    "Asia/Karachi",
    "Asia/Karachi",
    "Asia/Tashkent",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kathmandu",
    "Asia/Dhaka",
    "Asia/Dhaka",
    "Asia/Colombo",
    "Asia/Almaty",
    "Asia/Novosibirsk",
    "Asia/Rangoon",
    "Asia/Bangkok",
    "Asia/Bangkok",
    "Asia/Jakarta",
    "Asia/Krasnoyarsk",
    "Asia/Shanghai",
    "Asia/Chongqing",
    "Asia/Hong_Kong",
    "Asia/Urumqi",
    "Asia/Kuala_Lumpur",
    "Asia/Singapore",
    "Asia/Taipei",
    "Australia/Perth",
    "Asia/Irkutsk",
    "Asia/Ulaanbaatar",
    "Asia/Seoul",
    "Asia/Tokyo",
    "Asia/Tokyo",
    "Asia/Tokyo",
    "Asia/Yakutsk",
    "Australia/Darwin",
    "Australia/Adelaide",
    "Australia/Melbourne",
    "Australia/Melbourne",
    "Australia/Sydney",
    "Australia/Brisbane",
    "Australia/Hobart",
    "Asia/Vladivostok",
    "Pacific/Guam",
    "Pacific/Port_Moresby",
    "Asia/Magadan",
    "Asia/Magadan",
    "Pacific/Noumea",
    "Pacific/Fiji",
    "Asia/Kamchatka",
    "Pacific/Majuro",
    "Pacific/Auckland",
    "Pacific/Auckland",
    "Pacific/Tongatapu",
    "Pacific/Fakaofo",
    "Pacific/Apia"
  ];
});

// node_modules/faker/lib/locales/en/address/city.js
var require_city5 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{city_prefix} #{Name.first_name}#{city_suffix}",
    "#{city_prefix} #{Name.first_name}",
    "#{Name.first_name}#{city_suffix}",
    "#{Name.last_name}#{city_suffix}"
  ];
});

// node_modules/faker/lib/locales/en/address/street_name.js
var require_street_name5 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Name.first_name} #{street_suffix}",
    "#{Name.last_name} #{street_suffix}"
  ];
});

// node_modules/faker/lib/locales/en/address/street_address.js
var require_street_address5 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{building_number} #{street_name}"
  ];
});

// node_modules/faker/lib/locales/en/address/default_country.js
var require_default_country6 = __commonJS((exports, module) => {
  module["exports"] = [
    "United States of America"
  ];
});

// node_modules/faker/lib/locales/en/address/index.js
var require_address7 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.city_prefix = require_city_prefix2();
  address.city_suffix = require_city_suffix2();
  address.county = require_county();
  address.country = require_country5();
  address.country_code = require_country_code2();
  address.building_number = require_building_number5();
  address.street_suffix = require_street_suffix2();
  address.secondary_address = require_secondary_address5();
  address.postcode = require_postcode6();
  address.postcode_by_state = require_postcode_by_state();
  address.state = require_state5();
  address.state_abbr = require_state_abbr4();
  address.time_zone = require_time_zone2();
  address.city = require_city5();
  address.street_name = require_street_name5();
  address.street_address = require_street_address5();
  address.default_country = require_default_country6();
});

// node_modules/faker/lib/locales/en/credit_card/visa.js
var require_visa = __commonJS((exports, module) => {
  module["exports"] = [
    "/4###########L/",
    "/4###-####-####-###L/"
  ];
});

// node_modules/faker/lib/locales/en/credit_card/mastercard.js
var require_mastercard = __commonJS((exports, module) => {
  module["exports"] = [
    "/5[1-5]##-####-####-###L/",
    "/6771-89##-####-###L/"
  ];
});

// node_modules/faker/lib/locales/en/credit_card/discover.js
var require_discover = __commonJS((exports, module) => {
  module["exports"] = [
    "/6011-####-####-###L/",
    "/65##-####-####-###L/",
    "/64[4-9]#-####-####-###L/",
    "/6011-62##-####-####-###L/",
    "/65##-62##-####-####-###L/",
    "/64[4-9]#-62##-####-####-###L/"
  ];
});

// node_modules/faker/lib/locales/en/credit_card/american_express.js
var require_american_express = __commonJS((exports, module) => {
  module["exports"] = [
    "/34##-######-####L/",
    "/37##-######-####L/"
  ];
});

// node_modules/faker/lib/locales/en/credit_card/diners_club.js
var require_diners_club = __commonJS((exports, module) => {
  module["exports"] = [
    "/30[0-5]#-######-###L/",
    "/368#-######-###L/"
  ];
});

// node_modules/faker/lib/locales/en/credit_card/jcb.js
var require_jcb = __commonJS((exports, module) => {
  module["exports"] = [
    "/3528-####-####-###L/",
    "/3529-####-####-###L/",
    "/35[3-8]#-####-####-###L/"
  ];
});

// node_modules/faker/lib/locales/en/credit_card/switch.js
var require_switch = __commonJS((exports, module) => {
  module["exports"] = [
    "/6759-####-####-###L/",
    "/6759-####-####-####-#L/",
    "/6759-####-####-####-##L/"
  ];
});

// node_modules/faker/lib/locales/en/credit_card/solo.js
var require_solo = __commonJS((exports, module) => {
  module["exports"] = [
    "/6767-####-####-###L/",
    "/6767-####-####-####-#L/",
    "/6767-####-####-####-##L/"
  ];
});

// node_modules/faker/lib/locales/en/credit_card/maestro.js
var require_maestro = __commonJS((exports, module) => {
  module["exports"] = [
    "/50#{9,16}L/",
    "/5[6-8]#{9,16}L/",
    "/56##{9,16}L/"
  ];
});

// node_modules/faker/lib/locales/en/credit_card/laser.js
var require_laser = __commonJS((exports, module) => {
  module["exports"] = [
    "/6304###########L/",
    "/6706###########L/",
    "/6771###########L/",
    "/6709###########L/",
    "/6304#########{5,6}L/",
    "/6706#########{5,6}L/",
    "/6771#########{5,6}L/",
    "/6709#########{5,6}L/"
  ];
});

// node_modules/faker/lib/locales/en/credit_card/index.js
var require_credit_card = __commonJS((exports, module) => {
  var credit_card = {};
  module["exports"] = credit_card;
  credit_card.visa = require_visa();
  credit_card.mastercard = require_mastercard();
  credit_card.discover = require_discover();
  credit_card.american_express = require_american_express();
  credit_card.diners_club = require_diners_club();
  credit_card.jcb = require_jcb();
  credit_card.switch = require_switch();
  credit_card.solo = require_solo();
  credit_card.maestro = require_maestro();
  credit_card.laser = require_laser();
});

// node_modules/faker/lib/locales/en/company/suffix.js
var require_suffix8 = __commonJS((exports, module) => {
  module["exports"] = [
    "Inc",
    "and Sons",
    "LLC",
    "Group"
  ];
});

// node_modules/faker/lib/locales/en/company/adjective.js
var require_adjective2 = __commonJS((exports, module) => {
  module["exports"] = [
    "Adaptive",
    "Advanced",
    "Ameliorated",
    "Assimilated",
    "Automated",
    "Balanced",
    "Business-focused",
    "Centralized",
    "Cloned",
    "Compatible",
    "Configurable",
    "Cross-group",
    "Cross-platform",
    "Customer-focused",
    "Customizable",
    "Decentralized",
    "De-engineered",
    "Devolved",
    "Digitized",
    "Distributed",
    "Diverse",
    "Down-sized",
    "Enhanced",
    "Enterprise-wide",
    "Ergonomic",
    "Exclusive",
    "Expanded",
    "Extended",
    "Face to face",
    "Focused",
    "Front-line",
    "Fully-configurable",
    "Function-based",
    "Fundamental",
    "Future-proofed",
    "Grass-roots",
    "Horizontal",
    "Implemented",
    "Innovative",
    "Integrated",
    "Intuitive",
    "Inverse",
    "Managed",
    "Mandatory",
    "Monitored",
    "Multi-channelled",
    "Multi-lateral",
    "Multi-layered",
    "Multi-tiered",
    "Networked",
    "Object-based",
    "Open-architected",
    "Open-source",
    "Operative",
    "Optimized",
    "Optional",
    "Organic",
    "Organized",
    "Persevering",
    "Persistent",
    "Phased",
    "Polarised",
    "Pre-emptive",
    "Proactive",
    "Profit-focused",
    "Profound",
    "Programmable",
    "Progressive",
    "Public-key",
    "Quality-focused",
    "Reactive",
    "Realigned",
    "Re-contextualized",
    "Re-engineered",
    "Reduced",
    "Reverse-engineered",
    "Right-sized",
    "Robust",
    "Seamless",
    "Secured",
    "Self-enabling",
    "Sharable",
    "Stand-alone",
    "Streamlined",
    "Switchable",
    "Synchronised",
    "Synergistic",
    "Synergized",
    "Team-oriented",
    "Total",
    "Triple-buffered",
    "Universal",
    "Up-sized",
    "Upgradable",
    "User-centric",
    "User-friendly",
    "Versatile",
    "Virtual",
    "Visionary",
    "Vision-oriented"
  ];
});

// node_modules/faker/lib/locales/en/company/descriptor.js
var require_descriptor2 = __commonJS((exports, module) => {
  module["exports"] = [
    "24 hour",
    "24/7",
    "3rd generation",
    "4th generation",
    "5th generation",
    "6th generation",
    "actuating",
    "analyzing",
    "asymmetric",
    "asynchronous",
    "attitude-oriented",
    "background",
    "bandwidth-monitored",
    "bi-directional",
    "bifurcated",
    "bottom-line",
    "clear-thinking",
    "client-driven",
    "client-server",
    "coherent",
    "cohesive",
    "composite",
    "context-sensitive",
    "contextually-based",
    "content-based",
    "dedicated",
    "demand-driven",
    "didactic",
    "directional",
    "discrete",
    "disintermediate",
    "dynamic",
    "eco-centric",
    "empowering",
    "encompassing",
    "even-keeled",
    "executive",
    "explicit",
    "exuding",
    "fault-tolerant",
    "foreground",
    "fresh-thinking",
    "full-range",
    "global",
    "grid-enabled",
    "heuristic",
    "high-level",
    "holistic",
    "homogeneous",
    "human-resource",
    "hybrid",
    "impactful",
    "incremental",
    "intangible",
    "interactive",
    "intermediate",
    "leading edge",
    "local",
    "logistical",
    "maximized",
    "methodical",
    "mission-critical",
    "mobile",
    "modular",
    "motivating",
    "multimedia",
    "multi-state",
    "multi-tasking",
    "national",
    "needs-based",
    "neutral",
    "next generation",
    "non-volatile",
    "object-oriented",
    "optimal",
    "optimizing",
    "radical",
    "real-time",
    "reciprocal",
    "regional",
    "responsive",
    "scalable",
    "secondary",
    "solution-oriented",
    "stable",
    "static",
    "systematic",
    "systemic",
    "system-worthy",
    "tangible",
    "tertiary",
    "transitional",
    "uniform",
    "upward-trending",
    "user-facing",
    "value-added",
    "web-enabled",
    "well-modulated",
    "zero administration",
    "zero defect",
    "zero tolerance"
  ];
});

// node_modules/faker/lib/locales/en/company/noun.js
var require_noun2 = __commonJS((exports, module) => {
  module["exports"] = [
    "ability",
    "access",
    "adapter",
    "algorithm",
    "alliance",
    "analyzer",
    "application",
    "approach",
    "architecture",
    "archive",
    "artificial intelligence",
    "array",
    "attitude",
    "benchmark",
    "budgetary management",
    "capability",
    "capacity",
    "challenge",
    "circuit",
    "collaboration",
    "complexity",
    "concept",
    "conglomeration",
    "contingency",
    "core",
    "customer loyalty",
    "database",
    "data-warehouse",
    "definition",
    "emulation",
    "encoding",
    "encryption",
    "extranet",
    "firmware",
    "flexibility",
    "focus group",
    "forecast",
    "frame",
    "framework",
    "function",
    "functionalities",
    "Graphic Interface",
    "groupware",
    "Graphical User Interface",
    "hardware",
    "help-desk",
    "hierarchy",
    "hub",
    "implementation",
    "info-mediaries",
    "infrastructure",
    "initiative",
    "installation",
    "instruction set",
    "interface",
    "internet solution",
    "intranet",
    "knowledge user",
    "knowledge base",
    "local area network",
    "leverage",
    "matrices",
    "matrix",
    "methodology",
    "middleware",
    "migration",
    "model",
    "moderator",
    "monitoring",
    "moratorium",
    "neural-net",
    "open architecture",
    "open system",
    "orchestration",
    "paradigm",
    "parallelism",
    "policy",
    "portal",
    "pricing structure",
    "process improvement",
    "product",
    "productivity",
    "project",
    "projection",
    "protocol",
    "secured line",
    "service-desk",
    "software",
    "solution",
    "standardization",
    "strategy",
    "structure",
    "success",
    "superstructure",
    "support",
    "synergy",
    "system engine",
    "task-force",
    "throughput",
    "time-frame",
    "toolset",
    "utilisation",
    "website",
    "workforce"
  ];
});

// node_modules/faker/lib/locales/en/company/bs_verb.js
var require_bs_verb2 = __commonJS((exports, module) => {
  module["exports"] = [
    "implement",
    "utilize",
    "integrate",
    "streamline",
    "optimize",
    "evolve",
    "transform",
    "embrace",
    "enable",
    "orchestrate",
    "leverage",
    "reinvent",
    "aggregate",
    "architect",
    "enhance",
    "incentivize",
    "morph",
    "empower",
    "envisioneer",
    "monetize",
    "harness",
    "facilitate",
    "seize",
    "disintermediate",
    "synergize",
    "strategize",
    "deploy",
    "brand",
    "grow",
    "target",
    "syndicate",
    "synthesize",
    "deliver",
    "mesh",
    "incubate",
    "engage",
    "maximize",
    "benchmark",
    "expedite",
    "reintermediate",
    "whiteboard",
    "visualize",
    "repurpose",
    "innovate",
    "scale",
    "unleash",
    "drive",
    "extend",
    "engineer",
    "revolutionize",
    "generate",
    "exploit",
    "transition",
    "e-enable",
    "iterate",
    "cultivate",
    "matrix",
    "productize",
    "redefine",
    "recontextualize"
  ];
});

// node_modules/faker/lib/locales/en/company/bs_adjective.js
var require_bs_adjective = __commonJS((exports, module) => {
  module["exports"] = [
    "clicks-and-mortar",
    "value-added",
    "vertical",
    "proactive",
    "robust",
    "revolutionary",
    "scalable",
    "leading-edge",
    "innovative",
    "intuitive",
    "strategic",
    "e-business",
    "mission-critical",
    "sticky",
    "one-to-one",
    "24/7",
    "end-to-end",
    "global",
    "B2B",
    "B2C",
    "granular",
    "frictionless",
    "virtual",
    "viral",
    "dynamic",
    "24/365",
    "best-of-breed",
    "killer",
    "magnetic",
    "bleeding-edge",
    "web-enabled",
    "interactive",
    "dot-com",
    "sexy",
    "back-end",
    "real-time",
    "efficient",
    "front-end",
    "distributed",
    "seamless",
    "extensible",
    "turn-key",
    "world-class",
    "open-source",
    "cross-platform",
    "cross-media",
    "synergistic",
    "bricks-and-clicks",
    "out-of-the-box",
    "enterprise",
    "integrated",
    "impactful",
    "wireless",
    "transparent",
    "next-generation",
    "cutting-edge",
    "user-centric",
    "visionary",
    "customized",
    "ubiquitous",
    "plug-and-play",
    "collaborative",
    "compelling",
    "holistic",
    "rich"
  ];
});

// node_modules/faker/lib/locales/en/company/bs_noun.js
var require_bs_noun2 = __commonJS((exports, module) => {
  module["exports"] = [
    "synergies",
    "web-readiness",
    "paradigms",
    "markets",
    "partnerships",
    "infrastructures",
    "platforms",
    "initiatives",
    "channels",
    "eyeballs",
    "communities",
    "ROI",
    "solutions",
    "e-tailers",
    "e-services",
    "action-items",
    "portals",
    "niches",
    "technologies",
    "content",
    "vortals",
    "supply-chains",
    "convergence",
    "relationships",
    "architectures",
    "interfaces",
    "e-markets",
    "e-commerce",
    "systems",
    "bandwidth",
    "infomediaries",
    "models",
    "mindshare",
    "deliverables",
    "users",
    "schemas",
    "networks",
    "applications",
    "metrics",
    "e-business",
    "functionalities",
    "experiences",
    "web services",
    "methodologies"
  ];
});

// node_modules/faker/lib/locales/en/company/name.js
var require_name17 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} and #{Name.last_name}"
  ];
});

// node_modules/faker/lib/locales/en/company/index.js
var require_company7 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.suffix = require_suffix8();
  company.adjective = require_adjective2();
  company.descriptor = require_descriptor2();
  company.noun = require_noun2();
  company.bs_verb = require_bs_verb2();
  company.bs_adjective = require_bs_adjective();
  company.bs_noun = require_bs_noun2();
  company.name = require_name17();
});

// node_modules/faker/lib/locales/en/internet/free_email.js
var require_free_email5 = __commonJS((exports, module) => {
  module["exports"] = [
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ];
});

// node_modules/faker/lib/locales/en/internet/example_email.js
var require_example_email = __commonJS((exports, module) => {
  module["exports"] = [
    "example.org",
    "example.com",
    "example.net"
  ];
});

// node_modules/faker/lib/locales/en/internet/domain_suffix.js
var require_domain_suffix6 = __commonJS((exports, module) => {
  module["exports"] = [
    "com",
    "biz",
    "info",
    "name",
    "net",
    "org"
  ];
});

// node_modules/faker/lib/locales/en/internet/avatar_uri.js
var require_avatar_uri = __commonJS((exports, module) => {
  module["exports"] = [
    "https://s3.amazonaws.com/uifaces/faces/twitter/jarjan/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mahdif/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sprayaga/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ruzinav/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/Skyhartman/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/moscoz/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kurafire/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/91bilal/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/igorgarybaldi/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/calebogden/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/malykhinv/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/joelhelin/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kushsolitary/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/coreyweb/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/snowshade/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/areus/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/holdenweb/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/heyimjuani/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/envex/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/unterdreht/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/collegeman/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/peejfancher/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/andyisonline/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ultragex/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/fuck_you_two/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/adellecharles/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ateneupopular/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ahmetalpbalkan/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/Stievius/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kerem/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/osvaldas/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/angelceballos/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/thierrykoblentz/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/peterlandt/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/catarino/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/weglov/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/brandclay/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ahmetsulek/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nicolasfolliot/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jayrobinson/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/victorerixon/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kolage/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/michzen/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/markjenkins/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nicolai_larsen/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/gt/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/noxdzine/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/alagoon/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/idiot/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mizko/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/chadengle/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mutlu82/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/simobenso/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vocino/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/guiiipontes/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/soyjavi/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/joshaustin/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/tomaslau/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/VinThomas/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ManikRathee/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/langate/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/cemshid/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/leemunroe/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/_shahedk/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/enda/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/BillSKenney/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/divya/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/joshhemsley/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sindresorhus/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/soffes/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/9lessons/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/linux29/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/Chakintosh/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/anaami/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/joreira/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/shadeed9/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/scottkclark/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jedbridges/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/salleedesign/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/marakasina/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ariil/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/BrianPurkiss/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/michaelmartinho/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bublienko/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/devankoshal/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ZacharyZorbas/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/timmillwood/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/joshuasortino/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/damenleeturks/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/tomas_janousek/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/herrhaase/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/RussellBishop/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/brajeshwar/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/cbracco/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bermonpainter/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/abdullindenis/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/isacosta/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/suprb/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/yalozhkin/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/chandlervdw/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/iamgarth/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/_victa/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/commadelimited/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/roybarberuk/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/axel/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vladarbatov/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ffbel/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/syropian/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ankitind/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/traneblow/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/flashmurphy/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ChrisFarina78/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/baliomega/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/saschamt/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jm_denis/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/anoff/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kennyadr/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/chatyrko/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dingyi/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mds/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/terryxlife/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/aaroni/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kinday/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/prrstn/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/eduardostuart/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dhilipsiva/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/GavicoInd/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/baires/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/rohixx/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bigmancho/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/blakesimkins/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/leeiio/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/tjrus/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/uberschizo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kylefoundry/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/claudioguglieri/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ripplemdk/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/exentrich/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jakemoore/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/joaoedumedeiros/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/poormini/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/tereshenkov/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/keryilmaz/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/haydn_woods/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/rude/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/llun/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sgaurav_baghel/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jamiebrittain/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/badlittleduck/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/pifagor/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/agromov/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/benefritz/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/erwanhesry/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/diesellaws/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jeremiaha/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/koridhandy/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/chaensel/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/andrewcohen/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/smaczny/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/gonzalorobaina/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nandini_m/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sydlawrence/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/cdharrison/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/tgerken/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/lewisainslie/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/charliecwaite/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/robbschiller/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/flexrs/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mattdetails/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/raquelwilson/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/karsh/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mrmartineau/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/opnsrce/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/hgharrygo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/maximseshuk/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/uxalex/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/samihah/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/chanpory/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sharvin/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/josemarques/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jefffis/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/krystalfister/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/lokesh_coder/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/thedamianhdez/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dpmachado/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/funwatercat/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/timothycd/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ivanfilipovbg/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/picard102/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/marcobarbosa/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/krasnoukhov/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/g3d/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ademilter/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/rickdt/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/operatino/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bungiwan/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/hugomano/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/logorado/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dc_user/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/horaciobella/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/SlaapMe/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/teeragit/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/iqonicd/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ilya_pestov/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/andrewarrow/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ssiskind/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/stan/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/HenryHoffman/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/rdsaunders/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/adamsxu/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/curiousoffice/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/themadray/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/michigangraham/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kohette/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nickfratter/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/runningskull/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/madysondesigns/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/brenton_clarke/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jennyshen/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bradenhamm/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kurtinc/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/amanruzaini/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/coreyhaggard/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/Karimmove/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/aaronalfred/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/wtrsld/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jitachi/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/therealmarvin/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/pmeissner/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ooomz/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/chacky14/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jesseddy/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/shanehudson/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/akmur/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/IsaryAmairani/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/arthurholcombe1/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/boxmodel/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ehsandiary/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/LucasPerdidao/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/shalt0ni/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/swaplord/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kaelifa/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/plbabin/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/guillemboti/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/arindam_/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/renbyrd/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/thiagovernetti/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jmillspaysbills/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mikemai2awesome/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jervo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mekal/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sta1ex/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/robergd/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/felipecsl/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/andrea211087/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/garand/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dhooyenga/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/abovefunction/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/pcridesagain/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/randomlies/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/BryanHorsey/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/heykenneth/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dahparra/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/allthingssmitty/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/danvernon/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/beweinreich/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/increase/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/falvarad/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/alxndrustinov/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/souuf/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/orkuncaylar/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/AM_Kn2/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/gearpixels/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bassamology/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vimarethomas/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kosmar/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/SULiik/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mrjamesnoble/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/silvanmuhlemann/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/shaneIxD/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nacho/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/yigitpinarbasi/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/buzzusborne/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/aaronkwhite/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/rmlewisuk/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/giancarlon/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nbirckel/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/d_nny_m_cher/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sdidonato/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/atariboy/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/abotap/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/karalek/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/psdesignuk/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ludwiczakpawel/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nemanjaivanovic/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/baluli/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ahmadajmi/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vovkasolovev/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/samgrover/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/derienzo777/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jonathansimmons/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nelsonjoyce/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/S0ufi4n3/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/xtopherpaul/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/oaktreemedia/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nateschulte/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/findingjenny/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/namankreative/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/antonyzotov/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/we_social/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/leehambley/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/solid_color/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/abelcabans/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mbilderbach/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kkusaa/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jordyvdboom/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/carlosgavina/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/pechkinator/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vc27/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/rdbannon/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/croakx/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/suribbles/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kerihenare/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/catadeleon/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/gcmorley/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/duivvv/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/saschadroste/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/victorDubugras/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/wintopia/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mattbilotti/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/taylorling/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/megdraws/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/meln1ks/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mahmoudmetwally/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/Silveredge9/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/derekebradley/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/happypeter1983/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/travis_arnold/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/artem_kostenko/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/adobi/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/daykiine/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/alek_djuric/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/scips/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/miguelmendes/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/justinrhee/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/alsobrooks/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/fronx/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mcflydesign/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/santi_urso/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/allfordesign/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/stayuber/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bertboerland/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/marosholly/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/adamnac/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/cynthiasavard/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/muringa/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/danro/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/hiemil/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jackiesaik/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/iduuck/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/antjanus/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/aroon_sharma/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dshster/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/thehacker/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/michaelbrooksjr/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ryanmclaughlin/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/clubb3rry/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/taybenlor/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/xripunov/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/myastro/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/adityasutomo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/digitalmaverick/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/hjartstrorn/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/itolmach/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vaughanmoffitt/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/abdots/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/isnifer/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sergeysafonov/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/maz/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/scrapdnb/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/chrismj83/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vitorleal/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sokaniwaal/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/zaki3d/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/illyzoren/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mocabyte/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/osmanince/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/djsherman/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/davidhemphill/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/waghner/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/necodymiconer/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/praveen_vijaya/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/fabbrucci/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/travishines/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kuldarkalvik/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/Elt_n/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/phillapier/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/okseanjay/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/id835559/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kudretkeskin/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/anjhero/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/duck4fuck/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/scott_riley/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/noufalibrahim/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/h1brd/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/borges_marcos/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/devinhalladay/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ciaranr/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/stefooo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mikebeecham/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/tonymillion/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/joshuaraichur/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/irae/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/petrangr/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dmitriychuta/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/charliegann/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/arashmanteghi/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/adhamdannaway/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ainsleywagon/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/svenlen/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/faisalabid/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/beshur/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/carlyson/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dutchnadia/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/teddyzetterlund/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/samuelkraft/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/aoimedia/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/toddrew/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/codepoet_ru/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/artvavs/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/benoitboucart/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jomarmen/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kolmarlopez/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/creartinc/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/homka/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/gaborenton/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/robinclediere/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/maximsorokin/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/plasticine/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/j2deme/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/peachananr/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kapaluccio/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/de_ascanio/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/rikas/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dawidwu/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/marcoramires/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/angelcreative/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/rpatey/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/popey/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/rehatkathuria/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/the_purplebunny/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/1markiz/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ajaxy_ru/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/brenmurrell/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dudestein/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/oskarlevinson/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/victorstuber/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nehfy/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vicivadeline/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/leandrovaranda/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/scottgallant/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/victor_haydin/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sawrb/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ryhanhassan/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/amayvs/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/a_brixen/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/karolkrakowiak_/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/herkulano/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/geran7/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/cggaurav/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/chris_witko/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/lososina/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/polarity/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mattlat/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/brandonburke/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/constantx/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/teylorfeliz/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/craigelimeliah/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/rachelreveley/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/reabo101/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/rahmeen/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ky/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/rickyyean/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/j04ntoh/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/spbroma/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sebashton/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jpenico/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/francis_vega/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/oktayelipek/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kikillo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/fabbianz/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/larrygerard/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/BroumiYoussef/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/0therplanet/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mbilalsiddique1/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ionuss/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/grrr_nl/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/liminha/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/rawdiggie/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ryandownie/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sethlouey/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/pixage/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/arpitnj/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/switmer777/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/josevnclch/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kanickairaj/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/puzik/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/tbakdesigns/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/besbujupi/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/supjoey/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/lowie/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/linkibol/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/balintorosz/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/imcoding/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/agustincruiz/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/gusoto/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/thomasschrijer/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/superoutman/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kalmerrautam/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/gabrielizalo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/gojeanyn/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/davidbaldie/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/_vojto/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/laurengray/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jydesign/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mymyboy/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nellleo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/marciotoledo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ninjad3m0/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/to_soham/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/hasslunsford/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/muridrahhal/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/levisan/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/grahamkennery/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/lepetitogre/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/antongenkin/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nessoila/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/amandabuzard/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/safrankov/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/cocolero/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dss49/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/matt3224/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bluesix/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/quailandquasar/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/AlbertoCococi/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/lepinski/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sementiy/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mhudobivnik/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/thibaut_re/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/olgary/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/shojberg/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mtolokonnikov/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bereto/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/naupintos/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/wegotvices/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/xadhix/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/macxim/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/rodnylobos/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/madcampos/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/madebyvadim/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bartoszdawydzik/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/supervova/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/markretzloff/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vonachoo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/darylws/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/stevedesigner/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mylesb/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/herbigt/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/depaulawagner/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/geshan/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/gizmeedevil1991/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/_scottburgess/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/lisovsky/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/davidsasda/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/artd_sign/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/YoungCutlass/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mgonto/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/itstotallyamy/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/victorquinn/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/osmond/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/oksanafrewer/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/zauerkraut/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/iamkeithmason/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nitinhayaran/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/lmjabreu/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mandalareopens/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/thinkleft/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ponchomendivil/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/juamperro/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/brunodesign1206/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/caseycavanagh/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/luxe/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dotgridline/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/spedwig/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/madewulf/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mattsapii/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/helderleal/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/chrisstumph/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jayphen/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nsamoylov/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/chrisvanderkooi/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/justme_timothyg/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/otozk/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/prinzadi/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/gu5taf/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/cyril_gaillard/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/d_kobelyatsky/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/daniloc/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nwdsha/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/romanbulah/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/skkirilov/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dvdwinden/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dannol/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/thekevinjones/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jwalter14/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/timgthomas/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/buddhasource/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/uxpiper/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/thatonetommy/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/diansigitp/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/adrienths/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/klimmka/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/gkaam/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/derekcramer/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jennyyo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nerrsoft/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/xalionmalik/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/edhenderson/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/keyuri85/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/roxanejammet/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kimcool/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/edkf/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/matkins/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/alessandroribe/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jacksonlatka/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/lebronjennan/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kostaspt/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/karlkanall/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/moynihan/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/danpliego/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/saulihirvi/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/wesleytrankin/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/fjaguero/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bowbrick/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mashaaaaal/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/yassiryahya/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dparrelli/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/fotomagin/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/aka_james/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/denisepires/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/iqbalperkasa/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/martinansty/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jarsen/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/r_oy/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/justinrob/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/gabrielrosser/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/malgordon/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/carlfairclough/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/michaelabehsera/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/pierrestoffe/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/enjoythetau/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/loganjlambert/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/rpeezy/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/coreyginnivan/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/michalhron/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/msveet/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/lingeswaran/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kolsvein/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/peter576/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/reideiredale/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/joeymurdah/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/raphaelnikson/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mvdheuvel/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/maxlinderman/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jimmuirhead/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/begreative/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/frankiefreesbie/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/robturlinckx/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/Talbi_ConSept/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/longlivemyword/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vanchesz/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/maiklam/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/hermanobrother/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/rez___a/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/gregsqueeb/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/greenbes/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/_ragzor/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/anthonysukow/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/fluidbrush/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dactrtr/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jehnglynn/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bergmartin/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/hugocornejo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/_kkga/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dzantievm/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sawalazar/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sovesove/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jonsgotwood/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/byryan/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vytautas_a/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mizhgan/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/cicerobr/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nilshelmersson/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/d33pthought/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/davecraige/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nckjrvs/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/alexandermayes/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jcubic/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/craigrcoles/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bagawarman/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/rob_thomas10/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/cofla/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/maikelk/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/rtgibbons/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/russell_baylis/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mhesslow/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/codysanfilippo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/webtanya/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/madebybrenton/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dcalonaci/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/perfectflow/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jjsiii/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/saarabpreet/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kumarrajan12123/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/iamsteffen/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/themikenagle/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ceekaytweet/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/larrybolt/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/conspirator/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dallasbpeters/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/n3dmax/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/terpimost/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/byrnecore/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/j_drake_/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/calebjoyce/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/russoedu/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/hoangloi/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/tobysaxon/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/gofrasdesign/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dimaposnyy/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/tjisousa/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/okandungel/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/billyroshan/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/oskamaya/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/motionthinks/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/knilob/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ashocka18/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/marrimo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bartjo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/omnizya/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ernestsemerda/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/andreas_pr/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/edgarchris99/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/thomasgeisen/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/gseguin/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/joannefournier/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/demersdesigns/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/adammarsbar/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nasirwd/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/n_tassone/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/javorszky/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/themrdave/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/yecidsm/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nicollerich/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/canapud/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nicoleglynn/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/judzhin_miles/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/designervzm/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kianoshp/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/evandrix/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/alterchuca/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dhrubo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ma_tiax/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ssbb_me/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dorphern/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mauriolg/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bruno_mart/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mactopus/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/the_winslet/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/joemdesign/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/Shriiiiimp/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jacobbennett/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nfedoroff/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/iamglimy/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/allagringaus/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/aiiaiiaii/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/olaolusoga/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/buryaknick/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/wim1k/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nicklacke/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/a1chapone/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/steynviljoen/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/strikewan/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ryankirkman/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/andrewabogado/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/doooon/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jagan123/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ariffsetiawan/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/elenadissi/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mwarkentin/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/thierrymeier_/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/r_garcia/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dmackerman/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/borantula/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/konus/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/spacewood_/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ryuchi311/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/evanshajed/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/tristanlegros/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/shoaib253/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/aislinnkelly/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/okcoker/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/timpetricola/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sunshinedgirl/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/chadami/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/aleclarsoniv/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nomidesigns/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/petebernardo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/scottiedude/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/millinet/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/imsoper/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/imammuht/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/benjamin_knight/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nepdud/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/joki4/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/lanceguyatt/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bboy1895/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/amywebbb/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/rweve/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/haruintesettden/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ricburton/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nelshd/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/batsirai/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/primozcigler/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jffgrdnr/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/8d3k/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/geneseleznev/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/al_li/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/souperphly/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mslarkina/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/2fockus/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/cdavis565/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/xiel/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/turkutuuli/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/uxward/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/lebinoclard/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/gauravjassal/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/davidmerrique/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mdsisto/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/andrewofficer/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kojourin/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dnirmal/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kevka/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mr_shiznit/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/aluisio_azevedo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/cloudstudio/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/danvierich/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/alexivanichkin/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/fran_mchamy/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/perretmagali/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/betraydan/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/cadikkara/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/matbeedotcom/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jeremyworboys/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bpartridge/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/michaelkoper/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/silv3rgvn/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/alevizio/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/johnsmithagency/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/lawlbwoy/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vitor376/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/desastrozo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/thimo_cz/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jasonmarkjones/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/lhausermann/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/xravil/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/guischmitt/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vigobronx/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/panghal0/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/miguelkooreman/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/surgeonist/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/christianoliff/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/caspergrl/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/iamkarna/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ipavelek/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/pierre_nel/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/y2graphic/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sterlingrules/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/elbuscainfo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bennyjien/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/stushona/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/estebanuribe/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/embrcecreations/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/danillos/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/elliotlewis/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/charlesrpratt/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vladyn/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/emmeffess/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/carlosblanco_eu/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/leonfedotov/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/rangafangs/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/chris_frees/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/tgormtx/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bryan_topham/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jpscribbles/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mighty55/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/carbontwelve/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/isaacfifth/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/iamjdeleon/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/snowwrite/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/barputro/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/drewbyreese/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sachacorazzi/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bistrianiosip/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/magoo04/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/pehamondello/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/yayteejay/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/a_harris88/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/algunsanabria/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/zforrester/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ovall/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/carlosjgsousa/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/geobikas/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ah_lice/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/looneydoodle/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nerdgr8/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ddggccaa/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/zackeeler/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/normanbox/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/el_fuertisimo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ismail_biltagi/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/juangomezw/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jnmnrd/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/patrickcoombe/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ryanjohnson_me/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/markolschesky/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jeffgolenski/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kvasnic/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/gauchomatt/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/afusinatto/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kevinoh/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/okansurreel/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/adamawesomeface/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/emileboudeling/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/arishi_/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/juanmamartinez/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/wikiziner/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/danthms/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mkginfo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/terrorpixel/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/curiousonaut/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/prheemo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/michaelcolenso/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/foczzi/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/martip07/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/thaodang17/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/johncafazza/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/robinlayfield/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/franciscoamk/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/abdulhyeuk/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/marklamb/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/edobene/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/andresenfredrik/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mikaeljorhult/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/chrisslowik/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vinciarts/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/meelford/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/elliotnolten/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/yehudab/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vijaykarthik/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bfrohs/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/josep_martins/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/attacks/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sur4dye/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/tumski/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/instalox/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mangosango/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/paulfarino/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kazaky999/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kiwiupover/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nvkznemo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/tom_even/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ratbus/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/woodsman001/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/joshmedeski/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/thewillbeard/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/psaikali/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/joe_black/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/aleinadsays/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/marcusgorillius/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/hota_v/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jghyllebert/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/shinze/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/janpalounek/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jeremiespoken/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/her_ruu/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dansowter/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/felipeapiress/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/magugzbrand2d/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/posterjob/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nathalie_fs/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bobbytwoshoes/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dreizle/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jeremymouton/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/elisabethkjaer/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/notbadart/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mohanrohith/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jlsolerdeltoro/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/itskawsar/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/slowspock/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/zvchkelly/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/wiljanslofstra/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/craighenneberry/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/trubeatto/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/juaumlol/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/samscouto/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/BenouarradeM/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/gipsy_raf/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/netonet_il/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/arkokoley/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/itsajimithing/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/smalonso/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/victordeanda/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/_dwite_/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/richardgarretts/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/gregrwilkinson/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/anatolinicolae/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/lu4sh1i/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/stefanotirloni/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ostirbu/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/darcystonge/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/naitanamoreno/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/michaelcomiskey/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/adhiardana/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/marcomano_/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/davidcazalis/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/falconerie/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/gregkilian/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bcrad/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bolzanmarco/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/low_res/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vlajki/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/petar_prog/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jonkspr/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/akmalfikri/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mfacchinello/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/atanism/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/harry_sistalam/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/murrayswift/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bobwassermann/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/gavr1l0/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/madshensel/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mr_subtle/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/deviljho_/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/salimianoff/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/joetruesdell/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/twittypork/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/airskylar/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dnezkumar/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dgajjar/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/cherif_b/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/salvafc/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/louis_currie/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/deeenright/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/cybind/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/eyronn/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vickyshits/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sweetdelisa/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/cboller1/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/andresdjasso/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/melvindidit/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/andysolomon/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/thaisselenator_/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/lvovenok/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/giuliusa/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/belyaev_rs/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/overcloacked/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kamal_chaneman/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/incubo82/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/hellofeverrrr/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mhaligowski/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sunlandictwin/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bu7921/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/andytlaw/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jeremery/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/finchjke/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/manigm/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/umurgdk/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/scottfeltham/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ganserene/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mutu_krish/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jodytaggart/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ntfblog/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/tanveerrao/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/hfalucas/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/alxleroydeval/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kucingbelang4/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bargaorobalo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/colgruv/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/stalewine/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kylefrost/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/baumannzone/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/angelcolberg/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sachingawas/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jjshaw14/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ramanathan_pdy/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/johndezember/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nilshoenson/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/brandonmorreale/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nutzumi/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/brandonflatsoda/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sergeyalmone/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/klefue/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kirangopal/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/baumann_alex/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/matthewkay_/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jay_wilburn/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/shesgared/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/apriendeau/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/johnriordan/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/wake_gs/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/aleksitappura/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/emsgulam/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/xilantra/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/imomenui/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sircalebgrove/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/newbrushes/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/hsinyo23/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/m4rio/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/katiemdaly/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/s4f1/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ecommerceil/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/marlinjayakody/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/swooshycueb/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sangdth/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/coderdiaz/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bluefx_/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vivekprvr/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sasha_shestakov/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/eugeneeweb/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dgclegg/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/n1ght_coder/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dixchen/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/blakehawksworth/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/trueblood_33/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/hai_ninh_nguyen/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/marclgonzales/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/yesmeck/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/stephcoue/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/doronmalki/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ruehldesign/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/anasnakawa/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kijanmaharjan/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/wearesavas/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/stefvdham/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/tweetubhai/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/alecarpentier/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/fiterik/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/antonyryndya/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/d00maz/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/theonlyzeke/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/missaaamy/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/carlosm/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/manekenthe/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/reetajayendra/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jeremyshimko/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/justinrgraham/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/stefanozoffoli/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/overra/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mrebay007/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/shvelo96/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/pyronite/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/thedjpetersen/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/rtyukmaev/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/_williamguerra/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/albertaugustin/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vikashpathak18/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kevinjohndayy/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vj_demien/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/colirpixoil/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/goddardlewis/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/laasli/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jqiuss/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/heycamtaylor/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nastya_mane/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mastermindesign/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ccinojasso1/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/nyancecom/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sandywoodruff/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/bighanddesign/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sbtransparent/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/aviddayentonbay/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/richwild/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kaysix_dizzy/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/tur8le/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/seyedhossein1/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/privetwagner/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/emmandenn/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dev_essentials/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jmfsocial/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/_yardenoon/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mateaodviteza/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/weavermedia/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mufaddal_mw/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/hafeeskhan/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ashernatali/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sulaqo/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/eddiechen/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/josecarlospsh/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vm_f/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/enricocicconi/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/danmartin70/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/gmourier/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/donjain/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mrxloka/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/_pedropinho/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/eitarafa/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/oscarowusu/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ralph_lam/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/panchajanyag/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/woodydotmx/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/jerrybai1907/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/marshallchen_/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/xamorep/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/aio___/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/chaabane_wail/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/txcx/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/akashsharma39/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/falling_soul/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sainraja/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mugukamil/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/johannesneu/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/markwienands/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/karthipanraj/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/balakayuriy/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/alan_zhang_/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/layerssss/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/kaspernordkvist/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/mirfanqureshi/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/hanna_smi/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/VMilescu/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/aeon56/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/m_kalibry/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/sreejithexp/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dicesales/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/dhoot_amit/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/smenov/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/lonesomelemon/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vladimirdevic/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/joelcipriano/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/haligaliharun/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/buleswapnil/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/serefka/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/ifarafonow/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/vikasvinfotech/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/urrutimeoli/128.jpg",
    "https://s3.amazonaws.com/uifaces/faces/twitter/areandacom/128.jpg"
  ];
});

// node_modules/faker/lib/locales/en/internet/index.js
var require_internet7 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.free_email = require_free_email5();
  internet.example_email = require_example_email();
  internet.domain_suffix = require_domain_suffix6();
  internet.avatar_uri = require_avatar_uri();
});

// node_modules/faker/lib/locales/en/database/collation.js
var require_collation = __commonJS((exports, module) => {
  module["exports"] = [
    "utf8_unicode_ci",
    "utf8_general_ci",
    "utf8_bin",
    "ascii_bin",
    "ascii_general_ci",
    "cp1250_bin",
    "cp1250_general_ci"
  ];
});

// node_modules/faker/lib/locales/en/database/column.js
var require_column = __commonJS((exports, module) => {
  module["exports"] = [
    "id",
    "title",
    "name",
    "email",
    "phone",
    "token",
    "group",
    "category",
    "password",
    "comment",
    "avatar",
    "status",
    "createdAt",
    "updatedAt"
  ];
});

// node_modules/faker/lib/locales/en/database/engine.js
var require_engine = __commonJS((exports, module) => {
  module["exports"] = [
    "InnoDB",
    "MyISAM",
    "MEMORY",
    "CSV",
    "BLACKHOLE",
    "ARCHIVE"
  ];
});

// node_modules/faker/lib/locales/en/database/type.js
var require_type = __commonJS((exports, module) => {
  module["exports"] = [
    "int",
    "varchar",
    "text",
    "date",
    "datetime",
    "tinyint",
    "time",
    "timestamp",
    "smallint",
    "mediumint",
    "bigint",
    "decimal",
    "float",
    "double",
    "real",
    "bit",
    "boolean",
    "serial",
    "blob",
    "binary",
    "enum",
    "set",
    "geometry",
    "point"
  ];
});

// node_modules/faker/lib/locales/en/database/index.js
var require_database2 = __commonJS((exports, module) => {
  var database2 = {};
  module["exports"] = database2;
  database2.collation = require_collation();
  database2.column = require_column();
  database2.engine = require_engine();
  database2.type = require_type();
});

// node_modules/faker/lib/locales/en/lorem/words.js
var require_words3 = __commonJS((exports, module) => {
  module["exports"] = [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ];
});

// node_modules/faker/lib/locales/en/lorem/supplemental.js
var require_supplemental2 = __commonJS((exports, module) => {
  module["exports"] = [
    "abbas",
    "abduco",
    "abeo",
    "abscido",
    "absconditus",
    "absens",
    "absorbeo",
    "absque",
    "abstergo",
    "absum",
    "abundans",
    "abutor",
    "accedo",
    "accendo",
    "acceptus",
    "accipio",
    "accommodo",
    "accusator",
    "acer",
    "acerbitas",
    "acervus",
    "acidus",
    "acies",
    "acquiro",
    "acsi",
    "adamo",
    "adaugeo",
    "addo",
    "adduco",
    "ademptio",
    "adeo",
    "adeptio",
    "adfectus",
    "adfero",
    "adficio",
    "adflicto",
    "adhaero",
    "adhuc",
    "adicio",
    "adimpleo",
    "adinventitias",
    "adipiscor",
    "adiuvo",
    "administratio",
    "admiratio",
    "admitto",
    "admoneo",
    "admoveo",
    "adnuo",
    "adopto",
    "adsidue",
    "adstringo",
    "adsuesco",
    "adsum",
    "adulatio",
    "adulescens",
    "adultus",
    "aduro",
    "advenio",
    "adversus",
    "advoco",
    "aedificium",
    "aeger",
    "aegre",
    "aegrotatio",
    "aegrus",
    "aeneus",
    "aequitas",
    "aequus",
    "aer",
    "aestas",
    "aestivus",
    "aestus",
    "aetas",
    "aeternus",
    "ager",
    "aggero",
    "aggredior",
    "agnitio",
    "agnosco",
    "ago",
    "ait",
    "aiunt",
    "alienus",
    "alii",
    "alioqui",
    "aliqua",
    "alius",
    "allatus",
    "alo",
    "alter",
    "altus",
    "alveus",
    "amaritudo",
    "ambitus",
    "ambulo",
    "amicitia",
    "amiculum",
    "amissio",
    "amita",
    "amitto",
    "amo",
    "amor",
    "amoveo",
    "amplexus",
    "amplitudo",
    "amplus",
    "ancilla",
    "angelus",
    "angulus",
    "angustus",
    "animadverto",
    "animi",
    "animus",
    "annus",
    "anser",
    "ante",
    "antea",
    "antepono",
    "antiquus",
    "aperio",
    "aperte",
    "apostolus",
    "apparatus",
    "appello",
    "appono",
    "appositus",
    "approbo",
    "apto",
    "aptus",
    "apud",
    "aqua",
    "ara",
    "aranea",
    "arbitro",
    "arbor",
    "arbustum",
    "arca",
    "arceo",
    "arcesso",
    "arcus",
    "argentum",
    "argumentum",
    "arguo",
    "arma",
    "armarium",
    "armo",
    "aro",
    "ars",
    "articulus",
    "artificiose",
    "arto",
    "arx",
    "ascisco",
    "ascit",
    "asper",
    "aspicio",
    "asporto",
    "assentator",
    "astrum",
    "atavus",
    "ater",
    "atqui",
    "atrocitas",
    "atrox",
    "attero",
    "attollo",
    "attonbitus",
    "auctor",
    "auctus",
    "audacia",
    "audax",
    "audentia",
    "audeo",
    "audio",
    "auditor",
    "aufero",
    "aureus",
    "auris",
    "aurum",
    "aut",
    "autem",
    "autus",
    "auxilium",
    "avaritia",
    "avarus",
    "aveho",
    "averto",
    "avoco",
    "baiulus",
    "balbus",
    "barba",
    "bardus",
    "basium",
    "beatus",
    "bellicus",
    "bellum",
    "bene",
    "beneficium",
    "benevolentia",
    "benigne",
    "bestia",
    "bibo",
    "bis",
    "blandior",
    "bonus",
    "bos",
    "brevis",
    "cado",
    "caecus",
    "caelestis",
    "caelum",
    "calamitas",
    "calcar",
    "calco",
    "calculus",
    "callide",
    "campana",
    "candidus",
    "canis",
    "canonicus",
    "canto",
    "capillus",
    "capio",
    "capitulus",
    "capto",
    "caput",
    "carbo",
    "carcer",
    "careo",
    "caries",
    "cariosus",
    "caritas",
    "carmen",
    "carpo",
    "carus",
    "casso",
    "caste",
    "casus",
    "catena",
    "caterva",
    "cattus",
    "cauda",
    "causa",
    "caute",
    "caveo",
    "cavus",
    "cedo",
    "celebrer",
    "celer",
    "celo",
    "cena",
    "cenaculum",
    "ceno",
    "censura",
    "centum",
    "cerno",
    "cernuus",
    "certe",
    "certo",
    "certus",
    "cervus",
    "cetera",
    "charisma",
    "chirographum",
    "cibo",
    "cibus",
    "cicuta",
    "cilicium",
    "cimentarius",
    "ciminatio",
    "cinis",
    "circumvenio",
    "cito",
    "civis",
    "civitas",
    "clam",
    "clamo",
    "claro",
    "clarus",
    "claudeo",
    "claustrum",
    "clementia",
    "clibanus",
    "coadunatio",
    "coaegresco",
    "coepi",
    "coerceo",
    "cogito",
    "cognatus",
    "cognomen",
    "cogo",
    "cohaero",
    "cohibeo",
    "cohors",
    "colligo",
    "colloco",
    "collum",
    "colo",
    "color",
    "coma",
    "combibo",
    "comburo",
    "comedo",
    "comes",
    "cometes",
    "comis",
    "comitatus",
    "commemoro",
    "comminor",
    "commodo",
    "communis",
    "comparo",
    "compello",
    "complectus",
    "compono",
    "comprehendo",
    "comptus",
    "conatus",
    "concedo",
    "concido",
    "conculco",
    "condico",
    "conduco",
    "confero",
    "confido",
    "conforto",
    "confugo",
    "congregatio",
    "conicio",
    "coniecto",
    "conitor",
    "coniuratio",
    "conor",
    "conqueror",
    "conscendo",
    "conservo",
    "considero",
    "conspergo",
    "constans",
    "consuasor",
    "contabesco",
    "contego",
    "contigo",
    "contra",
    "conturbo",
    "conventus",
    "convoco",
    "copia",
    "copiose",
    "cornu",
    "corona",
    "corpus",
    "correptius",
    "corrigo",
    "corroboro",
    "corrumpo",
    "coruscus",
    "cotidie",
    "crapula",
    "cras",
    "crastinus",
    "creator",
    "creber",
    "crebro",
    "credo",
    "creo",
    "creptio",
    "crepusculum",
    "cresco",
    "creta",
    "cribro",
    "crinis",
    "cruciamentum",
    "crudelis",
    "cruentus",
    "crur",
    "crustulum",
    "crux",
    "cubicularis",
    "cubitum",
    "cubo",
    "cui",
    "cuius",
    "culpa",
    "culpo",
    "cultellus",
    "cultura",
    "cum",
    "cunabula",
    "cunae",
    "cunctatio",
    "cupiditas",
    "cupio",
    "cuppedia",
    "cupressus",
    "cur",
    "cura",
    "curatio",
    "curia",
    "curiositas",
    "curis",
    "curo",
    "curriculum",
    "currus",
    "cursim",
    "curso",
    "cursus",
    "curto",
    "curtus",
    "curvo",
    "curvus",
    "custodia",
    "damnatio",
    "damno",
    "dapifer",
    "debeo",
    "debilito",
    "decens",
    "decerno",
    "decet",
    "decimus",
    "decipio",
    "decor",
    "decretum",
    "decumbo",
    "dedecor",
    "dedico",
    "deduco",
    "defaeco",
    "defendo",
    "defero",
    "defessus",
    "defetiscor",
    "deficio",
    "defigo",
    "defleo",
    "defluo",
    "defungo",
    "degenero",
    "degero",
    "degusto",
    "deinde",
    "delectatio",
    "delego",
    "deleo",
    "delibero",
    "delicate",
    "delinquo",
    "deludo",
    "demens",
    "demergo",
    "demitto",
    "demo",
    "demonstro",
    "demoror",
    "demulceo",
    "demum",
    "denego",
    "denique",
    "dens",
    "denuncio",
    "denuo",
    "deorsum",
    "depereo",
    "depono",
    "depopulo",
    "deporto",
    "depraedor",
    "deprecator",
    "deprimo",
    "depromo",
    "depulso",
    "deputo",
    "derelinquo",
    "derideo",
    "deripio",
    "desidero",
    "desino",
    "desipio",
    "desolo",
    "desparatus",
    "despecto",
    "despirmatio",
    "infit",
    "inflammatio",
    "paens",
    "patior",
    "patria",
    "patrocinor",
    "patruus",
    "pauci",
    "paulatim",
    "pauper",
    "pax",
    "peccatus",
    "pecco",
    "pecto",
    "pectus",
    "pecunia",
    "pecus",
    "peior",
    "pel",
    "ocer",
    "socius",
    "sodalitas",
    "sol",
    "soleo",
    "solio",
    "solitudo",
    "solium",
    "sollers",
    "sollicito",
    "solum",
    "solus",
    "solutio",
    "solvo",
    "somniculosus",
    "somnus",
    "sonitus",
    "sono",
    "sophismata",
    "sopor",
    "sordeo",
    "sortitus",
    "spargo",
    "speciosus",
    "spectaculum",
    "speculum",
    "sperno",
    "spero",
    "spes",
    "spiculum",
    "spiritus",
    "spoliatio",
    "sponte",
    "stabilis",
    "statim",
    "statua",
    "stella",
    "stillicidium",
    "stipes",
    "stips",
    "sto",
    "strenuus",
    "strues",
    "studio",
    "stultus",
    "suadeo",
    "suasoria",
    "sub",
    "subito",
    "subiungo",
    "sublime",
    "subnecto",
    "subseco",
    "substantia",
    "subvenio",
    "succedo",
    "succurro",
    "sufficio",
    "suffoco",
    "suffragium",
    "suggero",
    "sui",
    "sulum",
    "sum",
    "summa",
    "summisse",
    "summopere",
    "sumo",
    "sumptus",
    "supellex",
    "super",
    "suppellex",
    "supplanto",
    "suppono",
    "supra",
    "surculus",
    "surgo",
    "sursum",
    "suscipio",
    "suspendo",
    "sustineo",
    "suus",
    "synagoga",
    "tabella",
    "tabernus",
    "tabesco",
    "tabgo",
    "tabula",
    "taceo",
    "tactus",
    "taedium",
    "talio",
    "talis",
    "talus",
    "tam",
    "tamdiu",
    "tamen",
    "tametsi",
    "tamisium",
    "tamquam",
    "tandem",
    "tantillus",
    "tantum",
    "tardus",
    "tego",
    "temeritas",
    "temperantia",
    "templum",
    "temptatio",
    "tempus",
    "tenax",
    "tendo",
    "teneo",
    "tener",
    "tenuis",
    "tenus",
    "tepesco",
    "tepidus",
    "ter",
    "terebro",
    "teres",
    "terga",
    "tergeo",
    "tergiversatio",
    "tergo",
    "tergum",
    "termes",
    "terminatio",
    "tero",
    "terra",
    "terreo",
    "territo",
    "terror",
    "tersus",
    "tertius",
    "testimonium",
    "texo",
    "textilis",
    "textor",
    "textus",
    "thalassinus",
    "theatrum",
    "theca",
    "thema",
    "theologus",
    "thermae",
    "thesaurus",
    "thesis",
    "thorax",
    "thymbra",
    "thymum",
    "tibi",
    "timidus",
    "timor",
    "titulus",
    "tolero",
    "tollo",
    "tondeo",
    "tonsor",
    "torqueo",
    "torrens",
    "tot",
    "totidem",
    "toties",
    "totus",
    "tracto",
    "trado",
    "traho",
    "trans",
    "tredecim",
    "tremo",
    "trepide",
    "tres",
    "tribuo",
    "tricesimus",
    "triduana",
    "triginta",
    "tripudio",
    "tristis",
    "triumphus",
    "trucido",
    "truculenter",
    "tubineus",
    "tui",
    "tum",
    "tumultus",
    "tunc",
    "turba",
    "turbo",
    "turpe",
    "turpis",
    "tutamen",
    "tutis",
    "tyrannus",
    "uberrime",
    "ubi",
    "ulciscor",
    "ullus",
    "ulterius",
    "ultio",
    "ultra",
    "umbra",
    "umerus",
    "umquam",
    "una",
    "unde",
    "undique",
    "universe",
    "unus",
    "urbanus",
    "urbs",
    "uredo",
    "usitas",
    "usque",
    "ustilo",
    "ustulo",
    "usus",
    "uter",
    "uterque",
    "utilis",
    "utique",
    "utor",
    "utpote",
    "utrimque",
    "utroque",
    "utrum",
    "uxor",
    "vaco",
    "vacuus",
    "vado",
    "vae",
    "valde",
    "valens",
    "valeo",
    "valetudo",
    "validus",
    "vallum",
    "vapulus",
    "varietas",
    "varius",
    "vehemens",
    "vel",
    "velociter",
    "velum",
    "velut",
    "venia",
    "venio",
    "ventito",
    "ventosus",
    "ventus",
    "venustas",
    "ver",
    "verbera",
    "verbum",
    "vere",
    "verecundia",
    "vereor",
    "vergo",
    "veritas",
    "vero",
    "versus",
    "verto",
    "verumtamen",
    "verus",
    "vesco",
    "vesica",
    "vesper",
    "vespillo",
    "vester",
    "vestigium",
    "vestrum",
    "vetus",
    "via",
    "vicinus",
    "vicissitudo",
    "victoria",
    "victus",
    "videlicet",
    "video",
    "viduata",
    "viduo",
    "vigilo",
    "vigor",
    "vilicus",
    "vilis",
    "vilitas",
    "villa",
    "vinco",
    "vinculum",
    "vindico",
    "vinitor",
    "vinum",
    "vir",
    "virga",
    "virgo",
    "viridis",
    "viriliter",
    "virtus",
    "vis",
    "viscus",
    "vita",
    "vitiosus",
    "vitium",
    "vito",
    "vivo",
    "vix",
    "vobis",
    "vociferor",
    "voco",
    "volaticus",
    "volo",
    "volubilis",
    "voluntarius",
    "volup",
    "volutabrum",
    "volva",
    "vomer",
    "vomica",
    "vomito",
    "vorago",
    "vorax",
    "voro",
    "vos",
    "votum",
    "voveo",
    "vox",
    "vulariter",
    "vulgaris",
    "vulgivagus",
    "vulgo",
    "vulgus",
    "vulnero",
    "vulnus",
    "vulpes",
    "vulticulus",
    "vultuosus",
    "xiphias"
  ];
});

// node_modules/faker/lib/locales/en/lorem/index.js
var require_lorem3 = __commonJS((exports, module) => {
  var lorem = {};
  module["exports"] = lorem;
  lorem.words = require_words3();
  lorem.supplemental = require_supplemental2();
});

// node_modules/faker/lib/locales/en/name/first_name.js
var require_first_name4 = __commonJS((exports, module) => {
  module["exports"] = [
    "Aaliyah",
    "Aaron",
    "Abagail",
    "Abbey",
    "Abbie",
    "Abbigail",
    "Abby",
    "Abdiel",
    "Abdul",
    "Abdullah",
    "Abe",
    "Abel",
    "Abelardo",
    "Abigail",
    "Abigale",
    "Abigayle",
    "Abner",
    "Abraham",
    "Ada",
    "Adah",
    "Adalberto",
    "Adaline",
    "Adam",
    "Adan",
    "Addie",
    "Addison",
    "Adela",
    "Adelbert",
    "Adele",
    "Adelia",
    "Adeline",
    "Adell",
    "Adella",
    "Adelle",
    "Aditya",
    "Adolf",
    "Adolfo",
    "Adolph",
    "Adolphus",
    "Adonis",
    "Adrain",
    "Adrian",
    "Adriana",
    "Adrianna",
    "Adriel",
    "Adrien",
    "Adrienne",
    "Afton",
    "Aglae",
    "Agnes",
    "Agustin",
    "Agustina",
    "Ahmad",
    "Ahmed",
    "Aida",
    "Aidan",
    "Aiden",
    "Aileen",
    "Aimee",
    "Aisha",
    "Aiyana",
    "Akeem",
    "Al",
    "Alaina",
    "Alan",
    "Alana",
    "Alanis",
    "Alanna",
    "Alayna",
    "Alba",
    "Albert",
    "Alberta",
    "Albertha",
    "Alberto",
    "Albin",
    "Albina",
    "Alda",
    "Alden",
    "Alec",
    "Aleen",
    "Alejandra",
    "Alejandrin",
    "Alek",
    "Alena",
    "Alene",
    "Alessandra",
    "Alessandro",
    "Alessia",
    "Aletha",
    "Alex",
    "Alexa",
    "Alexander",
    "Alexandra",
    "Alexandre",
    "Alexandrea",
    "Alexandria",
    "Alexandrine",
    "Alexandro",
    "Alexane",
    "Alexanne",
    "Alexie",
    "Alexis",
    "Alexys",
    "Alexzander",
    "Alf",
    "Alfonso",
    "Alfonzo",
    "Alford",
    "Alfred",
    "Alfreda",
    "Alfredo",
    "Ali",
    "Alia",
    "Alice",
    "Alicia",
    "Alisa",
    "Alisha",
    "Alison",
    "Alivia",
    "Aliya",
    "Aliyah",
    "Aliza",
    "Alize",
    "Allan",
    "Allen",
    "Allene",
    "Allie",
    "Allison",
    "Ally",
    "Alphonso",
    "Alta",
    "Althea",
    "Alva",
    "Alvah",
    "Alvena",
    "Alvera",
    "Alverta",
    "Alvina",
    "Alvis",
    "Alyce",
    "Alycia",
    "Alysa",
    "Alysha",
    "Alyson",
    "Alysson",
    "Amalia",
    "Amanda",
    "Amani",
    "Amara",
    "Amari",
    "Amaya",
    "Amber",
    "Ambrose",
    "Amelia",
    "Amelie",
    "Amely",
    "America",
    "Americo",
    "Amie",
    "Amina",
    "Amir",
    "Amira",
    "Amiya",
    "Amos",
    "Amparo",
    "Amy",
    "Amya",
    "Ana",
    "Anabel",
    "Anabelle",
    "Anahi",
    "Anais",
    "Anastacio",
    "Anastasia",
    "Anderson",
    "Andre",
    "Andreane",
    "Andreanne",
    "Andres",
    "Andrew",
    "Andy",
    "Angel",
    "Angela",
    "Angelica",
    "Angelina",
    "Angeline",
    "Angelita",
    "Angelo",
    "Angie",
    "Angus",
    "Anibal",
    "Anika",
    "Anissa",
    "Anita",
    "Aniya",
    "Aniyah",
    "Anjali",
    "Anna",
    "Annabel",
    "Annabell",
    "Annabelle",
    "Annalise",
    "Annamae",
    "Annamarie",
    "Anne",
    "Annetta",
    "Annette",
    "Annie",
    "Ansel",
    "Ansley",
    "Anthony",
    "Antoinette",
    "Antone",
    "Antonetta",
    "Antonette",
    "Antonia",
    "Antonietta",
    "Antonina",
    "Antonio",
    "Antwan",
    "Antwon",
    "Anya",
    "April",
    "Ara",
    "Araceli",
    "Aracely",
    "Arch",
    "Archibald",
    "Ardella",
    "Arden",
    "Ardith",
    "Arely",
    "Ari",
    "Ariane",
    "Arianna",
    "Aric",
    "Ariel",
    "Arielle",
    "Arjun",
    "Arlene",
    "Arlie",
    "Arlo",
    "Armand",
    "Armando",
    "Armani",
    "Arnaldo",
    "Arne",
    "Arno",
    "Arnold",
    "Arnoldo",
    "Arnulfo",
    "Aron",
    "Art",
    "Arthur",
    "Arturo",
    "Arvel",
    "Arvid",
    "Arvilla",
    "Aryanna",
    "Asa",
    "Asha",
    "Ashlee",
    "Ashleigh",
    "Ashley",
    "Ashly",
    "Ashlynn",
    "Ashton",
    "Ashtyn",
    "Asia",
    "Assunta",
    "Astrid",
    "Athena",
    "Aubree",
    "Aubrey",
    "Audie",
    "Audra",
    "Audreanne",
    "Audrey",
    "August",
    "Augusta",
    "Augustine",
    "Augustus",
    "Aurelia",
    "Aurelie",
    "Aurelio",
    "Aurore",
    "Austen",
    "Austin",
    "Austyn",
    "Autumn",
    "Ava",
    "Avery",
    "Avis",
    "Axel",
    "Ayana",
    "Ayden",
    "Ayla",
    "Aylin",
    "Baby",
    "Bailee",
    "Bailey",
    "Barbara",
    "Barney",
    "Baron",
    "Barrett",
    "Barry",
    "Bart",
    "Bartholome",
    "Barton",
    "Baylee",
    "Beatrice",
    "Beau",
    "Beaulah",
    "Bell",
    "Bella",
    "Belle",
    "Ben",
    "Benedict",
    "Benjamin",
    "Bennett",
    "Bennie",
    "Benny",
    "Benton",
    "Berenice",
    "Bernadette",
    "Bernadine",
    "Bernard",
    "Bernardo",
    "Berneice",
    "Bernhard",
    "Bernice",
    "Bernie",
    "Berniece",
    "Bernita",
    "Berry",
    "Bert",
    "Berta",
    "Bertha",
    "Bertram",
    "Bertrand",
    "Beryl",
    "Bessie",
    "Beth",
    "Bethany",
    "Bethel",
    "Betsy",
    "Bette",
    "Bettie",
    "Betty",
    "Bettye",
    "Beulah",
    "Beverly",
    "Bianka",
    "Bill",
    "Billie",
    "Billy",
    "Birdie",
    "Blair",
    "Blaise",
    "Blake",
    "Blanca",
    "Blanche",
    "Blaze",
    "Bo",
    "Bobbie",
    "Bobby",
    "Bonita",
    "Bonnie",
    "Boris",
    "Boyd",
    "Brad",
    "Braden",
    "Bradford",
    "Bradley",
    "Bradly",
    "Brady",
    "Braeden",
    "Brain",
    "Brandi",
    "Brando",
    "Brandon",
    "Brandt",
    "Brandy",
    "Brandyn",
    "Brannon",
    "Branson",
    "Brant",
    "Braulio",
    "Braxton",
    "Brayan",
    "Breana",
    "Breanna",
    "Breanne",
    "Brenda",
    "Brendan",
    "Brenden",
    "Brendon",
    "Brenna",
    "Brennan",
    "Brennon",
    "Brent",
    "Bret",
    "Brett",
    "Bria",
    "Brian",
    "Briana",
    "Brianne",
    "Brice",
    "Bridget",
    "Bridgette",
    "Bridie",
    "Brielle",
    "Brigitte",
    "Brionna",
    "Brisa",
    "Britney",
    "Brittany",
    "Brock",
    "Broderick",
    "Brody",
    "Brook",
    "Brooke",
    "Brooklyn",
    "Brooks",
    "Brown",
    "Bruce",
    "Bryana",
    "Bryce",
    "Brycen",
    "Bryon",
    "Buck",
    "Bud",
    "Buddy",
    "Buford",
    "Bulah",
    "Burdette",
    "Burley",
    "Burnice",
    "Buster",
    "Cade",
    "Caden",
    "Caesar",
    "Caitlyn",
    "Cale",
    "Caleb",
    "Caleigh",
    "Cali",
    "Calista",
    "Callie",
    "Camden",
    "Cameron",
    "Camila",
    "Camilla",
    "Camille",
    "Camren",
    "Camron",
    "Camryn",
    "Camylle",
    "Candace",
    "Candelario",
    "Candice",
    "Candida",
    "Candido",
    "Cara",
    "Carey",
    "Carissa",
    "Carlee",
    "Carleton",
    "Carley",
    "Carli",
    "Carlie",
    "Carlo",
    "Carlos",
    "Carlotta",
    "Carmel",
    "Carmela",
    "Carmella",
    "Carmelo",
    "Carmen",
    "Carmine",
    "Carol",
    "Carolanne",
    "Carole",
    "Carolina",
    "Caroline",
    "Carolyn",
    "Carolyne",
    "Carrie",
    "Carroll",
    "Carson",
    "Carter",
    "Cary",
    "Casandra",
    "Casey",
    "Casimer",
    "Casimir",
    "Casper",
    "Cassandra",
    "Cassandre",
    "Cassidy",
    "Cassie",
    "Catalina",
    "Caterina",
    "Catharine",
    "Catherine",
    "Cathrine",
    "Cathryn",
    "Cathy",
    "Cayla",
    "Ceasar",
    "Cecelia",
    "Cecil",
    "Cecile",
    "Cecilia",
    "Cedrick",
    "Celestine",
    "Celestino",
    "Celia",
    "Celine",
    "Cesar",
    "Chad",
    "Chadd",
    "Chadrick",
    "Chaim",
    "Chance",
    "Chandler",
    "Chanel",
    "Chanelle",
    "Charity",
    "Charlene",
    "Charles",
    "Charley",
    "Charlie",
    "Charlotte",
    "Chase",
    "Chasity",
    "Chauncey",
    "Chaya",
    "Chaz",
    "Chelsea",
    "Chelsey",
    "Chelsie",
    "Chesley",
    "Chester",
    "Chet",
    "Cheyanne",
    "Cheyenne",
    "Chloe",
    "Chris",
    "Christ",
    "Christa",
    "Christelle",
    "Christian",
    "Christiana",
    "Christina",
    "Christine",
    "Christop",
    "Christophe",
    "Christopher",
    "Christy",
    "Chyna",
    "Ciara",
    "Cicero",
    "Cielo",
    "Cierra",
    "Cindy",
    "Citlalli",
    "Clair",
    "Claire",
    "Clara",
    "Clarabelle",
    "Clare",
    "Clarissa",
    "Clark",
    "Claud",
    "Claude",
    "Claudia",
    "Claudie",
    "Claudine",
    "Clay",
    "Clemens",
    "Clement",
    "Clementina",
    "Clementine",
    "Clemmie",
    "Cleo",
    "Cleora",
    "Cleta",
    "Cletus",
    "Cleve",
    "Cleveland",
    "Clifford",
    "Clifton",
    "Clint",
    "Clinton",
    "Clotilde",
    "Clovis",
    "Cloyd",
    "Clyde",
    "Coby",
    "Cody",
    "Colby",
    "Cole",
    "Coleman",
    "Colin",
    "Colleen",
    "Collin",
    "Colt",
    "Colten",
    "Colton",
    "Columbus",
    "Concepcion",
    "Conner",
    "Connie",
    "Connor",
    "Conor",
    "Conrad",
    "Constance",
    "Constantin",
    "Consuelo",
    "Cooper",
    "Cora",
    "Coralie",
    "Corbin",
    "Cordelia",
    "Cordell",
    "Cordia",
    "Cordie",
    "Corene",
    "Corine",
    "Cornelius",
    "Cornell",
    "Corrine",
    "Cortez",
    "Cortney",
    "Cory",
    "Coty",
    "Courtney",
    "Coy",
    "Craig",
    "Crawford",
    "Creola",
    "Cristal",
    "Cristian",
    "Cristina",
    "Cristobal",
    "Cristopher",
    "Cruz",
    "Crystal",
    "Crystel",
    "Cullen",
    "Curt",
    "Curtis",
    "Cydney",
    "Cynthia",
    "Cyril",
    "Cyrus",
    "Dagmar",
    "Dahlia",
    "Daija",
    "Daisha",
    "Daisy",
    "Dakota",
    "Dale",
    "Dallas",
    "Dallin",
    "Dalton",
    "Damaris",
    "Dameon",
    "Damian",
    "Damien",
    "Damion",
    "Damon",
    "Dan",
    "Dana",
    "Dandre",
    "Dane",
    "D'angelo",
    "Dangelo",
    "Danial",
    "Daniela",
    "Daniella",
    "Danielle",
    "Danika",
    "Dannie",
    "Danny",
    "Dante",
    "Danyka",
    "Daphne",
    "Daphnee",
    "Daphney",
    "Darby",
    "Daren",
    "Darian",
    "Dariana",
    "Darien",
    "Dario",
    "Darion",
    "Darius",
    "Darlene",
    "Daron",
    "Darrel",
    "Darrell",
    "Darren",
    "Darrick",
    "Darrin",
    "Darrion",
    "Darron",
    "Darryl",
    "Darwin",
    "Daryl",
    "Dashawn",
    "Dasia",
    "Dave",
    "David",
    "Davin",
    "Davion",
    "Davon",
    "Davonte",
    "Dawn",
    "Dawson",
    "Dax",
    "Dayana",
    "Dayna",
    "Dayne",
    "Dayton",
    "Dean",
    "Deangelo",
    "Deanna",
    "Deborah",
    "Declan",
    "Dedric",
    "Dedrick",
    "Dee",
    "Deion",
    "Deja",
    "Dejah",
    "Dejon",
    "Dejuan",
    "Delaney",
    "Delbert",
    "Delfina",
    "Delia",
    "Delilah",
    "Dell",
    "Della",
    "Delmer",
    "Delores",
    "Delpha",
    "Delphia",
    "Delphine",
    "Delta",
    "Demarco",
    "Demarcus",
    "Demario",
    "Demetris",
    "Demetrius",
    "Demond",
    "Dena",
    "Denis",
    "Dennis",
    "Deon",
    "Deondre",
    "Deontae",
    "Deonte",
    "Dereck",
    "Derek",
    "Derick",
    "Deron",
    "Derrick",
    "Deshaun",
    "Deshawn",
    "Desiree",
    "Desmond",
    "Dessie",
    "Destany",
    "Destin",
    "Destinee",
    "Destiney",
    "Destini",
    "Destiny",
    "Devan",
    "Devante",
    "Deven",
    "Devin",
    "Devon",
    "Devonte",
    "Devyn",
    "Dewayne",
    "Dewitt",
    "Dexter",
    "Diamond",
    "Diana",
    "Dianna",
    "Diego",
    "Dillan",
    "Dillon",
    "Dimitri",
    "Dina",
    "Dino",
    "Dion",
    "Dixie",
    "Dock",
    "Dolly",
    "Dolores",
    "Domenic",
    "Domenica",
    "Domenick",
    "Domenico",
    "Domingo",
    "Dominic",
    "Dominique",
    "Don",
    "Donald",
    "Donato",
    "Donavon",
    "Donna",
    "Donnell",
    "Donnie",
    "Donny",
    "Dora",
    "Dorcas",
    "Dorian",
    "Doris",
    "Dorothea",
    "Dorothy",
    "Dorris",
    "Dortha",
    "Dorthy",
    "Doug",
    "Douglas",
    "Dovie",
    "Doyle",
    "Drake",
    "Drew",
    "Duane",
    "Dudley",
    "Dulce",
    "Duncan",
    "Durward",
    "Dustin",
    "Dusty",
    "Dwight",
    "Dylan",
    "Earl",
    "Earlene",
    "Earline",
    "Earnest",
    "Earnestine",
    "Easter",
    "Easton",
    "Ebba",
    "Ebony",
    "Ed",
    "Eda",
    "Edd",
    "Eddie",
    "Eden",
    "Edgar",
    "Edgardo",
    "Edison",
    "Edmond",
    "Edmund",
    "Edna",
    "Eduardo",
    "Edward",
    "Edwardo",
    "Edwin",
    "Edwina",
    "Edyth",
    "Edythe",
    "Effie",
    "Efrain",
    "Efren",
    "Eileen",
    "Einar",
    "Eino",
    "Eladio",
    "Elaina",
    "Elbert",
    "Elda",
    "Eldon",
    "Eldora",
    "Eldred",
    "Eldridge",
    "Eleanora",
    "Eleanore",
    "Eleazar",
    "Electa",
    "Elena",
    "Elenor",
    "Elenora",
    "Eleonore",
    "Elfrieda",
    "Eli",
    "Elian",
    "Eliane",
    "Elias",
    "Eliezer",
    "Elijah",
    "Elinor",
    "Elinore",
    "Elisa",
    "Elisabeth",
    "Elise",
    "Eliseo",
    "Elisha",
    "Elissa",
    "Eliza",
    "Elizabeth",
    "Ella",
    "Ellen",
    "Ellie",
    "Elliot",
    "Elliott",
    "Ellis",
    "Ellsworth",
    "Elmer",
    "Elmira",
    "Elmo",
    "Elmore",
    "Elna",
    "Elnora",
    "Elody",
    "Eloisa",
    "Eloise",
    "Elouise",
    "Eloy",
    "Elroy",
    "Elsa",
    "Else",
    "Elsie",
    "Elta",
    "Elton",
    "Elva",
    "Elvera",
    "Elvie",
    "Elvis",
    "Elwin",
    "Elwyn",
    "Elyse",
    "Elyssa",
    "Elza",
    "Emanuel",
    "Emelia",
    "Emelie",
    "Emely",
    "Emerald",
    "Emerson",
    "Emery",
    "Emie",
    "Emil",
    "Emile",
    "Emilia",
    "Emiliano",
    "Emilie",
    "Emilio",
    "Emily",
    "Emma",
    "Emmalee",
    "Emmanuel",
    "Emmanuelle",
    "Emmet",
    "Emmett",
    "Emmie",
    "Emmitt",
    "Emmy",
    "Emory",
    "Ena",
    "Enid",
    "Enoch",
    "Enola",
    "Enos",
    "Enrico",
    "Enrique",
    "Ephraim",
    "Era",
    "Eriberto",
    "Eric",
    "Erica",
    "Erich",
    "Erick",
    "Ericka",
    "Erik",
    "Erika",
    "Erin",
    "Erling",
    "Erna",
    "Ernest",
    "Ernestina",
    "Ernestine",
    "Ernesto",
    "Ernie",
    "Ervin",
    "Erwin",
    "Eryn",
    "Esmeralda",
    "Esperanza",
    "Esta",
    "Esteban",
    "Estefania",
    "Estel",
    "Estell",
    "Estella",
    "Estelle",
    "Estevan",
    "Esther",
    "Estrella",
    "Etha",
    "Ethan",
    "Ethel",
    "Ethelyn",
    "Ethyl",
    "Ettie",
    "Eudora",
    "Eugene",
    "Eugenia",
    "Eula",
    "Eulah",
    "Eulalia",
    "Euna",
    "Eunice",
    "Eusebio",
    "Eva",
    "Evalyn",
    "Evan",
    "Evangeline",
    "Evans",
    "Eve",
    "Eveline",
    "Evelyn",
    "Everardo",
    "Everett",
    "Everette",
    "Evert",
    "Evie",
    "Ewald",
    "Ewell",
    "Ezekiel",
    "Ezequiel",
    "Ezra",
    "Fabian",
    "Fabiola",
    "Fae",
    "Fannie",
    "Fanny",
    "Fatima",
    "Faustino",
    "Fausto",
    "Favian",
    "Fay",
    "Faye",
    "Federico",
    "Felicia",
    "Felicita",
    "Felicity",
    "Felipa",
    "Felipe",
    "Felix",
    "Felton",
    "Fermin",
    "Fern",
    "Fernando",
    "Ferne",
    "Fidel",
    "Filiberto",
    "Filomena",
    "Finn",
    "Fiona",
    "Flavie",
    "Flavio",
    "Fleta",
    "Fletcher",
    "Flo",
    "Florence",
    "Florencio",
    "Florian",
    "Florida",
    "Florine",
    "Flossie",
    "Floy",
    "Floyd",
    "Ford",
    "Forest",
    "Forrest",
    "Foster",
    "Frances",
    "Francesca",
    "Francesco",
    "Francis",
    "Francisca",
    "Francisco",
    "Franco",
    "Frank",
    "Frankie",
    "Franz",
    "Fred",
    "Freda",
    "Freddie",
    "Freddy",
    "Frederic",
    "Frederick",
    "Frederik",
    "Frederique",
    "Fredrick",
    "Fredy",
    "Freeda",
    "Freeman",
    "Freida",
    "Frida",
    "Frieda",
    "Friedrich",
    "Fritz",
    "Furman",
    "Gabe",
    "Gabriel",
    "Gabriella",
    "Gabrielle",
    "Gaetano",
    "Gage",
    "Gail",
    "Gardner",
    "Garett",
    "Garfield",
    "Garland",
    "Garnet",
    "Garnett",
    "Garret",
    "Garrett",
    "Garrick",
    "Garrison",
    "Garry",
    "Garth",
    "Gaston",
    "Gavin",
    "Gay",
    "Gayle",
    "Gaylord",
    "Gene",
    "General",
    "Genesis",
    "Genevieve",
    "Gennaro",
    "Genoveva",
    "Geo",
    "Geoffrey",
    "George",
    "Georgette",
    "Georgiana",
    "Georgianna",
    "Geovanni",
    "Geovanny",
    "Geovany",
    "Gerald",
    "Geraldine",
    "Gerard",
    "Gerardo",
    "Gerda",
    "Gerhard",
    "Germaine",
    "German",
    "Gerry",
    "Gerson",
    "Gertrude",
    "Gia",
    "Gianni",
    "Gideon",
    "Gilbert",
    "Gilberto",
    "Gilda",
    "Giles",
    "Gillian",
    "Gina",
    "Gino",
    "Giovani",
    "Giovanna",
    "Giovanni",
    "Giovanny",
    "Gisselle",
    "Giuseppe",
    "Gladyce",
    "Gladys",
    "Glen",
    "Glenda",
    "Glenna",
    "Glennie",
    "Gloria",
    "Godfrey",
    "Golda",
    "Golden",
    "Gonzalo",
    "Gordon",
    "Grace",
    "Gracie",
    "Graciela",
    "Grady",
    "Graham",
    "Grant",
    "Granville",
    "Grayce",
    "Grayson",
    "Green",
    "Greg",
    "Gregg",
    "Gregoria",
    "Gregorio",
    "Gregory",
    "Greta",
    "Gretchen",
    "Greyson",
    "Griffin",
    "Grover",
    "Guadalupe",
    "Gudrun",
    "Guido",
    "Guillermo",
    "Guiseppe",
    "Gunnar",
    "Gunner",
    "Gus",
    "Gussie",
    "Gust",
    "Gustave",
    "Guy",
    "Gwen",
    "Gwendolyn",
    "Hadley",
    "Hailee",
    "Hailey",
    "Hailie",
    "Hal",
    "Haleigh",
    "Haley",
    "Halie",
    "Halle",
    "Hallie",
    "Hank",
    "Hanna",
    "Hannah",
    "Hans",
    "Hardy",
    "Harley",
    "Harmon",
    "Harmony",
    "Harold",
    "Harrison",
    "Harry",
    "Harvey",
    "Haskell",
    "Hassan",
    "Hassie",
    "Hattie",
    "Haven",
    "Hayden",
    "Haylee",
    "Hayley",
    "Haylie",
    "Hazel",
    "Hazle",
    "Heath",
    "Heather",
    "Heaven",
    "Heber",
    "Hector",
    "Heidi",
    "Helen",
    "Helena",
    "Helene",
    "Helga",
    "Hellen",
    "Helmer",
    "Heloise",
    "Henderson",
    "Henri",
    "Henriette",
    "Henry",
    "Herbert",
    "Herman",
    "Hermann",
    "Hermina",
    "Herminia",
    "Herminio",
    "Hershel",
    "Herta",
    "Hertha",
    "Hester",
    "Hettie",
    "Hilario",
    "Hilbert",
    "Hilda",
    "Hildegard",
    "Hillard",
    "Hillary",
    "Hilma",
    "Hilton",
    "Hipolito",
    "Hiram",
    "Hobart",
    "Holden",
    "Hollie",
    "Hollis",
    "Holly",
    "Hope",
    "Horace",
    "Horacio",
    "Hortense",
    "Hosea",
    "Houston",
    "Howard",
    "Howell",
    "Hoyt",
    "Hubert",
    "Hudson",
    "Hugh",
    "Hulda",
    "Humberto",
    "Hunter",
    "Hyman",
    "Ian",
    "Ibrahim",
    "Icie",
    "Ida",
    "Idell",
    "Idella",
    "Ignacio",
    "Ignatius",
    "Ike",
    "Ila",
    "Ilene",
    "Iliana",
    "Ima",
    "Imani",
    "Imelda",
    "Immanuel",
    "Imogene",
    "Ines",
    "Irma",
    "Irving",
    "Irwin",
    "Isaac",
    "Isabel",
    "Isabell",
    "Isabella",
    "Isabelle",
    "Isac",
    "Isadore",
    "Isai",
    "Isaiah",
    "Isaias",
    "Isidro",
    "Ismael",
    "Isobel",
    "Isom",
    "Israel",
    "Issac",
    "Itzel",
    "Iva",
    "Ivah",
    "Ivory",
    "Ivy",
    "Izabella",
    "Izaiah",
    "Jabari",
    "Jace",
    "Jacey",
    "Jacinthe",
    "Jacinto",
    "Jack",
    "Jackeline",
    "Jackie",
    "Jacklyn",
    "Jackson",
    "Jacky",
    "Jaclyn",
    "Jacquelyn",
    "Jacques",
    "Jacynthe",
    "Jada",
    "Jade",
    "Jaden",
    "Jadon",
    "Jadyn",
    "Jaeden",
    "Jaida",
    "Jaiden",
    "Jailyn",
    "Jaime",
    "Jairo",
    "Jakayla",
    "Jake",
    "Jakob",
    "Jaleel",
    "Jalen",
    "Jalon",
    "Jalyn",
    "Jamaal",
    "Jamal",
    "Jamar",
    "Jamarcus",
    "Jamel",
    "Jameson",
    "Jamey",
    "Jamie",
    "Jamil",
    "Jamir",
    "Jamison",
    "Jammie",
    "Jan",
    "Jana",
    "Janae",
    "Jane",
    "Janelle",
    "Janessa",
    "Janet",
    "Janice",
    "Janick",
    "Janie",
    "Janis",
    "Janiya",
    "Jannie",
    "Jany",
    "Jaquan",
    "Jaquelin",
    "Jaqueline",
    "Jared",
    "Jaren",
    "Jarod",
    "Jaron",
    "Jarred",
    "Jarrell",
    "Jarret",
    "Jarrett",
    "Jarrod",
    "Jarvis",
    "Jasen",
    "Jasmin",
    "Jason",
    "Jasper",
    "Jaunita",
    "Javier",
    "Javon",
    "Javonte",
    "Jay",
    "Jayce",
    "Jaycee",
    "Jayda",
    "Jayde",
    "Jayden",
    "Jaydon",
    "Jaylan",
    "Jaylen",
    "Jaylin",
    "Jaylon",
    "Jayme",
    "Jayne",
    "Jayson",
    "Jazlyn",
    "Jazmin",
    "Jazmyn",
    "Jazmyne",
    "Jean",
    "Jeanette",
    "Jeanie",
    "Jeanne",
    "Jed",
    "Jedediah",
    "Jedidiah",
    "Jeff",
    "Jefferey",
    "Jeffery",
    "Jeffrey",
    "Jeffry",
    "Jena",
    "Jenifer",
    "Jennie",
    "Jennifer",
    "Jennings",
    "Jennyfer",
    "Jensen",
    "Jerad",
    "Jerald",
    "Jeramie",
    "Jeramy",
    "Jerel",
    "Jeremie",
    "Jeremy",
    "Jermain",
    "Jermaine",
    "Jermey",
    "Jerod",
    "Jerome",
    "Jeromy",
    "Jerrell",
    "Jerrod",
    "Jerrold",
    "Jerry",
    "Jess",
    "Jesse",
    "Jessica",
    "Jessie",
    "Jessika",
    "Jessy",
    "Jessyca",
    "Jesus",
    "Jett",
    "Jettie",
    "Jevon",
    "Jewel",
    "Jewell",
    "Jillian",
    "Jimmie",
    "Jimmy",
    "Jo",
    "Joan",
    "Joana",
    "Joanie",
    "Joanne",
    "Joannie",
    "Joanny",
    "Joany",
    "Joaquin",
    "Jocelyn",
    "Jodie",
    "Jody",
    "Joe",
    "Joel",
    "Joelle",
    "Joesph",
    "Joey",
    "Johan",
    "Johann",
    "Johanna",
    "Johathan",
    "John",
    "Johnathan",
    "Johnathon",
    "Johnnie",
    "Johnny",
    "Johnpaul",
    "Johnson",
    "Jolie",
    "Jon",
    "Jonas",
    "Jonatan",
    "Jonathan",
    "Jonathon",
    "Jordan",
    "Jordane",
    "Jordi",
    "Jordon",
    "Jordy",
    "Jordyn",
    "Jorge",
    "Jose",
    "Josefa",
    "Josefina",
    "Joseph",
    "Josephine",
    "Josh",
    "Joshua",
    "Joshuah",
    "Josiah",
    "Josiane",
    "Josianne",
    "Josie",
    "Josue",
    "Jovan",
    "Jovani",
    "Jovanny",
    "Jovany",
    "Joy",
    "Joyce",
    "Juana",
    "Juanita",
    "Judah",
    "Judd",
    "Jude",
    "Judge",
    "Judson",
    "Judy",
    "Jules",
    "Julia",
    "Julian",
    "Juliana",
    "Julianne",
    "Julie",
    "Julien",
    "Juliet",
    "Julio",
    "Julius",
    "June",
    "Junior",
    "Junius",
    "Justen",
    "Justice",
    "Justina",
    "Justine",
    "Juston",
    "Justus",
    "Justyn",
    "Juvenal",
    "Juwan",
    "Kacey",
    "Kaci",
    "Kacie",
    "Kade",
    "Kaden",
    "Kadin",
    "Kaela",
    "Kaelyn",
    "Kaia",
    "Kailee",
    "Kailey",
    "Kailyn",
    "Kaitlin",
    "Kaitlyn",
    "Kale",
    "Kaleb",
    "Kaleigh",
    "Kaley",
    "Kali",
    "Kallie",
    "Kameron",
    "Kamille",
    "Kamren",
    "Kamron",
    "Kamryn",
    "Kane",
    "Kara",
    "Kareem",
    "Karelle",
    "Karen",
    "Kari",
    "Kariane",
    "Karianne",
    "Karina",
    "Karine",
    "Karl",
    "Karlee",
    "Karley",
    "Karli",
    "Karlie",
    "Karolann",
    "Karson",
    "Kasandra",
    "Kasey",
    "Kassandra",
    "Katarina",
    "Katelin",
    "Katelyn",
    "Katelynn",
    "Katharina",
    "Katherine",
    "Katheryn",
    "Kathleen",
    "Kathlyn",
    "Kathryn",
    "Kathryne",
    "Katlyn",
    "Katlynn",
    "Katrina",
    "Katrine",
    "Kattie",
    "Kavon",
    "Kay",
    "Kaya",
    "Kaycee",
    "Kayden",
    "Kayla",
    "Kaylah",
    "Kaylee",
    "Kayleigh",
    "Kayley",
    "Kayli",
    "Kaylie",
    "Kaylin",
    "Keagan",
    "Keanu",
    "Keara",
    "Keaton",
    "Keegan",
    "Keeley",
    "Keely",
    "Keenan",
    "Keira",
    "Keith",
    "Kellen",
    "Kelley",
    "Kelli",
    "Kellie",
    "Kelly",
    "Kelsi",
    "Kelsie",
    "Kelton",
    "Kelvin",
    "Ken",
    "Kendall",
    "Kendra",
    "Kendrick",
    "Kenna",
    "Kennedi",
    "Kennedy",
    "Kenneth",
    "Kennith",
    "Kenny",
    "Kenton",
    "Kenya",
    "Kenyatta",
    "Kenyon",
    "Keon",
    "Keshaun",
    "Keshawn",
    "Keven",
    "Kevin",
    "Kevon",
    "Keyon",
    "Keyshawn",
    "Khalid",
    "Khalil",
    "Kian",
    "Kiana",
    "Kianna",
    "Kiara",
    "Kiarra",
    "Kiel",
    "Kiera",
    "Kieran",
    "Kiley",
    "Kim",
    "Kimberly",
    "King",
    "Kip",
    "Kira",
    "Kirk",
    "Kirsten",
    "Kirstin",
    "Kitty",
    "Kobe",
    "Koby",
    "Kody",
    "Kolby",
    "Kole",
    "Korbin",
    "Korey",
    "Kory",
    "Kraig",
    "Kris",
    "Krista",
    "Kristian",
    "Kristin",
    "Kristina",
    "Kristofer",
    "Kristoffer",
    "Kristopher",
    "Kristy",
    "Krystal",
    "Krystel",
    "Krystina",
    "Kurt",
    "Kurtis",
    "Kyla",
    "Kyle",
    "Kylee",
    "Kyleigh",
    "Kyler",
    "Kylie",
    "Kyra",
    "Lacey",
    "Lacy",
    "Ladarius",
    "Lafayette",
    "Laila",
    "Laisha",
    "Lamar",
    "Lambert",
    "Lamont",
    "Lance",
    "Landen",
    "Lane",
    "Laney",
    "Larissa",
    "Laron",
    "Larry",
    "Larue",
    "Laura",
    "Laurel",
    "Lauren",
    "Laurence",
    "Lauretta",
    "Lauriane",
    "Laurianne",
    "Laurie",
    "Laurine",
    "Laury",
    "Lauryn",
    "Lavada",
    "Lavern",
    "Laverna",
    "Laverne",
    "Lavina",
    "Lavinia",
    "Lavon",
    "Lavonne",
    "Lawrence",
    "Lawson",
    "Layla",
    "Layne",
    "Lazaro",
    "Lea",
    "Leann",
    "Leanna",
    "Leanne",
    "Leatha",
    "Leda",
    "Lee",
    "Leif",
    "Leila",
    "Leilani",
    "Lela",
    "Lelah",
    "Leland",
    "Lelia",
    "Lempi",
    "Lemuel",
    "Lenna",
    "Lennie",
    "Lenny",
    "Lenora",
    "Lenore",
    "Leo",
    "Leola",
    "Leon",
    "Leonard",
    "Leonardo",
    "Leone",
    "Leonel",
    "Leonie",
    "Leonor",
    "Leonora",
    "Leopold",
    "Leopoldo",
    "Leora",
    "Lera",
    "Lesley",
    "Leslie",
    "Lesly",
    "Lessie",
    "Lester",
    "Leta",
    "Letha",
    "Letitia",
    "Levi",
    "Lew",
    "Lewis",
    "Lexi",
    "Lexie",
    "Lexus",
    "Lia",
    "Liam",
    "Liana",
    "Libbie",
    "Libby",
    "Lila",
    "Lilian",
    "Liliana",
    "Liliane",
    "Lilla",
    "Lillian",
    "Lilliana",
    "Lillie",
    "Lilly",
    "Lily",
    "Lilyan",
    "Lina",
    "Lincoln",
    "Linda",
    "Lindsay",
    "Lindsey",
    "Linnea",
    "Linnie",
    "Linwood",
    "Lionel",
    "Lisa",
    "Lisandro",
    "Lisette",
    "Litzy",
    "Liza",
    "Lizeth",
    "Lizzie",
    "Llewellyn",
    "Lloyd",
    "Logan",
    "Lois",
    "Lola",
    "Lolita",
    "Loma",
    "Lon",
    "London",
    "Lonie",
    "Lonnie",
    "Lonny",
    "Lonzo",
    "Lora",
    "Loraine",
    "Loren",
    "Lorena",
    "Lorenz",
    "Lorenza",
    "Lorenzo",
    "Lori",
    "Lorine",
    "Lorna",
    "Lottie",
    "Lou",
    "Louie",
    "Louisa",
    "Lourdes",
    "Louvenia",
    "Lowell",
    "Loy",
    "Loyal",
    "Loyce",
    "Lucas",
    "Luciano",
    "Lucie",
    "Lucienne",
    "Lucile",
    "Lucinda",
    "Lucio",
    "Lucious",
    "Lucius",
    "Lucy",
    "Ludie",
    "Ludwig",
    "Lue",
    "Luella",
    "Luigi",
    "Luis",
    "Luisa",
    "Lukas",
    "Lula",
    "Lulu",
    "Luna",
    "Lupe",
    "Lura",
    "Lurline",
    "Luther",
    "Luz",
    "Lyda",
    "Lydia",
    "Lyla",
    "Lynn",
    "Lyric",
    "Lysanne",
    "Mabel",
    "Mabelle",
    "Mable",
    "Mac",
    "Macey",
    "Maci",
    "Macie",
    "Mack",
    "Mackenzie",
    "Macy",
    "Madaline",
    "Madalyn",
    "Maddison",
    "Madeline",
    "Madelyn",
    "Madelynn",
    "Madge",
    "Madie",
    "Madilyn",
    "Madisen",
    "Madison",
    "Madisyn",
    "Madonna",
    "Madyson",
    "Mae",
    "Maegan",
    "Maeve",
    "Mafalda",
    "Magali",
    "Magdalen",
    "Magdalena",
    "Maggie",
    "Magnolia",
    "Magnus",
    "Maia",
    "Maida",
    "Maiya",
    "Major",
    "Makayla",
    "Makenna",
    "Makenzie",
    "Malachi",
    "Malcolm",
    "Malika",
    "Malinda",
    "Mallie",
    "Mallory",
    "Malvina",
    "Mandy",
    "Manley",
    "Manuel",
    "Manuela",
    "Mara",
    "Marc",
    "Marcel",
    "Marcelina",
    "Marcelino",
    "Marcella",
    "Marcelle",
    "Marcellus",
    "Marcelo",
    "Marcia",
    "Marco",
    "Marcos",
    "Marcus",
    "Margaret",
    "Margarete",
    "Margarett",
    "Margaretta",
    "Margarette",
    "Margarita",
    "Marge",
    "Margie",
    "Margot",
    "Margret",
    "Marguerite",
    "Maria",
    "Mariah",
    "Mariam",
    "Marian",
    "Mariana",
    "Mariane",
    "Marianna",
    "Marianne",
    "Mariano",
    "Maribel",
    "Marie",
    "Mariela",
    "Marielle",
    "Marietta",
    "Marilie",
    "Marilou",
    "Marilyne",
    "Marina",
    "Mario",
    "Marion",
    "Marisa",
    "Marisol",
    "Maritza",
    "Marjolaine",
    "Marjorie",
    "Marjory",
    "Mark",
    "Markus",
    "Marlee",
    "Marlen",
    "Marlene",
    "Marley",
    "Marlin",
    "Marlon",
    "Marques",
    "Marquis",
    "Marquise",
    "Marshall",
    "Marta",
    "Martin",
    "Martina",
    "Martine",
    "Marty",
    "Marvin",
    "Mary",
    "Maryam",
    "Maryjane",
    "Maryse",
    "Mason",
    "Mateo",
    "Mathew",
    "Mathias",
    "Mathilde",
    "Matilda",
    "Matilde",
    "Matt",
    "Matteo",
    "Mattie",
    "Maud",
    "Maude",
    "Maudie",
    "Maureen",
    "Maurice",
    "Mauricio",
    "Maurine",
    "Maverick",
    "Mavis",
    "Max",
    "Maxie",
    "Maxime",
    "Maximilian",
    "Maximillia",
    "Maximillian",
    "Maximo",
    "Maximus",
    "Maxine",
    "Maxwell",
    "May",
    "Maya",
    "Maybell",
    "Maybelle",
    "Maye",
    "Maymie",
    "Maynard",
    "Mayra",
    "Mazie",
    "Mckayla",
    "Mckenna",
    "Mckenzie",
    "Meagan",
    "Meaghan",
    "Meda",
    "Megane",
    "Meggie",
    "Meghan",
    "Mekhi",
    "Melany",
    "Melba",
    "Melisa",
    "Melissa",
    "Mellie",
    "Melody",
    "Melvin",
    "Melvina",
    "Melyna",
    "Melyssa",
    "Mercedes",
    "Meredith",
    "Merl",
    "Merle",
    "Merlin",
    "Merritt",
    "Mertie",
    "Mervin",
    "Meta",
    "Mia",
    "Micaela",
    "Micah",
    "Michael",
    "Michaela",
    "Michale",
    "Micheal",
    "Michel",
    "Michele",
    "Michelle",
    "Miguel",
    "Mikayla",
    "Mike",
    "Mikel",
    "Milan",
    "Miles",
    "Milford",
    "Miller",
    "Millie",
    "Milo",
    "Milton",
    "Mina",
    "Minerva",
    "Minnie",
    "Miracle",
    "Mireille",
    "Mireya",
    "Misael",
    "Missouri",
    "Misty",
    "Mitchel",
    "Mitchell",
    "Mittie",
    "Modesta",
    "Modesto",
    "Mohamed",
    "Mohammad",
    "Mohammed",
    "Moises",
    "Mollie",
    "Molly",
    "Mona",
    "Monica",
    "Monique",
    "Monroe",
    "Monserrat",
    "Monserrate",
    "Montana",
    "Monte",
    "Monty",
    "Morgan",
    "Moriah",
    "Morris",
    "Mortimer",
    "Morton",
    "Mose",
    "Moses",
    "Moshe",
    "Mossie",
    "Mozell",
    "Mozelle",
    "Muhammad",
    "Muriel",
    "Murl",
    "Murphy",
    "Murray",
    "Mustafa",
    "Mya",
    "Myah",
    "Mylene",
    "Myles",
    "Myra",
    "Myriam",
    "Myrl",
    "Myrna",
    "Myron",
    "Myrtice",
    "Myrtie",
    "Myrtis",
    "Myrtle",
    "Nadia",
    "Nakia",
    "Name",
    "Nannie",
    "Naomi",
    "Naomie",
    "Napoleon",
    "Narciso",
    "Nash",
    "Nasir",
    "Nat",
    "Natalia",
    "Natalie",
    "Natasha",
    "Nathan",
    "Nathanael",
    "Nathanial",
    "Nathaniel",
    "Nathen",
    "Nayeli",
    "Neal",
    "Ned",
    "Nedra",
    "Neha",
    "Neil",
    "Nelda",
    "Nella",
    "Nelle",
    "Nellie",
    "Nels",
    "Nelson",
    "Neoma",
    "Nestor",
    "Nettie",
    "Neva",
    "Newell",
    "Newton",
    "Nia",
    "Nicholas",
    "Nicholaus",
    "Nichole",
    "Nick",
    "Nicklaus",
    "Nickolas",
    "Nico",
    "Nicola",
    "Nicolas",
    "Nicole",
    "Nicolette",
    "Nigel",
    "Nikita",
    "Nikki",
    "Nikko",
    "Niko",
    "Nikolas",
    "Nils",
    "Nina",
    "Noah",
    "Noble",
    "Noe",
    "Noel",
    "Noelia",
    "Noemi",
    "Noemie",
    "Noemy",
    "Nola",
    "Nolan",
    "Nona",
    "Nora",
    "Norbert",
    "Norberto",
    "Norene",
    "Norma",
    "Norris",
    "Norval",
    "Norwood",
    "Nova",
    "Novella",
    "Nya",
    "Nyah",
    "Nyasia",
    "Obie",
    "Oceane",
    "Ocie",
    "Octavia",
    "Oda",
    "Odell",
    "Odessa",
    "Odie",
    "Ofelia",
    "Okey",
    "Ola",
    "Olaf",
    "Ole",
    "Olen",
    "Oleta",
    "Olga",
    "Olin",
    "Oliver",
    "Ollie",
    "Oma",
    "Omari",
    "Omer",
    "Ona",
    "Onie",
    "Opal",
    "Ophelia",
    "Ora",
    "Oral",
    "Oran",
    "Oren",
    "Orie",
    "Orin",
    "Orion",
    "Orland",
    "Orlando",
    "Orlo",
    "Orpha",
    "Orrin",
    "Orval",
    "Orville",
    "Osbaldo",
    "Osborne",
    "Oscar",
    "Osvaldo",
    "Oswald",
    "Oswaldo",
    "Otha",
    "Otho",
    "Otilia",
    "Otis",
    "Ottilie",
    "Ottis",
    "Otto",
    "Ova",
    "Owen",
    "Ozella",
    "Pablo",
    "Paige",
    "Palma",
    "Pamela",
    "Pansy",
    "Paolo",
    "Paris",
    "Parker",
    "Pascale",
    "Pasquale",
    "Pat",
    "Patience",
    "Patricia",
    "Patrick",
    "Patsy",
    "Pattie",
    "Paul",
    "Paula",
    "Pauline",
    "Paxton",
    "Payton",
    "Pearl",
    "Pearlie",
    "Pearline",
    "Pedro",
    "Peggie",
    "Penelope",
    "Percival",
    "Percy",
    "Perry",
    "Pete",
    "Peter",
    "Petra",
    "Peyton",
    "Philip",
    "Phoebe",
    "Phyllis",
    "Pierce",
    "Pierre",
    "Pietro",
    "Pink",
    "Pinkie",
    "Piper",
    "Polly",
    "Porter",
    "Precious",
    "Presley",
    "Preston",
    "Price",
    "Prince",
    "Princess",
    "Priscilla",
    "Providenci",
    "Prudence",
    "Queen",
    "Queenie",
    "Quentin",
    "Quincy",
    "Quinn",
    "Quinten",
    "Quinton",
    "Rachael",
    "Rachel",
    "Rachelle",
    "Rae",
    "Raegan",
    "Rafael",
    "Rafaela",
    "Raheem",
    "Rahsaan",
    "Rahul",
    "Raina",
    "Raleigh",
    "Ralph",
    "Ramiro",
    "Ramon",
    "Ramona",
    "Randal",
    "Randall",
    "Randi",
    "Randy",
    "Ransom",
    "Raoul",
    "Raphael",
    "Raphaelle",
    "Raquel",
    "Rashad",
    "Rashawn",
    "Rasheed",
    "Raul",
    "Raven",
    "Ray",
    "Raymond",
    "Raymundo",
    "Reagan",
    "Reanna",
    "Reba",
    "Rebeca",
    "Rebecca",
    "Rebeka",
    "Rebekah",
    "Reece",
    "Reed",
    "Reese",
    "Regan",
    "Reggie",
    "Reginald",
    "Reid",
    "Reilly",
    "Reina",
    "Reinhold",
    "Remington",
    "Rene",
    "Renee",
    "Ressie",
    "Reta",
    "Retha",
    "Retta",
    "Reuben",
    "Reva",
    "Rex",
    "Rey",
    "Reyes",
    "Reymundo",
    "Reyna",
    "Reynold",
    "Rhea",
    "Rhett",
    "Rhianna",
    "Rhiannon",
    "Rhoda",
    "Ricardo",
    "Richard",
    "Richie",
    "Richmond",
    "Rick",
    "Rickey",
    "Rickie",
    "Ricky",
    "Rico",
    "Rigoberto",
    "Riley",
    "Rita",
    "River",
    "Robb",
    "Robbie",
    "Robert",
    "Roberta",
    "Roberto",
    "Robin",
    "Robyn",
    "Rocio",
    "Rocky",
    "Rod",
    "Roderick",
    "Rodger",
    "Rodolfo",
    "Rodrick",
    "Rodrigo",
    "Roel",
    "Rogelio",
    "Roger",
    "Rogers",
    "Rolando",
    "Rollin",
    "Roma",
    "Romaine",
    "Roman",
    "Ron",
    "Ronaldo",
    "Ronny",
    "Roosevelt",
    "Rory",
    "Rosa",
    "Rosalee",
    "Rosalia",
    "Rosalind",
    "Rosalinda",
    "Rosalyn",
    "Rosamond",
    "Rosanna",
    "Rosario",
    "Roscoe",
    "Rose",
    "Rosella",
    "Roselyn",
    "Rosemarie",
    "Rosemary",
    "Rosendo",
    "Rosetta",
    "Rosie",
    "Rosina",
    "Roslyn",
    "Ross",
    "Rossie",
    "Rowan",
    "Rowena",
    "Rowland",
    "Roxane",
    "Roxanne",
    "Roy",
    "Royal",
    "Royce",
    "Rozella",
    "Ruben",
    "Rubie",
    "Ruby",
    "Rubye",
    "Rudolph",
    "Rudy",
    "Rupert",
    "Russ",
    "Russel",
    "Russell",
    "Rusty",
    "Ruth",
    "Ruthe",
    "Ruthie",
    "Ryan",
    "Ryann",
    "Ryder",
    "Rylan",
    "Rylee",
    "Ryleigh",
    "Ryley",
    "Sabina",
    "Sabrina",
    "Sabryna",
    "Sadie",
    "Sadye",
    "Sage",
    "Saige",
    "Sallie",
    "Sally",
    "Salma",
    "Salvador",
    "Salvatore",
    "Sam",
    "Samanta",
    "Samantha",
    "Samara",
    "Samir",
    "Sammie",
    "Sammy",
    "Samson",
    "Sandra",
    "Sandrine",
    "Sandy",
    "Sanford",
    "Santa",
    "Santiago",
    "Santina",
    "Santino",
    "Santos",
    "Sarah",
    "Sarai",
    "Sarina",
    "Sasha",
    "Saul",
    "Savanah",
    "Savanna",
    "Savannah",
    "Savion",
    "Scarlett",
    "Schuyler",
    "Scot",
    "Scottie",
    "Scotty",
    "Seamus",
    "Sean",
    "Sebastian",
    "Sedrick",
    "Selena",
    "Selina",
    "Selmer",
    "Serena",
    "Serenity",
    "Seth",
    "Shad",
    "Shaina",
    "Shakira",
    "Shana",
    "Shane",
    "Shanel",
    "Shanelle",
    "Shania",
    "Shanie",
    "Shaniya",
    "Shanna",
    "Shannon",
    "Shanny",
    "Shanon",
    "Shany",
    "Sharon",
    "Shaun",
    "Shawn",
    "Shawna",
    "Shaylee",
    "Shayna",
    "Shayne",
    "Shea",
    "Sheila",
    "Sheldon",
    "Shemar",
    "Sheridan",
    "Sherman",
    "Sherwood",
    "Shirley",
    "Shyann",
    "Shyanne",
    "Sibyl",
    "Sid",
    "Sidney",
    "Sienna",
    "Sierra",
    "Sigmund",
    "Sigrid",
    "Sigurd",
    "Silas",
    "Sim",
    "Simeon",
    "Simone",
    "Sincere",
    "Sister",
    "Skye",
    "Skyla",
    "Skylar",
    "Sofia",
    "Soledad",
    "Solon",
    "Sonia",
    "Sonny",
    "Sonya",
    "Sophia",
    "Sophie",
    "Spencer",
    "Stacey",
    "Stacy",
    "Stan",
    "Stanford",
    "Stanley",
    "Stanton",
    "Stefan",
    "Stefanie",
    "Stella",
    "Stephan",
    "Stephania",
    "Stephanie",
    "Stephany",
    "Stephen",
    "Stephon",
    "Sterling",
    "Steve",
    "Stevie",
    "Stewart",
    "Stone",
    "Stuart",
    "Summer",
    "Sunny",
    "Susan",
    "Susana",
    "Susanna",
    "Susie",
    "Suzanne",
    "Sven",
    "Syble",
    "Sydnee",
    "Sydney",
    "Sydni",
    "Sydnie",
    "Sylvan",
    "Sylvester",
    "Sylvia",
    "Tabitha",
    "Tad",
    "Talia",
    "Talon",
    "Tamara",
    "Tamia",
    "Tania",
    "Tanner",
    "Tanya",
    "Tara",
    "Taryn",
    "Tate",
    "Tatum",
    "Tatyana",
    "Taurean",
    "Tavares",
    "Taya",
    "Taylor",
    "Teagan",
    "Ted",
    "Telly",
    "Terence",
    "Teresa",
    "Terrance",
    "Terrell",
    "Terrence",
    "Terrill",
    "Terry",
    "Tess",
    "Tessie",
    "Tevin",
    "Thad",
    "Thaddeus",
    "Thalia",
    "Thea",
    "Thelma",
    "Theo",
    "Theodora",
    "Theodore",
    "Theresa",
    "Therese",
    "Theresia",
    "Theron",
    "Thomas",
    "Thora",
    "Thurman",
    "Tia",
    "Tiana",
    "Tianna",
    "Tiara",
    "Tierra",
    "Tiffany",
    "Tillman",
    "Timmothy",
    "Timmy",
    "Timothy",
    "Tina",
    "Tito",
    "Titus",
    "Tobin",
    "Toby",
    "Tod",
    "Tom",
    "Tomas",
    "Tomasa",
    "Tommie",
    "Toney",
    "Toni",
    "Tony",
    "Torey",
    "Torrance",
    "Torrey",
    "Toy",
    "Trace",
    "Tracey",
    "Tracy",
    "Travis",
    "Travon",
    "Tre",
    "Tremaine",
    "Tremayne",
    "Trent",
    "Trenton",
    "Tressa",
    "Tressie",
    "Treva",
    "Trever",
    "Trevion",
    "Trevor",
    "Trey",
    "Trinity",
    "Trisha",
    "Tristian",
    "Tristin",
    "Triston",
    "Troy",
    "Trudie",
    "Trycia",
    "Trystan",
    "Turner",
    "Twila",
    "Tyler",
    "Tyra",
    "Tyree",
    "Tyreek",
    "Tyrel",
    "Tyrell",
    "Tyrese",
    "Tyrique",
    "Tyshawn",
    "Tyson",
    "Ubaldo",
    "Ulices",
    "Ulises",
    "Una",
    "Unique",
    "Urban",
    "Uriah",
    "Uriel",
    "Ursula",
    "Vada",
    "Valentin",
    "Valentina",
    "Valentine",
    "Valerie",
    "Vallie",
    "Van",
    "Vance",
    "Vanessa",
    "Vaughn",
    "Veda",
    "Velda",
    "Vella",
    "Velma",
    "Velva",
    "Vena",
    "Verda",
    "Verdie",
    "Vergie",
    "Verla",
    "Verlie",
    "Vern",
    "Verna",
    "Verner",
    "Vernice",
    "Vernie",
    "Vernon",
    "Verona",
    "Veronica",
    "Vesta",
    "Vicenta",
    "Vicente",
    "Vickie",
    "Vicky",
    "Victor",
    "Victoria",
    "Vida",
    "Vidal",
    "Vilma",
    "Vince",
    "Vincent",
    "Vincenza",
    "Vincenzo",
    "Vinnie",
    "Viola",
    "Violet",
    "Violette",
    "Virgie",
    "Virgil",
    "Virginia",
    "Virginie",
    "Vita",
    "Vito",
    "Viva",
    "Vivian",
    "Viviane",
    "Vivianne",
    "Vivien",
    "Vivienne",
    "Vladimir",
    "Wade",
    "Waino",
    "Waldo",
    "Walker",
    "Wallace",
    "Walter",
    "Walton",
    "Wanda",
    "Ward",
    "Warren",
    "Watson",
    "Wava",
    "Waylon",
    "Wayne",
    "Webster",
    "Weldon",
    "Wellington",
    "Wendell",
    "Wendy",
    "Werner",
    "Westley",
    "Weston",
    "Whitney",
    "Wilber",
    "Wilbert",
    "Wilburn",
    "Wiley",
    "Wilford",
    "Wilfred",
    "Wilfredo",
    "Wilfrid",
    "Wilhelm",
    "Wilhelmine",
    "Will",
    "Willa",
    "Willard",
    "William",
    "Willie",
    "Willis",
    "Willow",
    "Willy",
    "Wilma",
    "Wilmer",
    "Wilson",
    "Wilton",
    "Winfield",
    "Winifred",
    "Winnifred",
    "Winona",
    "Winston",
    "Woodrow",
    "Wyatt",
    "Wyman",
    "Xander",
    "Xavier",
    "Xzavier",
    "Yadira",
    "Yasmeen",
    "Yasmin",
    "Yasmine",
    "Yazmin",
    "Yesenia",
    "Yessenia",
    "Yolanda",
    "Yoshiko",
    "Yvette",
    "Yvonne",
    "Zachariah",
    "Zachary",
    "Zachery",
    "Zack",
    "Zackary",
    "Zackery",
    "Zakary",
    "Zander",
    "Zane",
    "Zaria",
    "Zechariah",
    "Zelda",
    "Zella",
    "Zelma",
    "Zena",
    "Zetta",
    "Zion",
    "Zita",
    "Zoe",
    "Zoey",
    "Zoie",
    "Zoila",
    "Zola",
    "Zora",
    "Zula"
  ];
});

// node_modules/faker/lib/locales/en/name/last_name.js
var require_last_name4 = __commonJS((exports, module) => {
  module["exports"] = [
    "Abbott",
    "Abernathy",
    "Abshire",
    "Adams",
    "Altenwerth",
    "Anderson",
    "Ankunding",
    "Armstrong",
    "Auer",
    "Aufderhar",
    "Bahringer",
    "Bailey",
    "Balistreri",
    "Barrows",
    "Bartell",
    "Bartoletti",
    "Barton",
    "Bashirian",
    "Batz",
    "Bauch",
    "Baumbach",
    "Bayer",
    "Beahan",
    "Beatty",
    "Bechtelar",
    "Becker",
    "Bednar",
    "Beer",
    "Beier",
    "Berge",
    "Bergnaum",
    "Bergstrom",
    "Bernhard",
    "Bernier",
    "Bins",
    "Blanda",
    "Blick",
    "Block",
    "Bode",
    "Boehm",
    "Bogan",
    "Bogisich",
    "Borer",
    "Bosco",
    "Botsford",
    "Boyer",
    "Boyle",
    "Bradtke",
    "Brakus",
    "Braun",
    "Breitenberg",
    "Brekke",
    "Brown",
    "Bruen",
    "Buckridge",
    "Carroll",
    "Carter",
    "Cartwright",
    "Casper",
    "Cassin",
    "Champlin",
    "Christiansen",
    "Cole",
    "Collier",
    "Collins",
    "Conn",
    "Connelly",
    "Conroy",
    "Considine",
    "Corkery",
    "Cormier",
    "Corwin",
    "Cremin",
    "Crist",
    "Crona",
    "Cronin",
    "Crooks",
    "Cruickshank",
    "Cummerata",
    "Cummings",
    "Dach",
    "D'Amore",
    "Daniel",
    "Dare",
    "Daugherty",
    "Davis",
    "Deckow",
    "Denesik",
    "Dibbert",
    "Dickens",
    "Dicki",
    "Dickinson",
    "Dietrich",
    "Donnelly",
    "Dooley",
    "Douglas",
    "Doyle",
    "DuBuque",
    "Durgan",
    "Ebert",
    "Effertz",
    "Eichmann",
    "Emard",
    "Emmerich",
    "Erdman",
    "Ernser",
    "Fadel",
    "Fahey",
    "Farrell",
    "Fay",
    "Feeney",
    "Feest",
    "Feil",
    "Ferry",
    "Fisher",
    "Flatley",
    "Frami",
    "Franecki",
    "Friesen",
    "Fritsch",
    "Funk",
    "Gaylord",
    "Gerhold",
    "Gerlach",
    "Gibson",
    "Gislason",
    "Gleason",
    "Gleichner",
    "Glover",
    "Goldner",
    "Goodwin",
    "Gorczany",
    "Gottlieb",
    "Goyette",
    "Grady",
    "Graham",
    "Grant",
    "Green",
    "Greenfelder",
    "Greenholt",
    "Grimes",
    "Gulgowski",
    "Gusikowski",
    "Gutkowski",
    "Gutmann",
    "Haag",
    "Hackett",
    "Hagenes",
    "Hahn",
    "Haley",
    "Halvorson",
    "Hamill",
    "Hammes",
    "Hand",
    "Hane",
    "Hansen",
    "Harber",
    "Harris",
    "Hartmann",
    "Harvey",
    "Hauck",
    "Hayes",
    "Heaney",
    "Heathcote",
    "Hegmann",
    "Heidenreich",
    "Heller",
    "Herman",
    "Hermann",
    "Hermiston",
    "Herzog",
    "Hessel",
    "Hettinger",
    "Hickle",
    "Hilll",
    "Hills",
    "Hilpert",
    "Hintz",
    "Hirthe",
    "Hodkiewicz",
    "Hoeger",
    "Homenick",
    "Hoppe",
    "Howe",
    "Howell",
    "Hudson",
    "Huel",
    "Huels",
    "Hyatt",
    "Jacobi",
    "Jacobs",
    "Jacobson",
    "Jakubowski",
    "Jaskolski",
    "Jast",
    "Jenkins",
    "Jerde",
    "Johns",
    "Johnson",
    "Johnston",
    "Jones",
    "Kassulke",
    "Kautzer",
    "Keebler",
    "Keeling",
    "Kemmer",
    "Kerluke",
    "Kertzmann",
    "Kessler",
    "Kiehn",
    "Kihn",
    "Kilback",
    "King",
    "Kirlin",
    "Klein",
    "Kling",
    "Klocko",
    "Koch",
    "Koelpin",
    "Koepp",
    "Kohler",
    "Konopelski",
    "Koss",
    "Kovacek",
    "Kozey",
    "Krajcik",
    "Kreiger",
    "Kris",
    "Kshlerin",
    "Kub",
    "Kuhic",
    "Kuhlman",
    "Kuhn",
    "Kulas",
    "Kunde",
    "Kunze",
    "Kuphal",
    "Kutch",
    "Kuvalis",
    "Labadie",
    "Lakin",
    "Lang",
    "Langosh",
    "Langworth",
    "Larkin",
    "Larson",
    "Leannon",
    "Lebsack",
    "Ledner",
    "Leffler",
    "Legros",
    "Lehner",
    "Lemke",
    "Lesch",
    "Leuschke",
    "Lind",
    "Lindgren",
    "Littel",
    "Little",
    "Lockman",
    "Lowe",
    "Lubowitz",
    "Lueilwitz",
    "Luettgen",
    "Lynch",
    "Macejkovic",
    "MacGyver",
    "Maggio",
    "Mann",
    "Mante",
    "Marks",
    "Marquardt",
    "Marvin",
    "Mayer",
    "Mayert",
    "McClure",
    "McCullough",
    "McDermott",
    "McGlynn",
    "McKenzie",
    "McLaughlin",
    "Medhurst",
    "Mertz",
    "Metz",
    "Miller",
    "Mills",
    "Mitchell",
    "Moen",
    "Mohr",
    "Monahan",
    "Moore",
    "Morar",
    "Morissette",
    "Mosciski",
    "Mraz",
    "Mueller",
    "Muller",
    "Murazik",
    "Murphy",
    "Murray",
    "Nader",
    "Nicolas",
    "Nienow",
    "Nikolaus",
    "Nitzsche",
    "Nolan",
    "Oberbrunner",
    "O'Connell",
    "O'Conner",
    "O'Hara",
    "O'Keefe",
    "O'Kon",
    "Okuneva",
    "Olson",
    "Ondricka",
    "O'Reilly",
    "Orn",
    "Ortiz",
    "Osinski",
    "Pacocha",
    "Padberg",
    "Pagac",
    "Parisian",
    "Parker",
    "Paucek",
    "Pfannerstill",
    "Pfeffer",
    "Pollich",
    "Pouros",
    "Powlowski",
    "Predovic",
    "Price",
    "Prohaska",
    "Prosacco",
    "Purdy",
    "Quigley",
    "Quitzon",
    "Rath",
    "Ratke",
    "Rau",
    "Raynor",
    "Reichel",
    "Reichert",
    "Reilly",
    "Reinger",
    "Rempel",
    "Renner",
    "Reynolds",
    "Rice",
    "Rippin",
    "Ritchie",
    "Robel",
    "Roberts",
    "Rodriguez",
    "Rogahn",
    "Rohan",
    "Rolfson",
    "Romaguera",
    "Roob",
    "Rosenbaum",
    "Rowe",
    "Ruecker",
    "Runolfsdottir",
    "Runolfsson",
    "Runte",
    "Russel",
    "Rutherford",
    "Ryan",
    "Sanford",
    "Satterfield",
    "Sauer",
    "Sawayn",
    "Schaden",
    "Schaefer",
    "Schamberger",
    "Schiller",
    "Schimmel",
    "Schinner",
    "Schmeler",
    "Schmidt",
    "Schmitt",
    "Schneider",
    "Schoen",
    "Schowalter",
    "Schroeder",
    "Schulist",
    "Schultz",
    "Schumm",
    "Schuppe",
    "Schuster",
    "Senger",
    "Shanahan",
    "Shields",
    "Simonis",
    "Sipes",
    "Skiles",
    "Smith",
    "Smitham",
    "Spencer",
    "Spinka",
    "Sporer",
    "Stamm",
    "Stanton",
    "Stark",
    "Stehr",
    "Steuber",
    "Stiedemann",
    "Stokes",
    "Stoltenberg",
    "Stracke",
    "Streich",
    "Stroman",
    "Strosin",
    "Swaniawski",
    "Swift",
    "Terry",
    "Thiel",
    "Thompson",
    "Tillman",
    "Torp",
    "Torphy",
    "Towne",
    "Toy",
    "Trantow",
    "Tremblay",
    "Treutel",
    "Tromp",
    "Turcotte",
    "Turner",
    "Ullrich",
    "Upton",
    "Vandervort",
    "Veum",
    "Volkman",
    "Von",
    "VonRueden",
    "Waelchi",
    "Walker",
    "Walsh",
    "Walter",
    "Ward",
    "Waters",
    "Watsica",
    "Weber",
    "Wehner",
    "Weimann",
    "Weissnat",
    "Welch",
    "West",
    "White",
    "Wiegand",
    "Wilderman",
    "Wilkinson",
    "Will",
    "Williamson",
    "Willms",
    "Windler",
    "Wintheiser",
    "Wisoky",
    "Wisozk",
    "Witting",
    "Wiza",
    "Wolf",
    "Wolff",
    "Wuckert",
    "Wunsch",
    "Wyman",
    "Yost",
    "Yundt",
    "Zboncak",
    "Zemlak",
    "Ziemann",
    "Zieme",
    "Zulauf"
  ];
});

// node_modules/faker/lib/locales/en/name/prefix.js
var require_prefix7 = __commonJS((exports, module) => {
  module["exports"] = [
    "Mr.",
    "Mrs.",
    "Ms.",
    "Miss",
    "Dr."
  ];
});

// node_modules/faker/lib/locales/en/name/suffix.js
var require_suffix9 = __commonJS((exports, module) => {
  module["exports"] = [
    "Jr.",
    "Sr.",
    "I",
    "II",
    "III",
    "IV",
    "V",
    "MD",
    "DDS",
    "PhD",
    "DVM"
  ];
});

// node_modules/faker/lib/locales/en/name/title.js
var require_title2 = __commonJS((exports, module) => {
  module["exports"] = {
    descriptor: [
      "Lead",
      "Senior",
      "Direct",
      "Corporate",
      "Dynamic",
      "Future",
      "Product",
      "National",
      "Regional",
      "District",
      "Central",
      "Global",
      "Customer",
      "Investor",
      "Dynamic",
      "International",
      "Legacy",
      "Forward",
      "Internal",
      "Human",
      "Chief",
      "Principal"
    ],
    level: [
      "Solutions",
      "Program",
      "Brand",
      "Security",
      "Research",
      "Marketing",
      "Directives",
      "Implementation",
      "Integration",
      "Functionality",
      "Response",
      "Paradigm",
      "Tactics",
      "Identity",
      "Markets",
      "Group",
      "Division",
      "Applications",
      "Optimization",
      "Operations",
      "Infrastructure",
      "Intranet",
      "Communications",
      "Web",
      "Branding",
      "Quality",
      "Assurance",
      "Mobility",
      "Accounts",
      "Data",
      "Creative",
      "Configuration",
      "Accountability",
      "Interactions",
      "Factors",
      "Usability",
      "Metrics"
    ],
    job: [
      "Supervisor",
      "Associate",
      "Executive",
      "Liaison",
      "Officer",
      "Manager",
      "Engineer",
      "Specialist",
      "Director",
      "Coordinator",
      "Administrator",
      "Architect",
      "Analyst",
      "Designer",
      "Planner",
      "Orchestrator",
      "Technician",
      "Developer",
      "Producer",
      "Consultant",
      "Assistant",
      "Facilitator",
      "Agent",
      "Representative",
      "Strategist"
    ]
  };
});

// node_modules/faker/lib/locales/en/name/name.js
var require_name19 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{last_name} #{suffix}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}"
  ];
});

// node_modules/faker/lib/locales/en/name/index.js
var require_name18 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name = require_first_name4();
  name2.last_name = require_last_name4();
  name2.prefix = require_prefix7();
  name2.suffix = require_suffix9();
  name2.title = require_title2();
  name2.name = require_name19();
});

// node_modules/faker/lib/locales/en/phone_number/formats.js
var require_formats9 = __commonJS((exports, module) => {
  module["exports"] = [
    "###-###-####",
    "(###) ###-####",
    "1-###-###-####",
    "###.###.####",
    "###-###-####",
    "(###) ###-####",
    "1-###-###-####",
    "###.###.####",
    "###-###-#### x###",
    "(###) ###-#### x###",
    "1-###-###-#### x###",
    "###.###.#### x###",
    "###-###-#### x####",
    "(###) ###-#### x####",
    "1-###-###-#### x####",
    "###.###.#### x####",
    "###-###-#### x#####",
    "(###) ###-#### x#####",
    "1-###-###-#### x#####",
    "###.###.#### x#####"
  ];
});

// node_modules/faker/lib/locales/en/phone_number/index.js
var require_phone_number6 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats9();
});

// node_modules/faker/lib/locales/en/cell_phone/formats.js
var require_formats8 = __commonJS((exports, module) => {
  module["exports"] = [
    "###-###-####",
    "(###) ###-####",
    "1-###-###-####",
    "###.###.####"
  ];
});

// node_modules/faker/lib/locales/en/cell_phone/index.js
var require_cell_phone3 = __commonJS((exports, module) => {
  var cell_phone = {};
  module["exports"] = cell_phone;
  cell_phone.formats = require_formats8();
});

// node_modules/faker/lib/locales/en/business/credit_card_numbers.js
var require_credit_card_numbers = __commonJS((exports, module) => {
  module["exports"] = [
    "1234-2121-1221-1211",
    "1212-1221-1121-1234",
    "1211-1221-1234-2201",
    "1228-1221-1221-1431"
  ];
});

// node_modules/faker/lib/locales/en/business/credit_card_expiry_dates.js
var require_credit_card_expiry_dates = __commonJS((exports, module) => {
  module["exports"] = [
    "2011-10-12",
    "2012-11-12",
    "2015-11-11",
    "2013-9-12"
  ];
});

// node_modules/faker/lib/locales/en/business/credit_card_types.js
var require_credit_card_types = __commonJS((exports, module) => {
  module["exports"] = [
    "visa",
    "mastercard",
    "americanexpress",
    "discover"
  ];
});

// node_modules/faker/lib/locales/en/business/index.js
var require_business = __commonJS((exports, module) => {
  var business = {};
  module["exports"] = business;
  business.credit_card_numbers = require_credit_card_numbers();
  business.credit_card_expiry_dates = require_credit_card_expiry_dates();
  business.credit_card_types = require_credit_card_types();
});

// node_modules/faker/lib/locales/en/commerce/color.js
var require_color2 = __commonJS((exports, module) => {
  module["exports"] = [
    "red",
    "green",
    "blue",
    "yellow",
    "purple",
    "mint green",
    "teal",
    "white",
    "black",
    "orange",
    "pink",
    "grey",
    "maroon",
    "violet",
    "turquoise",
    "tan",
    "sky blue",
    "salmon",
    "plum",
    "orchid",
    "olive",
    "magenta",
    "lime",
    "ivory",
    "indigo",
    "gold",
    "fuchsia",
    "cyan",
    "azure",
    "lavender",
    "silver"
  ];
});

// node_modules/faker/lib/locales/en/commerce/department.js
var require_department2 = __commonJS((exports, module) => {
  module["exports"] = [
    "Books",
    "Movies",
    "Music",
    "Games",
    "Electronics",
    "Computers",
    "Home",
    "Garden",
    "Tools",
    "Grocery",
    "Health",
    "Beauty",
    "Toys",
    "Kids",
    "Baby",
    "Clothing",
    "Shoes",
    "Jewelery",
    "Sports",
    "Outdoors",
    "Automotive",
    "Industrial"
  ];
});

// node_modules/faker/lib/locales/en/commerce/product_name.js
var require_product_name2 = __commonJS((exports, module) => {
  module["exports"] = {
    adjective: [
      "Small",
      "Ergonomic",
      "Rustic",
      "Intelligent",
      "Gorgeous",
      "Incredible",
      "Fantastic",
      "Practical",
      "Sleek",
      "Awesome",
      "Generic",
      "Handcrafted",
      "Handmade",
      "Licensed",
      "Refined",
      "Unbranded",
      "Tasty"
    ],
    material: [
      "Steel",
      "Wooden",
      "Concrete",
      "Plastic",
      "Cotton",
      "Granite",
      "Rubber",
      "Metal",
      "Soft",
      "Fresh",
      "Frozen"
    ],
    product: [
      "Chair",
      "Car",
      "Computer",
      "Keyboard",
      "Mouse",
      "Bike",
      "Ball",
      "Gloves",
      "Pants",
      "Shirt",
      "Table",
      "Shoes",
      "Hat",
      "Towels",
      "Soap",
      "Tuna",
      "Chicken",
      "Fish",
      "Cheese",
      "Bacon",
      "Pizza",
      "Salad",
      "Sausages",
      "Chips"
    ]
  };
});

// node_modules/faker/lib/locales/en/commerce/index.js
var require_commerce3 = __commonJS((exports, module) => {
  var commerce = {};
  module["exports"] = commerce;
  commerce.color = require_color2();
  commerce.department = require_department2();
  commerce.product_name = require_product_name2();
});

// node_modules/faker/lib/locales/en/team/creature.js
var require_creature = __commonJS((exports, module) => {
  module["exports"] = [
    "ants",
    "bats",
    "bears",
    "bees",
    "birds",
    "buffalo",
    "cats",
    "chickens",
    "cattle",
    "dogs",
    "dolphins",
    "ducks",
    "elephants",
    "fishes",
    "foxes",
    "frogs",
    "geese",
    "goats",
    "horses",
    "kangaroos",
    "lions",
    "monkeys",
    "owls",
    "oxen",
    "penguins",
    "people",
    "pigs",
    "rabbits",
    "sheep",
    "tigers",
    "whales",
    "wolves",
    "zebras",
    "banshees",
    "crows",
    "black cats",
    "chimeras",
    "ghosts",
    "conspirators",
    "dragons",
    "dwarves",
    "elves",
    "enchanters",
    "exorcists",
    "sons",
    "foes",
    "giants",
    "gnomes",
    "goblins",
    "gooses",
    "griffins",
    "lycanthropes",
    "nemesis",
    "ogres",
    "oracles",
    "prophets",
    "sorcerors",
    "spiders",
    "spirits",
    "vampires",
    "warlocks",
    "vixens",
    "werewolves",
    "witches",
    "worshipers",
    "zombies",
    "druids"
  ];
});

// node_modules/faker/lib/locales/en/team/name.js
var require_name20 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Address.state} #{creature}"
  ];
});

// node_modules/faker/lib/locales/en/team/index.js
var require_team = __commonJS((exports, module) => {
  var team = {};
  module["exports"] = team;
  team.creature = require_creature();
  team.name = require_name20();
});

// node_modules/faker/lib/locales/en/hacker/abbreviation.js
var require_abbreviation = __commonJS((exports, module) => {
  module["exports"] = [
    "TCP",
    "HTTP",
    "SDD",
    "RAM",
    "GB",
    "CSS",
    "SSL",
    "AGP",
    "SQL",
    "FTP",
    "PCI",
    "AI",
    "ADP",
    "RSS",
    "XML",
    "EXE",
    "COM",
    "HDD",
    "THX",
    "SMTP",
    "SMS",
    "USB",
    "PNG",
    "SAS",
    "IB",
    "SCSI",
    "JSON",
    "XSS",
    "JBOD"
  ];
});

// node_modules/faker/lib/locales/en/hacker/adjective.js
var require_adjective3 = __commonJS((exports, module) => {
  module["exports"] = [
    "auxiliary",
    "primary",
    "back-end",
    "digital",
    "open-source",
    "virtual",
    "cross-platform",
    "redundant",
    "online",
    "haptic",
    "multi-byte",
    "bluetooth",
    "wireless",
    "1080p",
    "neural",
    "optical",
    "solid state",
    "mobile"
  ];
});

// node_modules/faker/lib/locales/en/hacker/noun.js
var require_noun3 = __commonJS((exports, module) => {
  module["exports"] = [
    "driver",
    "protocol",
    "bandwidth",
    "panel",
    "microchip",
    "program",
    "port",
    "card",
    "array",
    "interface",
    "system",
    "sensor",
    "firewall",
    "hard drive",
    "pixel",
    "alarm",
    "feed",
    "monitor",
    "application",
    "transmitter",
    "bus",
    "circuit",
    "capacitor",
    "matrix"
  ];
});

// node_modules/faker/lib/locales/en/hacker/verb.js
var require_verb = __commonJS((exports, module) => {
  module["exports"] = [
    "back up",
    "bypass",
    "hack",
    "override",
    "compress",
    "copy",
    "navigate",
    "index",
    "connect",
    "generate",
    "quantify",
    "calculate",
    "synthesize",
    "input",
    "transmit",
    "program",
    "reboot",
    "parse"
  ];
});

// node_modules/faker/lib/locales/en/hacker/ingverb.js
var require_ingverb = __commonJS((exports, module) => {
  module["exports"] = [
    "backing up",
    "bypassing",
    "hacking",
    "overriding",
    "compressing",
    "copying",
    "navigating",
    "indexing",
    "connecting",
    "generating",
    "quantifying",
    "calculating",
    "synthesizing",
    "transmitting",
    "programming",
    "parsing"
  ];
});

// node_modules/faker/lib/locales/en/hacker/index.js
var require_hacker2 = __commonJS((exports, module) => {
  var hacker = {};
  module["exports"] = hacker;
  hacker.abbreviation = require_abbreviation();
  hacker.adjective = require_adjective3();
  hacker.noun = require_noun3();
  hacker.verb = require_verb();
  hacker.ingverb = require_ingverb();
});

// node_modules/faker/lib/locales/en/app/name.js
var require_name16 = __commonJS((exports, module) => {
  module["exports"] = [
    "Redhold",
    "Treeflex",
    "Trippledex",
    "Kanlam",
    "Bigtax",
    "Daltfresh",
    "Toughjoyfax",
    "Mat Lam Tam",
    "Otcom",
    "Tres-Zap",
    "Y-Solowarm",
    "Tresom",
    "Voltsillam",
    "Biodex",
    "Greenlam",
    "Viva",
    "Matsoft",
    "Temp",
    "Zoolab",
    "Subin",
    "Rank",
    "Job",
    "Stringtough",
    "Tin",
    "It",
    "Home Ing",
    "Zamit",
    "Sonsing",
    "Konklab",
    "Alpha",
    "Latlux",
    "Voyatouch",
    "Alphazap",
    "Holdlamis",
    "Zaam-Dox",
    "Sub-Ex",
    "Quo Lux",
    "Bamity",
    "Ventosanzap",
    "Lotstring",
    "Hatity",
    "Tempsoft",
    "Overhold",
    "Fixflex",
    "Konklux",
    "Zontrax",
    "Tampflex",
    "Span",
    "Namfix",
    "Transcof",
    "Stim",
    "Fix San",
    "Sonair",
    "Stronghold",
    "Fintone",
    "Y-find",
    "Opela",
    "Lotlux",
    "Ronstring",
    "Zathin",
    "Duobam",
    "Keylex"
  ];
});

// node_modules/faker/lib/locales/en/app/version.js
var require_version = __commonJS((exports, module) => {
  module["exports"] = [
    "0.#.#",
    "0.##",
    "#.##",
    "#.#",
    "#.#.#"
  ];
});

// node_modules/faker/lib/locales/en/app/author.js
var require_author = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Name.name}",
    "#{Company.name}"
  ];
});

// node_modules/faker/lib/locales/en/app/index.js
var require_app = __commonJS((exports, module) => {
  var app3 = {};
  module["exports"] = app3;
  app3.name = require_name16();
  app3.version = require_version();
  app3.author = require_author();
});

// node_modules/faker/lib/locales/en/finance/account_type.js
var require_account_type = __commonJS((exports, module) => {
  module["exports"] = [
    "Checking",
    "Savings",
    "Money Market",
    "Investment",
    "Home Loan",
    "Credit Card",
    "Auto Loan",
    "Personal Loan"
  ];
});

// node_modules/faker/lib/locales/en/finance/transaction_type.js
var require_transaction_type = __commonJS((exports, module) => {
  module["exports"] = [
    "deposit",
    "withdrawal",
    "payment",
    "invoice"
  ];
});

// node_modules/faker/lib/locales/en/finance/currency.js
var require_currency = __commonJS((exports, module) => {
  module["exports"] = {
    "UAE Dirham": {
      code: "AED",
      symbol: ""
    },
    Afghani: {
      code: "AFN",
      symbol: "؋"
    },
    Lek: {
      code: "ALL",
      symbol: "Lek"
    },
    "Armenian Dram": {
      code: "AMD",
      symbol: ""
    },
    "Netherlands Antillian Guilder": {
      code: "ANG",
      symbol: "ƒ"
    },
    Kwanza: {
      code: "AOA",
      symbol: ""
    },
    "Argentine Peso": {
      code: "ARS",
      symbol: "$"
    },
    "Australian Dollar": {
      code: "AUD",
      symbol: "$"
    },
    "Aruban Guilder": {
      code: "AWG",
      symbol: "ƒ"
    },
    "Azerbaijanian Manat": {
      code: "AZN",
      symbol: "ман"
    },
    "Convertible Marks": {
      code: "BAM",
      symbol: "KM"
    },
    "Barbados Dollar": {
      code: "BBD",
      symbol: "$"
    },
    Taka: {
      code: "BDT",
      symbol: ""
    },
    "Bulgarian Lev": {
      code: "BGN",
      symbol: "лв"
    },
    "Bahraini Dinar": {
      code: "BHD",
      symbol: ""
    },
    "Burundi Franc": {
      code: "BIF",
      symbol: ""
    },
    "Bermudian Dollar (customarily known as Bermuda Dollar)": {
      code: "BMD",
      symbol: "$"
    },
    "Brunei Dollar": {
      code: "BND",
      symbol: "$"
    },
    "Boliviano Mvdol": {
      code: "BOB BOV",
      symbol: "$b"
    },
    "Brazilian Real": {
      code: "BRL",
      symbol: "R$"
    },
    "Bahamian Dollar": {
      code: "BSD",
      symbol: "$"
    },
    Pula: {
      code: "BWP",
      symbol: "P"
    },
    "Belarussian Ruble": {
      code: "BYR",
      symbol: "p."
    },
    "Belize Dollar": {
      code: "BZD",
      symbol: "BZ$"
    },
    "Canadian Dollar": {
      code: "CAD",
      symbol: "$"
    },
    "Congolese Franc": {
      code: "CDF",
      symbol: ""
    },
    "Swiss Franc": {
      code: "CHF",
      symbol: "CHF"
    },
    "Chilean Peso Unidades de fomento": {
      code: "CLP CLF",
      symbol: "$"
    },
    "Yuan Renminbi": {
      code: "CNY",
      symbol: "¥"
    },
    "Colombian Peso Unidad de Valor Real": {
      code: "COP COU",
      symbol: "$"
    },
    "Costa Rican Colon": {
      code: "CRC",
      symbol: "₡"
    },
    "Cuban Peso Peso Convertible": {
      code: "CUP CUC",
      symbol: "₱"
    },
    "Cape Verde Escudo": {
      code: "CVE",
      symbol: ""
    },
    "Czech Koruna": {
      code: "CZK",
      symbol: "Kč"
    },
    "Djibouti Franc": {
      code: "DJF",
      symbol: ""
    },
    "Danish Krone": {
      code: "DKK",
      symbol: "kr"
    },
    "Dominican Peso": {
      code: "DOP",
      symbol: "RD$"
    },
    "Algerian Dinar": {
      code: "DZD",
      symbol: ""
    },
    Kroon: {
      code: "EEK",
      symbol: ""
    },
    "Egyptian Pound": {
      code: "EGP",
      symbol: "£"
    },
    Nakfa: {
      code: "ERN",
      symbol: ""
    },
    "Ethiopian Birr": {
      code: "ETB",
      symbol: ""
    },
    Euro: {
      code: "EUR",
      symbol: "€"
    },
    "Fiji Dollar": {
      code: "FJD",
      symbol: "$"
    },
    "Falkland Islands Pound": {
      code: "FKP",
      symbol: "£"
    },
    "Pound Sterling": {
      code: "GBP",
      symbol: "£"
    },
    Lari: {
      code: "GEL",
      symbol: ""
    },
    Cedi: {
      code: "GHS",
      symbol: ""
    },
    "Gibraltar Pound": {
      code: "GIP",
      symbol: "£"
    },
    Dalasi: {
      code: "GMD",
      symbol: ""
    },
    "Guinea Franc": {
      code: "GNF",
      symbol: ""
    },
    Quetzal: {
      code: "GTQ",
      symbol: "Q"
    },
    "Guyana Dollar": {
      code: "GYD",
      symbol: "$"
    },
    "Hong Kong Dollar": {
      code: "HKD",
      symbol: "$"
    },
    Lempira: {
      code: "HNL",
      symbol: "L"
    },
    "Croatian Kuna": {
      code: "HRK",
      symbol: "kn"
    },
    "Gourde US Dollar": {
      code: "HTG USD",
      symbol: ""
    },
    Forint: {
      code: "HUF",
      symbol: "Ft"
    },
    Rupiah: {
      code: "IDR",
      symbol: "Rp"
    },
    "New Israeli Sheqel": {
      code: "ILS",
      symbol: "₪"
    },
    "Indian Rupee": {
      code: "INR",
      symbol: ""
    },
    "Indian Rupee Ngultrum": {
      code: "INR BTN",
      symbol: ""
    },
    "Iraqi Dinar": {
      code: "IQD",
      symbol: ""
    },
    "Iranian Rial": {
      code: "IRR",
      symbol: "﷼"
    },
    "Iceland Krona": {
      code: "ISK",
      symbol: "kr"
    },
    "Jamaican Dollar": {
      code: "JMD",
      symbol: "J$"
    },
    "Jordanian Dinar": {
      code: "JOD",
      symbol: ""
    },
    Yen: {
      code: "JPY",
      symbol: "¥"
    },
    "Kenyan Shilling": {
      code: "KES",
      symbol: ""
    },
    Som: {
      code: "KGS",
      symbol: "лв"
    },
    Riel: {
      code: "KHR",
      symbol: "៛"
    },
    "Comoro Franc": {
      code: "KMF",
      symbol: ""
    },
    "North Korean Won": {
      code: "KPW",
      symbol: "₩"
    },
    Won: {
      code: "KRW",
      symbol: "₩"
    },
    "Kuwaiti Dinar": {
      code: "KWD",
      symbol: ""
    },
    "Cayman Islands Dollar": {
      code: "KYD",
      symbol: "$"
    },
    Tenge: {
      code: "KZT",
      symbol: "лв"
    },
    Kip: {
      code: "LAK",
      symbol: "₭"
    },
    "Lebanese Pound": {
      code: "LBP",
      symbol: "£"
    },
    "Sri Lanka Rupee": {
      code: "LKR",
      symbol: "₨"
    },
    "Liberian Dollar": {
      code: "LRD",
      symbol: "$"
    },
    "Lithuanian Litas": {
      code: "LTL",
      symbol: "Lt"
    },
    "Latvian Lats": {
      code: "LVL",
      symbol: "Ls"
    },
    "Libyan Dinar": {
      code: "LYD",
      symbol: ""
    },
    "Moroccan Dirham": {
      code: "MAD",
      symbol: ""
    },
    "Moldovan Leu": {
      code: "MDL",
      symbol: ""
    },
    "Malagasy Ariary": {
      code: "MGA",
      symbol: ""
    },
    Denar: {
      code: "MKD",
      symbol: "ден"
    },
    Kyat: {
      code: "MMK",
      symbol: ""
    },
    Tugrik: {
      code: "MNT",
      symbol: "₮"
    },
    Pataca: {
      code: "MOP",
      symbol: ""
    },
    Ouguiya: {
      code: "MRO",
      symbol: ""
    },
    "Mauritius Rupee": {
      code: "MUR",
      symbol: "₨"
    },
    Rufiyaa: {
      code: "MVR",
      symbol: ""
    },
    Kwacha: {
      code: "MWK",
      symbol: ""
    },
    "Mexican Peso Mexican Unidad de Inversion (UDI)": {
      code: "MXN MXV",
      symbol: "$"
    },
    "Malaysian Ringgit": {
      code: "MYR",
      symbol: "RM"
    },
    Metical: {
      code: "MZN",
      symbol: "MT"
    },
    Naira: {
      code: "NGN",
      symbol: "₦"
    },
    "Cordoba Oro": {
      code: "NIO",
      symbol: "C$"
    },
    "Norwegian Krone": {
      code: "NOK",
      symbol: "kr"
    },
    "Nepalese Rupee": {
      code: "NPR",
      symbol: "₨"
    },
    "New Zealand Dollar": {
      code: "NZD",
      symbol: "$"
    },
    "Rial Omani": {
      code: "OMR",
      symbol: "﷼"
    },
    "Balboa US Dollar": {
      code: "PAB USD",
      symbol: "B/."
    },
    "Nuevo Sol": {
      code: "PEN",
      symbol: "S/."
    },
    Kina: {
      code: "PGK",
      symbol: ""
    },
    "Philippine Peso": {
      code: "PHP",
      symbol: "Php"
    },
    "Pakistan Rupee": {
      code: "PKR",
      symbol: "₨"
    },
    Zloty: {
      code: "PLN",
      symbol: "zł"
    },
    Guarani: {
      code: "PYG",
      symbol: "Gs"
    },
    "Qatari Rial": {
      code: "QAR",
      symbol: "﷼"
    },
    "New Leu": {
      code: "RON",
      symbol: "lei"
    },
    "Serbian Dinar": {
      code: "RSD",
      symbol: "Дин."
    },
    "Russian Ruble": {
      code: "RUB",
      symbol: "руб"
    },
    "Rwanda Franc": {
      code: "RWF",
      symbol: ""
    },
    "Saudi Riyal": {
      code: "SAR",
      symbol: "﷼"
    },
    "Solomon Islands Dollar": {
      code: "SBD",
      symbol: "$"
    },
    "Seychelles Rupee": {
      code: "SCR",
      symbol: "₨"
    },
    "Sudanese Pound": {
      code: "SDG",
      symbol: ""
    },
    "Swedish Krona": {
      code: "SEK",
      symbol: "kr"
    },
    "Singapore Dollar": {
      code: "SGD",
      symbol: "$"
    },
    "Saint Helena Pound": {
      code: "SHP",
      symbol: "£"
    },
    Leone: {
      code: "SLL",
      symbol: ""
    },
    "Somali Shilling": {
      code: "SOS",
      symbol: "S"
    },
    "Surinam Dollar": {
      code: "SRD",
      symbol: "$"
    },
    Dobra: {
      code: "STD",
      symbol: ""
    },
    "El Salvador Colon US Dollar": {
      code: "SVC USD",
      symbol: "$"
    },
    "Syrian Pound": {
      code: "SYP",
      symbol: "£"
    },
    Lilangeni: {
      code: "SZL",
      symbol: ""
    },
    Baht: {
      code: "THB",
      symbol: "฿"
    },
    Somoni: {
      code: "TJS",
      symbol: ""
    },
    Manat: {
      code: "TMT",
      symbol: ""
    },
    "Tunisian Dinar": {
      code: "TND",
      symbol: ""
    },
    "Pa'anga": {
      code: "TOP",
      symbol: ""
    },
    "Turkish Lira": {
      code: "TRY",
      symbol: "TL"
    },
    "Trinidad and Tobago Dollar": {
      code: "TTD",
      symbol: "TT$"
    },
    "New Taiwan Dollar": {
      code: "TWD",
      symbol: "NT$"
    },
    "Tanzanian Shilling": {
      code: "TZS",
      symbol: ""
    },
    Hryvnia: {
      code: "UAH",
      symbol: "₴"
    },
    "Uganda Shilling": {
      code: "UGX",
      symbol: ""
    },
    "US Dollar": {
      code: "USD",
      symbol: "$"
    },
    "Peso Uruguayo Uruguay Peso en Unidades Indexadas": {
      code: "UYU UYI",
      symbol: "$U"
    },
    "Uzbekistan Sum": {
      code: "UZS",
      symbol: "лв"
    },
    "Bolivar Fuerte": {
      code: "VEF",
      symbol: "Bs"
    },
    Dong: {
      code: "VND",
      symbol: "₫"
    },
    Vatu: {
      code: "VUV",
      symbol: ""
    },
    Tala: {
      code: "WST",
      symbol: ""
    },
    "CFA Franc BEAC": {
      code: "XAF",
      symbol: ""
    },
    Silver: {
      code: "XAG",
      symbol: ""
    },
    Gold: {
      code: "XAU",
      symbol: ""
    },
    "Bond Markets Units European Composite Unit (EURCO)": {
      code: "XBA",
      symbol: ""
    },
    "European Monetary Unit (E.M.U.-6)": {
      code: "XBB",
      symbol: ""
    },
    "European Unit of Account 9(E.U.A.-9)": {
      code: "XBC",
      symbol: ""
    },
    "European Unit of Account 17(E.U.A.-17)": {
      code: "XBD",
      symbol: ""
    },
    "East Caribbean Dollar": {
      code: "XCD",
      symbol: "$"
    },
    SDR: {
      code: "XDR",
      symbol: ""
    },
    "UIC-Franc": {
      code: "XFU",
      symbol: ""
    },
    "CFA Franc BCEAO": {
      code: "XOF",
      symbol: ""
    },
    Palladium: {
      code: "XPD",
      symbol: ""
    },
    "CFP Franc": {
      code: "XPF",
      symbol: ""
    },
    Platinum: {
      code: "XPT",
      symbol: ""
    },
    "Codes specifically reserved for testing purposes": {
      code: "XTS",
      symbol: ""
    },
    "Yemeni Rial": {
      code: "YER",
      symbol: "﷼"
    },
    Rand: {
      code: "ZAR",
      symbol: "R"
    },
    "Rand Loti": {
      code: "ZAR LSL",
      symbol: ""
    },
    "Rand Namibia Dollar": {
      code: "ZAR NAD",
      symbol: ""
    },
    "Zambian Kwacha": {
      code: "ZMK",
      symbol: ""
    },
    "Zimbabwe Dollar": {
      code: "ZWL",
      symbol: ""
    }
  };
});

// node_modules/faker/lib/locales/en/finance/index.js
var require_finance2 = __commonJS((exports, module) => {
  var finance = {};
  module["exports"] = finance;
  finance.account_type = require_account_type();
  finance.transaction_type = require_transaction_type();
  finance.currency = require_currency();
});

// node_modules/faker/lib/locales/en/date/month.js
var require_month3 = __commonJS((exports, module) => {
  module["exports"] = {
    wide: [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ],
    wide_context: [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ],
    abbr: [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ],
    abbr_context: [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ]
  };
});

// node_modules/faker/lib/locales/en/date/weekday.js
var require_weekday3 = __commonJS((exports, module) => {
  module["exports"] = {
    wide: [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday"
    ],
    wide_context: [
      "Sunday",
      "Monday",
      "Tuesday",
      "Wednesday",
      "Thursday",
      "Friday",
      "Saturday"
    ],
    abbr: [
      "Sun",
      "Mon",
      "Tue",
      "Wed",
      "Thu",
      "Fri",
      "Sat"
    ],
    abbr_context: [
      "Sun",
      "Mon",
      "Tue",
      "Wed",
      "Thu",
      "Fri",
      "Sat"
    ]
  };
});

// node_modules/faker/lib/locales/en/date/index.js
var require_date4 = __commonJS((exports, module) => {
  var date2 = {};
  module["exports"] = date2;
  date2.month = require_month3();
  date2.weekday = require_weekday3();
});

// node_modules/faker/lib/locales/en/system/mimeTypes.js
var require_mimeTypes = __commonJS((exports, module) => {
  module["exports"] = {
    "application/1d-interleaved-parityfec": {
      source: "iana"
    },
    "application/3gpdash-qoe-report+xml": {
      source: "iana"
    },
    "application/3gpp-ims+xml": {
      source: "iana"
    },
    "application/a2l": {
      source: "iana"
    },
    "application/activemessage": {
      source: "iana"
    },
    "application/alto-costmap+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-costmapfilter+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-directory+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointcost+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointcostparams+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointprop+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointpropparams+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-error+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-networkmap+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-networkmapfilter+json": {
      source: "iana",
      compressible: true
    },
    "application/aml": {
      source: "iana"
    },
    "application/andrew-inset": {
      source: "iana",
      extensions: ["ez"]
    },
    "application/applefile": {
      source: "iana"
    },
    "application/applixware": {
      source: "apache",
      extensions: ["aw"]
    },
    "application/atf": {
      source: "iana"
    },
    "application/atfx": {
      source: "iana"
    },
    "application/atom+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atom"]
    },
    "application/atomcat+xml": {
      source: "iana",
      extensions: ["atomcat"]
    },
    "application/atomdeleted+xml": {
      source: "iana"
    },
    "application/atomicmail": {
      source: "iana"
    },
    "application/atomsvc+xml": {
      source: "iana",
      extensions: ["atomsvc"]
    },
    "application/atxml": {
      source: "iana"
    },
    "application/auth-policy+xml": {
      source: "iana"
    },
    "application/bacnet-xdd+zip": {
      source: "iana"
    },
    "application/batch-smtp": {
      source: "iana"
    },
    "application/bdoc": {
      compressible: false,
      extensions: ["bdoc"]
    },
    "application/beep+xml": {
      source: "iana"
    },
    "application/calendar+json": {
      source: "iana",
      compressible: true
    },
    "application/calendar+xml": {
      source: "iana"
    },
    "application/call-completion": {
      source: "iana"
    },
    "application/cals-1840": {
      source: "iana"
    },
    "application/cbor": {
      source: "iana"
    },
    "application/ccmp+xml": {
      source: "iana"
    },
    "application/ccxml+xml": {
      source: "iana",
      extensions: ["ccxml"]
    },
    "application/cdfx+xml": {
      source: "iana"
    },
    "application/cdmi-capability": {
      source: "iana",
      extensions: ["cdmia"]
    },
    "application/cdmi-container": {
      source: "iana",
      extensions: ["cdmic"]
    },
    "application/cdmi-domain": {
      source: "iana",
      extensions: ["cdmid"]
    },
    "application/cdmi-object": {
      source: "iana",
      extensions: ["cdmio"]
    },
    "application/cdmi-queue": {
      source: "iana",
      extensions: ["cdmiq"]
    },
    "application/cdni": {
      source: "iana"
    },
    "application/cea": {
      source: "iana"
    },
    "application/cea-2018+xml": {
      source: "iana"
    },
    "application/cellml+xml": {
      source: "iana"
    },
    "application/cfw": {
      source: "iana"
    },
    "application/cms": {
      source: "iana"
    },
    "application/cnrp+xml": {
      source: "iana"
    },
    "application/coap-group+json": {
      source: "iana",
      compressible: true
    },
    "application/commonground": {
      source: "iana"
    },
    "application/conference-info+xml": {
      source: "iana"
    },
    "application/cpl+xml": {
      source: "iana"
    },
    "application/csrattrs": {
      source: "iana"
    },
    "application/csta+xml": {
      source: "iana"
    },
    "application/cstadata+xml": {
      source: "iana"
    },
    "application/csvm+json": {
      source: "iana",
      compressible: true
    },
    "application/cu-seeme": {
      source: "apache",
      extensions: ["cu"]
    },
    "application/cybercash": {
      source: "iana"
    },
    "application/dart": {
      compressible: true
    },
    "application/dash+xml": {
      source: "iana",
      extensions: ["mdp"]
    },
    "application/dashdelta": {
      source: "iana"
    },
    "application/davmount+xml": {
      source: "iana",
      extensions: ["davmount"]
    },
    "application/dca-rft": {
      source: "iana"
    },
    "application/dcd": {
      source: "iana"
    },
    "application/dec-dx": {
      source: "iana"
    },
    "application/dialog-info+xml": {
      source: "iana"
    },
    "application/dicom": {
      source: "iana"
    },
    "application/dii": {
      source: "iana"
    },
    "application/dit": {
      source: "iana"
    },
    "application/dns": {
      source: "iana"
    },
    "application/docbook+xml": {
      source: "apache",
      extensions: ["dbk"]
    },
    "application/dskpp+xml": {
      source: "iana"
    },
    "application/dssc+der": {
      source: "iana",
      extensions: ["dssc"]
    },
    "application/dssc+xml": {
      source: "iana",
      extensions: ["xdssc"]
    },
    "application/dvcs": {
      source: "iana"
    },
    "application/ecmascript": {
      source: "iana",
      compressible: true,
      extensions: ["ecma"]
    },
    "application/edi-consent": {
      source: "iana"
    },
    "application/edi-x12": {
      source: "iana",
      compressible: false
    },
    "application/edifact": {
      source: "iana",
      compressible: false
    },
    "application/emergencycalldata.comment+xml": {
      source: "iana"
    },
    "application/emergencycalldata.deviceinfo+xml": {
      source: "iana"
    },
    "application/emergencycalldata.providerinfo+xml": {
      source: "iana"
    },
    "application/emergencycalldata.serviceinfo+xml": {
      source: "iana"
    },
    "application/emergencycalldata.subscriberinfo+xml": {
      source: "iana"
    },
    "application/emma+xml": {
      source: "iana",
      extensions: ["emma"]
    },
    "application/emotionml+xml": {
      source: "iana"
    },
    "application/encaprtp": {
      source: "iana"
    },
    "application/epp+xml": {
      source: "iana"
    },
    "application/epub+zip": {
      source: "iana",
      extensions: ["epub"]
    },
    "application/eshop": {
      source: "iana"
    },
    "application/exi": {
      source: "iana",
      extensions: ["exi"]
    },
    "application/fastinfoset": {
      source: "iana"
    },
    "application/fastsoap": {
      source: "iana"
    },
    "application/fdt+xml": {
      source: "iana"
    },
    "application/fits": {
      source: "iana"
    },
    "application/font-sfnt": {
      source: "iana"
    },
    "application/font-tdpfr": {
      source: "iana",
      extensions: ["pfr"]
    },
    "application/font-woff": {
      source: "iana",
      compressible: false,
      extensions: ["woff"]
    },
    "application/font-woff2": {
      compressible: false,
      extensions: ["woff2"]
    },
    "application/framework-attributes+xml": {
      source: "iana"
    },
    "application/gml+xml": {
      source: "apache",
      extensions: ["gml"]
    },
    "application/gpx+xml": {
      source: "apache",
      extensions: ["gpx"]
    },
    "application/gxf": {
      source: "apache",
      extensions: ["gxf"]
    },
    "application/gzip": {
      source: "iana",
      compressible: false
    },
    "application/h224": {
      source: "iana"
    },
    "application/held+xml": {
      source: "iana"
    },
    "application/http": {
      source: "iana"
    },
    "application/hyperstudio": {
      source: "iana",
      extensions: ["stk"]
    },
    "application/ibe-key-request+xml": {
      source: "iana"
    },
    "application/ibe-pkg-reply+xml": {
      source: "iana"
    },
    "application/ibe-pp-data": {
      source: "iana"
    },
    "application/iges": {
      source: "iana"
    },
    "application/im-iscomposing+xml": {
      source: "iana"
    },
    "application/index": {
      source: "iana"
    },
    "application/index.cmd": {
      source: "iana"
    },
    "application/index.obj": {
      source: "iana"
    },
    "application/index.response": {
      source: "iana"
    },
    "application/index.vnd": {
      source: "iana"
    },
    "application/inkml+xml": {
      source: "iana",
      extensions: ["ink", "inkml"]
    },
    "application/iotp": {
      source: "iana"
    },
    "application/ipfix": {
      source: "iana",
      extensions: ["ipfix"]
    },
    "application/ipp": {
      source: "iana"
    },
    "application/isup": {
      source: "iana"
    },
    "application/its+xml": {
      source: "iana"
    },
    "application/java-archive": {
      source: "apache",
      compressible: false,
      extensions: ["jar", "war", "ear"]
    },
    "application/java-serialized-object": {
      source: "apache",
      compressible: false,
      extensions: ["ser"]
    },
    "application/java-vm": {
      source: "apache",
      compressible: false,
      extensions: ["class"]
    },
    "application/javascript": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["js"]
    },
    "application/jose": {
      source: "iana"
    },
    "application/jose+json": {
      source: "iana",
      compressible: true
    },
    "application/jrd+json": {
      source: "iana",
      compressible: true
    },
    "application/json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["json", "map"]
    },
    "application/json-patch+json": {
      source: "iana",
      compressible: true
    },
    "application/json-seq": {
      source: "iana"
    },
    "application/json5": {
      extensions: ["json5"]
    },
    "application/jsonml+json": {
      source: "apache",
      compressible: true,
      extensions: ["jsonml"]
    },
    "application/jwk+json": {
      source: "iana",
      compressible: true
    },
    "application/jwk-set+json": {
      source: "iana",
      compressible: true
    },
    "application/jwt": {
      source: "iana"
    },
    "application/kpml-request+xml": {
      source: "iana"
    },
    "application/kpml-response+xml": {
      source: "iana"
    },
    "application/ld+json": {
      source: "iana",
      compressible: true,
      extensions: ["jsonld"]
    },
    "application/link-format": {
      source: "iana"
    },
    "application/load-control+xml": {
      source: "iana"
    },
    "application/lost+xml": {
      source: "iana",
      extensions: ["lostxml"]
    },
    "application/lostsync+xml": {
      source: "iana"
    },
    "application/lxf": {
      source: "iana"
    },
    "application/mac-binhex40": {
      source: "iana",
      extensions: ["hqx"]
    },
    "application/mac-compactpro": {
      source: "apache",
      extensions: ["cpt"]
    },
    "application/macwriteii": {
      source: "iana"
    },
    "application/mads+xml": {
      source: "iana",
      extensions: ["mads"]
    },
    "application/manifest+json": {
      charset: "UTF-8",
      compressible: true,
      extensions: ["webmanifest"]
    },
    "application/marc": {
      source: "iana",
      extensions: ["mrc"]
    },
    "application/marcxml+xml": {
      source: "iana",
      extensions: ["mrcx"]
    },
    "application/mathematica": {
      source: "iana",
      extensions: ["ma", "nb", "mb"]
    },
    "application/mathml+xml": {
      source: "iana",
      extensions: ["mathml"]
    },
    "application/mathml-content+xml": {
      source: "iana"
    },
    "application/mathml-presentation+xml": {
      source: "iana"
    },
    "application/mbms-associated-procedure-description+xml": {
      source: "iana"
    },
    "application/mbms-deregister+xml": {
      source: "iana"
    },
    "application/mbms-envelope+xml": {
      source: "iana"
    },
    "application/mbms-msk+xml": {
      source: "iana"
    },
    "application/mbms-msk-response+xml": {
      source: "iana"
    },
    "application/mbms-protection-description+xml": {
      source: "iana"
    },
    "application/mbms-reception-report+xml": {
      source: "iana"
    },
    "application/mbms-register+xml": {
      source: "iana"
    },
    "application/mbms-register-response+xml": {
      source: "iana"
    },
    "application/mbms-schedule+xml": {
      source: "iana"
    },
    "application/mbms-user-service-description+xml": {
      source: "iana"
    },
    "application/mbox": {
      source: "iana",
      extensions: ["mbox"]
    },
    "application/media-policy-dataset+xml": {
      source: "iana"
    },
    "application/media_control+xml": {
      source: "iana"
    },
    "application/mediaservercontrol+xml": {
      source: "iana",
      extensions: ["mscml"]
    },
    "application/merge-patch+json": {
      source: "iana",
      compressible: true
    },
    "application/metalink+xml": {
      source: "apache",
      extensions: ["metalink"]
    },
    "application/metalink4+xml": {
      source: "iana",
      extensions: ["meta4"]
    },
    "application/mets+xml": {
      source: "iana",
      extensions: ["mets"]
    },
    "application/mf4": {
      source: "iana"
    },
    "application/mikey": {
      source: "iana"
    },
    "application/mods+xml": {
      source: "iana",
      extensions: ["mods"]
    },
    "application/moss-keys": {
      source: "iana"
    },
    "application/moss-signature": {
      source: "iana"
    },
    "application/mosskey-data": {
      source: "iana"
    },
    "application/mosskey-request": {
      source: "iana"
    },
    "application/mp21": {
      source: "iana",
      extensions: ["m21", "mp21"]
    },
    "application/mp4": {
      source: "iana",
      extensions: ["mp4s", "m4p"]
    },
    "application/mpeg4-generic": {
      source: "iana"
    },
    "application/mpeg4-iod": {
      source: "iana"
    },
    "application/mpeg4-iod-xmt": {
      source: "iana"
    },
    "application/mrb-consumer+xml": {
      source: "iana"
    },
    "application/mrb-publish+xml": {
      source: "iana"
    },
    "application/msc-ivr+xml": {
      source: "iana"
    },
    "application/msc-mixer+xml": {
      source: "iana"
    },
    "application/msword": {
      source: "iana",
      compressible: false,
      extensions: ["doc", "dot"]
    },
    "application/mxf": {
      source: "iana",
      extensions: ["mxf"]
    },
    "application/nasdata": {
      source: "iana"
    },
    "application/news-checkgroups": {
      source: "iana"
    },
    "application/news-groupinfo": {
      source: "iana"
    },
    "application/news-transmission": {
      source: "iana"
    },
    "application/nlsml+xml": {
      source: "iana"
    },
    "application/nss": {
      source: "iana"
    },
    "application/ocsp-request": {
      source: "iana"
    },
    "application/ocsp-response": {
      source: "iana"
    },
    "application/octet-stream": {
      source: "iana",
      compressible: false,
      extensions: ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"]
    },
    "application/oda": {
      source: "iana",
      extensions: ["oda"]
    },
    "application/odx": {
      source: "iana"
    },
    "application/oebps-package+xml": {
      source: "iana",
      extensions: ["opf"]
    },
    "application/ogg": {
      source: "iana",
      compressible: false,
      extensions: ["ogx"]
    },
    "application/omdoc+xml": {
      source: "apache",
      extensions: ["omdoc"]
    },
    "application/onenote": {
      source: "apache",
      extensions: ["onetoc", "onetoc2", "onetmp", "onepkg"]
    },
    "application/oxps": {
      source: "iana",
      extensions: ["oxps"]
    },
    "application/p2p-overlay+xml": {
      source: "iana"
    },
    "application/parityfec": {
      source: "iana"
    },
    "application/patch-ops-error+xml": {
      source: "iana",
      extensions: ["xer"]
    },
    "application/pdf": {
      source: "iana",
      compressible: false,
      extensions: ["pdf"]
    },
    "application/pdx": {
      source: "iana"
    },
    "application/pgp-encrypted": {
      source: "iana",
      compressible: false,
      extensions: ["pgp"]
    },
    "application/pgp-keys": {
      source: "iana"
    },
    "application/pgp-signature": {
      source: "iana",
      extensions: ["asc", "sig"]
    },
    "application/pics-rules": {
      source: "apache",
      extensions: ["prf"]
    },
    "application/pidf+xml": {
      source: "iana"
    },
    "application/pidf-diff+xml": {
      source: "iana"
    },
    "application/pkcs10": {
      source: "iana",
      extensions: ["p10"]
    },
    "application/pkcs12": {
      source: "iana"
    },
    "application/pkcs7-mime": {
      source: "iana",
      extensions: ["p7m", "p7c"]
    },
    "application/pkcs7-signature": {
      source: "iana",
      extensions: ["p7s"]
    },
    "application/pkcs8": {
      source: "iana",
      extensions: ["p8"]
    },
    "application/pkix-attr-cert": {
      source: "iana",
      extensions: ["ac"]
    },
    "application/pkix-cert": {
      source: "iana",
      extensions: ["cer"]
    },
    "application/pkix-crl": {
      source: "iana",
      extensions: ["crl"]
    },
    "application/pkix-pkipath": {
      source: "iana",
      extensions: ["pkipath"]
    },
    "application/pkixcmp": {
      source: "iana",
      extensions: ["pki"]
    },
    "application/pls+xml": {
      source: "iana",
      extensions: ["pls"]
    },
    "application/poc-settings+xml": {
      source: "iana"
    },
    "application/postscript": {
      source: "iana",
      compressible: true,
      extensions: ["ai", "eps", "ps"]
    },
    "application/provenance+xml": {
      source: "iana"
    },
    "application/prs.alvestrand.titrax-sheet": {
      source: "iana"
    },
    "application/prs.cww": {
      source: "iana",
      extensions: ["cww"]
    },
    "application/prs.hpub+zip": {
      source: "iana"
    },
    "application/prs.nprend": {
      source: "iana"
    },
    "application/prs.plucker": {
      source: "iana"
    },
    "application/prs.rdf-xml-crypt": {
      source: "iana"
    },
    "application/prs.xsf+xml": {
      source: "iana"
    },
    "application/pskc+xml": {
      source: "iana",
      extensions: ["pskcxml"]
    },
    "application/qsig": {
      source: "iana"
    },
    "application/raptorfec": {
      source: "iana"
    },
    "application/rdap+json": {
      source: "iana",
      compressible: true
    },
    "application/rdf+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rdf"]
    },
    "application/reginfo+xml": {
      source: "iana",
      extensions: ["rif"]
    },
    "application/relax-ng-compact-syntax": {
      source: "iana",
      extensions: ["rnc"]
    },
    "application/remote-printing": {
      source: "iana"
    },
    "application/reputon+json": {
      source: "iana",
      compressible: true
    },
    "application/resource-lists+xml": {
      source: "iana",
      extensions: ["rl"]
    },
    "application/resource-lists-diff+xml": {
      source: "iana",
      extensions: ["rld"]
    },
    "application/rfc+xml": {
      source: "iana"
    },
    "application/riscos": {
      source: "iana"
    },
    "application/rlmi+xml": {
      source: "iana"
    },
    "application/rls-services+xml": {
      source: "iana",
      extensions: ["rs"]
    },
    "application/rpki-ghostbusters": {
      source: "iana",
      extensions: ["gbr"]
    },
    "application/rpki-manifest": {
      source: "iana",
      extensions: ["mft"]
    },
    "application/rpki-roa": {
      source: "iana",
      extensions: ["roa"]
    },
    "application/rpki-updown": {
      source: "iana"
    },
    "application/rsd+xml": {
      source: "apache",
      extensions: ["rsd"]
    },
    "application/rss+xml": {
      source: "apache",
      compressible: true,
      extensions: ["rss"]
    },
    "application/rtf": {
      source: "iana",
      compressible: true,
      extensions: ["rtf"]
    },
    "application/rtploopback": {
      source: "iana"
    },
    "application/rtx": {
      source: "iana"
    },
    "application/samlassertion+xml": {
      source: "iana"
    },
    "application/samlmetadata+xml": {
      source: "iana"
    },
    "application/sbml+xml": {
      source: "iana",
      extensions: ["sbml"]
    },
    "application/scaip+xml": {
      source: "iana"
    },
    "application/scim+json": {
      source: "iana",
      compressible: true
    },
    "application/scvp-cv-request": {
      source: "iana",
      extensions: ["scq"]
    },
    "application/scvp-cv-response": {
      source: "iana",
      extensions: ["scs"]
    },
    "application/scvp-vp-request": {
      source: "iana",
      extensions: ["spq"]
    },
    "application/scvp-vp-response": {
      source: "iana",
      extensions: ["spp"]
    },
    "application/sdp": {
      source: "iana",
      extensions: ["sdp"]
    },
    "application/sep+xml": {
      source: "iana"
    },
    "application/sep-exi": {
      source: "iana"
    },
    "application/session-info": {
      source: "iana"
    },
    "application/set-payment": {
      source: "iana"
    },
    "application/set-payment-initiation": {
      source: "iana",
      extensions: ["setpay"]
    },
    "application/set-registration": {
      source: "iana"
    },
    "application/set-registration-initiation": {
      source: "iana",
      extensions: ["setreg"]
    },
    "application/sgml": {
      source: "iana"
    },
    "application/sgml-open-catalog": {
      source: "iana"
    },
    "application/shf+xml": {
      source: "iana",
      extensions: ["shf"]
    },
    "application/sieve": {
      source: "iana"
    },
    "application/simple-filter+xml": {
      source: "iana"
    },
    "application/simple-message-summary": {
      source: "iana"
    },
    "application/simplesymbolcontainer": {
      source: "iana"
    },
    "application/slate": {
      source: "iana"
    },
    "application/smil": {
      source: "iana"
    },
    "application/smil+xml": {
      source: "iana",
      extensions: ["smi", "smil"]
    },
    "application/smpte336m": {
      source: "iana"
    },
    "application/soap+fastinfoset": {
      source: "iana"
    },
    "application/soap+xml": {
      source: "iana",
      compressible: true
    },
    "application/sparql-query": {
      source: "iana",
      extensions: ["rq"]
    },
    "application/sparql-results+xml": {
      source: "iana",
      extensions: ["srx"]
    },
    "application/spirits-event+xml": {
      source: "iana"
    },
    "application/sql": {
      source: "iana"
    },
    "application/srgs": {
      source: "iana",
      extensions: ["gram"]
    },
    "application/srgs+xml": {
      source: "iana",
      extensions: ["grxml"]
    },
    "application/sru+xml": {
      source: "iana",
      extensions: ["sru"]
    },
    "application/ssdl+xml": {
      source: "apache",
      extensions: ["ssdl"]
    },
    "application/ssml+xml": {
      source: "iana",
      extensions: ["ssml"]
    },
    "application/tamp-apex-update": {
      source: "iana"
    },
    "application/tamp-apex-update-confirm": {
      source: "iana"
    },
    "application/tamp-community-update": {
      source: "iana"
    },
    "application/tamp-community-update-confirm": {
      source: "iana"
    },
    "application/tamp-error": {
      source: "iana"
    },
    "application/tamp-sequence-adjust": {
      source: "iana"
    },
    "application/tamp-sequence-adjust-confirm": {
      source: "iana"
    },
    "application/tamp-status-query": {
      source: "iana"
    },
    "application/tamp-status-response": {
      source: "iana"
    },
    "application/tamp-update": {
      source: "iana"
    },
    "application/tamp-update-confirm": {
      source: "iana"
    },
    "application/tar": {
      compressible: true
    },
    "application/tei+xml": {
      source: "iana",
      extensions: ["tei", "teicorpus"]
    },
    "application/thraud+xml": {
      source: "iana",
      extensions: ["tfi"]
    },
    "application/timestamp-query": {
      source: "iana"
    },
    "application/timestamp-reply": {
      source: "iana"
    },
    "application/timestamped-data": {
      source: "iana",
      extensions: ["tsd"]
    },
    "application/ttml+xml": {
      source: "iana"
    },
    "application/tve-trigger": {
      source: "iana"
    },
    "application/ulpfec": {
      source: "iana"
    },
    "application/urc-grpsheet+xml": {
      source: "iana"
    },
    "application/urc-ressheet+xml": {
      source: "iana"
    },
    "application/urc-targetdesc+xml": {
      source: "iana"
    },
    "application/urc-uisocketdesc+xml": {
      source: "iana"
    },
    "application/vcard+json": {
      source: "iana",
      compressible: true
    },
    "application/vcard+xml": {
      source: "iana"
    },
    "application/vemmi": {
      source: "iana"
    },
    "application/vividence.scriptfile": {
      source: "apache"
    },
    "application/vnd.3gpp-prose+xml": {
      source: "iana"
    },
    "application/vnd.3gpp-prose-pc3ch+xml": {
      source: "iana"
    },
    "application/vnd.3gpp.access-transfer-events+xml": {
      source: "iana"
    },
    "application/vnd.3gpp.bsf+xml": {
      source: "iana"
    },
    "application/vnd.3gpp.mid-call+xml": {
      source: "iana"
    },
    "application/vnd.3gpp.pic-bw-large": {
      source: "iana",
      extensions: ["plb"]
    },
    "application/vnd.3gpp.pic-bw-small": {
      source: "iana",
      extensions: ["psb"]
    },
    "application/vnd.3gpp.pic-bw-var": {
      source: "iana",
      extensions: ["pvb"]
    },
    "application/vnd.3gpp.sms": {
      source: "iana"
    },
    "application/vnd.3gpp.srvcc-ext+xml": {
      source: "iana"
    },
    "application/vnd.3gpp.srvcc-info+xml": {
      source: "iana"
    },
    "application/vnd.3gpp.state-and-event-info+xml": {
      source: "iana"
    },
    "application/vnd.3gpp.ussd+xml": {
      source: "iana"
    },
    "application/vnd.3gpp2.bcmcsinfo+xml": {
      source: "iana"
    },
    "application/vnd.3gpp2.sms": {
      source: "iana"
    },
    "application/vnd.3gpp2.tcap": {
      source: "iana",
      extensions: ["tcap"]
    },
    "application/vnd.3m.post-it-notes": {
      source: "iana",
      extensions: ["pwn"]
    },
    "application/vnd.accpac.simply.aso": {
      source: "iana",
      extensions: ["aso"]
    },
    "application/vnd.accpac.simply.imp": {
      source: "iana",
      extensions: ["imp"]
    },
    "application/vnd.acucobol": {
      source: "iana",
      extensions: ["acu"]
    },
    "application/vnd.acucorp": {
      source: "iana",
      extensions: ["atc", "acutc"]
    },
    "application/vnd.adobe.air-application-installer-package+zip": {
      source: "apache",
      extensions: ["air"]
    },
    "application/vnd.adobe.flash.movie": {
      source: "iana"
    },
    "application/vnd.adobe.formscentral.fcdt": {
      source: "iana",
      extensions: ["fcdt"]
    },
    "application/vnd.adobe.fxp": {
      source: "iana",
      extensions: ["fxp", "fxpl"]
    },
    "application/vnd.adobe.partial-upload": {
      source: "iana"
    },
    "application/vnd.adobe.xdp+xml": {
      source: "iana",
      extensions: ["xdp"]
    },
    "application/vnd.adobe.xfdf": {
      source: "iana",
      extensions: ["xfdf"]
    },
    "application/vnd.aether.imp": {
      source: "iana"
    },
    "application/vnd.ah-barcode": {
      source: "iana"
    },
    "application/vnd.ahead.space": {
      source: "iana",
      extensions: ["ahead"]
    },
    "application/vnd.airzip.filesecure.azf": {
      source: "iana",
      extensions: ["azf"]
    },
    "application/vnd.airzip.filesecure.azs": {
      source: "iana",
      extensions: ["azs"]
    },
    "application/vnd.amazon.ebook": {
      source: "apache",
      extensions: ["azw"]
    },
    "application/vnd.americandynamics.acc": {
      source: "iana",
      extensions: ["acc"]
    },
    "application/vnd.amiga.ami": {
      source: "iana",
      extensions: ["ami"]
    },
    "application/vnd.amundsen.maze+xml": {
      source: "iana"
    },
    "application/vnd.android.package-archive": {
      source: "apache",
      compressible: false,
      extensions: ["apk"]
    },
    "application/vnd.anki": {
      source: "iana"
    },
    "application/vnd.anser-web-certificate-issue-initiation": {
      source: "iana",
      extensions: ["cii"]
    },
    "application/vnd.anser-web-funds-transfer-initiation": {
      source: "apache",
      extensions: ["fti"]
    },
    "application/vnd.antix.game-component": {
      source: "iana",
      extensions: ["atx"]
    },
    "application/vnd.apache.thrift.binary": {
      source: "iana"
    },
    "application/vnd.apache.thrift.compact": {
      source: "iana"
    },
    "application/vnd.apache.thrift.json": {
      source: "iana"
    },
    "application/vnd.api+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.apple.installer+xml": {
      source: "iana",
      extensions: ["mpkg"]
    },
    "application/vnd.apple.mpegurl": {
      source: "iana",
      extensions: ["m3u8"]
    },
    "application/vnd.apple.pkpass": {
      compressible: false,
      extensions: ["pkpass"]
    },
    "application/vnd.arastra.swi": {
      source: "iana"
    },
    "application/vnd.aristanetworks.swi": {
      source: "iana",
      extensions: ["swi"]
    },
    "application/vnd.artsquare": {
      source: "iana"
    },
    "application/vnd.astraea-software.iota": {
      source: "iana",
      extensions: ["iota"]
    },
    "application/vnd.audiograph": {
      source: "iana",
      extensions: ["aep"]
    },
    "application/vnd.autopackage": {
      source: "iana"
    },
    "application/vnd.avistar+xml": {
      source: "iana"
    },
    "application/vnd.balsamiq.bmml+xml": {
      source: "iana"
    },
    "application/vnd.balsamiq.bmpr": {
      source: "iana"
    },
    "application/vnd.bekitzur-stech+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.biopax.rdf+xml": {
      source: "iana"
    },
    "application/vnd.blueice.multipass": {
      source: "iana",
      extensions: ["mpm"]
    },
    "application/vnd.bluetooth.ep.oob": {
      source: "iana"
    },
    "application/vnd.bluetooth.le.oob": {
      source: "iana"
    },
    "application/vnd.bmi": {
      source: "iana",
      extensions: ["bmi"]
    },
    "application/vnd.businessobjects": {
      source: "iana",
      extensions: ["rep"]
    },
    "application/vnd.cab-jscript": {
      source: "iana"
    },
    "application/vnd.canon-cpdl": {
      source: "iana"
    },
    "application/vnd.canon-lips": {
      source: "iana"
    },
    "application/vnd.cendio.thinlinc.clientconf": {
      source: "iana"
    },
    "application/vnd.century-systems.tcp_stream": {
      source: "iana"
    },
    "application/vnd.chemdraw+xml": {
      source: "iana",
      extensions: ["cdxml"]
    },
    "application/vnd.chipnuts.karaoke-mmd": {
      source: "iana",
      extensions: ["mmd"]
    },
    "application/vnd.cinderella": {
      source: "iana",
      extensions: ["cdy"]
    },
    "application/vnd.cirpack.isdn-ext": {
      source: "iana"
    },
    "application/vnd.citationstyles.style+xml": {
      source: "iana"
    },
    "application/vnd.claymore": {
      source: "iana",
      extensions: ["cla"]
    },
    "application/vnd.cloanto.rp9": {
      source: "iana",
      extensions: ["rp9"]
    },
    "application/vnd.clonk.c4group": {
      source: "iana",
      extensions: ["c4g", "c4d", "c4f", "c4p", "c4u"]
    },
    "application/vnd.cluetrust.cartomobile-config": {
      source: "iana",
      extensions: ["c11amc"]
    },
    "application/vnd.cluetrust.cartomobile-config-pkg": {
      source: "iana",
      extensions: ["c11amz"]
    },
    "application/vnd.coffeescript": {
      source: "iana"
    },
    "application/vnd.collection+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.collection.doc+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.collection.next+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.commerce-battelle": {
      source: "iana"
    },
    "application/vnd.commonspace": {
      source: "iana",
      extensions: ["csp"]
    },
    "application/vnd.contact.cmsg": {
      source: "iana",
      extensions: ["cdbcmsg"]
    },
    "application/vnd.cosmocaller": {
      source: "iana",
      extensions: ["cmc"]
    },
    "application/vnd.crick.clicker": {
      source: "iana",
      extensions: ["clkx"]
    },
    "application/vnd.crick.clicker.keyboard": {
      source: "iana",
      extensions: ["clkk"]
    },
    "application/vnd.crick.clicker.palette": {
      source: "iana",
      extensions: ["clkp"]
    },
    "application/vnd.crick.clicker.template": {
      source: "iana",
      extensions: ["clkt"]
    },
    "application/vnd.crick.clicker.wordbank": {
      source: "iana",
      extensions: ["clkw"]
    },
    "application/vnd.criticaltools.wbs+xml": {
      source: "iana",
      extensions: ["wbs"]
    },
    "application/vnd.ctc-posml": {
      source: "iana",
      extensions: ["pml"]
    },
    "application/vnd.ctct.ws+xml": {
      source: "iana"
    },
    "application/vnd.cups-pdf": {
      source: "iana"
    },
    "application/vnd.cups-postscript": {
      source: "iana"
    },
    "application/vnd.cups-ppd": {
      source: "iana",
      extensions: ["ppd"]
    },
    "application/vnd.cups-raster": {
      source: "iana"
    },
    "application/vnd.cups-raw": {
      source: "iana"
    },
    "application/vnd.curl": {
      source: "iana"
    },
    "application/vnd.curl.car": {
      source: "apache",
      extensions: ["car"]
    },
    "application/vnd.curl.pcurl": {
      source: "apache",
      extensions: ["pcurl"]
    },
    "application/vnd.cyan.dean.root+xml": {
      source: "iana"
    },
    "application/vnd.cybank": {
      source: "iana"
    },
    "application/vnd.dart": {
      source: "iana",
      compressible: true,
      extensions: ["dart"]
    },
    "application/vnd.data-vision.rdz": {
      source: "iana",
      extensions: ["rdz"]
    },
    "application/vnd.debian.binary-package": {
      source: "iana"
    },
    "application/vnd.dece.data": {
      source: "iana",
      extensions: ["uvf", "uvvf", "uvd", "uvvd"]
    },
    "application/vnd.dece.ttml+xml": {
      source: "iana",
      extensions: ["uvt", "uvvt"]
    },
    "application/vnd.dece.unspecified": {
      source: "iana",
      extensions: ["uvx", "uvvx"]
    },
    "application/vnd.dece.zip": {
      source: "iana",
      extensions: ["uvz", "uvvz"]
    },
    "application/vnd.denovo.fcselayout-link": {
      source: "iana",
      extensions: ["fe_launch"]
    },
    "application/vnd.desmume-movie": {
      source: "iana"
    },
    "application/vnd.dir-bi.plate-dl-nosuffix": {
      source: "iana"
    },
    "application/vnd.dm.delegation+xml": {
      source: "iana"
    },
    "application/vnd.dna": {
      source: "iana",
      extensions: ["dna"]
    },
    "application/vnd.document+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dolby.mlp": {
      source: "apache",
      extensions: ["mlp"]
    },
    "application/vnd.dolby.mobile.1": {
      source: "iana"
    },
    "application/vnd.dolby.mobile.2": {
      source: "iana"
    },
    "application/vnd.doremir.scorecloud-binary-document": {
      source: "iana"
    },
    "application/vnd.dpgraph": {
      source: "iana",
      extensions: ["dpg"]
    },
    "application/vnd.dreamfactory": {
      source: "iana",
      extensions: ["dfac"]
    },
    "application/vnd.drive+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ds-keypoint": {
      source: "apache",
      extensions: ["kpxx"]
    },
    "application/vnd.dtg.local": {
      source: "iana"
    },
    "application/vnd.dtg.local.flash": {
      source: "iana"
    },
    "application/vnd.dtg.local.html": {
      source: "iana"
    },
    "application/vnd.dvb.ait": {
      source: "iana",
      extensions: ["ait"]
    },
    "application/vnd.dvb.dvbj": {
      source: "iana"
    },
    "application/vnd.dvb.esgcontainer": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcdftnotifaccess": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcesgaccess": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcesgaccess2": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcesgpdd": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcroaming": {
      source: "iana"
    },
    "application/vnd.dvb.iptv.alfec-base": {
      source: "iana"
    },
    "application/vnd.dvb.iptv.alfec-enhancement": {
      source: "iana"
    },
    "application/vnd.dvb.notif-aggregate-root+xml": {
      source: "iana"
    },
    "application/vnd.dvb.notif-container+xml": {
      source: "iana"
    },
    "application/vnd.dvb.notif-generic+xml": {
      source: "iana"
    },
    "application/vnd.dvb.notif-ia-msglist+xml": {
      source: "iana"
    },
    "application/vnd.dvb.notif-ia-registration-request+xml": {
      source: "iana"
    },
    "application/vnd.dvb.notif-ia-registration-response+xml": {
      source: "iana"
    },
    "application/vnd.dvb.notif-init+xml": {
      source: "iana"
    },
    "application/vnd.dvb.pfr": {
      source: "iana"
    },
    "application/vnd.dvb.service": {
      source: "iana",
      extensions: ["svc"]
    },
    "application/vnd.dxr": {
      source: "iana"
    },
    "application/vnd.dynageo": {
      source: "iana",
      extensions: ["geo"]
    },
    "application/vnd.dzr": {
      source: "iana"
    },
    "application/vnd.easykaraoke.cdgdownload": {
      source: "iana"
    },
    "application/vnd.ecdis-update": {
      source: "iana"
    },
    "application/vnd.ecowin.chart": {
      source: "iana",
      extensions: ["mag"]
    },
    "application/vnd.ecowin.filerequest": {
      source: "iana"
    },
    "application/vnd.ecowin.fileupdate": {
      source: "iana"
    },
    "application/vnd.ecowin.series": {
      source: "iana"
    },
    "application/vnd.ecowin.seriesrequest": {
      source: "iana"
    },
    "application/vnd.ecowin.seriesupdate": {
      source: "iana"
    },
    "application/vnd.emclient.accessrequest+xml": {
      source: "iana"
    },
    "application/vnd.enliven": {
      source: "iana",
      extensions: ["nml"]
    },
    "application/vnd.enphase.envoy": {
      source: "iana"
    },
    "application/vnd.eprints.data+xml": {
      source: "iana"
    },
    "application/vnd.epson.esf": {
      source: "iana",
      extensions: ["esf"]
    },
    "application/vnd.epson.msf": {
      source: "iana",
      extensions: ["msf"]
    },
    "application/vnd.epson.quickanime": {
      source: "iana",
      extensions: ["qam"]
    },
    "application/vnd.epson.salt": {
      source: "iana",
      extensions: ["slt"]
    },
    "application/vnd.epson.ssf": {
      source: "iana",
      extensions: ["ssf"]
    },
    "application/vnd.ericsson.quickcall": {
      source: "iana"
    },
    "application/vnd.eszigno3+xml": {
      source: "iana",
      extensions: ["es3", "et3"]
    },
    "application/vnd.etsi.aoc+xml": {
      source: "iana"
    },
    "application/vnd.etsi.asic-e+zip": {
      source: "iana"
    },
    "application/vnd.etsi.asic-s+zip": {
      source: "iana"
    },
    "application/vnd.etsi.cug+xml": {
      source: "iana"
    },
    "application/vnd.etsi.iptvcommand+xml": {
      source: "iana"
    },
    "application/vnd.etsi.iptvdiscovery+xml": {
      source: "iana"
    },
    "application/vnd.etsi.iptvprofile+xml": {
      source: "iana"
    },
    "application/vnd.etsi.iptvsad-bc+xml": {
      source: "iana"
    },
    "application/vnd.etsi.iptvsad-cod+xml": {
      source: "iana"
    },
    "application/vnd.etsi.iptvsad-npvr+xml": {
      source: "iana"
    },
    "application/vnd.etsi.iptvservice+xml": {
      source: "iana"
    },
    "application/vnd.etsi.iptvsync+xml": {
      source: "iana"
    },
    "application/vnd.etsi.iptvueprofile+xml": {
      source: "iana"
    },
    "application/vnd.etsi.mcid+xml": {
      source: "iana"
    },
    "application/vnd.etsi.mheg5": {
      source: "iana"
    },
    "application/vnd.etsi.overload-control-policy-dataset+xml": {
      source: "iana"
    },
    "application/vnd.etsi.pstn+xml": {
      source: "iana"
    },
    "application/vnd.etsi.sci+xml": {
      source: "iana"
    },
    "application/vnd.etsi.simservs+xml": {
      source: "iana"
    },
    "application/vnd.etsi.timestamp-token": {
      source: "iana"
    },
    "application/vnd.etsi.tsl+xml": {
      source: "iana"
    },
    "application/vnd.etsi.tsl.der": {
      source: "iana"
    },
    "application/vnd.eudora.data": {
      source: "iana"
    },
    "application/vnd.ezpix-album": {
      source: "iana",
      extensions: ["ez2"]
    },
    "application/vnd.ezpix-package": {
      source: "iana",
      extensions: ["ez3"]
    },
    "application/vnd.f-secure.mobile": {
      source: "iana"
    },
    "application/vnd.fastcopy-disk-image": {
      source: "iana"
    },
    "application/vnd.fdf": {
      source: "iana",
      extensions: ["fdf"]
    },
    "application/vnd.fdsn.mseed": {
      source: "iana",
      extensions: ["mseed"]
    },
    "application/vnd.fdsn.seed": {
      source: "iana",
      extensions: ["seed", "dataless"]
    },
    "application/vnd.ffsns": {
      source: "iana"
    },
    "application/vnd.filmit.zfc": {
      source: "iana"
    },
    "application/vnd.fints": {
      source: "iana"
    },
    "application/vnd.firemonkeys.cloudcell": {
      source: "iana"
    },
    "application/vnd.flographit": {
      source: "iana",
      extensions: ["gph"]
    },
    "application/vnd.fluxtime.clip": {
      source: "iana",
      extensions: ["ftc"]
    },
    "application/vnd.font-fontforge-sfd": {
      source: "iana"
    },
    "application/vnd.framemaker": {
      source: "iana",
      extensions: ["fm", "frame", "maker", "book"]
    },
    "application/vnd.frogans.fnc": {
      source: "iana",
      extensions: ["fnc"]
    },
    "application/vnd.frogans.ltf": {
      source: "iana",
      extensions: ["ltf"]
    },
    "application/vnd.fsc.weblaunch": {
      source: "iana",
      extensions: ["fsc"]
    },
    "application/vnd.fujitsu.oasys": {
      source: "iana",
      extensions: ["oas"]
    },
    "application/vnd.fujitsu.oasys2": {
      source: "iana",
      extensions: ["oa2"]
    },
    "application/vnd.fujitsu.oasys3": {
      source: "iana",
      extensions: ["oa3"]
    },
    "application/vnd.fujitsu.oasysgp": {
      source: "iana",
      extensions: ["fg5"]
    },
    "application/vnd.fujitsu.oasysprs": {
      source: "iana",
      extensions: ["bh2"]
    },
    "application/vnd.fujixerox.art-ex": {
      source: "iana"
    },
    "application/vnd.fujixerox.art4": {
      source: "iana"
    },
    "application/vnd.fujixerox.ddd": {
      source: "iana",
      extensions: ["ddd"]
    },
    "application/vnd.fujixerox.docuworks": {
      source: "iana",
      extensions: ["xdw"]
    },
    "application/vnd.fujixerox.docuworks.binder": {
      source: "iana",
      extensions: ["xbd"]
    },
    "application/vnd.fujixerox.docuworks.container": {
      source: "iana"
    },
    "application/vnd.fujixerox.hbpl": {
      source: "iana"
    },
    "application/vnd.fut-misnet": {
      source: "iana"
    },
    "application/vnd.fuzzysheet": {
      source: "iana",
      extensions: ["fzs"]
    },
    "application/vnd.genomatix.tuxedo": {
      source: "iana",
      extensions: ["txd"]
    },
    "application/vnd.geo+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.geocube+xml": {
      source: "iana"
    },
    "application/vnd.geogebra.file": {
      source: "iana",
      extensions: ["ggb"]
    },
    "application/vnd.geogebra.tool": {
      source: "iana",
      extensions: ["ggt"]
    },
    "application/vnd.geometry-explorer": {
      source: "iana",
      extensions: ["gex", "gre"]
    },
    "application/vnd.geonext": {
      source: "iana",
      extensions: ["gxt"]
    },
    "application/vnd.geoplan": {
      source: "iana",
      extensions: ["g2w"]
    },
    "application/vnd.geospace": {
      source: "iana",
      extensions: ["g3w"]
    },
    "application/vnd.gerber": {
      source: "iana"
    },
    "application/vnd.globalplatform.card-content-mgt": {
      source: "iana"
    },
    "application/vnd.globalplatform.card-content-mgt-response": {
      source: "iana"
    },
    "application/vnd.gmx": {
      source: "iana",
      extensions: ["gmx"]
    },
    "application/vnd.google-apps.document": {
      compressible: false,
      extensions: ["gdoc"]
    },
    "application/vnd.google-apps.presentation": {
      compressible: false,
      extensions: ["gslides"]
    },
    "application/vnd.google-apps.spreadsheet": {
      compressible: false,
      extensions: ["gsheet"]
    },
    "application/vnd.google-earth.kml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["kml"]
    },
    "application/vnd.google-earth.kmz": {
      source: "iana",
      compressible: false,
      extensions: ["kmz"]
    },
    "application/vnd.gov.sk.e-form+xml": {
      source: "iana"
    },
    "application/vnd.gov.sk.e-form+zip": {
      source: "iana"
    },
    "application/vnd.gov.sk.xmldatacontainer+xml": {
      source: "iana"
    },
    "application/vnd.grafeq": {
      source: "iana",
      extensions: ["gqf", "gqs"]
    },
    "application/vnd.gridmp": {
      source: "iana"
    },
    "application/vnd.groove-account": {
      source: "iana",
      extensions: ["gac"]
    },
    "application/vnd.groove-help": {
      source: "iana",
      extensions: ["ghf"]
    },
    "application/vnd.groove-identity-message": {
      source: "iana",
      extensions: ["gim"]
    },
    "application/vnd.groove-injector": {
      source: "iana",
      extensions: ["grv"]
    },
    "application/vnd.groove-tool-message": {
      source: "iana",
      extensions: ["gtm"]
    },
    "application/vnd.groove-tool-template": {
      source: "iana",
      extensions: ["tpl"]
    },
    "application/vnd.groove-vcard": {
      source: "iana",
      extensions: ["vcg"]
    },
    "application/vnd.hal+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hal+xml": {
      source: "iana",
      extensions: ["hal"]
    },
    "application/vnd.handheld-entertainment+xml": {
      source: "iana",
      extensions: ["zmm"]
    },
    "application/vnd.hbci": {
      source: "iana",
      extensions: ["hbci"]
    },
    "application/vnd.hcl-bireports": {
      source: "iana"
    },
    "application/vnd.heroku+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hhe.lesson-player": {
      source: "iana",
      extensions: ["les"]
    },
    "application/vnd.hp-hpgl": {
      source: "iana",
      extensions: ["hpgl"]
    },
    "application/vnd.hp-hpid": {
      source: "iana",
      extensions: ["hpid"]
    },
    "application/vnd.hp-hps": {
      source: "iana",
      extensions: ["hps"]
    },
    "application/vnd.hp-jlyt": {
      source: "iana",
      extensions: ["jlt"]
    },
    "application/vnd.hp-pcl": {
      source: "iana",
      extensions: ["pcl"]
    },
    "application/vnd.hp-pclxl": {
      source: "iana",
      extensions: ["pclxl"]
    },
    "application/vnd.httphone": {
      source: "iana"
    },
    "application/vnd.hydrostatix.sof-data": {
      source: "iana",
      extensions: ["sfd-hdstx"]
    },
    "application/vnd.hyperdrive+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hzn-3d-crossword": {
      source: "iana"
    },
    "application/vnd.ibm.afplinedata": {
      source: "iana"
    },
    "application/vnd.ibm.electronic-media": {
      source: "iana"
    },
    "application/vnd.ibm.minipay": {
      source: "iana",
      extensions: ["mpy"]
    },
    "application/vnd.ibm.modcap": {
      source: "iana",
      extensions: ["afp", "listafp", "list3820"]
    },
    "application/vnd.ibm.rights-management": {
      source: "iana",
      extensions: ["irm"]
    },
    "application/vnd.ibm.secure-container": {
      source: "iana",
      extensions: ["sc"]
    },
    "application/vnd.iccprofile": {
      source: "iana",
      extensions: ["icc", "icm"]
    },
    "application/vnd.ieee.1905": {
      source: "iana"
    },
    "application/vnd.igloader": {
      source: "iana",
      extensions: ["igl"]
    },
    "application/vnd.immervision-ivp": {
      source: "iana",
      extensions: ["ivp"]
    },
    "application/vnd.immervision-ivu": {
      source: "iana",
      extensions: ["ivu"]
    },
    "application/vnd.ims.imsccv1p1": {
      source: "iana"
    },
    "application/vnd.ims.imsccv1p2": {
      source: "iana"
    },
    "application/vnd.ims.imsccv1p3": {
      source: "iana"
    },
    "application/vnd.ims.lis.v2.result+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolproxy+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolproxy.id+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolsettings+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolsettings.simple+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.informedcontrol.rms+xml": {
      source: "iana"
    },
    "application/vnd.informix-visionary": {
      source: "iana"
    },
    "application/vnd.infotech.project": {
      source: "iana"
    },
    "application/vnd.infotech.project+xml": {
      source: "iana"
    },
    "application/vnd.innopath.wamp.notification": {
      source: "iana"
    },
    "application/vnd.insors.igm": {
      source: "iana",
      extensions: ["igm"]
    },
    "application/vnd.intercon.formnet": {
      source: "iana",
      extensions: ["xpw", "xpx"]
    },
    "application/vnd.intergeo": {
      source: "iana",
      extensions: ["i2g"]
    },
    "application/vnd.intertrust.digibox": {
      source: "iana"
    },
    "application/vnd.intertrust.nncp": {
      source: "iana"
    },
    "application/vnd.intu.qbo": {
      source: "iana",
      extensions: ["qbo"]
    },
    "application/vnd.intu.qfx": {
      source: "iana",
      extensions: ["qfx"]
    },
    "application/vnd.iptc.g2.catalogitem+xml": {
      source: "iana"
    },
    "application/vnd.iptc.g2.conceptitem+xml": {
      source: "iana"
    },
    "application/vnd.iptc.g2.knowledgeitem+xml": {
      source: "iana"
    },
    "application/vnd.iptc.g2.newsitem+xml": {
      source: "iana"
    },
    "application/vnd.iptc.g2.newsmessage+xml": {
      source: "iana"
    },
    "application/vnd.iptc.g2.packageitem+xml": {
      source: "iana"
    },
    "application/vnd.iptc.g2.planningitem+xml": {
      source: "iana"
    },
    "application/vnd.ipunplugged.rcprofile": {
      source: "iana",
      extensions: ["rcprofile"]
    },
    "application/vnd.irepository.package+xml": {
      source: "iana",
      extensions: ["irp"]
    },
    "application/vnd.is-xpr": {
      source: "iana",
      extensions: ["xpr"]
    },
    "application/vnd.isac.fcs": {
      source: "iana",
      extensions: ["fcs"]
    },
    "application/vnd.jam": {
      source: "iana",
      extensions: ["jam"]
    },
    "application/vnd.japannet-directory-service": {
      source: "iana"
    },
    "application/vnd.japannet-jpnstore-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-payment-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-registration": {
      source: "iana"
    },
    "application/vnd.japannet-registration-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-setstore-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-verification": {
      source: "iana"
    },
    "application/vnd.japannet-verification-wakeup": {
      source: "iana"
    },
    "application/vnd.jcp.javame.midlet-rms": {
      source: "iana",
      extensions: ["rms"]
    },
    "application/vnd.jisp": {
      source: "iana",
      extensions: ["jisp"]
    },
    "application/vnd.joost.joda-archive": {
      source: "iana",
      extensions: ["joda"]
    },
    "application/vnd.jsk.isdn-ngn": {
      source: "iana"
    },
    "application/vnd.kahootz": {
      source: "iana",
      extensions: ["ktz", "ktr"]
    },
    "application/vnd.kde.karbon": {
      source: "iana",
      extensions: ["karbon"]
    },
    "application/vnd.kde.kchart": {
      source: "iana",
      extensions: ["chrt"]
    },
    "application/vnd.kde.kformula": {
      source: "iana",
      extensions: ["kfo"]
    },
    "application/vnd.kde.kivio": {
      source: "iana",
      extensions: ["flw"]
    },
    "application/vnd.kde.kontour": {
      source: "iana",
      extensions: ["kon"]
    },
    "application/vnd.kde.kpresenter": {
      source: "iana",
      extensions: ["kpr", "kpt"]
    },
    "application/vnd.kde.kspread": {
      source: "iana",
      extensions: ["ksp"]
    },
    "application/vnd.kde.kword": {
      source: "iana",
      extensions: ["kwd", "kwt"]
    },
    "application/vnd.kenameaapp": {
      source: "iana",
      extensions: ["htke"]
    },
    "application/vnd.kidspiration": {
      source: "iana",
      extensions: ["kia"]
    },
    "application/vnd.kinar": {
      source: "iana",
      extensions: ["kne", "knp"]
    },
    "application/vnd.koan": {
      source: "iana",
      extensions: ["skp", "skd", "skt", "skm"]
    },
    "application/vnd.kodak-descriptor": {
      source: "iana",
      extensions: ["sse"]
    },
    "application/vnd.las.las+xml": {
      source: "iana",
      extensions: ["lasxml"]
    },
    "application/vnd.liberty-request+xml": {
      source: "iana"
    },
    "application/vnd.llamagraphics.life-balance.desktop": {
      source: "iana",
      extensions: ["lbd"]
    },
    "application/vnd.llamagraphics.life-balance.exchange+xml": {
      source: "iana",
      extensions: ["lbe"]
    },
    "application/vnd.lotus-1-2-3": {
      source: "iana",
      extensions: ["123"]
    },
    "application/vnd.lotus-approach": {
      source: "iana",
      extensions: ["apr"]
    },
    "application/vnd.lotus-freelance": {
      source: "iana",
      extensions: ["pre"]
    },
    "application/vnd.lotus-notes": {
      source: "iana",
      extensions: ["nsf"]
    },
    "application/vnd.lotus-organizer": {
      source: "iana",
      extensions: ["org"]
    },
    "application/vnd.lotus-screencam": {
      source: "iana",
      extensions: ["scm"]
    },
    "application/vnd.lotus-wordpro": {
      source: "iana",
      extensions: ["lwp"]
    },
    "application/vnd.macports.portpkg": {
      source: "iana",
      extensions: ["portpkg"]
    },
    "application/vnd.mapbox-vector-tile": {
      source: "iana"
    },
    "application/vnd.marlin.drm.actiontoken+xml": {
      source: "iana"
    },
    "application/vnd.marlin.drm.conftoken+xml": {
      source: "iana"
    },
    "application/vnd.marlin.drm.license+xml": {
      source: "iana"
    },
    "application/vnd.marlin.drm.mdcf": {
      source: "iana"
    },
    "application/vnd.mason+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.maxmind.maxmind-db": {
      source: "iana"
    },
    "application/vnd.mcd": {
      source: "iana",
      extensions: ["mcd"]
    },
    "application/vnd.medcalcdata": {
      source: "iana",
      extensions: ["mc1"]
    },
    "application/vnd.mediastation.cdkey": {
      source: "iana",
      extensions: ["cdkey"]
    },
    "application/vnd.meridian-slingshot": {
      source: "iana"
    },
    "application/vnd.mfer": {
      source: "iana",
      extensions: ["mwf"]
    },
    "application/vnd.mfmp": {
      source: "iana",
      extensions: ["mfm"]
    },
    "application/vnd.micro+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.micrografx.flo": {
      source: "iana",
      extensions: ["flo"]
    },
    "application/vnd.micrografx.igx": {
      source: "iana",
      extensions: ["igx"]
    },
    "application/vnd.microsoft.portable-executable": {
      source: "iana"
    },
    "application/vnd.miele+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.mif": {
      source: "iana",
      extensions: ["mif"]
    },
    "application/vnd.minisoft-hp3000-save": {
      source: "iana"
    },
    "application/vnd.mitsubishi.misty-guard.trustweb": {
      source: "iana"
    },
    "application/vnd.mobius.daf": {
      source: "iana",
      extensions: ["daf"]
    },
    "application/vnd.mobius.dis": {
      source: "iana",
      extensions: ["dis"]
    },
    "application/vnd.mobius.mbk": {
      source: "iana",
      extensions: ["mbk"]
    },
    "application/vnd.mobius.mqy": {
      source: "iana",
      extensions: ["mqy"]
    },
    "application/vnd.mobius.msl": {
      source: "iana",
      extensions: ["msl"]
    },
    "application/vnd.mobius.plc": {
      source: "iana",
      extensions: ["plc"]
    },
    "application/vnd.mobius.txf": {
      source: "iana",
      extensions: ["txf"]
    },
    "application/vnd.mophun.application": {
      source: "iana",
      extensions: ["mpn"]
    },
    "application/vnd.mophun.certificate": {
      source: "iana",
      extensions: ["mpc"]
    },
    "application/vnd.motorola.flexsuite": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.adsi": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.fis": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.gotap": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.kmr": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.ttc": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.wem": {
      source: "iana"
    },
    "application/vnd.motorola.iprm": {
      source: "iana"
    },
    "application/vnd.mozilla.xul+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xul"]
    },
    "application/vnd.ms-3mfdocument": {
      source: "iana"
    },
    "application/vnd.ms-artgalry": {
      source: "iana",
      extensions: ["cil"]
    },
    "application/vnd.ms-asf": {
      source: "iana"
    },
    "application/vnd.ms-cab-compressed": {
      source: "iana",
      extensions: ["cab"]
    },
    "application/vnd.ms-color.iccprofile": {
      source: "apache"
    },
    "application/vnd.ms-excel": {
      source: "iana",
      compressible: false,
      extensions: ["xls", "xlm", "xla", "xlc", "xlt", "xlw"]
    },
    "application/vnd.ms-excel.addin.macroenabled.12": {
      source: "iana",
      extensions: ["xlam"]
    },
    "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
      source: "iana",
      extensions: ["xlsb"]
    },
    "application/vnd.ms-excel.sheet.macroenabled.12": {
      source: "iana",
      extensions: ["xlsm"]
    },
    "application/vnd.ms-excel.template.macroenabled.12": {
      source: "iana",
      extensions: ["xltm"]
    },
    "application/vnd.ms-fontobject": {
      source: "iana",
      compressible: true,
      extensions: ["eot"]
    },
    "application/vnd.ms-htmlhelp": {
      source: "iana",
      extensions: ["chm"]
    },
    "application/vnd.ms-ims": {
      source: "iana",
      extensions: ["ims"]
    },
    "application/vnd.ms-lrm": {
      source: "iana",
      extensions: ["lrm"]
    },
    "application/vnd.ms-office.activex+xml": {
      source: "iana"
    },
    "application/vnd.ms-officetheme": {
      source: "iana",
      extensions: ["thmx"]
    },
    "application/vnd.ms-opentype": {
      source: "apache",
      compressible: true
    },
    "application/vnd.ms-package.obfuscated-opentype": {
      source: "apache"
    },
    "application/vnd.ms-pki.seccat": {
      source: "apache",
      extensions: ["cat"]
    },
    "application/vnd.ms-pki.stl": {
      source: "apache",
      extensions: ["stl"]
    },
    "application/vnd.ms-playready.initiator+xml": {
      source: "iana"
    },
    "application/vnd.ms-powerpoint": {
      source: "iana",
      compressible: false,
      extensions: ["ppt", "pps", "pot"]
    },
    "application/vnd.ms-powerpoint.addin.macroenabled.12": {
      source: "iana",
      extensions: ["ppam"]
    },
    "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
      source: "iana",
      extensions: ["pptm"]
    },
    "application/vnd.ms-powerpoint.slide.macroenabled.12": {
      source: "iana",
      extensions: ["sldm"]
    },
    "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
      source: "iana",
      extensions: ["ppsm"]
    },
    "application/vnd.ms-powerpoint.template.macroenabled.12": {
      source: "iana",
      extensions: ["potm"]
    },
    "application/vnd.ms-printdevicecapabilities+xml": {
      source: "iana"
    },
    "application/vnd.ms-printing.printticket+xml": {
      source: "apache"
    },
    "application/vnd.ms-project": {
      source: "iana",
      extensions: ["mpp", "mpt"]
    },
    "application/vnd.ms-tnef": {
      source: "iana"
    },
    "application/vnd.ms-windows.devicepairing": {
      source: "iana"
    },
    "application/vnd.ms-windows.nwprinting.oob": {
      source: "iana"
    },
    "application/vnd.ms-windows.printerpairing": {
      source: "iana"
    },
    "application/vnd.ms-windows.wsd.oob": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.lic-chlg-req": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.lic-resp": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.meter-chlg-req": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.meter-resp": {
      source: "iana"
    },
    "application/vnd.ms-word.document.macroenabled.12": {
      source: "iana",
      extensions: ["docm"]
    },
    "application/vnd.ms-word.template.macroenabled.12": {
      source: "iana",
      extensions: ["dotm"]
    },
    "application/vnd.ms-works": {
      source: "iana",
      extensions: ["wps", "wks", "wcm", "wdb"]
    },
    "application/vnd.ms-wpl": {
      source: "iana",
      extensions: ["wpl"]
    },
    "application/vnd.ms-xpsdocument": {
      source: "iana",
      compressible: false,
      extensions: ["xps"]
    },
    "application/vnd.msa-disk-image": {
      source: "iana"
    },
    "application/vnd.mseq": {
      source: "iana",
      extensions: ["mseq"]
    },
    "application/vnd.msign": {
      source: "iana"
    },
    "application/vnd.multiad.creator": {
      source: "iana"
    },
    "application/vnd.multiad.creator.cif": {
      source: "iana"
    },
    "application/vnd.music-niff": {
      source: "iana"
    },
    "application/vnd.musician": {
      source: "iana",
      extensions: ["mus"]
    },
    "application/vnd.muvee.style": {
      source: "iana",
      extensions: ["msty"]
    },
    "application/vnd.mynfc": {
      source: "iana",
      extensions: ["taglet"]
    },
    "application/vnd.ncd.control": {
      source: "iana"
    },
    "application/vnd.ncd.reference": {
      source: "iana"
    },
    "application/vnd.nervana": {
      source: "iana"
    },
    "application/vnd.netfpx": {
      source: "iana"
    },
    "application/vnd.neurolanguage.nlu": {
      source: "iana",
      extensions: ["nlu"]
    },
    "application/vnd.nintendo.nitro.rom": {
      source: "iana"
    },
    "application/vnd.nintendo.snes.rom": {
      source: "iana"
    },
    "application/vnd.nitf": {
      source: "iana",
      extensions: ["ntf", "nitf"]
    },
    "application/vnd.noblenet-directory": {
      source: "iana",
      extensions: ["nnd"]
    },
    "application/vnd.noblenet-sealer": {
      source: "iana",
      extensions: ["nns"]
    },
    "application/vnd.noblenet-web": {
      source: "iana",
      extensions: ["nnw"]
    },
    "application/vnd.nokia.catalogs": {
      source: "iana"
    },
    "application/vnd.nokia.conml+wbxml": {
      source: "iana"
    },
    "application/vnd.nokia.conml+xml": {
      source: "iana"
    },
    "application/vnd.nokia.iptv.config+xml": {
      source: "iana"
    },
    "application/vnd.nokia.isds-radio-presets": {
      source: "iana"
    },
    "application/vnd.nokia.landmark+wbxml": {
      source: "iana"
    },
    "application/vnd.nokia.landmark+xml": {
      source: "iana"
    },
    "application/vnd.nokia.landmarkcollection+xml": {
      source: "iana"
    },
    "application/vnd.nokia.n-gage.ac+xml": {
      source: "iana"
    },
    "application/vnd.nokia.n-gage.data": {
      source: "iana",
      extensions: ["ngdat"]
    },
    "application/vnd.nokia.n-gage.symbian.install": {
      source: "iana",
      extensions: ["n-gage"]
    },
    "application/vnd.nokia.ncd": {
      source: "iana"
    },
    "application/vnd.nokia.pcd+wbxml": {
      source: "iana"
    },
    "application/vnd.nokia.pcd+xml": {
      source: "iana"
    },
    "application/vnd.nokia.radio-preset": {
      source: "iana",
      extensions: ["rpst"]
    },
    "application/vnd.nokia.radio-presets": {
      source: "iana",
      extensions: ["rpss"]
    },
    "application/vnd.novadigm.edm": {
      source: "iana",
      extensions: ["edm"]
    },
    "application/vnd.novadigm.edx": {
      source: "iana",
      extensions: ["edx"]
    },
    "application/vnd.novadigm.ext": {
      source: "iana",
      extensions: ["ext"]
    },
    "application/vnd.ntt-local.content-share": {
      source: "iana"
    },
    "application/vnd.ntt-local.file-transfer": {
      source: "iana"
    },
    "application/vnd.ntt-local.ogw_remote-access": {
      source: "iana"
    },
    "application/vnd.ntt-local.sip-ta_remote": {
      source: "iana"
    },
    "application/vnd.ntt-local.sip-ta_tcp_stream": {
      source: "iana"
    },
    "application/vnd.oasis.opendocument.chart": {
      source: "iana",
      extensions: ["odc"]
    },
    "application/vnd.oasis.opendocument.chart-template": {
      source: "iana",
      extensions: ["otc"]
    },
    "application/vnd.oasis.opendocument.database": {
      source: "iana",
      extensions: ["odb"]
    },
    "application/vnd.oasis.opendocument.formula": {
      source: "iana",
      extensions: ["odf"]
    },
    "application/vnd.oasis.opendocument.formula-template": {
      source: "iana",
      extensions: ["odft"]
    },
    "application/vnd.oasis.opendocument.graphics": {
      source: "iana",
      compressible: false,
      extensions: ["odg"]
    },
    "application/vnd.oasis.opendocument.graphics-template": {
      source: "iana",
      extensions: ["otg"]
    },
    "application/vnd.oasis.opendocument.image": {
      source: "iana",
      extensions: ["odi"]
    },
    "application/vnd.oasis.opendocument.image-template": {
      source: "iana",
      extensions: ["oti"]
    },
    "application/vnd.oasis.opendocument.presentation": {
      source: "iana",
      compressible: false,
      extensions: ["odp"]
    },
    "application/vnd.oasis.opendocument.presentation-template": {
      source: "iana",
      extensions: ["otp"]
    },
    "application/vnd.oasis.opendocument.spreadsheet": {
      source: "iana",
      compressible: false,
      extensions: ["ods"]
    },
    "application/vnd.oasis.opendocument.spreadsheet-template": {
      source: "iana",
      extensions: ["ots"]
    },
    "application/vnd.oasis.opendocument.text": {
      source: "iana",
      compressible: false,
      extensions: ["odt"]
    },
    "application/vnd.oasis.opendocument.text-master": {
      source: "iana",
      extensions: ["odm"]
    },
    "application/vnd.oasis.opendocument.text-template": {
      source: "iana",
      extensions: ["ott"]
    },
    "application/vnd.oasis.opendocument.text-web": {
      source: "iana",
      extensions: ["oth"]
    },
    "application/vnd.obn": {
      source: "iana"
    },
    "application/vnd.oftn.l10n+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.contentaccessdownload+xml": {
      source: "iana"
    },
    "application/vnd.oipf.contentaccessstreaming+xml": {
      source: "iana"
    },
    "application/vnd.oipf.cspg-hexbinary": {
      source: "iana"
    },
    "application/vnd.oipf.dae.svg+xml": {
      source: "iana"
    },
    "application/vnd.oipf.dae.xhtml+xml": {
      source: "iana"
    },
    "application/vnd.oipf.mippvcontrolmessage+xml": {
      source: "iana"
    },
    "application/vnd.oipf.pae.gem": {
      source: "iana"
    },
    "application/vnd.oipf.spdiscovery+xml": {
      source: "iana"
    },
    "application/vnd.oipf.spdlist+xml": {
      source: "iana"
    },
    "application/vnd.oipf.ueprofile+xml": {
      source: "iana"
    },
    "application/vnd.oipf.userprofile+xml": {
      source: "iana"
    },
    "application/vnd.olpc-sugar": {
      source: "iana",
      extensions: ["xo"]
    },
    "application/vnd.oma-scws-config": {
      source: "iana"
    },
    "application/vnd.oma-scws-http-request": {
      source: "iana"
    },
    "application/vnd.oma-scws-http-response": {
      source: "iana"
    },
    "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
      source: "iana"
    },
    "application/vnd.oma.bcast.drm-trigger+xml": {
      source: "iana"
    },
    "application/vnd.oma.bcast.imd+xml": {
      source: "iana"
    },
    "application/vnd.oma.bcast.ltkm": {
      source: "iana"
    },
    "application/vnd.oma.bcast.notification+xml": {
      source: "iana"
    },
    "application/vnd.oma.bcast.provisioningtrigger": {
      source: "iana"
    },
    "application/vnd.oma.bcast.sgboot": {
      source: "iana"
    },
    "application/vnd.oma.bcast.sgdd+xml": {
      source: "iana"
    },
    "application/vnd.oma.bcast.sgdu": {
      source: "iana"
    },
    "application/vnd.oma.bcast.simple-symbol-container": {
      source: "iana"
    },
    "application/vnd.oma.bcast.smartcard-trigger+xml": {
      source: "iana"
    },
    "application/vnd.oma.bcast.sprov+xml": {
      source: "iana"
    },
    "application/vnd.oma.bcast.stkm": {
      source: "iana"
    },
    "application/vnd.oma.cab-address-book+xml": {
      source: "iana"
    },
    "application/vnd.oma.cab-feature-handler+xml": {
      source: "iana"
    },
    "application/vnd.oma.cab-pcc+xml": {
      source: "iana"
    },
    "application/vnd.oma.cab-subs-invite+xml": {
      source: "iana"
    },
    "application/vnd.oma.cab-user-prefs+xml": {
      source: "iana"
    },
    "application/vnd.oma.dcd": {
      source: "iana"
    },
    "application/vnd.oma.dcdc": {
      source: "iana"
    },
    "application/vnd.oma.dd2+xml": {
      source: "iana",
      extensions: ["dd2"]
    },
    "application/vnd.oma.drm.risd+xml": {
      source: "iana"
    },
    "application/vnd.oma.group-usage-list+xml": {
      source: "iana"
    },
    "application/vnd.oma.pal+xml": {
      source: "iana"
    },
    "application/vnd.oma.poc.detailed-progress-report+xml": {
      source: "iana"
    },
    "application/vnd.oma.poc.final-report+xml": {
      source: "iana"
    },
    "application/vnd.oma.poc.groups+xml": {
      source: "iana"
    },
    "application/vnd.oma.poc.invocation-descriptor+xml": {
      source: "iana"
    },
    "application/vnd.oma.poc.optimized-progress-report+xml": {
      source: "iana"
    },
    "application/vnd.oma.push": {
      source: "iana"
    },
    "application/vnd.oma.scidm.messages+xml": {
      source: "iana"
    },
    "application/vnd.oma.xcap-directory+xml": {
      source: "iana"
    },
    "application/vnd.omads-email+xml": {
      source: "iana"
    },
    "application/vnd.omads-file+xml": {
      source: "iana"
    },
    "application/vnd.omads-folder+xml": {
      source: "iana"
    },
    "application/vnd.omaloc-supl-init": {
      source: "iana"
    },
    "application/vnd.openblox.game+xml": {
      source: "iana"
    },
    "application/vnd.openblox.game-binary": {
      source: "iana"
    },
    "application/vnd.openeye.oeb": {
      source: "iana"
    },
    "application/vnd.openofficeorg.extension": {
      source: "apache",
      extensions: ["oxt"]
    },
    "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.drawing+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml-template": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
      source: "iana",
      compressible: false,
      extensions: ["pptx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slide": {
      source: "iana",
      extensions: ["sldx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
      source: "iana",
      extensions: ["ppsx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.template": {
      source: "apache",
      extensions: ["potx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml-template": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
      source: "iana",
      compressible: false,
      extensions: ["xlsx"]
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
      source: "apache",
      extensions: ["xltx"]
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.theme+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.vmldrawing": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml-template": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
      source: "iana",
      compressible: false,
      extensions: ["docx"]
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
      source: "apache",
      extensions: ["dotx"]
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-package.core-properties+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
      source: "iana"
    },
    "application/vnd.openxmlformats-package.relationships+xml": {
      source: "iana"
    },
    "application/vnd.oracle.resource+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.orange.indata": {
      source: "iana"
    },
    "application/vnd.osa.netdeploy": {
      source: "iana"
    },
    "application/vnd.osgeo.mapguide.package": {
      source: "iana",
      extensions: ["mgp"]
    },
    "application/vnd.osgi.bundle": {
      source: "iana"
    },
    "application/vnd.osgi.dp": {
      source: "iana",
      extensions: ["dp"]
    },
    "application/vnd.osgi.subsystem": {
      source: "iana",
      extensions: ["esa"]
    },
    "application/vnd.otps.ct-kip+xml": {
      source: "iana"
    },
    "application/vnd.oxli.countgraph": {
      source: "iana"
    },
    "application/vnd.pagerduty+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.palm": {
      source: "iana",
      extensions: ["pdb", "pqa", "oprc"]
    },
    "application/vnd.panoply": {
      source: "iana"
    },
    "application/vnd.paos+xml": {
      source: "iana"
    },
    "application/vnd.paos.xml": {
      source: "apache"
    },
    "application/vnd.pawaafile": {
      source: "iana",
      extensions: ["paw"]
    },
    "application/vnd.pcos": {
      source: "iana"
    },
    "application/vnd.pg.format": {
      source: "iana",
      extensions: ["str"]
    },
    "application/vnd.pg.osasli": {
      source: "iana",
      extensions: ["ei6"]
    },
    "application/vnd.piaccess.application-licence": {
      source: "iana"
    },
    "application/vnd.picsel": {
      source: "iana",
      extensions: ["efif"]
    },
    "application/vnd.pmi.widget": {
      source: "iana",
      extensions: ["wg"]
    },
    "application/vnd.poc.group-advertisement+xml": {
      source: "iana"
    },
    "application/vnd.pocketlearn": {
      source: "iana",
      extensions: ["plf"]
    },
    "application/vnd.powerbuilder6": {
      source: "iana",
      extensions: ["pbd"]
    },
    "application/vnd.powerbuilder6-s": {
      source: "iana"
    },
    "application/vnd.powerbuilder7": {
      source: "iana"
    },
    "application/vnd.powerbuilder7-s": {
      source: "iana"
    },
    "application/vnd.powerbuilder75": {
      source: "iana"
    },
    "application/vnd.powerbuilder75-s": {
      source: "iana"
    },
    "application/vnd.preminet": {
      source: "iana"
    },
    "application/vnd.previewsystems.box": {
      source: "iana",
      extensions: ["box"]
    },
    "application/vnd.proteus.magazine": {
      source: "iana",
      extensions: ["mgz"]
    },
    "application/vnd.publishare-delta-tree": {
      source: "iana",
      extensions: ["qps"]
    },
    "application/vnd.pvi.ptid1": {
      source: "iana",
      extensions: ["ptid"]
    },
    "application/vnd.pwg-multiplexed": {
      source: "iana"
    },
    "application/vnd.pwg-xhtml-print+xml": {
      source: "iana"
    },
    "application/vnd.qualcomm.brew-app-res": {
      source: "iana"
    },
    "application/vnd.quark.quarkxpress": {
      source: "iana",
      extensions: ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"]
    },
    "application/vnd.quobject-quoxdocument": {
      source: "iana"
    },
    "application/vnd.radisys.moml+xml": {
      source: "iana"
    },
    "application/vnd.radisys.msml+xml": {
      source: "iana"
    },
    "application/vnd.radisys.msml-audit+xml": {
      source: "iana"
    },
    "application/vnd.radisys.msml-audit-conf+xml": {
      source: "iana"
    },
    "application/vnd.radisys.msml-audit-conn+xml": {
      source: "iana"
    },
    "application/vnd.radisys.msml-audit-dialog+xml": {
      source: "iana"
    },
    "application/vnd.radisys.msml-audit-stream+xml": {
      source: "iana"
    },
    "application/vnd.radisys.msml-conf+xml": {
      source: "iana"
    },
    "application/vnd.radisys.msml-dialog+xml": {
      source: "iana"
    },
    "application/vnd.radisys.msml-dialog-base+xml": {
      source: "iana"
    },
    "application/vnd.radisys.msml-dialog-fax-detect+xml": {
      source: "iana"
    },
    "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
      source: "iana"
    },
    "application/vnd.radisys.msml-dialog-group+xml": {
      source: "iana"
    },
    "application/vnd.radisys.msml-dialog-speech+xml": {
      source: "iana"
    },
    "application/vnd.radisys.msml-dialog-transform+xml": {
      source: "iana"
    },
    "application/vnd.rainstor.data": {
      source: "iana"
    },
    "application/vnd.rapid": {
      source: "iana"
    },
    "application/vnd.realvnc.bed": {
      source: "iana",
      extensions: ["bed"]
    },
    "application/vnd.recordare.musicxml": {
      source: "iana",
      extensions: ["mxl"]
    },
    "application/vnd.recordare.musicxml+xml": {
      source: "iana",
      extensions: ["musicxml"]
    },
    "application/vnd.renlearn.rlprint": {
      source: "iana"
    },
    "application/vnd.rig.cryptonote": {
      source: "iana",
      extensions: ["cryptonote"]
    },
    "application/vnd.rim.cod": {
      source: "apache",
      extensions: ["cod"]
    },
    "application/vnd.rn-realmedia": {
      source: "apache",
      extensions: ["rm"]
    },
    "application/vnd.rn-realmedia-vbr": {
      source: "apache",
      extensions: ["rmvb"]
    },
    "application/vnd.route66.link66+xml": {
      source: "iana",
      extensions: ["link66"]
    },
    "application/vnd.rs-274x": {
      source: "iana"
    },
    "application/vnd.ruckus.download": {
      source: "iana"
    },
    "application/vnd.s3sms": {
      source: "iana"
    },
    "application/vnd.sailingtracker.track": {
      source: "iana",
      extensions: ["st"]
    },
    "application/vnd.sbm.cid": {
      source: "iana"
    },
    "application/vnd.sbm.mid2": {
      source: "iana"
    },
    "application/vnd.scribus": {
      source: "iana"
    },
    "application/vnd.sealed.3df": {
      source: "iana"
    },
    "application/vnd.sealed.csf": {
      source: "iana"
    },
    "application/vnd.sealed.doc": {
      source: "iana"
    },
    "application/vnd.sealed.eml": {
      source: "iana"
    },
    "application/vnd.sealed.mht": {
      source: "iana"
    },
    "application/vnd.sealed.net": {
      source: "iana"
    },
    "application/vnd.sealed.ppt": {
      source: "iana"
    },
    "application/vnd.sealed.tiff": {
      source: "iana"
    },
    "application/vnd.sealed.xls": {
      source: "iana"
    },
    "application/vnd.sealedmedia.softseal.html": {
      source: "iana"
    },
    "application/vnd.sealedmedia.softseal.pdf": {
      source: "iana"
    },
    "application/vnd.seemail": {
      source: "iana",
      extensions: ["see"]
    },
    "application/vnd.sema": {
      source: "iana",
      extensions: ["sema"]
    },
    "application/vnd.semd": {
      source: "iana",
      extensions: ["semd"]
    },
    "application/vnd.semf": {
      source: "iana",
      extensions: ["semf"]
    },
    "application/vnd.shana.informed.formdata": {
      source: "iana",
      extensions: ["ifm"]
    },
    "application/vnd.shana.informed.formtemplate": {
      source: "iana",
      extensions: ["itp"]
    },
    "application/vnd.shana.informed.interchange": {
      source: "iana",
      extensions: ["iif"]
    },
    "application/vnd.shana.informed.package": {
      source: "iana",
      extensions: ["ipk"]
    },
    "application/vnd.simtech-mindmapper": {
      source: "iana",
      extensions: ["twd", "twds"]
    },
    "application/vnd.siren+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.smaf": {
      source: "iana",
      extensions: ["mmf"]
    },
    "application/vnd.smart.notebook": {
      source: "iana"
    },
    "application/vnd.smart.teacher": {
      source: "iana",
      extensions: ["teacher"]
    },
    "application/vnd.software602.filler.form+xml": {
      source: "iana"
    },
    "application/vnd.software602.filler.form-xml-zip": {
      source: "iana"
    },
    "application/vnd.solent.sdkm+xml": {
      source: "iana",
      extensions: ["sdkm", "sdkd"]
    },
    "application/vnd.spotfire.dxp": {
      source: "iana",
      extensions: ["dxp"]
    },
    "application/vnd.spotfire.sfs": {
      source: "iana",
      extensions: ["sfs"]
    },
    "application/vnd.sss-cod": {
      source: "iana"
    },
    "application/vnd.sss-dtf": {
      source: "iana"
    },
    "application/vnd.sss-ntf": {
      source: "iana"
    },
    "application/vnd.stardivision.calc": {
      source: "apache",
      extensions: ["sdc"]
    },
    "application/vnd.stardivision.draw": {
      source: "apache",
      extensions: ["sda"]
    },
    "application/vnd.stardivision.impress": {
      source: "apache",
      extensions: ["sdd"]
    },
    "application/vnd.stardivision.math": {
      source: "apache",
      extensions: ["smf"]
    },
    "application/vnd.stardivision.writer": {
      source: "apache",
      extensions: ["sdw", "vor"]
    },
    "application/vnd.stardivision.writer-global": {
      source: "apache",
      extensions: ["sgl"]
    },
    "application/vnd.stepmania.package": {
      source: "iana",
      extensions: ["smzip"]
    },
    "application/vnd.stepmania.stepchart": {
      source: "iana",
      extensions: ["sm"]
    },
    "application/vnd.street-stream": {
      source: "iana"
    },
    "application/vnd.sun.wadl+xml": {
      source: "iana"
    },
    "application/vnd.sun.xml.calc": {
      source: "apache",
      extensions: ["sxc"]
    },
    "application/vnd.sun.xml.calc.template": {
      source: "apache",
      extensions: ["stc"]
    },
    "application/vnd.sun.xml.draw": {
      source: "apache",
      extensions: ["sxd"]
    },
    "application/vnd.sun.xml.draw.template": {
      source: "apache",
      extensions: ["std"]
    },
    "application/vnd.sun.xml.impress": {
      source: "apache",
      extensions: ["sxi"]
    },
    "application/vnd.sun.xml.impress.template": {
      source: "apache",
      extensions: ["sti"]
    },
    "application/vnd.sun.xml.math": {
      source: "apache",
      extensions: ["sxm"]
    },
    "application/vnd.sun.xml.writer": {
      source: "apache",
      extensions: ["sxw"]
    },
    "application/vnd.sun.xml.writer.global": {
      source: "apache",
      extensions: ["sxg"]
    },
    "application/vnd.sun.xml.writer.template": {
      source: "apache",
      extensions: ["stw"]
    },
    "application/vnd.sus-calendar": {
      source: "iana",
      extensions: ["sus", "susp"]
    },
    "application/vnd.svd": {
      source: "iana",
      extensions: ["svd"]
    },
    "application/vnd.swiftview-ics": {
      source: "iana"
    },
    "application/vnd.symbian.install": {
      source: "apache",
      extensions: ["sis", "sisx"]
    },
    "application/vnd.syncml+xml": {
      source: "iana",
      extensions: ["xsm"]
    },
    "application/vnd.syncml.dm+wbxml": {
      source: "iana",
      extensions: ["bdm"]
    },
    "application/vnd.syncml.dm+xml": {
      source: "iana",
      extensions: ["xdm"]
    },
    "application/vnd.syncml.dm.notification": {
      source: "iana"
    },
    "application/vnd.syncml.dmddf+wbxml": {
      source: "iana"
    },
    "application/vnd.syncml.dmddf+xml": {
      source: "iana"
    },
    "application/vnd.syncml.dmtnds+wbxml": {
      source: "iana"
    },
    "application/vnd.syncml.dmtnds+xml": {
      source: "iana"
    },
    "application/vnd.syncml.ds.notification": {
      source: "iana"
    },
    "application/vnd.tao.intent-module-archive": {
      source: "iana",
      extensions: ["tao"]
    },
    "application/vnd.tcpdump.pcap": {
      source: "iana",
      extensions: ["pcap", "cap", "dmp"]
    },
    "application/vnd.tmd.mediaflex.api+xml": {
      source: "iana"
    },
    "application/vnd.tml": {
      source: "iana"
    },
    "application/vnd.tmobile-livetv": {
      source: "iana",
      extensions: ["tmo"]
    },
    "application/vnd.trid.tpt": {
      source: "iana",
      extensions: ["tpt"]
    },
    "application/vnd.triscape.mxs": {
      source: "iana",
      extensions: ["mxs"]
    },
    "application/vnd.trueapp": {
      source: "iana",
      extensions: ["tra"]
    },
    "application/vnd.truedoc": {
      source: "iana"
    },
    "application/vnd.ubisoft.webplayer": {
      source: "iana"
    },
    "application/vnd.ufdl": {
      source: "iana",
      extensions: ["ufd", "ufdl"]
    },
    "application/vnd.uiq.theme": {
      source: "iana",
      extensions: ["utz"]
    },
    "application/vnd.umajin": {
      source: "iana",
      extensions: ["umj"]
    },
    "application/vnd.unity": {
      source: "iana",
      extensions: ["unityweb"]
    },
    "application/vnd.uoml+xml": {
      source: "iana",
      extensions: ["uoml"]
    },
    "application/vnd.uplanet.alert": {
      source: "iana"
    },
    "application/vnd.uplanet.alert-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.bearer-choice": {
      source: "iana"
    },
    "application/vnd.uplanet.bearer-choice-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.cacheop": {
      source: "iana"
    },
    "application/vnd.uplanet.cacheop-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.channel": {
      source: "iana"
    },
    "application/vnd.uplanet.channel-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.list": {
      source: "iana"
    },
    "application/vnd.uplanet.list-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.listcmd": {
      source: "iana"
    },
    "application/vnd.uplanet.listcmd-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.signal": {
      source: "iana"
    },
    "application/vnd.uri-map": {
      source: "iana"
    },
    "application/vnd.valve.source.material": {
      source: "iana"
    },
    "application/vnd.vcx": {
      source: "iana",
      extensions: ["vcx"]
    },
    "application/vnd.vd-study": {
      source: "iana"
    },
    "application/vnd.vectorworks": {
      source: "iana"
    },
    "application/vnd.verimatrix.vcas": {
      source: "iana"
    },
    "application/vnd.vidsoft.vidconference": {
      source: "iana"
    },
    "application/vnd.visio": {
      source: "iana",
      extensions: ["vsd", "vst", "vss", "vsw"]
    },
    "application/vnd.visionary": {
      source: "iana",
      extensions: ["vis"]
    },
    "application/vnd.vividence.scriptfile": {
      source: "iana"
    },
    "application/vnd.vsf": {
      source: "iana",
      extensions: ["vsf"]
    },
    "application/vnd.wap.sic": {
      source: "iana"
    },
    "application/vnd.wap.slc": {
      source: "iana"
    },
    "application/vnd.wap.wbxml": {
      source: "iana",
      extensions: ["wbxml"]
    },
    "application/vnd.wap.wmlc": {
      source: "iana",
      extensions: ["wmlc"]
    },
    "application/vnd.wap.wmlscriptc": {
      source: "iana",
      extensions: ["wmlsc"]
    },
    "application/vnd.webturbo": {
      source: "iana",
      extensions: ["wtb"]
    },
    "application/vnd.wfa.p2p": {
      source: "iana"
    },
    "application/vnd.wfa.wsc": {
      source: "iana"
    },
    "application/vnd.windows.devicepairing": {
      source: "iana"
    },
    "application/vnd.wmc": {
      source: "iana"
    },
    "application/vnd.wmf.bootstrap": {
      source: "iana"
    },
    "application/vnd.wolfram.mathematica": {
      source: "iana"
    },
    "application/vnd.wolfram.mathematica.package": {
      source: "iana"
    },
    "application/vnd.wolfram.player": {
      source: "iana",
      extensions: ["nbp"]
    },
    "application/vnd.wordperfect": {
      source: "iana",
      extensions: ["wpd"]
    },
    "application/vnd.wqd": {
      source: "iana",
      extensions: ["wqd"]
    },
    "application/vnd.wrq-hp3000-labelled": {
      source: "iana"
    },
    "application/vnd.wt.stf": {
      source: "iana",
      extensions: ["stf"]
    },
    "application/vnd.wv.csp+wbxml": {
      source: "iana"
    },
    "application/vnd.wv.csp+xml": {
      source: "iana"
    },
    "application/vnd.wv.ssp+xml": {
      source: "iana"
    },
    "application/vnd.xacml+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.xara": {
      source: "iana",
      extensions: ["xar"]
    },
    "application/vnd.xfdl": {
      source: "iana",
      extensions: ["xfdl"]
    },
    "application/vnd.xfdl.webform": {
      source: "iana"
    },
    "application/vnd.xmi+xml": {
      source: "iana"
    },
    "application/vnd.xmpie.cpkg": {
      source: "iana"
    },
    "application/vnd.xmpie.dpkg": {
      source: "iana"
    },
    "application/vnd.xmpie.plan": {
      source: "iana"
    },
    "application/vnd.xmpie.ppkg": {
      source: "iana"
    },
    "application/vnd.xmpie.xlim": {
      source: "iana"
    },
    "application/vnd.yamaha.hv-dic": {
      source: "iana",
      extensions: ["hvd"]
    },
    "application/vnd.yamaha.hv-script": {
      source: "iana",
      extensions: ["hvs"]
    },
    "application/vnd.yamaha.hv-voice": {
      source: "iana",
      extensions: ["hvp"]
    },
    "application/vnd.yamaha.openscoreformat": {
      source: "iana",
      extensions: ["osf"]
    },
    "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
      source: "iana",
      extensions: ["osfpvg"]
    },
    "application/vnd.yamaha.remote-setup": {
      source: "iana"
    },
    "application/vnd.yamaha.smaf-audio": {
      source: "iana",
      extensions: ["saf"]
    },
    "application/vnd.yamaha.smaf-phrase": {
      source: "iana",
      extensions: ["spf"]
    },
    "application/vnd.yamaha.through-ngn": {
      source: "iana"
    },
    "application/vnd.yamaha.tunnel-udpencap": {
      source: "iana"
    },
    "application/vnd.yaoweme": {
      source: "iana"
    },
    "application/vnd.yellowriver-custom-menu": {
      source: "iana",
      extensions: ["cmp"]
    },
    "application/vnd.zul": {
      source: "iana",
      extensions: ["zir", "zirz"]
    },
    "application/vnd.zzazz.deck+xml": {
      source: "iana",
      extensions: ["zaz"]
    },
    "application/voicexml+xml": {
      source: "iana",
      extensions: ["vxml"]
    },
    "application/vq-rtcpxr": {
      source: "iana"
    },
    "application/watcherinfo+xml": {
      source: "iana"
    },
    "application/whoispp-query": {
      source: "iana"
    },
    "application/whoispp-response": {
      source: "iana"
    },
    "application/widget": {
      source: "iana",
      extensions: ["wgt"]
    },
    "application/winhlp": {
      source: "apache",
      extensions: ["hlp"]
    },
    "application/wita": {
      source: "iana"
    },
    "application/wordperfect5.1": {
      source: "iana"
    },
    "application/wsdl+xml": {
      source: "iana",
      extensions: ["wsdl"]
    },
    "application/wspolicy+xml": {
      source: "iana",
      extensions: ["wspolicy"]
    },
    "application/x-7z-compressed": {
      source: "apache",
      compressible: false,
      extensions: ["7z"]
    },
    "application/x-abiword": {
      source: "apache",
      extensions: ["abw"]
    },
    "application/x-ace-compressed": {
      source: "apache",
      extensions: ["ace"]
    },
    "application/x-amf": {
      source: "apache"
    },
    "application/x-apple-diskimage": {
      source: "apache",
      extensions: ["dmg"]
    },
    "application/x-authorware-bin": {
      source: "apache",
      extensions: ["aab", "x32", "u32", "vox"]
    },
    "application/x-authorware-map": {
      source: "apache",
      extensions: ["aam"]
    },
    "application/x-authorware-seg": {
      source: "apache",
      extensions: ["aas"]
    },
    "application/x-bcpio": {
      source: "apache",
      extensions: ["bcpio"]
    },
    "application/x-bdoc": {
      compressible: false,
      extensions: ["bdoc"]
    },
    "application/x-bittorrent": {
      source: "apache",
      extensions: ["torrent"]
    },
    "application/x-blorb": {
      source: "apache",
      extensions: ["blb", "blorb"]
    },
    "application/x-bzip": {
      source: "apache",
      compressible: false,
      extensions: ["bz"]
    },
    "application/x-bzip2": {
      source: "apache",
      compressible: false,
      extensions: ["bz2", "boz"]
    },
    "application/x-cbr": {
      source: "apache",
      extensions: ["cbr", "cba", "cbt", "cbz", "cb7"]
    },
    "application/x-cdlink": {
      source: "apache",
      extensions: ["vcd"]
    },
    "application/x-cfs-compressed": {
      source: "apache",
      extensions: ["cfs"]
    },
    "application/x-chat": {
      source: "apache",
      extensions: ["chat"]
    },
    "application/x-chess-pgn": {
      source: "apache",
      extensions: ["pgn"]
    },
    "application/x-chrome-extension": {
      extensions: ["crx"]
    },
    "application/x-cocoa": {
      source: "nginx",
      extensions: ["cco"]
    },
    "application/x-compress": {
      source: "apache"
    },
    "application/x-conference": {
      source: "apache",
      extensions: ["nsc"]
    },
    "application/x-cpio": {
      source: "apache",
      extensions: ["cpio"]
    },
    "application/x-csh": {
      source: "apache",
      extensions: ["csh"]
    },
    "application/x-deb": {
      compressible: false
    },
    "application/x-debian-package": {
      source: "apache",
      extensions: ["deb", "udeb"]
    },
    "application/x-dgc-compressed": {
      source: "apache",
      extensions: ["dgc"]
    },
    "application/x-director": {
      source: "apache",
      extensions: ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"]
    },
    "application/x-doom": {
      source: "apache",
      extensions: ["wad"]
    },
    "application/x-dtbncx+xml": {
      source: "apache",
      extensions: ["ncx"]
    },
    "application/x-dtbook+xml": {
      source: "apache",
      extensions: ["dtb"]
    },
    "application/x-dtbresource+xml": {
      source: "apache",
      extensions: ["res"]
    },
    "application/x-dvi": {
      source: "apache",
      compressible: false,
      extensions: ["dvi"]
    },
    "application/x-envoy": {
      source: "apache",
      extensions: ["evy"]
    },
    "application/x-eva": {
      source: "apache",
      extensions: ["eva"]
    },
    "application/x-font-bdf": {
      source: "apache",
      extensions: ["bdf"]
    },
    "application/x-font-dos": {
      source: "apache"
    },
    "application/x-font-framemaker": {
      source: "apache"
    },
    "application/x-font-ghostscript": {
      source: "apache",
      extensions: ["gsf"]
    },
    "application/x-font-libgrx": {
      source: "apache"
    },
    "application/x-font-linux-psf": {
      source: "apache",
      extensions: ["psf"]
    },
    "application/x-font-otf": {
      source: "apache",
      compressible: true,
      extensions: ["otf"]
    },
    "application/x-font-pcf": {
      source: "apache",
      extensions: ["pcf"]
    },
    "application/x-font-snf": {
      source: "apache",
      extensions: ["snf"]
    },
    "application/x-font-speedo": {
      source: "apache"
    },
    "application/x-font-sunos-news": {
      source: "apache"
    },
    "application/x-font-ttf": {
      source: "apache",
      compressible: true,
      extensions: ["ttf", "ttc"]
    },
    "application/x-font-type1": {
      source: "apache",
      extensions: ["pfa", "pfb", "pfm", "afm"]
    },
    "application/x-font-vfont": {
      source: "apache"
    },
    "application/x-freearc": {
      source: "apache",
      extensions: ["arc"]
    },
    "application/x-futuresplash": {
      source: "apache",
      extensions: ["spl"]
    },
    "application/x-gca-compressed": {
      source: "apache",
      extensions: ["gca"]
    },
    "application/x-glulx": {
      source: "apache",
      extensions: ["ulx"]
    },
    "application/x-gnumeric": {
      source: "apache",
      extensions: ["gnumeric"]
    },
    "application/x-gramps-xml": {
      source: "apache",
      extensions: ["gramps"]
    },
    "application/x-gtar": {
      source: "apache",
      extensions: ["gtar"]
    },
    "application/x-gzip": {
      source: "apache"
    },
    "application/x-hdf": {
      source: "apache",
      extensions: ["hdf"]
    },
    "application/x-httpd-php": {
      compressible: true,
      extensions: ["php"]
    },
    "application/x-install-instructions": {
      source: "apache",
      extensions: ["install"]
    },
    "application/x-iso9660-image": {
      source: "apache",
      extensions: ["iso"]
    },
    "application/x-java-archive-diff": {
      source: "nginx",
      extensions: ["jardiff"]
    },
    "application/x-java-jnlp-file": {
      source: "apache",
      compressible: false,
      extensions: ["jnlp"]
    },
    "application/x-javascript": {
      compressible: true
    },
    "application/x-latex": {
      source: "apache",
      compressible: false,
      extensions: ["latex"]
    },
    "application/x-lua-bytecode": {
      extensions: ["luac"]
    },
    "application/x-lzh-compressed": {
      source: "apache",
      extensions: ["lzh", "lha"]
    },
    "application/x-makeself": {
      source: "nginx",
      extensions: ["run"]
    },
    "application/x-mie": {
      source: "apache",
      extensions: ["mie"]
    },
    "application/x-mobipocket-ebook": {
      source: "apache",
      extensions: ["prc", "mobi"]
    },
    "application/x-mpegurl": {
      compressible: false
    },
    "application/x-ms-application": {
      source: "apache",
      extensions: ["application"]
    },
    "application/x-ms-shortcut": {
      source: "apache",
      extensions: ["lnk"]
    },
    "application/x-ms-wmd": {
      source: "apache",
      extensions: ["wmd"]
    },
    "application/x-ms-wmz": {
      source: "apache",
      extensions: ["wmz"]
    },
    "application/x-ms-xbap": {
      source: "apache",
      extensions: ["xbap"]
    },
    "application/x-msaccess": {
      source: "apache",
      extensions: ["mdb"]
    },
    "application/x-msbinder": {
      source: "apache",
      extensions: ["obd"]
    },
    "application/x-mscardfile": {
      source: "apache",
      extensions: ["crd"]
    },
    "application/x-msclip": {
      source: "apache",
      extensions: ["clp"]
    },
    "application/x-msdos-program": {
      extensions: ["exe"]
    },
    "application/x-msdownload": {
      source: "apache",
      extensions: ["exe", "dll", "com", "bat", "msi"]
    },
    "application/x-msmediaview": {
      source: "apache",
      extensions: ["mvb", "m13", "m14"]
    },
    "application/x-msmetafile": {
      source: "apache",
      extensions: ["wmf", "wmz", "emf", "emz"]
    },
    "application/x-msmoney": {
      source: "apache",
      extensions: ["mny"]
    },
    "application/x-mspublisher": {
      source: "apache",
      extensions: ["pub"]
    },
    "application/x-msschedule": {
      source: "apache",
      extensions: ["scd"]
    },
    "application/x-msterminal": {
      source: "apache",
      extensions: ["trm"]
    },
    "application/x-mswrite": {
      source: "apache",
      extensions: ["wri"]
    },
    "application/x-netcdf": {
      source: "apache",
      extensions: ["nc", "cdf"]
    },
    "application/x-ns-proxy-autoconfig": {
      compressible: true,
      extensions: ["pac"]
    },
    "application/x-nzb": {
      source: "apache",
      extensions: ["nzb"]
    },
    "application/x-perl": {
      source: "nginx",
      extensions: ["pl", "pm"]
    },
    "application/x-pilot": {
      source: "nginx",
      extensions: ["prc", "pdb"]
    },
    "application/x-pkcs12": {
      source: "apache",
      compressible: false,
      extensions: ["p12", "pfx"]
    },
    "application/x-pkcs7-certificates": {
      source: "apache",
      extensions: ["p7b", "spc"]
    },
    "application/x-pkcs7-certreqresp": {
      source: "apache",
      extensions: ["p7r"]
    },
    "application/x-rar-compressed": {
      source: "apache",
      compressible: false,
      extensions: ["rar"]
    },
    "application/x-redhat-package-manager": {
      source: "nginx",
      extensions: ["rpm"]
    },
    "application/x-research-info-systems": {
      source: "apache",
      extensions: ["ris"]
    },
    "application/x-sea": {
      source: "nginx",
      extensions: ["sea"]
    },
    "application/x-sh": {
      source: "apache",
      compressible: true,
      extensions: ["sh"]
    },
    "application/x-shar": {
      source: "apache",
      extensions: ["shar"]
    },
    "application/x-shockwave-flash": {
      source: "apache",
      compressible: false,
      extensions: ["swf"]
    },
    "application/x-silverlight-app": {
      source: "apache",
      extensions: ["xap"]
    },
    "application/x-sql": {
      source: "apache",
      extensions: ["sql"]
    },
    "application/x-stuffit": {
      source: "apache",
      compressible: false,
      extensions: ["sit"]
    },
    "application/x-stuffitx": {
      source: "apache",
      extensions: ["sitx"]
    },
    "application/x-subrip": {
      source: "apache",
      extensions: ["srt"]
    },
    "application/x-sv4cpio": {
      source: "apache",
      extensions: ["sv4cpio"]
    },
    "application/x-sv4crc": {
      source: "apache",
      extensions: ["sv4crc"]
    },
    "application/x-t3vm-image": {
      source: "apache",
      extensions: ["t3"]
    },
    "application/x-tads": {
      source: "apache",
      extensions: ["gam"]
    },
    "application/x-tar": {
      source: "apache",
      compressible: true,
      extensions: ["tar"]
    },
    "application/x-tcl": {
      source: "apache",
      extensions: ["tcl", "tk"]
    },
    "application/x-tex": {
      source: "apache",
      extensions: ["tex"]
    },
    "application/x-tex-tfm": {
      source: "apache",
      extensions: ["tfm"]
    },
    "application/x-texinfo": {
      source: "apache",
      extensions: ["texinfo", "texi"]
    },
    "application/x-tgif": {
      source: "apache",
      extensions: ["obj"]
    },
    "application/x-ustar": {
      source: "apache",
      extensions: ["ustar"]
    },
    "application/x-wais-source": {
      source: "apache",
      extensions: ["src"]
    },
    "application/x-web-app-manifest+json": {
      compressible: true,
      extensions: ["webapp"]
    },
    "application/x-www-form-urlencoded": {
      source: "iana",
      compressible: true
    },
    "application/x-x509-ca-cert": {
      source: "apache",
      extensions: ["der", "crt", "pem"]
    },
    "application/x-xfig": {
      source: "apache",
      extensions: ["fig"]
    },
    "application/x-xliff+xml": {
      source: "apache",
      extensions: ["xlf"]
    },
    "application/x-xpinstall": {
      source: "apache",
      compressible: false,
      extensions: ["xpi"]
    },
    "application/x-xz": {
      source: "apache",
      extensions: ["xz"]
    },
    "application/x-zmachine": {
      source: "apache",
      extensions: ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"]
    },
    "application/x400-bp": {
      source: "iana"
    },
    "application/xacml+xml": {
      source: "iana"
    },
    "application/xaml+xml": {
      source: "apache",
      extensions: ["xaml"]
    },
    "application/xcap-att+xml": {
      source: "iana"
    },
    "application/xcap-caps+xml": {
      source: "iana"
    },
    "application/xcap-diff+xml": {
      source: "iana",
      extensions: ["xdf"]
    },
    "application/xcap-el+xml": {
      source: "iana"
    },
    "application/xcap-error+xml": {
      source: "iana"
    },
    "application/xcap-ns+xml": {
      source: "iana"
    },
    "application/xcon-conference-info+xml": {
      source: "iana"
    },
    "application/xcon-conference-info-diff+xml": {
      source: "iana"
    },
    "application/xenc+xml": {
      source: "iana",
      extensions: ["xenc"]
    },
    "application/xhtml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xhtml", "xht"]
    },
    "application/xhtml-voice+xml": {
      source: "apache"
    },
    "application/xml": {
      source: "iana",
      compressible: true,
      extensions: ["xml", "xsl", "xsd"]
    },
    "application/xml-dtd": {
      source: "iana",
      compressible: true,
      extensions: ["dtd"]
    },
    "application/xml-external-parsed-entity": {
      source: "iana"
    },
    "application/xml-patch+xml": {
      source: "iana"
    },
    "application/xmpp+xml": {
      source: "iana"
    },
    "application/xop+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xop"]
    },
    "application/xproc+xml": {
      source: "apache",
      extensions: ["xpl"]
    },
    "application/xslt+xml": {
      source: "iana",
      extensions: ["xslt"]
    },
    "application/xspf+xml": {
      source: "apache",
      extensions: ["xspf"]
    },
    "application/xv+xml": {
      source: "iana",
      extensions: ["mxml", "xhvml", "xvml", "xvm"]
    },
    "application/yang": {
      source: "iana",
      extensions: ["yang"]
    },
    "application/yin+xml": {
      source: "iana",
      extensions: ["yin"]
    },
    "application/zip": {
      source: "iana",
      compressible: false,
      extensions: ["zip"]
    },
    "application/zlib": {
      source: "iana"
    },
    "audio/1d-interleaved-parityfec": {
      source: "iana"
    },
    "audio/32kadpcm": {
      source: "iana"
    },
    "audio/3gpp": {
      source: "iana"
    },
    "audio/3gpp2": {
      source: "iana"
    },
    "audio/ac3": {
      source: "iana"
    },
    "audio/adpcm": {
      source: "apache",
      extensions: ["adp"]
    },
    "audio/amr": {
      source: "iana"
    },
    "audio/amr-wb": {
      source: "iana"
    },
    "audio/amr-wb+": {
      source: "iana"
    },
    "audio/aptx": {
      source: "iana"
    },
    "audio/asc": {
      source: "iana"
    },
    "audio/atrac-advanced-lossless": {
      source: "iana"
    },
    "audio/atrac-x": {
      source: "iana"
    },
    "audio/atrac3": {
      source: "iana"
    },
    "audio/basic": {
      source: "iana",
      compressible: false,
      extensions: ["au", "snd"]
    },
    "audio/bv16": {
      source: "iana"
    },
    "audio/bv32": {
      source: "iana"
    },
    "audio/clearmode": {
      source: "iana"
    },
    "audio/cn": {
      source: "iana"
    },
    "audio/dat12": {
      source: "iana"
    },
    "audio/dls": {
      source: "iana"
    },
    "audio/dsr-es201108": {
      source: "iana"
    },
    "audio/dsr-es202050": {
      source: "iana"
    },
    "audio/dsr-es202211": {
      source: "iana"
    },
    "audio/dsr-es202212": {
      source: "iana"
    },
    "audio/dv": {
      source: "iana"
    },
    "audio/dvi4": {
      source: "iana"
    },
    "audio/eac3": {
      source: "iana"
    },
    "audio/encaprtp": {
      source: "iana"
    },
    "audio/evrc": {
      source: "iana"
    },
    "audio/evrc-qcp": {
      source: "iana"
    },
    "audio/evrc0": {
      source: "iana"
    },
    "audio/evrc1": {
      source: "iana"
    },
    "audio/evrcb": {
      source: "iana"
    },
    "audio/evrcb0": {
      source: "iana"
    },
    "audio/evrcb1": {
      source: "iana"
    },
    "audio/evrcnw": {
      source: "iana"
    },
    "audio/evrcnw0": {
      source: "iana"
    },
    "audio/evrcnw1": {
      source: "iana"
    },
    "audio/evrcwb": {
      source: "iana"
    },
    "audio/evrcwb0": {
      source: "iana"
    },
    "audio/evrcwb1": {
      source: "iana"
    },
    "audio/evs": {
      source: "iana"
    },
    "audio/fwdred": {
      source: "iana"
    },
    "audio/g711-0": {
      source: "iana"
    },
    "audio/g719": {
      source: "iana"
    },
    "audio/g722": {
      source: "iana"
    },
    "audio/g7221": {
      source: "iana"
    },
    "audio/g723": {
      source: "iana"
    },
    "audio/g726-16": {
      source: "iana"
    },
    "audio/g726-24": {
      source: "iana"
    },
    "audio/g726-32": {
      source: "iana"
    },
    "audio/g726-40": {
      source: "iana"
    },
    "audio/g728": {
      source: "iana"
    },
    "audio/g729": {
      source: "iana"
    },
    "audio/g7291": {
      source: "iana"
    },
    "audio/g729d": {
      source: "iana"
    },
    "audio/g729e": {
      source: "iana"
    },
    "audio/gsm": {
      source: "iana"
    },
    "audio/gsm-efr": {
      source: "iana"
    },
    "audio/gsm-hr-08": {
      source: "iana"
    },
    "audio/ilbc": {
      source: "iana"
    },
    "audio/ip-mr_v2.5": {
      source: "iana"
    },
    "audio/isac": {
      source: "apache"
    },
    "audio/l16": {
      source: "iana"
    },
    "audio/l20": {
      source: "iana"
    },
    "audio/l24": {
      source: "iana",
      compressible: false
    },
    "audio/l8": {
      source: "iana"
    },
    "audio/lpc": {
      source: "iana"
    },
    "audio/midi": {
      source: "apache",
      extensions: ["mid", "midi", "kar", "rmi"]
    },
    "audio/mobile-xmf": {
      source: "iana"
    },
    "audio/mp4": {
      source: "iana",
      compressible: false,
      extensions: ["mp4a", "m4a"]
    },
    "audio/mp4a-latm": {
      source: "iana"
    },
    "audio/mpa": {
      source: "iana"
    },
    "audio/mpa-robust": {
      source: "iana"
    },
    "audio/mpeg": {
      source: "iana",
      compressible: false,
      extensions: ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"]
    },
    "audio/mpeg4-generic": {
      source: "iana"
    },
    "audio/musepack": {
      source: "apache"
    },
    "audio/ogg": {
      source: "iana",
      compressible: false,
      extensions: ["oga", "ogg", "spx"]
    },
    "audio/opus": {
      source: "iana"
    },
    "audio/parityfec": {
      source: "iana"
    },
    "audio/pcma": {
      source: "iana"
    },
    "audio/pcma-wb": {
      source: "iana"
    },
    "audio/pcmu": {
      source: "iana"
    },
    "audio/pcmu-wb": {
      source: "iana"
    },
    "audio/prs.sid": {
      source: "iana"
    },
    "audio/qcelp": {
      source: "iana"
    },
    "audio/raptorfec": {
      source: "iana"
    },
    "audio/red": {
      source: "iana"
    },
    "audio/rtp-enc-aescm128": {
      source: "iana"
    },
    "audio/rtp-midi": {
      source: "iana"
    },
    "audio/rtploopback": {
      source: "iana"
    },
    "audio/rtx": {
      source: "iana"
    },
    "audio/s3m": {
      source: "apache",
      extensions: ["s3m"]
    },
    "audio/silk": {
      source: "apache",
      extensions: ["sil"]
    },
    "audio/smv": {
      source: "iana"
    },
    "audio/smv-qcp": {
      source: "iana"
    },
    "audio/smv0": {
      source: "iana"
    },
    "audio/sp-midi": {
      source: "iana"
    },
    "audio/speex": {
      source: "iana"
    },
    "audio/t140c": {
      source: "iana"
    },
    "audio/t38": {
      source: "iana"
    },
    "audio/telephone-event": {
      source: "iana"
    },
    "audio/tone": {
      source: "iana"
    },
    "audio/uemclip": {
      source: "iana"
    },
    "audio/ulpfec": {
      source: "iana"
    },
    "audio/vdvi": {
      source: "iana"
    },
    "audio/vmr-wb": {
      source: "iana"
    },
    "audio/vnd.3gpp.iufp": {
      source: "iana"
    },
    "audio/vnd.4sb": {
      source: "iana"
    },
    "audio/vnd.audiokoz": {
      source: "iana"
    },
    "audio/vnd.celp": {
      source: "iana"
    },
    "audio/vnd.cisco.nse": {
      source: "iana"
    },
    "audio/vnd.cmles.radio-events": {
      source: "iana"
    },
    "audio/vnd.cns.anp1": {
      source: "iana"
    },
    "audio/vnd.cns.inf1": {
      source: "iana"
    },
    "audio/vnd.dece.audio": {
      source: "iana",
      extensions: ["uva", "uvva"]
    },
    "audio/vnd.digital-winds": {
      source: "iana",
      extensions: ["eol"]
    },
    "audio/vnd.dlna.adts": {
      source: "iana"
    },
    "audio/vnd.dolby.heaac.1": {
      source: "iana"
    },
    "audio/vnd.dolby.heaac.2": {
      source: "iana"
    },
    "audio/vnd.dolby.mlp": {
      source: "iana"
    },
    "audio/vnd.dolby.mps": {
      source: "iana"
    },
    "audio/vnd.dolby.pl2": {
      source: "iana"
    },
    "audio/vnd.dolby.pl2x": {
      source: "iana"
    },
    "audio/vnd.dolby.pl2z": {
      source: "iana"
    },
    "audio/vnd.dolby.pulse.1": {
      source: "iana"
    },
    "audio/vnd.dra": {
      source: "iana",
      extensions: ["dra"]
    },
    "audio/vnd.dts": {
      source: "iana",
      extensions: ["dts"]
    },
    "audio/vnd.dts.hd": {
      source: "iana",
      extensions: ["dtshd"]
    },
    "audio/vnd.dvb.file": {
      source: "iana"
    },
    "audio/vnd.everad.plj": {
      source: "iana"
    },
    "audio/vnd.hns.audio": {
      source: "iana"
    },
    "audio/vnd.lucent.voice": {
      source: "iana",
      extensions: ["lvp"]
    },
    "audio/vnd.ms-playready.media.pya": {
      source: "iana",
      extensions: ["pya"]
    },
    "audio/vnd.nokia.mobile-xmf": {
      source: "iana"
    },
    "audio/vnd.nortel.vbk": {
      source: "iana"
    },
    "audio/vnd.nuera.ecelp4800": {
      source: "iana",
      extensions: ["ecelp4800"]
    },
    "audio/vnd.nuera.ecelp7470": {
      source: "iana",
      extensions: ["ecelp7470"]
    },
    "audio/vnd.nuera.ecelp9600": {
      source: "iana",
      extensions: ["ecelp9600"]
    },
    "audio/vnd.octel.sbc": {
      source: "iana"
    },
    "audio/vnd.qcelp": {
      source: "iana"
    },
    "audio/vnd.rhetorex.32kadpcm": {
      source: "iana"
    },
    "audio/vnd.rip": {
      source: "iana",
      extensions: ["rip"]
    },
    "audio/vnd.rn-realaudio": {
      compressible: false
    },
    "audio/vnd.sealedmedia.softseal.mpeg": {
      source: "iana"
    },
    "audio/vnd.vmx.cvsd": {
      source: "iana"
    },
    "audio/vnd.wave": {
      compressible: false
    },
    "audio/vorbis": {
      source: "iana",
      compressible: false
    },
    "audio/vorbis-config": {
      source: "iana"
    },
    "audio/wav": {
      compressible: false,
      extensions: ["wav"]
    },
    "audio/wave": {
      compressible: false,
      extensions: ["wav"]
    },
    "audio/webm": {
      source: "apache",
      compressible: false,
      extensions: ["weba"]
    },
    "audio/x-aac": {
      source: "apache",
      compressible: false,
      extensions: ["aac"]
    },
    "audio/x-aiff": {
      source: "apache",
      extensions: ["aif", "aiff", "aifc"]
    },
    "audio/x-caf": {
      source: "apache",
      compressible: false,
      extensions: ["caf"]
    },
    "audio/x-flac": {
      source: "apache",
      extensions: ["flac"]
    },
    "audio/x-m4a": {
      source: "nginx",
      extensions: ["m4a"]
    },
    "audio/x-matroska": {
      source: "apache",
      extensions: ["mka"]
    },
    "audio/x-mpegurl": {
      source: "apache",
      extensions: ["m3u"]
    },
    "audio/x-ms-wax": {
      source: "apache",
      extensions: ["wax"]
    },
    "audio/x-ms-wma": {
      source: "apache",
      extensions: ["wma"]
    },
    "audio/x-pn-realaudio": {
      source: "apache",
      extensions: ["ram", "ra"]
    },
    "audio/x-pn-realaudio-plugin": {
      source: "apache",
      extensions: ["rmp"]
    },
    "audio/x-realaudio": {
      source: "nginx",
      extensions: ["ra"]
    },
    "audio/x-tta": {
      source: "apache"
    },
    "audio/x-wav": {
      source: "apache",
      extensions: ["wav"]
    },
    "audio/xm": {
      source: "apache",
      extensions: ["xm"]
    },
    "chemical/x-cdx": {
      source: "apache",
      extensions: ["cdx"]
    },
    "chemical/x-cif": {
      source: "apache",
      extensions: ["cif"]
    },
    "chemical/x-cmdf": {
      source: "apache",
      extensions: ["cmdf"]
    },
    "chemical/x-cml": {
      source: "apache",
      extensions: ["cml"]
    },
    "chemical/x-csml": {
      source: "apache",
      extensions: ["csml"]
    },
    "chemical/x-pdb": {
      source: "apache"
    },
    "chemical/x-xyz": {
      source: "apache",
      extensions: ["xyz"]
    },
    "font/opentype": {
      compressible: true,
      extensions: ["otf"]
    },
    "image/bmp": {
      source: "apache",
      compressible: true,
      extensions: ["bmp"]
    },
    "image/cgm": {
      source: "iana",
      extensions: ["cgm"]
    },
    "image/fits": {
      source: "iana"
    },
    "image/g3fax": {
      source: "iana",
      extensions: ["g3"]
    },
    "image/gif": {
      source: "iana",
      compressible: false,
      extensions: ["gif"]
    },
    "image/ief": {
      source: "iana",
      extensions: ["ief"]
    },
    "image/jp2": {
      source: "iana"
    },
    "image/jpeg": {
      source: "iana",
      compressible: false,
      extensions: ["jpeg", "jpg", "jpe"]
    },
    "image/jpm": {
      source: "iana"
    },
    "image/jpx": {
      source: "iana"
    },
    "image/ktx": {
      source: "iana",
      extensions: ["ktx"]
    },
    "image/naplps": {
      source: "iana"
    },
    "image/pjpeg": {
      compressible: false
    },
    "image/png": {
      source: "iana",
      compressible: false,
      extensions: ["png"]
    },
    "image/prs.btif": {
      source: "iana",
      extensions: ["btif"]
    },
    "image/prs.pti": {
      source: "iana"
    },
    "image/pwg-raster": {
      source: "iana"
    },
    "image/sgi": {
      source: "apache",
      extensions: ["sgi"]
    },
    "image/svg+xml": {
      source: "iana",
      compressible: true,
      extensions: ["svg", "svgz"]
    },
    "image/t38": {
      source: "iana"
    },
    "image/tiff": {
      source: "iana",
      compressible: false,
      extensions: ["tiff", "tif"]
    },
    "image/tiff-fx": {
      source: "iana"
    },
    "image/vnd.adobe.photoshop": {
      source: "iana",
      compressible: true,
      extensions: ["psd"]
    },
    "image/vnd.airzip.accelerator.azv": {
      source: "iana"
    },
    "image/vnd.cns.inf2": {
      source: "iana"
    },
    "image/vnd.dece.graphic": {
      source: "iana",
      extensions: ["uvi", "uvvi", "uvg", "uvvg"]
    },
    "image/vnd.djvu": {
      source: "iana",
      extensions: ["djvu", "djv"]
    },
    "image/vnd.dvb.subtitle": {
      source: "iana",
      extensions: ["sub"]
    },
    "image/vnd.dwg": {
      source: "iana",
      extensions: ["dwg"]
    },
    "image/vnd.dxf": {
      source: "iana",
      extensions: ["dxf"]
    },
    "image/vnd.fastbidsheet": {
      source: "iana",
      extensions: ["fbs"]
    },
    "image/vnd.fpx": {
      source: "iana",
      extensions: ["fpx"]
    },
    "image/vnd.fst": {
      source: "iana",
      extensions: ["fst"]
    },
    "image/vnd.fujixerox.edmics-mmr": {
      source: "iana",
      extensions: ["mmr"]
    },
    "image/vnd.fujixerox.edmics-rlc": {
      source: "iana",
      extensions: ["rlc"]
    },
    "image/vnd.globalgraphics.pgb": {
      source: "iana"
    },
    "image/vnd.microsoft.icon": {
      source: "iana"
    },
    "image/vnd.mix": {
      source: "iana"
    },
    "image/vnd.mozilla.apng": {
      source: "iana"
    },
    "image/vnd.ms-modi": {
      source: "iana",
      extensions: ["mdi"]
    },
    "image/vnd.ms-photo": {
      source: "apache",
      extensions: ["wdp"]
    },
    "image/vnd.net-fpx": {
      source: "iana",
      extensions: ["npx"]
    },
    "image/vnd.radiance": {
      source: "iana"
    },
    "image/vnd.sealed.png": {
      source: "iana"
    },
    "image/vnd.sealedmedia.softseal.gif": {
      source: "iana"
    },
    "image/vnd.sealedmedia.softseal.jpg": {
      source: "iana"
    },
    "image/vnd.svf": {
      source: "iana"
    },
    "image/vnd.tencent.tap": {
      source: "iana"
    },
    "image/vnd.valve.source.texture": {
      source: "iana"
    },
    "image/vnd.wap.wbmp": {
      source: "iana",
      extensions: ["wbmp"]
    },
    "image/vnd.xiff": {
      source: "iana",
      extensions: ["xif"]
    },
    "image/vnd.zbrush.pcx": {
      source: "iana"
    },
    "image/webp": {
      source: "apache",
      extensions: ["webp"]
    },
    "image/x-3ds": {
      source: "apache",
      extensions: ["3ds"]
    },
    "image/x-cmu-raster": {
      source: "apache",
      extensions: ["ras"]
    },
    "image/x-cmx": {
      source: "apache",
      extensions: ["cmx"]
    },
    "image/x-freehand": {
      source: "apache",
      extensions: ["fh", "fhc", "fh4", "fh5", "fh7"]
    },
    "image/x-icon": {
      source: "apache",
      compressible: true,
      extensions: ["ico"]
    },
    "image/x-jng": {
      source: "nginx",
      extensions: ["jng"]
    },
    "image/x-mrsid-image": {
      source: "apache",
      extensions: ["sid"]
    },
    "image/x-ms-bmp": {
      source: "nginx",
      compressible: true,
      extensions: ["bmp"]
    },
    "image/x-pcx": {
      source: "apache",
      extensions: ["pcx"]
    },
    "image/x-pict": {
      source: "apache",
      extensions: ["pic", "pct"]
    },
    "image/x-portable-anymap": {
      source: "apache",
      extensions: ["pnm"]
    },
    "image/x-portable-bitmap": {
      source: "apache",
      extensions: ["pbm"]
    },
    "image/x-portable-graymap": {
      source: "apache",
      extensions: ["pgm"]
    },
    "image/x-portable-pixmap": {
      source: "apache",
      extensions: ["ppm"]
    },
    "image/x-rgb": {
      source: "apache",
      extensions: ["rgb"]
    },
    "image/x-tga": {
      source: "apache",
      extensions: ["tga"]
    },
    "image/x-xbitmap": {
      source: "apache",
      extensions: ["xbm"]
    },
    "image/x-xcf": {
      compressible: false
    },
    "image/x-xpixmap": {
      source: "apache",
      extensions: ["xpm"]
    },
    "image/x-xwindowdump": {
      source: "apache",
      extensions: ["xwd"]
    },
    "message/cpim": {
      source: "iana"
    },
    "message/delivery-status": {
      source: "iana"
    },
    "message/disposition-notification": {
      source: "iana"
    },
    "message/external-body": {
      source: "iana"
    },
    "message/feedback-report": {
      source: "iana"
    },
    "message/global": {
      source: "iana"
    },
    "message/global-delivery-status": {
      source: "iana"
    },
    "message/global-disposition-notification": {
      source: "iana"
    },
    "message/global-headers": {
      source: "iana"
    },
    "message/http": {
      source: "iana",
      compressible: false
    },
    "message/imdn+xml": {
      source: "iana",
      compressible: true
    },
    "message/news": {
      source: "iana"
    },
    "message/partial": {
      source: "iana",
      compressible: false
    },
    "message/rfc822": {
      source: "iana",
      compressible: true,
      extensions: ["eml", "mime"]
    },
    "message/s-http": {
      source: "iana"
    },
    "message/sip": {
      source: "iana"
    },
    "message/sipfrag": {
      source: "iana"
    },
    "message/tracking-status": {
      source: "iana"
    },
    "message/vnd.si.simp": {
      source: "iana"
    },
    "message/vnd.wfa.wsc": {
      source: "iana"
    },
    "model/iges": {
      source: "iana",
      compressible: false,
      extensions: ["igs", "iges"]
    },
    "model/mesh": {
      source: "iana",
      compressible: false,
      extensions: ["msh", "mesh", "silo"]
    },
    "model/vnd.collada+xml": {
      source: "iana",
      extensions: ["dae"]
    },
    "model/vnd.dwf": {
      source: "iana",
      extensions: ["dwf"]
    },
    "model/vnd.flatland.3dml": {
      source: "iana"
    },
    "model/vnd.gdl": {
      source: "iana",
      extensions: ["gdl"]
    },
    "model/vnd.gs-gdl": {
      source: "apache"
    },
    "model/vnd.gs.gdl": {
      source: "iana"
    },
    "model/vnd.gtw": {
      source: "iana",
      extensions: ["gtw"]
    },
    "model/vnd.moml+xml": {
      source: "iana"
    },
    "model/vnd.mts": {
      source: "iana",
      extensions: ["mts"]
    },
    "model/vnd.opengex": {
      source: "iana"
    },
    "model/vnd.parasolid.transmit.binary": {
      source: "iana"
    },
    "model/vnd.parasolid.transmit.text": {
      source: "iana"
    },
    "model/vnd.valve.source.compiled-map": {
      source: "iana"
    },
    "model/vnd.vtu": {
      source: "iana",
      extensions: ["vtu"]
    },
    "model/vrml": {
      source: "iana",
      compressible: false,
      extensions: ["wrl", "vrml"]
    },
    "model/x3d+binary": {
      source: "apache",
      compressible: false,
      extensions: ["x3db", "x3dbz"]
    },
    "model/x3d+fastinfoset": {
      source: "iana"
    },
    "model/x3d+vrml": {
      source: "apache",
      compressible: false,
      extensions: ["x3dv", "x3dvz"]
    },
    "model/x3d+xml": {
      source: "iana",
      compressible: true,
      extensions: ["x3d", "x3dz"]
    },
    "model/x3d-vrml": {
      source: "iana"
    },
    "multipart/alternative": {
      source: "iana",
      compressible: false
    },
    "multipart/appledouble": {
      source: "iana"
    },
    "multipart/byteranges": {
      source: "iana"
    },
    "multipart/digest": {
      source: "iana"
    },
    "multipart/encrypted": {
      source: "iana",
      compressible: false
    },
    "multipart/form-data": {
      source: "iana",
      compressible: false
    },
    "multipart/header-set": {
      source: "iana"
    },
    "multipart/mixed": {
      source: "iana",
      compressible: false
    },
    "multipart/parallel": {
      source: "iana"
    },
    "multipart/related": {
      source: "iana",
      compressible: false
    },
    "multipart/report": {
      source: "iana"
    },
    "multipart/signed": {
      source: "iana",
      compressible: false
    },
    "multipart/voice-message": {
      source: "iana"
    },
    "multipart/x-mixed-replace": {
      source: "iana"
    },
    "text/1d-interleaved-parityfec": {
      source: "iana"
    },
    "text/cache-manifest": {
      source: "iana",
      compressible: true,
      extensions: ["appcache", "manifest"]
    },
    "text/calendar": {
      source: "iana",
      extensions: ["ics", "ifb"]
    },
    "text/calender": {
      compressible: true
    },
    "text/cmd": {
      compressible: true
    },
    "text/coffeescript": {
      extensions: ["coffee", "litcoffee"]
    },
    "text/css": {
      source: "iana",
      compressible: true,
      extensions: ["css"]
    },
    "text/csv": {
      source: "iana",
      compressible: true,
      extensions: ["csv"]
    },
    "text/csv-schema": {
      source: "iana"
    },
    "text/directory": {
      source: "iana"
    },
    "text/dns": {
      source: "iana"
    },
    "text/ecmascript": {
      source: "iana"
    },
    "text/encaprtp": {
      source: "iana"
    },
    "text/enriched": {
      source: "iana"
    },
    "text/fwdred": {
      source: "iana"
    },
    "text/grammar-ref-list": {
      source: "iana"
    },
    "text/hjson": {
      extensions: ["hjson"]
    },
    "text/html": {
      source: "iana",
      compressible: true,
      extensions: ["html", "htm", "shtml"]
    },
    "text/jade": {
      extensions: ["jade"]
    },
    "text/javascript": {
      source: "iana",
      compressible: true
    },
    "text/jcr-cnd": {
      source: "iana"
    },
    "text/jsx": {
      compressible: true,
      extensions: ["jsx"]
    },
    "text/less": {
      extensions: ["less"]
    },
    "text/markdown": {
      source: "iana"
    },
    "text/mathml": {
      source: "nginx",
      extensions: ["mml"]
    },
    "text/mizar": {
      source: "iana"
    },
    "text/n3": {
      source: "iana",
      compressible: true,
      extensions: ["n3"]
    },
    "text/parameters": {
      source: "iana"
    },
    "text/parityfec": {
      source: "iana"
    },
    "text/plain": {
      source: "iana",
      compressible: true,
      extensions: ["txt", "text", "conf", "def", "list", "log", "in", "ini"]
    },
    "text/provenance-notation": {
      source: "iana"
    },
    "text/prs.fallenstein.rst": {
      source: "iana"
    },
    "text/prs.lines.tag": {
      source: "iana",
      extensions: ["dsc"]
    },
    "text/raptorfec": {
      source: "iana"
    },
    "text/red": {
      source: "iana"
    },
    "text/rfc822-headers": {
      source: "iana"
    },
    "text/richtext": {
      source: "iana",
      compressible: true,
      extensions: ["rtx"]
    },
    "text/rtf": {
      source: "iana",
      compressible: true,
      extensions: ["rtf"]
    },
    "text/rtp-enc-aescm128": {
      source: "iana"
    },
    "text/rtploopback": {
      source: "iana"
    },
    "text/rtx": {
      source: "iana"
    },
    "text/sgml": {
      source: "iana",
      extensions: ["sgml", "sgm"]
    },
    "text/stylus": {
      extensions: ["stylus", "styl"]
    },
    "text/t140": {
      source: "iana"
    },
    "text/tab-separated-values": {
      source: "iana",
      compressible: true,
      extensions: ["tsv"]
    },
    "text/troff": {
      source: "iana",
      extensions: ["t", "tr", "roff", "man", "me", "ms"]
    },
    "text/turtle": {
      source: "iana",
      extensions: ["ttl"]
    },
    "text/ulpfec": {
      source: "iana"
    },
    "text/uri-list": {
      source: "iana",
      compressible: true,
      extensions: ["uri", "uris", "urls"]
    },
    "text/vcard": {
      source: "iana",
      compressible: true,
      extensions: ["vcard"]
    },
    "text/vnd.a": {
      source: "iana"
    },
    "text/vnd.abc": {
      source: "iana"
    },
    "text/vnd.curl": {
      source: "iana",
      extensions: ["curl"]
    },
    "text/vnd.curl.dcurl": {
      source: "apache",
      extensions: ["dcurl"]
    },
    "text/vnd.curl.mcurl": {
      source: "apache",
      extensions: ["mcurl"]
    },
    "text/vnd.curl.scurl": {
      source: "apache",
      extensions: ["scurl"]
    },
    "text/vnd.debian.copyright": {
      source: "iana"
    },
    "text/vnd.dmclientscript": {
      source: "iana"
    },
    "text/vnd.dvb.subtitle": {
      source: "iana",
      extensions: ["sub"]
    },
    "text/vnd.esmertec.theme-descriptor": {
      source: "iana"
    },
    "text/vnd.fly": {
      source: "iana",
      extensions: ["fly"]
    },
    "text/vnd.fmi.flexstor": {
      source: "iana",
      extensions: ["flx"]
    },
    "text/vnd.graphviz": {
      source: "iana",
      extensions: ["gv"]
    },
    "text/vnd.in3d.3dml": {
      source: "iana",
      extensions: ["3dml"]
    },
    "text/vnd.in3d.spot": {
      source: "iana",
      extensions: ["spot"]
    },
    "text/vnd.iptc.newsml": {
      source: "iana"
    },
    "text/vnd.iptc.nitf": {
      source: "iana"
    },
    "text/vnd.latex-z": {
      source: "iana"
    },
    "text/vnd.motorola.reflex": {
      source: "iana"
    },
    "text/vnd.ms-mediapackage": {
      source: "iana"
    },
    "text/vnd.net2phone.commcenter.command": {
      source: "iana"
    },
    "text/vnd.radisys.msml-basic-layout": {
      source: "iana"
    },
    "text/vnd.si.uricatalogue": {
      source: "iana"
    },
    "text/vnd.sun.j2me.app-descriptor": {
      source: "iana",
      extensions: ["jad"]
    },
    "text/vnd.trolltech.linguist": {
      source: "iana"
    },
    "text/vnd.wap.si": {
      source: "iana"
    },
    "text/vnd.wap.sl": {
      source: "iana"
    },
    "text/vnd.wap.wml": {
      source: "iana",
      extensions: ["wml"]
    },
    "text/vnd.wap.wmlscript": {
      source: "iana",
      extensions: ["wmls"]
    },
    "text/vtt": {
      charset: "UTF-8",
      compressible: true,
      extensions: ["vtt"]
    },
    "text/x-asm": {
      source: "apache",
      extensions: ["s", "asm"]
    },
    "text/x-c": {
      source: "apache",
      extensions: ["c", "cc", "cxx", "cpp", "h", "hh", "dic"]
    },
    "text/x-component": {
      source: "nginx",
      extensions: ["htc"]
    },
    "text/x-fortran": {
      source: "apache",
      extensions: ["f", "for", "f77", "f90"]
    },
    "text/x-gwt-rpc": {
      compressible: true
    },
    "text/x-handlebars-template": {
      extensions: ["hbs"]
    },
    "text/x-java-source": {
      source: "apache",
      extensions: ["java"]
    },
    "text/x-jquery-tmpl": {
      compressible: true
    },
    "text/x-lua": {
      extensions: ["lua"]
    },
    "text/x-markdown": {
      compressible: true,
      extensions: ["markdown", "md", "mkd"]
    },
    "text/x-nfo": {
      source: "apache",
      extensions: ["nfo"]
    },
    "text/x-opml": {
      source: "apache",
      extensions: ["opml"]
    },
    "text/x-pascal": {
      source: "apache",
      extensions: ["p", "pas"]
    },
    "text/x-processing": {
      compressible: true,
      extensions: ["pde"]
    },
    "text/x-sass": {
      extensions: ["sass"]
    },
    "text/x-scss": {
      extensions: ["scss"]
    },
    "text/x-setext": {
      source: "apache",
      extensions: ["etx"]
    },
    "text/x-sfv": {
      source: "apache",
      extensions: ["sfv"]
    },
    "text/x-suse-ymp": {
      compressible: true,
      extensions: ["ymp"]
    },
    "text/x-uuencode": {
      source: "apache",
      extensions: ["uu"]
    },
    "text/x-vcalendar": {
      source: "apache",
      extensions: ["vcs"]
    },
    "text/x-vcard": {
      source: "apache",
      extensions: ["vcf"]
    },
    "text/xml": {
      source: "iana",
      compressible: true,
      extensions: ["xml"]
    },
    "text/xml-external-parsed-entity": {
      source: "iana"
    },
    "text/yaml": {
      extensions: ["yaml", "yml"]
    },
    "video/1d-interleaved-parityfec": {
      source: "apache"
    },
    "video/3gpp": {
      source: "apache",
      extensions: ["3gp", "3gpp"]
    },
    "video/3gpp-tt": {
      source: "apache"
    },
    "video/3gpp2": {
      source: "apache",
      extensions: ["3g2"]
    },
    "video/bmpeg": {
      source: "apache"
    },
    "video/bt656": {
      source: "apache"
    },
    "video/celb": {
      source: "apache"
    },
    "video/dv": {
      source: "apache"
    },
    "video/h261": {
      source: "apache",
      extensions: ["h261"]
    },
    "video/h263": {
      source: "apache",
      extensions: ["h263"]
    },
    "video/h263-1998": {
      source: "apache"
    },
    "video/h263-2000": {
      source: "apache"
    },
    "video/h264": {
      source: "apache",
      extensions: ["h264"]
    },
    "video/h264-rcdo": {
      source: "apache"
    },
    "video/h264-svc": {
      source: "apache"
    },
    "video/jpeg": {
      source: "apache",
      extensions: ["jpgv"]
    },
    "video/jpeg2000": {
      source: "apache"
    },
    "video/jpm": {
      source: "apache",
      extensions: ["jpm", "jpgm"]
    },
    "video/mj2": {
      source: "apache",
      extensions: ["mj2", "mjp2"]
    },
    "video/mp1s": {
      source: "apache"
    },
    "video/mp2p": {
      source: "apache"
    },
    "video/mp2t": {
      source: "apache",
      extensions: ["ts"]
    },
    "video/mp4": {
      source: "apache",
      compressible: false,
      extensions: ["mp4", "mp4v", "mpg4"]
    },
    "video/mp4v-es": {
      source: "apache"
    },
    "video/mpeg": {
      source: "apache",
      compressible: false,
      extensions: ["mpeg", "mpg", "mpe", "m1v", "m2v"]
    },
    "video/mpeg4-generic": {
      source: "apache"
    },
    "video/mpv": {
      source: "apache"
    },
    "video/nv": {
      source: "apache"
    },
    "video/ogg": {
      source: "apache",
      compressible: false,
      extensions: ["ogv"]
    },
    "video/parityfec": {
      source: "apache"
    },
    "video/pointer": {
      source: "apache"
    },
    "video/quicktime": {
      source: "apache",
      compressible: false,
      extensions: ["qt", "mov"]
    },
    "video/raw": {
      source: "apache"
    },
    "video/rtp-enc-aescm128": {
      source: "apache"
    },
    "video/rtx": {
      source: "apache"
    },
    "video/smpte292m": {
      source: "apache"
    },
    "video/ulpfec": {
      source: "apache"
    },
    "video/vc1": {
      source: "apache"
    },
    "video/vnd.cctv": {
      source: "apache"
    },
    "video/vnd.dece.hd": {
      source: "apache",
      extensions: ["uvh", "uvvh"]
    },
    "video/vnd.dece.mobile": {
      source: "apache",
      extensions: ["uvm", "uvvm"]
    },
    "video/vnd.dece.mp4": {
      source: "apache"
    },
    "video/vnd.dece.pd": {
      source: "apache",
      extensions: ["uvp", "uvvp"]
    },
    "video/vnd.dece.sd": {
      source: "apache",
      extensions: ["uvs", "uvvs"]
    },
    "video/vnd.dece.video": {
      source: "apache",
      extensions: ["uvv", "uvvv"]
    },
    "video/vnd.directv.mpeg": {
      source: "apache"
    },
    "video/vnd.directv.mpeg-tts": {
      source: "apache"
    },
    "video/vnd.dlna.mpeg-tts": {
      source: "apache"
    },
    "video/vnd.dvb.file": {
      source: "apache",
      extensions: ["dvb"]
    },
    "video/vnd.fvt": {
      source: "apache",
      extensions: ["fvt"]
    },
    "video/vnd.hns.video": {
      source: "apache"
    },
    "video/vnd.iptvforum.1dparityfec-1010": {
      source: "apache"
    },
    "video/vnd.iptvforum.1dparityfec-2005": {
      source: "apache"
    },
    "video/vnd.iptvforum.2dparityfec-1010": {
      source: "apache"
    },
    "video/vnd.iptvforum.2dparityfec-2005": {
      source: "apache"
    },
    "video/vnd.iptvforum.ttsavc": {
      source: "apache"
    },
    "video/vnd.iptvforum.ttsmpeg2": {
      source: "apache"
    },
    "video/vnd.motorola.video": {
      source: "apache"
    },
    "video/vnd.motorola.videop": {
      source: "apache"
    },
    "video/vnd.mpegurl": {
      source: "apache",
      extensions: ["mxu", "m4u"]
    },
    "video/vnd.ms-playready.media.pyv": {
      source: "apache",
      extensions: ["pyv"]
    },
    "video/vnd.nokia.interleaved-multimedia": {
      source: "apache"
    },
    "video/vnd.nokia.videovoip": {
      source: "apache"
    },
    "video/vnd.objectvideo": {
      source: "apache"
    },
    "video/vnd.sealed.mpeg1": {
      source: "apache"
    },
    "video/vnd.sealed.mpeg4": {
      source: "apache"
    },
    "video/vnd.sealed.swf": {
      source: "apache"
    },
    "video/vnd.sealedmedia.softseal.mov": {
      source: "apache"
    },
    "video/vnd.uvvu.mp4": {
      source: "apache",
      extensions: ["uvu", "uvvu"]
    },
    "video/vnd.vivo": {
      source: "apache",
      extensions: ["viv"]
    },
    "video/webm": {
      source: "apache",
      compressible: false,
      extensions: ["webm"]
    },
    "video/x-f4v": {
      source: "apache",
      extensions: ["f4v"]
    },
    "video/x-fli": {
      source: "apache",
      extensions: ["fli"]
    },
    "video/x-flv": {
      source: "apache",
      compressible: false,
      extensions: ["flv"]
    },
    "video/x-m4v": {
      source: "apache",
      extensions: ["m4v"]
    },
    "video/x-matroska": {
      source: "apache",
      compressible: false,
      extensions: ["mkv", "mk3d", "mks"]
    },
    "video/x-mng": {
      source: "apache",
      extensions: ["mng"]
    },
    "video/x-ms-asf": {
      source: "apache",
      extensions: ["asf", "asx"]
    },
    "video/x-ms-vob": {
      source: "apache",
      extensions: ["vob"]
    },
    "video/x-ms-wm": {
      source: "apache",
      extensions: ["wm"]
    },
    "video/x-ms-wmv": {
      source: "apache",
      compressible: false,
      extensions: ["wmv"]
    },
    "video/x-ms-wmx": {
      source: "apache",
      extensions: ["wmx"]
    },
    "video/x-ms-wvx": {
      source: "apache",
      extensions: ["wvx"]
    },
    "video/x-msvideo": {
      source: "apache",
      extensions: ["avi"]
    },
    "video/x-sgi-movie": {
      source: "apache",
      extensions: ["movie"]
    },
    "video/x-smv": {
      source: "apache",
      extensions: ["smv"]
    },
    "x-conference/x-cooltalk": {
      source: "apache",
      extensions: ["ice"]
    },
    "x-shader/x-fragment": {
      compressible: true
    },
    "x-shader/x-vertex": {
      compressible: true
    }
  };
});

// node_modules/faker/lib/locales/en/system/index.js
var require_system = __commonJS((exports, module) => {
  var system = {};
  module["exports"] = system;
  system.mimeTypes = require_mimeTypes();
});

// node_modules/faker/lib/locales/en/index.js
var require_en = __commonJS((exports, module) => {
  var en = {};
  module["exports"] = en;
  en.title = "English";
  en.separator = " & ";
  en.address = require_address7();
  en.credit_card = require_credit_card();
  en.company = require_company7();
  en.internet = require_internet7();
  en.database = require_database2();
  en.lorem = require_lorem3();
  en.name = require_name18();
  en.phone_number = require_phone_number6();
  en.cell_phone = require_cell_phone3();
  en.business = require_business();
  en.commerce = require_commerce3();
  en.team = require_team();
  en.hacker = require_hacker2();
  en.app = require_app();
  en.finance = require_finance2();
  en.date = require_date4();
  en.system = require_system();
});

// node_modules/faker/lib/locales/en_AU/name/first_name.js
var require_first_name5 = __commonJS((exports, module) => {
  module["exports"] = [
    "William",
    "Jack",
    "Oliver",
    "Joshua",
    "Thomas",
    "Lachlan",
    "Cooper",
    "Noah",
    "Ethan",
    "Lucas",
    "James",
    "Samuel",
    "Jacob",
    "Liam",
    "Alexander",
    "Benjamin",
    "Max",
    "Isaac",
    "Daniel",
    "Riley",
    "Ryan",
    "Charlie",
    "Tyler",
    "Jake",
    "Matthew",
    "Xavier",
    "Harry",
    "Jayden",
    "Nicholas",
    "Harrison",
    "Levi",
    "Luke",
    "Adam",
    "Henry",
    "Aiden",
    "Dylan",
    "Oscar",
    "Michael",
    "Jackson",
    "Logan",
    "Joseph",
    "Blake",
    "Nathan",
    "Connor",
    "Elijah",
    "Nate",
    "Archie",
    "Bailey",
    "Marcus",
    "Cameron",
    "Jordan",
    "Zachary",
    "Caleb",
    "Hunter",
    "Ashton",
    "Toby",
    "Aidan",
    "Hayden",
    "Mason",
    "Hamish",
    "Edward",
    "Angus",
    "Eli",
    "Sebastian",
    "Christian",
    "Patrick",
    "Andrew",
    "Anthony",
    "Luca",
    "Kai",
    "Beau",
    "Alex",
    "George",
    "Callum",
    "Finn",
    "Zac",
    "Mitchell",
    "Jett",
    "Jesse",
    "Gabriel",
    "Leo",
    "Declan",
    "Charles",
    "Jasper",
    "Jonathan",
    "Aaron",
    "Hugo",
    "David",
    "Christopher",
    "Chase",
    "Owen",
    "Justin",
    "Ali",
    "Darcy",
    "Lincoln",
    "Cody",
    "Phoenix",
    "Sam",
    "John",
    "Joel",
    "Isabella",
    "Ruby",
    "Chloe",
    "Olivia",
    "Charlotte",
    "Mia",
    "Lily",
    "Emily",
    "Ella",
    "Sienna",
    "Sophie",
    "Amelia",
    "Grace",
    "Ava",
    "Zoe",
    "Emma",
    "Sophia",
    "Matilda",
    "Hannah",
    "Jessica",
    "Lucy",
    "Georgia",
    "Sarah",
    "Abigail",
    "Zara",
    "Eva",
    "Scarlett",
    "Jasmine",
    "Chelsea",
    "Lilly",
    "Ivy",
    "Isla",
    "Evie",
    "Isabelle",
    "Maddison",
    "Layla",
    "Summer",
    "Annabelle",
    "Alexis",
    "Elizabeth",
    "Bella",
    "Holly",
    "Lara",
    "Madison",
    "Alyssa",
    "Maya",
    "Tahlia",
    "Claire",
    "Hayley",
    "Imogen",
    "Jade",
    "Ellie",
    "Sofia",
    "Addison",
    "Molly",
    "Phoebe",
    "Alice",
    "Savannah",
    "Gabriella",
    "Kayla",
    "Mikayla",
    "Abbey",
    "Eliza",
    "Willow",
    "Alexandra",
    "Poppy",
    "Samantha",
    "Stella",
    "Amy",
    "Amelie",
    "Anna",
    "Piper",
    "Gemma",
    "Isabel",
    "Victoria",
    "Stephanie",
    "Caitlin",
    "Heidi",
    "Paige",
    "Rose",
    "Amber",
    "Audrey",
    "Claudia",
    "Taylor",
    "Madeline",
    "Angelina",
    "Natalie",
    "Charli",
    "Lauren",
    "Ashley",
    "Violet",
    "Mackenzie",
    "Abby",
    "Skye",
    "Lillian",
    "Alana",
    "Lola",
    "Leah",
    "Eve",
    "Kiara"
  ];
});

// node_modules/faker/lib/locales/en_AU/name/last_name.js
var require_last_name5 = __commonJS((exports, module) => {
  module["exports"] = [
    "Smith",
    "Jones",
    "Williams",
    "Brown",
    "Wilson",
    "Taylor",
    "Johnson",
    "White",
    "Martin",
    "Anderson",
    "Thompson",
    "Nguyen",
    "Thomas",
    "Walker",
    "Harris",
    "Lee",
    "Ryan",
    "Robinson",
    "Kelly",
    "King",
    "Davis",
    "Wright",
    "Evans",
    "Roberts",
    "Green",
    "Hall",
    "Wood",
    "Jackson",
    "Clarke",
    "Patel",
    "Khan",
    "Lewis",
    "James",
    "Phillips",
    "Mason",
    "Mitchell",
    "Rose",
    "Davies",
    "Rodriguez",
    "Cox",
    "Alexander",
    "Garden",
    "Campbell",
    "Johnston",
    "Moore",
    "Smyth",
    "O'neill",
    "Doherty",
    "Stewart",
    "Quinn",
    "Murphy",
    "Graham",
    "Mclaughlin",
    "Hamilton",
    "Murray",
    "Hughes",
    "Robertson",
    "Thomson",
    "Scott",
    "Macdonald",
    "Reid",
    "Clark",
    "Ross",
    "Young",
    "Watson",
    "Paterson",
    "Morrison",
    "Morgan",
    "Griffiths",
    "Edwards",
    "Rees",
    "Jenkins",
    "Owen",
    "Price",
    "Moss",
    "Richards",
    "Abbott",
    "Adams",
    "Armstrong",
    "Bahringer",
    "Bailey",
    "Barrows",
    "Bartell",
    "Bartoletti",
    "Barton",
    "Bauch",
    "Baumbach",
    "Bayer",
    "Beahan",
    "Beatty",
    "Becker",
    "Beier",
    "Berge",
    "Bergstrom",
    "Bode",
    "Bogan",
    "Borer",
    "Bosco",
    "Botsford",
    "Boyer",
    "Boyle",
    "Braun",
    "Bruen",
    "Carroll",
    "Carter",
    "Cartwright",
    "Casper",
    "Cassin",
    "Champlin",
    "Christiansen",
    "Cole",
    "Collier",
    "Collins",
    "Connelly",
    "Conroy",
    "Corkery",
    "Cormier",
    "Corwin",
    "Cronin",
    "Crooks",
    "Cruickshank",
    "Cummings",
    "D'amore",
    "Daniel",
    "Dare",
    "Daugherty",
    "Dickens",
    "Dickinson",
    "Dietrich",
    "Donnelly",
    "Dooley",
    "Douglas",
    "Doyle",
    "Durgan",
    "Ebert",
    "Emard",
    "Emmerich",
    "Erdman",
    "Ernser",
    "Fadel",
    "Fahey",
    "Farrell",
    "Fay",
    "Feeney",
    "Feil",
    "Ferry",
    "Fisher",
    "Flatley",
    "Gibson",
    "Gleason",
    "Glover",
    "Goldner",
    "Goodwin",
    "Grady",
    "Grant",
    "Greenfelder",
    "Greenholt",
    "Grimes",
    "Gutmann",
    "Hackett",
    "Hahn",
    "Haley",
    "Hammes",
    "Hand",
    "Hane",
    "Hansen",
    "Harber",
    "Hartmann",
    "Harvey",
    "Hayes",
    "Heaney",
    "Heathcote",
    "Heller",
    "Hermann",
    "Hermiston",
    "Hessel",
    "Hettinger",
    "Hickle",
    "Hill",
    "Hills",
    "Hoppe",
    "Howe",
    "Howell",
    "Hudson",
    "Huel",
    "Hyatt",
    "Jacobi",
    "Jacobs",
    "Jacobson",
    "Jerde",
    "Johns",
    "Keeling",
    "Kemmer",
    "Kessler",
    "Kiehn",
    "Kirlin",
    "Klein",
    "Koch",
    "Koelpin",
    "Kohler",
    "Koss",
    "Kovacek",
    "Kreiger",
    "Kris",
    "Kuhlman",
    "Kuhn",
    "Kulas",
    "Kunde",
    "Kutch",
    "Lakin",
    "Lang",
    "Langworth",
    "Larkin",
    "Larson",
    "Leannon",
    "Leffler",
    "Little",
    "Lockman",
    "Lowe",
    "Lynch",
    "Mann",
    "Marks",
    "Marvin",
    "Mayer",
    "Mccullough",
    "Mcdermott",
    "Mckenzie",
    "Miller",
    "Mills",
    "Monahan",
    "Morissette",
    "Mueller",
    "Muller",
    "Nader",
    "Nicolas",
    "Nolan",
    "O'connell",
    "O'conner",
    "O'hara",
    "O'keefe",
    "Olson",
    "O'reilly",
    "Parisian",
    "Parker",
    "Quigley",
    "Reilly",
    "Reynolds",
    "Rice",
    "Ritchie",
    "Rohan",
    "Rolfson",
    "Rowe",
    "Russel",
    "Rutherford",
    "Sanford",
    "Sauer",
    "Schmidt",
    "Schmitt",
    "Schneider",
    "Schroeder",
    "Schultz",
    "Shields",
    "Smitham",
    "Spencer",
    "Stanton",
    "Stark",
    "Stokes",
    "Swift",
    "Tillman",
    "Towne",
    "Tremblay",
    "Tromp",
    "Turcotte",
    "Turner",
    "Walsh",
    "Walter",
    "Ward",
    "Waters",
    "Weber",
    "Welch",
    "West",
    "Wilderman",
    "Wilkinson",
    "Williamson",
    "Windler",
    "Wolf"
  ];
});

// node_modules/faker/lib/locales/en_AU/name/index.js
var require_name21 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name = require_first_name5();
  name2.last_name = require_last_name5();
});

// node_modules/faker/lib/locales/en_AU/company/suffix.js
var require_suffix10 = __commonJS((exports, module) => {
  module["exports"] = [
    "Pty Ltd",
    "and Sons",
    "Corp",
    "Group",
    "Brothers",
    "Partners"
  ];
});

// node_modules/faker/lib/locales/en_AU/company/index.js
var require_company8 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.suffix = require_suffix10();
});

// node_modules/faker/lib/locales/en_AU/internet/domain_suffix.js
var require_domain_suffix7 = __commonJS((exports, module) => {
  module["exports"] = [
    "com.au",
    "com",
    "net.au",
    "net",
    "org.au",
    "org"
  ];
});

// node_modules/faker/lib/locales/en_AU/internet/index.js
var require_internet8 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.domain_suffix = require_domain_suffix7();
});

// node_modules/faker/lib/locales/en_AU/address/state_abbr.js
var require_state_abbr5 = __commonJS((exports, module) => {
  module["exports"] = [
    "NSW",
    "QLD",
    "NT",
    "SA",
    "WA",
    "TAS",
    "ACT",
    "VIC"
  ];
});

// node_modules/faker/lib/locales/en_AU/address/state.js
var require_state6 = __commonJS((exports, module) => {
  module["exports"] = [
    "New South Wales",
    "Queensland",
    "Northern Territory",
    "South Australia",
    "Western Australia",
    "Tasmania",
    "Australian Capital Territory",
    "Victoria"
  ];
});

// node_modules/faker/lib/locales/en_AU/address/postcode.js
var require_postcode7 = __commonJS((exports, module) => {
  module["exports"] = [
    "0###",
    "2###",
    "3###",
    "4###",
    "5###",
    "6###",
    "7###"
  ];
});

// node_modules/faker/lib/locales/en_AU/address/building_number.js
var require_building_number6 = __commonJS((exports, module) => {
  module["exports"] = [
    "####",
    "###",
    "##"
  ];
});

// node_modules/faker/lib/locales/en_AU/address/street_suffix.js
var require_street_suffix3 = __commonJS((exports, module) => {
  module["exports"] = [
    "Avenue",
    "Boulevard",
    "Circle",
    "Circuit",
    "Court",
    "Crescent",
    "Crest",
    "Drive",
    "Estate Dr",
    "Grove",
    "Hill",
    "Island",
    "Junction",
    "Knoll",
    "Lane",
    "Loop",
    "Mall",
    "Manor",
    "Meadow",
    "Mews",
    "Parade",
    "Parkway",
    "Pass",
    "Place",
    "Plaza",
    "Ridge",
    "Road",
    "Run",
    "Square",
    "Station St",
    "Street",
    "Summit",
    "Terrace",
    "Track",
    "Trail",
    "View Rd",
    "Way"
  ];
});

// node_modules/faker/lib/locales/en_AU/address/default_country.js
var require_default_country7 = __commonJS((exports, module) => {
  module["exports"] = [
    "Australia"
  ];
});

// node_modules/faker/lib/locales/en_AU/address/index.js
var require_address8 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.state_abbr = require_state_abbr5();
  address.state = require_state6();
  address.postcode = require_postcode7();
  address.building_number = require_building_number6();
  address.street_suffix = require_street_suffix3();
  address.default_country = require_default_country7();
});

// node_modules/faker/lib/locales/en_AU/phone_number/formats.js
var require_formats10 = __commonJS((exports, module) => {
  module["exports"] = [
    "0# #### ####",
    "+61 # #### ####",
    "04## ### ###",
    "+61 4## ### ###"
  ];
});

// node_modules/faker/lib/locales/en_AU/phone_number/index.js
var require_phone_number7 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats10();
});

// node_modules/faker/lib/locales/en_AU/index.js
var require_en_AU = __commonJS((exports, module) => {
  var en_AU = {};
  module["exports"] = en_AU;
  en_AU.title = "Australia (English)";
  en_AU.name = require_name21();
  en_AU.company = require_company8();
  en_AU.internet = require_internet8();
  en_AU.address = require_address8();
  en_AU.phone_number = require_phone_number7();
});

// node_modules/faker/lib/locales/en_BORK/lorem/words.js
var require_words4 = __commonJS((exports, module) => {
  module["exports"] = [
    "Boot",
    "I",
    "Nu",
    "Nur",
    "Tu",
    "Um",
    "a",
    "becoose-a",
    "boot",
    "bork",
    "burn",
    "chuuses",
    "cumplete-a",
    "cun",
    "cunseqooences",
    "curcoomstunces",
    "dee",
    "deeslikes",
    "denuoonceeng",
    "desures",
    "du",
    "eccuoont",
    "ectooel",
    "edfuntege-a",
    "efueeds",
    "egeeen",
    "ell",
    "ere-a",
    "feend",
    "foolt",
    "frum",
    "geefe-a",
    "gesh",
    "greet",
    "heem",
    "heppeeness",
    "hes",
    "hoo",
    "hoomun",
    "idea",
    "ifer",
    "in",
    "incuoonter",
    "injuy",
    "itselff",
    "ixcept",
    "ixemple-a",
    "ixerceese-a",
    "ixpleeen",
    "ixplurer",
    "ixpuoond",
    "ixtremely",
    "knoo",
    "lebureeuoos",
    "lufes",
    "meestekee",
    "mester-booeelder",
    "moost",
    "mun",
    "nu",
    "nut",
    "oobteeen",
    "oocceseeunelly",
    "ooccoor",
    "ooff",
    "oone-a",
    "oor",
    "peeen",
    "peeenffool",
    "physeecel",
    "pleesoore-a",
    "poorsooe-a",
    "poorsooes",
    "preeesing",
    "prucoore-a",
    "prudooces",
    "reeght",
    "reshunelly",
    "resooltunt",
    "sume-a",
    "teecheengs",
    "teke-a",
    "thees",
    "thet",
    "thuse-a",
    "treefiel",
    "troot",
    "tu",
    "tueel",
    "und",
    "undertekes",
    "unnuyeeng",
    "uny",
    "unyune-a",
    "us",
    "veell",
    "veet",
    "ves",
    "vheech",
    "vhu",
    "yuoo",
    "zee",
    "zeere-a"
  ];
});

// node_modules/faker/lib/locales/en_BORK/lorem/index.js
var require_lorem4 = __commonJS((exports, module) => {
  var lorem = {};
  module["exports"] = lorem;
  lorem.words = require_words4();
});

// node_modules/faker/lib/locales/en_BORK/index.js
var require_en_BORK = __commonJS((exports, module) => {
  var en_BORK = {};
  module["exports"] = en_BORK;
  en_BORK.title = "Bork (English)";
  en_BORK.lorem = require_lorem4();
});

// node_modules/faker/lib/locales/en_CA/address/state.js
var require_state7 = __commonJS((exports, module) => {
  module["exports"] = [
    "Alberta",
    "British Columbia",
    "Manitoba",
    "New Brunswick",
    "Newfoundland and Labrador",
    "Nova Scotia",
    "Northwest Territories",
    "Nunavut",
    "Ontario",
    "Prince Edward Island",
    "Quebec",
    "Saskatchewan",
    "Yukon"
  ];
});

// node_modules/faker/lib/locales/en_CA/address/state_abbr.js
var require_state_abbr6 = __commonJS((exports, module) => {
  module["exports"] = [
    "AB",
    "BC",
    "MB",
    "NB",
    "NL",
    "NS",
    "NU",
    "NT",
    "ON",
    "PE",
    "QC",
    "SK",
    "YT"
  ];
});

// node_modules/faker/lib/locales/en_CA/address/default_country.js
var require_default_country8 = __commonJS((exports, module) => {
  module["exports"] = [
    "Canada"
  ];
});

// node_modules/faker/lib/locales/en_CA/address/postcode.js
var require_postcode8 = __commonJS((exports, module) => {
  module["exports"] = [
    "?#? #?#"
  ];
});

// node_modules/faker/lib/locales/en_CA/address/index.js
var require_address9 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.state = require_state7();
  address.state_abbr = require_state_abbr6();
  address.default_country = require_default_country8();
  address.postcode = require_postcode8();
});

// node_modules/faker/lib/locales/en_CA/internet/free_email.js
var require_free_email6 = __commonJS((exports, module) => {
  module["exports"] = [
    "gmail.com",
    "yahoo.ca",
    "hotmail.com"
  ];
});

// node_modules/faker/lib/locales/en_CA/internet/domain_suffix.js
var require_domain_suffix8 = __commonJS((exports, module) => {
  module["exports"] = [
    "ca",
    "com",
    "biz",
    "info",
    "name",
    "net",
    "org"
  ];
});

// node_modules/faker/lib/locales/en_CA/internet/index.js
var require_internet9 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.free_email = require_free_email6();
  internet.domain_suffix = require_domain_suffix8();
});

// node_modules/faker/lib/locales/en_CA/phone_number/formats.js
var require_formats11 = __commonJS((exports, module) => {
  module["exports"] = [
    "###-###-####",
    "(###)###-####",
    "###.###.####",
    "1-###-###-####",
    "###-###-#### x###",
    "(###)###-#### x###",
    "1-###-###-#### x###",
    "###.###.#### x###",
    "###-###-#### x####",
    "(###)###-#### x####",
    "1-###-###-#### x####",
    "###.###.#### x####",
    "###-###-#### x#####",
    "(###)###-#### x#####",
    "1-###-###-#### x#####",
    "###.###.#### x#####"
  ];
});

// node_modules/faker/lib/locales/en_CA/phone_number/index.js
var require_phone_number8 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats11();
});

// node_modules/faker/lib/locales/en_CA/index.js
var require_en_CA = __commonJS((exports, module) => {
  var en_CA = {};
  module["exports"] = en_CA;
  en_CA.title = "Canada (English)";
  en_CA.address = require_address9();
  en_CA.internet = require_internet9();
  en_CA.phone_number = require_phone_number8();
});

// node_modules/faker/lib/locales/en_GB/address/county.js
var require_county2 = __commonJS((exports, module) => {
  module["exports"] = [
    "Avon",
    "Bedfordshire",
    "Berkshire",
    "Borders",
    "Buckinghamshire",
    "Cambridgeshire",
    "Central",
    "Cheshire",
    "Cleveland",
    "Clwyd",
    "Cornwall",
    "County Antrim",
    "County Armagh",
    "County Down",
    "County Fermanagh",
    "County Londonderry",
    "County Tyrone",
    "Cumbria",
    "Derbyshire",
    "Devon",
    "Dorset",
    "Dumfries and Galloway",
    "Durham",
    "Dyfed",
    "East Sussex",
    "Essex",
    "Fife",
    "Gloucestershire",
    "Grampian",
    "Greater Manchester",
    "Gwent",
    "Gwynedd County",
    "Hampshire",
    "Herefordshire",
    "Hertfordshire",
    "Highlands and Islands",
    "Humberside",
    "Isle of Wight",
    "Kent",
    "Lancashire",
    "Leicestershire",
    "Lincolnshire",
    "Lothian",
    "Merseyside",
    "Mid Glamorgan",
    "Norfolk",
    "North Yorkshire",
    "Northamptonshire",
    "Northumberland",
    "Nottinghamshire",
    "Oxfordshire",
    "Powys",
    "Rutland",
    "Shropshire",
    "Somerset",
    "South Glamorgan",
    "South Yorkshire",
    "Staffordshire",
    "Strathclyde",
    "Suffolk",
    "Surrey",
    "Tayside",
    "Tyne and Wear",
    "Warwickshire",
    "West Glamorgan",
    "West Midlands",
    "West Sussex",
    "West Yorkshire",
    "Wiltshire",
    "Worcestershire"
  ];
});

// node_modules/faker/lib/locales/en_GB/address/uk_country.js
var require_uk_country = __commonJS((exports, module) => {
  module["exports"] = [
    "England",
    "Scotland",
    "Wales",
    "Northern Ireland"
  ];
});

// node_modules/faker/lib/locales/en_GB/address/default_country.js
var require_default_country9 = __commonJS((exports, module) => {
  module["exports"] = [
    "England",
    "Scotland",
    "Wales",
    "Northern Ireland"
  ];
});

// node_modules/faker/lib/locales/en_GB/address/postcode.js
var require_postcode9 = __commonJS((exports, module) => {
  module["exports"] = [
    "??# #??",
    "??## #??"
  ];
});

// node_modules/faker/lib/locales/en_GB/address/index.js
var require_address10 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.county = require_county2();
  address.uk_country = require_uk_country();
  address.default_country = require_default_country9();
  address.postcode = require_postcode9();
});

// node_modules/faker/lib/locales/en_GB/internet/domain_suffix.js
var require_domain_suffix9 = __commonJS((exports, module) => {
  module["exports"] = [
    "co.uk",
    "com",
    "biz",
    "info",
    "name"
  ];
});

// node_modules/faker/lib/locales/en_GB/internet/index.js
var require_internet10 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.domain_suffix = require_domain_suffix9();
});

// node_modules/faker/lib/locales/en_GB/phone_number/formats.js
var require_formats13 = __commonJS((exports, module) => {
  module["exports"] = [
    "01#### #####",
    "01### ######",
    "01#1 ### ####",
    "011# ### ####",
    "02# #### ####",
    "03## ### ####",
    "055 #### ####",
    "056 #### ####",
    "0800 ### ####",
    "08## ### ####",
    "09## ### ####",
    "016977 ####",
    "01### #####",
    "0500 ######",
    "0800 ######"
  ];
});

// node_modules/faker/lib/locales/en_GB/phone_number/index.js
var require_phone_number9 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats13();
});

// node_modules/faker/lib/locales/en_GB/cell_phone/formats.js
var require_formats12 = __commonJS((exports, module) => {
  module["exports"] = [
    "074## ######",
    "075## ######",
    "076## ######",
    "077## ######",
    "078## ######",
    "079## ######"
  ];
});

// node_modules/faker/lib/locales/en_GB/cell_phone/index.js
var require_cell_phone4 = __commonJS((exports, module) => {
  var cell_phone = {};
  module["exports"] = cell_phone;
  cell_phone.formats = require_formats12();
});

// node_modules/faker/lib/locales/en_GB/index.js
var require_en_GB = __commonJS((exports, module) => {
  var en_GB = {};
  module["exports"] = en_GB;
  en_GB.title = "Great Britain (English)";
  en_GB.address = require_address10();
  en_GB.internet = require_internet10();
  en_GB.phone_number = require_phone_number9();
  en_GB.cell_phone = require_cell_phone4();
});

// node_modules/faker/lib/locales/en_IE/address/county.js
var require_county3 = __commonJS((exports, module) => {
  module["exports"] = [
    "Carlow",
    "Cavan",
    "Clare",
    "Cork",
    "Donegal",
    "Dublin",
    "Galway",
    "Kerry",
    "Kildare",
    "Kilkenny",
    "Laois",
    "Leitrim",
    "Limerick",
    "Longford",
    "Louth",
    "Mayo",
    "Meath",
    "Monaghan",
    "Offaly",
    "Roscommon",
    "Sligo",
    "Tipperary",
    "Waterford",
    "Westmeath",
    "Wexford",
    "Wicklow"
  ];
});

// node_modules/faker/lib/locales/en_IE/address/default_country.js
var require_default_country10 = __commonJS((exports, module) => {
  module["exports"] = [
    "Ireland"
  ];
});

// node_modules/faker/lib/locales/en_IE/address/index.js
var require_address11 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.county = require_county3();
  address.default_country = require_default_country10();
});

// node_modules/faker/lib/locales/en_IE/internet/domain_suffix.js
var require_domain_suffix10 = __commonJS((exports, module) => {
  module["exports"] = [
    "ie",
    "com",
    "net",
    "info",
    "eu"
  ];
});

// node_modules/faker/lib/locales/en_IE/internet/index.js
var require_internet11 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.domain_suffix = require_domain_suffix10();
});

// node_modules/faker/lib/locales/en_IE/phone_number/formats.js
var require_formats15 = __commonJS((exports, module) => {
  module["exports"] = [
    "01 #######",
    "021 #######",
    "022 #######",
    "023 #######",
    "024 #######",
    "025 #######",
    "026 #######",
    "027 #######",
    "028 #######",
    "029 #######",
    "0402 #######",
    "0404 #######",
    "041 #######",
    "042 #######",
    "043 #######",
    "044 #######",
    "045 #######",
    "046 #######",
    "047 #######",
    "049 #######",
    "0504 #######",
    "0505 #######",
    "051 #######",
    "052 #######",
    "053 #######",
    "056 #######",
    "057 #######",
    "058 #######",
    "059 #######",
    "061 #######",
    "062 #######",
    "063 #######",
    "064 #######",
    "065 #######",
    "066 #######",
    "067 #######",
    "068 #######",
    "069 #######",
    "071 #######",
    "074 #######",
    "090 #######",
    "091 #######",
    "093 #######",
    "094 #######",
    "095 #######",
    "096 #######",
    "097 #######",
    "098 #######",
    "099 #######"
  ];
});

// node_modules/faker/lib/locales/en_IE/phone_number/index.js
var require_phone_number10 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats15();
});

// node_modules/faker/lib/locales/en_IE/cell_phone/formats.js
var require_formats14 = __commonJS((exports, module) => {
  module["exports"] = [
    "082 ### ####",
    "083 ### ####",
    "085 ### ####",
    "086 ### ####",
    "087 ### ####",
    "089 ### ####"
  ];
});

// node_modules/faker/lib/locales/en_IE/cell_phone/index.js
var require_cell_phone5 = __commonJS((exports, module) => {
  var cell_phone = {};
  module["exports"] = cell_phone;
  cell_phone.formats = require_formats14();
});

// node_modules/faker/lib/locales/en_IE/index.js
var require_en_IE = __commonJS((exports, module) => {
  var en_IE = {};
  module["exports"] = en_IE;
  en_IE.title = "Ireland (English)";
  en_IE.address = require_address11();
  en_IE.internet = require_internet11();
  en_IE.phone_number = require_phone_number10();
  en_IE.cell_phone = require_cell_phone5();
});

// node_modules/faker/lib/locales/en_IND/name/first_name.js
var require_first_name6 = __commonJS((exports, module) => {
  module["exports"] = [
    "Aadrika",
    "Aanandinii",
    "Aaratrika",
    "Aarya",
    "Arya",
    "Aashritha",
    "Aatmaja",
    "Atmaja",
    "Abhaya",
    "Adwitiya",
    "Agrata",
    "Ahilya",
    "Ahalya",
    "Aishani",
    "Akshainie",
    "Akshata",
    "Akshita",
    "Akula",
    "Ambar",
    "Amodini",
    "Amrita",
    "Amritambu",
    "Anala",
    "Anamika",
    "Ananda",
    "Anandamayi",
    "Ananta",
    "Anila",
    "Anjali",
    "Anjushri",
    "Anjushree",
    "Annapurna",
    "Anshula",
    "Anuja",
    "Anusuya",
    "Anasuya",
    "Anasooya",
    "Anwesha",
    "Apsara",
    "Aruna",
    "Asha",
    "Aasa",
    "Aasha",
    "Aslesha",
    "Atreyi",
    "Atreyee",
    "Avani",
    "Abani",
    "Avantika",
    "Ayushmati",
    "Baidehi",
    "Vaidehi",
    "Bala",
    "Baala",
    "Balamani",
    "Basanti",
    "Vasanti",
    "Bela",
    "Bhadra",
    "Bhagirathi",
    "Bhagwanti",
    "Bhagwati",
    "Bhamini",
    "Bhanumati",
    "Bhaanumati",
    "Bhargavi",
    "Bhavani",
    "Bhilangana",
    "Bilwa",
    "Bilva",
    "Buddhana",
    "Chakrika",
    "Chanda",
    "Chandi",
    "Chandni",
    "Chandini",
    "Chandani",
    "Chandra",
    "Chandira",
    "Chandrabhaga",
    "Chandrakala",
    "Chandrakin",
    "Chandramani",
    "Chandrani",
    "Chandraprabha",
    "Chandraswaroopa",
    "Chandravati",
    "Chapala",
    "Charumati",
    "Charvi",
    "Chatura",
    "Chitrali",
    "Chitramala",
    "Chitrangada",
    "Daksha",
    "Dakshayani",
    "Damayanti",
    "Darshwana",
    "Deepali",
    "Dipali",
    "Deeptimoyee",
    "Deeptimayee",
    "Devangana",
    "Devani",
    "Devasree",
    "Devi",
    "Daevi",
    "Devika",
    "Daevika",
    "Dhaanyalakshmi",
    "Dhanalakshmi",
    "Dhana",
    "Dhanadeepa",
    "Dhara",
    "Dharani",
    "Dharitri",
    "Dhatri",
    "Diksha",
    "Deeksha",
    "Divya",
    "Draupadi",
    "Dulari",
    "Durga",
    "Durgeshwari",
    "Ekaparnika",
    "Elakshi",
    "Enakshi",
    "Esha",
    "Eshana",
    "Eshita",
    "Gautami",
    "Gayatri",
    "Geeta",
    "Geetanjali",
    "Gitanjali",
    "Gemine",
    "Gemini",
    "Girja",
    "Girija",
    "Gita",
    "Hamsini",
    "Harinakshi",
    "Harita",
    "Heema",
    "Himadri",
    "Himani",
    "Hiranya",
    "Indira",
    "Jaimini",
    "Jaya",
    "Jyoti",
    "Jyotsana",
    "Kali",
    "Kalinda",
    "Kalpana",
    "Kalyani",
    "Kama",
    "Kamala",
    "Kamla",
    "Kanchan",
    "Kanishka",
    "Kanti",
    "Kashyapi",
    "Kumari",
    "Kumuda",
    "Lakshmi",
    "Laxmi",
    "Lalita",
    "Lavanya",
    "Leela",
    "Lila",
    "Leela",
    "Madhuri",
    "Malti",
    "Malati",
    "Mandakini",
    "Mandaakin",
    "Mangala",
    "Mangalya",
    "Mani",
    "Manisha",
    "Manjusha",
    "Meena",
    "Mina",
    "Meenakshi",
    "Minakshi",
    "Menka",
    "Menaka",
    "Mohana",
    "Mohini",
    "Nalini",
    "Nikita",
    "Ojaswini",
    "Omana",
    "Oormila",
    "Urmila",
    "Opalina",
    "Opaline",
    "Padma",
    "Parvati",
    "Poornima",
    "Purnima",
    "Pramila",
    "Prasanna",
    "Preity",
    "Prema",
    "Priya",
    "Priyala",
    "Pushti",
    "Radha",
    "Rageswari",
    "Rageshwari",
    "Rajinder",
    "Ramaa",
    "Rati",
    "Rita",
    "Rohana",
    "Rukhmani",
    "Rukmin",
    "Rupinder",
    "Sanya",
    "Sarada",
    "Sharda",
    "Sarala",
    "Sarla",
    "Saraswati",
    "Sarisha",
    "Saroja",
    "Shakti",
    "Shakuntala",
    "Shanti",
    "Sharmila",
    "Shashi",
    "Shashikala",
    "Sheela",
    "Shivakari",
    "Shobhana",
    "Shresth",
    "Shresthi",
    "Shreya",
    "Shreyashi",
    "Shridevi",
    "Shrishti",
    "Shubha",
    "Shubhaprada",
    "Siddhi",
    "Sitara",
    "Sloka",
    "Smita",
    "Smriti",
    "Soma",
    "Subhashini",
    "Subhasini",
    "Sucheta",
    "Sudeva",
    "Sujata",
    "Sukanya",
    "Suma",
    "Suma",
    "Sumitra",
    "Sunita",
    "Suryakantam",
    "Sushma",
    "Swara",
    "Swarnalata",
    "Sweta",
    "Shwet",
    "Tanirika",
    "Tanushree",
    "Tanushri",
    "Tanushri",
    "Tanya",
    "Tara",
    "Trisha",
    "Uma",
    "Usha",
    "Vaijayanti",
    "Vaijayanthi",
    "Baijayanti",
    "Vaishvi",
    "Vaishnavi",
    "Vaishno",
    "Varalakshmi",
    "Vasudha",
    "Vasundhara",
    "Veda",
    "Vedanshi",
    "Vidya",
    "Vimala",
    "Vrinda",
    "Vrund",
    "Aadi",
    "Aadidev",
    "Aadinath",
    "Aaditya",
    "Aagam",
    "Aagney",
    "Aamod",
    "Aanandaswarup",
    "Anand Swarup",
    "Aanjaneya",
    "Anjaneya",
    "Aaryan",
    "Aryan",
    "Aatmaj",
    "Aatreya",
    "Aayushmaan",
    "Aayushman",
    "Abhaidev",
    "Abhaya",
    "Abhirath",
    "Abhisyanta",
    "Acaryatanaya",
    "Achalesvara",
    "Acharyanandana",
    "Acharyasuta",
    "Achintya",
    "Achyut",
    "Adheesh",
    "Adhiraj",
    "Adhrit",
    "Adikavi",
    "Adinath",
    "Aditeya",
    "Aditya",
    "Adityanandan",
    "Adityanandana",
    "Adripathi",
    "Advaya",
    "Agasti",
    "Agastya",
    "Agneya",
    "Aagneya",
    "Agnimitra",
    "Agniprava",
    "Agnivesh",
    "Agrata",
    "Ajit",
    "Ajeet",
    "Akroor",
    "Akshaj",
    "Akshat",
    "Akshayakeerti",
    "Alok",
    "Aalok",
    "Amaranaath",
    "Amarnath",
    "Amaresh",
    "Ambar",
    "Ameyatma",
    "Amish",
    "Amogh",
    "Amrit",
    "Anaadi",
    "Anagh",
    "Anal",
    "Anand",
    "Aanand",
    "Anang",
    "Anil",
    "Anilaabh",
    "Anilabh",
    "Anish",
    "Ankal",
    "Anunay",
    "Anurag",
    "Anuraag",
    "Archan",
    "Arindam",
    "Arjun",
    "Arnesh",
    "Arun",
    "Ashlesh",
    "Ashok",
    "Atmanand",
    "Atmananda",
    "Avadhesh",
    "Baalaaditya",
    "Baladitya",
    "Baalagopaal",
    "Balgopal",
    "Balagopal",
    "Bahula",
    "Bakula",
    "Bala",
    "Balaaditya",
    "Balachandra",
    "Balagovind",
    "Bandhu",
    "Bandhul",
    "Bankim",
    "Bankimchandra",
    "Bhadrak",
    "Bhadraksh",
    "Bhadran",
    "Bhagavaan",
    "Bhagvan",
    "Bharadwaj",
    "Bhardwaj",
    "Bharat",
    "Bhargava",
    "Bhasvan",
    "Bhaasvan",
    "Bhaswar",
    "Bhaaswar",
    "Bhaumik",
    "Bhaves",
    "Bheeshma",
    "Bhisham",
    "Bhishma",
    "Bhima",
    "Bhoj",
    "Bhramar",
    "Bhudev",
    "Bhudeva",
    "Bhupati",
    "Bhoopati",
    "Bhoopat",
    "Bhupen",
    "Bhushan",
    "Bhooshan",
    "Bhushit",
    "Bhooshit",
    "Bhuvanesh",
    "Bhuvaneshwar",
    "Bilva",
    "Bodhan",
    "Brahma",
    "Brahmabrata",
    "Brahmanandam",
    "Brahmaanand",
    "Brahmdev",
    "Brajendra",
    "Brajesh",
    "Brijesh",
    "Birjesh",
    "Budhil",
    "Chakor",
    "Chakradhar",
    "Chakravartee",
    "Chakravarti",
    "Chanakya",
    "Chaanakya",
    "Chandak",
    "Chandan",
    "Chandra",
    "Chandraayan",
    "Chandrabhan",
    "Chandradev",
    "Chandraketu",
    "Chandramauli",
    "Chandramohan",
    "Chandran",
    "Chandranath",
    "Chapal",
    "Charak",
    "Charuchandra",
    "Chaaruchandra",
    "Charuvrat",
    "Chatur",
    "Chaturaanan",
    "Chaturbhuj",
    "Chetan",
    "Chaten",
    "Chaitan",
    "Chetanaanand",
    "Chidaakaash",
    "Chidaatma",
    "Chidambar",
    "Chidambaram",
    "Chidananda",
    "Chinmayanand",
    "Chinmayananda",
    "Chiranjeev",
    "Chiranjeeve",
    "Chitraksh",
    "Daiwik",
    "Daksha",
    "Damodara",
    "Dandak",
    "Dandapaani",
    "Darshan",
    "Datta",
    "Dayaamay",
    "Dayamayee",
    "Dayaananda",
    "Dayaanidhi",
    "Kin",
    "Deenabandhu",
    "Deepan",
    "Deepankar",
    "Dipankar",
    "Deependra",
    "Dipendra",
    "Deepesh",
    "Dipesh",
    "Deeptanshu",
    "Deeptendu",
    "Diptendu",
    "Deeptiman",
    "Deeptimoy",
    "Deeptimay",
    "Dev",
    "Deb",
    "Devadatt",
    "Devagya",
    "Devajyoti",
    "Devak",
    "Devdan",
    "Deven",
    "Devesh",
    "Deveshwar",
    "Devi",
    "Devvrat",
    "Dhananjay",
    "Dhanapati",
    "Dhanpati",
    "Dhanesh",
    "Dhanu",
    "Dhanvin",
    "Dharmaketu",
    "Dhruv",
    "Dhyanesh",
    "Dhyaneshwar",
    "Digambar",
    "Digambara",
    "Dinakar",
    "Dinkar",
    "Dinesh",
    "Divaakar",
    "Divakar",
    "Deevakar",
    "Divjot",
    "Dron",
    "Drona",
    "Dwaipayan",
    "Dwaipayana",
    "Eekalabya",
    "Ekalavya",
    "Ekaksh",
    "Ekaaksh",
    "Ekaling",
    "Ekdant",
    "Ekadant",
    "Gajaadhar",
    "Gajadhar",
    "Gajbaahu",
    "Gajabahu",
    "Ganak",
    "Ganaka",
    "Ganapati",
    "Gandharv",
    "Gandharva",
    "Ganesh",
    "Gangesh",
    "Garud",
    "Garuda",
    "Gati",
    "Gatik",
    "Gaurang",
    "Gauraang",
    "Gauranga",
    "Gouranga",
    "Gautam",
    "Gautama",
    "Goutam",
    "Ghanaanand",
    "Ghanshyam",
    "Ghanashyam",
    "Giri",
    "Girik",
    "Girika",
    "Girindra",
    "Giriraaj",
    "Giriraj",
    "Girish",
    "Gopal",
    "Gopaal",
    "Gopi",
    "Gopee",
    "Gorakhnath",
    "Gorakhanatha",
    "Goswamee",
    "Goswami",
    "Gotum",
    "Gautam",
    "Govinda",
    "Gobinda",
    "Gudakesha",
    "Gudakesa",
    "Gurdev",
    "Guru",
    "Hari",
    "Harinarayan",
    "Harit",
    "Himadri",
    "Hiranmay",
    "Hiranmaya",
    "Hiranya",
    "Inder",
    "Indra",
    "Indra",
    "Jagadish",
    "Jagadisha",
    "Jagathi",
    "Jagdeep",
    "Jagdish",
    "Jagmeet",
    "Jahnu",
    "Jai",
    "Javas",
    "Jay",
    "Jitendra",
    "Jitender",
    "Jyotis",
    "Kailash",
    "Kama",
    "Kamalesh",
    "Kamlesh",
    "Kanak",
    "Kanaka",
    "Kannan",
    "Kannen",
    "Karan",
    "Karthik",
    "Kartik",
    "Karunanidhi",
    "Kashyap",
    "Kiran",
    "Kirti",
    "Keerti",
    "Krishna",
    "Krishnadas",
    "Krishnadasa",
    "Kumar",
    "Lai",
    "Lakshman",
    "Laxman",
    "Lakshmidhar",
    "Lakshminath",
    "Lal",
    "Laal",
    "Mahendra",
    "Mohinder",
    "Mahesh",
    "Maheswar",
    "Mani",
    "Manik",
    "Manikya",
    "Manoj",
    "Marut",
    "Mayoor",
    "Meghnad",
    "Meghnath",
    "Mohan",
    "Mukesh",
    "Mukul",
    "Nagabhushanam",
    "Nanda",
    "Narayan",
    "Narendra",
    "Narinder",
    "Naveen",
    "Navin",
    "Nawal",
    "Naval",
    "Nimit",
    "Niranjan",
    "Nirbhay",
    "Niro",
    "Param",
    "Paramartha",
    "Pran",
    "Pranay",
    "Prasad",
    "Prathamesh",
    "Prayag",
    "Prem",
    "Puneet",
    "Purushottam",
    "Rahul",
    "Raj",
    "Rajan",
    "Rajendra",
    "Rajinder",
    "Rajiv",
    "Rakesh",
    "Ramesh",
    "Rameshwar",
    "Ranjit",
    "Ranjeet",
    "Ravi",
    "Ritesh",
    "Rohan",
    "Rohit",
    "Rudra",
    "Sachin",
    "Sameer",
    "Samir",
    "Sanjay",
    "Sanka",
    "Sarvin",
    "Satish",
    "Satyen",
    "Shankar",
    "Shantanu",
    "Shashi",
    "Sher",
    "Shiv",
    "Siddarth",
    "Siddhran",
    "Som",
    "Somu",
    "Somnath",
    "Subhash",
    "Subodh",
    "Suman",
    "Suresh",
    "Surya",
    "Suryakant",
    "Suryakanta",
    "Sushil",
    "Susheel",
    "Swami",
    "Swapnil",
    "Tapan",
    "Tara",
    "Tarun",
    "Tej",
    "Tejas",
    "Trilochan",
    "Trilochana",
    "Trilok",
    "Trilokesh",
    "Triloki",
    "Triloki Nath",
    "Trilokanath",
    "Tushar",
    "Udai",
    "Udit",
    "Ujjawal",
    "Ujjwal",
    "Umang",
    "Upendra",
    "Uttam",
    "Vasudev",
    "Vasudeva",
    "Vedang",
    "Vedanga",
    "Vidhya",
    "Vidur",
    "Vidhur",
    "Vijay",
    "Vimal",
    "Vinay",
    "Vishnu",
    "Bishnu",
    "Vishwamitra",
    "Vyas",
    "Yogendra",
    "Yoginder",
    "Yogesh"
  ];
});

// node_modules/faker/lib/locales/en_IND/name/last_name.js
var require_last_name6 = __commonJS((exports, module) => {
  module["exports"] = [
    "Abbott",
    "Achari",
    "Acharya",
    "Adiga",
    "Agarwal",
    "Ahluwalia",
    "Ahuja",
    "Arora",
    "Asan",
    "Bandopadhyay",
    "Banerjee",
    "Bharadwaj",
    "Bhat",
    "Butt",
    "Bhattacharya",
    "Bhattathiri",
    "Chaturvedi",
    "Chattopadhyay",
    "Chopra",
    "Desai",
    "Deshpande",
    "Devar",
    "Dhawan",
    "Dubashi",
    "Dutta",
    "Dwivedi",
    "Embranthiri",
    "Ganaka",
    "Gandhi",
    "Gill",
    "Gowda",
    "Guha",
    "Guneta",
    "Gupta",
    "Iyer",
    "Iyengar",
    "Jain",
    "Jha",
    "Johar",
    "Joshi",
    "Kakkar",
    "Kaniyar",
    "Kapoor",
    "Kaul",
    "Kaur",
    "Khan",
    "Khanna",
    "Khatri",
    "Kocchar",
    "Mahajan",
    "Malik",
    "Marar",
    "Menon",
    "Mehra",
    "Mehrotra",
    "Mishra",
    "Mukhopadhyay",
    "Nayar",
    "Naik",
    "Nair",
    "Nambeesan",
    "Namboothiri",
    "Nehru",
    "Pandey",
    "Panicker",
    "Patel",
    "Patil",
    "Pilla",
    "Pillai",
    "Pothuvaal",
    "Prajapat",
    "Rana",
    "Reddy",
    "Saini",
    "Sethi",
    "Shah",
    "Sharma",
    "Shukla",
    "Singh",
    "Sinha",
    "Somayaji",
    "Tagore",
    "Talwar",
    "Tandon",
    "Trivedi",
    "Varrier",
    "Varma",
    "Varman",
    "Verma"
  ];
});

// node_modules/faker/lib/locales/en_IND/name/index.js
var require_name22 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name = require_first_name6();
  name2.last_name = require_last_name6();
});

// node_modules/faker/lib/locales/en_IND/address/postcode.js
var require_postcode10 = __commonJS((exports, module) => {
  module["exports"] = [
    "?#? #?#"
  ];
});

// node_modules/faker/lib/locales/en_IND/address/state.js
var require_state8 = __commonJS((exports, module) => {
  module["exports"] = [
    "Andra Pradesh",
    "Arunachal Pradesh",
    "Assam",
    "Bihar",
    "Chhattisgarh",
    "Goa",
    "Gujarat",
    "Haryana",
    "Himachal Pradesh",
    "Jammu and Kashmir",
    "Jharkhand",
    "Karnataka",
    "Kerala",
    "Madya Pradesh",
    "Maharashtra",
    "Manipur",
    "Meghalaya",
    "Mizoram",
    "Nagaland",
    "Orissa",
    "Punjab",
    "Rajasthan",
    "Sikkim",
    "Tamil Nadu",
    "Tripura",
    "Uttaranchal",
    "Uttar Pradesh",
    "West Bengal",
    "Andaman and Nicobar Islands",
    "Chandigarh",
    "Dadar and Nagar Haveli",
    "Daman and Diu",
    "Delhi",
    "Lakshadweep",
    "Pondicherry"
  ];
});

// node_modules/faker/lib/locales/en_IND/address/state_abbr.js
var require_state_abbr7 = __commonJS((exports, module) => {
  module["exports"] = [
    "AP",
    "AR",
    "AS",
    "BR",
    "CG",
    "DL",
    "GA",
    "GJ",
    "HR",
    "HP",
    "JK",
    "JS",
    "KA",
    "KL",
    "MP",
    "MH",
    "MN",
    "ML",
    "MZ",
    "NL",
    "OR",
    "PB",
    "RJ",
    "SK",
    "TN",
    "TR",
    "UK",
    "UP",
    "WB",
    "AN",
    "CH",
    "DN",
    "DD",
    "LD",
    "PY"
  ];
});

// node_modules/faker/lib/locales/en_IND/address/default_country.js
var require_default_country11 = __commonJS((exports, module) => {
  module["exports"] = [
    "India",
    "Indian Republic",
    "Bharat",
    "Hindustan"
  ];
});

// node_modules/faker/lib/locales/en_IND/address/index.js
var require_address12 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.postcode = require_postcode10();
  address.state = require_state8();
  address.state_abbr = require_state_abbr7();
  address.default_country = require_default_country11();
});

// node_modules/faker/lib/locales/en_IND/internet/free_email.js
var require_free_email7 = __commonJS((exports, module) => {
  module["exports"] = [
    "gmail.com",
    "yahoo.co.in",
    "hotmail.com"
  ];
});

// node_modules/faker/lib/locales/en_IND/internet/domain_suffix.js
var require_domain_suffix11 = __commonJS((exports, module) => {
  module["exports"] = [
    "in",
    "com",
    "biz",
    "info",
    "name",
    "net",
    "org",
    "co.in"
  ];
});

// node_modules/faker/lib/locales/en_IND/internet/index.js
var require_internet12 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.free_email = require_free_email7();
  internet.domain_suffix = require_domain_suffix11();
});

// node_modules/faker/lib/locales/en_IND/company/suffix.js
var require_suffix11 = __commonJS((exports, module) => {
  module["exports"] = [
    "Pvt Ltd",
    "Limited",
    "Ltd",
    "and Sons",
    "Corp",
    "Group",
    "Brothers"
  ];
});

// node_modules/faker/lib/locales/en_IND/company/index.js
var require_company9 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.suffix = require_suffix11();
});

// node_modules/faker/lib/locales/en_IND/phone_number/formats.js
var require_formats16 = __commonJS((exports, module) => {
  module["exports"] = [
    "+91###-###-####",
    "+91##########",
    "+91-###-#######"
  ];
});

// node_modules/faker/lib/locales/en_IND/phone_number/index.js
var require_phone_number11 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats16();
});

// node_modules/faker/lib/locales/en_IND/index.js
var require_en_IND = __commonJS((exports, module) => {
  var en_IND = {};
  module["exports"] = en_IND;
  en_IND.title = "India (English)";
  en_IND.name = require_name22();
  en_IND.address = require_address12();
  en_IND.internet = require_internet12();
  en_IND.company = require_company9();
  en_IND.phone_number = require_phone_number11();
});

// node_modules/faker/lib/locales/en_US/internet/domain_suffix.js
var require_domain_suffix12 = __commonJS((exports, module) => {
  module["exports"] = [
    "com",
    "us",
    "biz",
    "info",
    "name",
    "net",
    "org"
  ];
});

// node_modules/faker/lib/locales/en_US/internet/index.js
var require_internet13 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.domain_suffix = require_domain_suffix12();
});

// node_modules/faker/lib/locales/en_US/address/default_country.js
var require_default_country12 = __commonJS((exports, module) => {
  module["exports"] = [
    "United States",
    "United States of America",
    "USA"
  ];
});

// node_modules/faker/lib/locales/en_US/address/postcode_by_state.js
var require_postcode_by_state2 = __commonJS((exports, module) => {
  module["exports"] = {
    AL: "350##",
    AK: "995##",
    AS: "967##",
    AZ: "850##",
    AR: "717##",
    CA: "900##",
    CO: "800##",
    CT: "061##",
    DC: "204##",
    DE: "198##",
    FL: "322##",
    GA: "301##",
    HI: "967##",
    ID: "832##",
    IL: "600##",
    IN: "463##",
    IA: "510##",
    KS: "666##",
    KY: "404##",
    LA: "701##",
    ME: "042##",
    MD: "210##",
    MA: "026##",
    MI: "480##",
    MN: "555##",
    MS: "387##",
    MO: "650##",
    MT: "590##",
    NE: "688##",
    NV: "898##",
    NH: "036##",
    NJ: "076##",
    NM: "880##",
    NY: "122##",
    NC: "288##",
    ND: "586##",
    OH: "444##",
    OK: "730##",
    OR: "979##",
    PA: "186##",
    RI: "029##",
    SC: "299##",
    SD: "577##",
    TN: "383##",
    TX: "798##",
    UT: "847##",
    VT: "050##",
    VA: "222##",
    WA: "990##",
    WV: "247##",
    WI: "549##",
    WY: "831##"
  };
});

// node_modules/faker/lib/locales/en_US/address/index.js
var require_address13 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.default_country = require_default_country12();
  address.postcode_by_state = require_postcode_by_state2();
});

// node_modules/faker/lib/locales/en_US/phone_number/area_code.js
var require_area_code = __commonJS((exports, module) => {
  module["exports"] = [
    "201",
    "202",
    "203",
    "205",
    "206",
    "207",
    "208",
    "209",
    "210",
    "212",
    "213",
    "214",
    "215",
    "216",
    "217",
    "218",
    "219",
    "224",
    "225",
    "227",
    "228",
    "229",
    "231",
    "234",
    "239",
    "240",
    "248",
    "251",
    "252",
    "253",
    "254",
    "256",
    "260",
    "262",
    "267",
    "269",
    "270",
    "276",
    "281",
    "283",
    "301",
    "302",
    "303",
    "304",
    "305",
    "307",
    "308",
    "309",
    "310",
    "312",
    "313",
    "314",
    "315",
    "316",
    "317",
    "318",
    "319",
    "320",
    "321",
    "323",
    "330",
    "331",
    "334",
    "336",
    "337",
    "339",
    "347",
    "351",
    "352",
    "360",
    "361",
    "386",
    "401",
    "402",
    "404",
    "405",
    "406",
    "407",
    "408",
    "409",
    "410",
    "412",
    "413",
    "414",
    "415",
    "417",
    "419",
    "423",
    "424",
    "425",
    "434",
    "435",
    "440",
    "443",
    "445",
    "464",
    "469",
    "470",
    "475",
    "478",
    "479",
    "480",
    "484",
    "501",
    "502",
    "503",
    "504",
    "505",
    "507",
    "508",
    "509",
    "510",
    "512",
    "513",
    "515",
    "516",
    "517",
    "518",
    "520",
    "530",
    "540",
    "541",
    "551",
    "557",
    "559",
    "561",
    "562",
    "563",
    "564",
    "567",
    "570",
    "571",
    "573",
    "574",
    "580",
    "585",
    "586",
    "601",
    "602",
    "603",
    "605",
    "606",
    "607",
    "608",
    "609",
    "610",
    "612",
    "614",
    "615",
    "616",
    "617",
    "618",
    "619",
    "620",
    "623",
    "626",
    "630",
    "631",
    "636",
    "641",
    "646",
    "650",
    "651",
    "660",
    "661",
    "662",
    "667",
    "678",
    "682",
    "701",
    "702",
    "703",
    "704",
    "706",
    "707",
    "708",
    "712",
    "713",
    "714",
    "715",
    "716",
    "717",
    "718",
    "719",
    "720",
    "724",
    "727",
    "731",
    "732",
    "734",
    "737",
    "740",
    "754",
    "757",
    "760",
    "763",
    "765",
    "770",
    "772",
    "773",
    "774",
    "775",
    "781",
    "785",
    "786",
    "801",
    "802",
    "803",
    "804",
    "805",
    "806",
    "808",
    "810",
    "812",
    "813",
    "814",
    "815",
    "816",
    "817",
    "818",
    "828",
    "830",
    "831",
    "832",
    "835",
    "843",
    "845",
    "847",
    "848",
    "850",
    "856",
    "857",
    "858",
    "859",
    "860",
    "862",
    "863",
    "864",
    "865",
    "870",
    "872",
    "878",
    "901",
    "903",
    "904",
    "906",
    "907",
    "908",
    "909",
    "910",
    "912",
    "913",
    "914",
    "915",
    "916",
    "917",
    "918",
    "919",
    "920",
    "925",
    "928",
    "931",
    "936",
    "937",
    "940",
    "941",
    "947",
    "949",
    "952",
    "954",
    "956",
    "959",
    "970",
    "971",
    "972",
    "973",
    "975",
    "978",
    "979",
    "980",
    "984",
    "985",
    "989"
  ];
});

// node_modules/faker/lib/locales/en_US/phone_number/exchange_code.js
var require_exchange_code = __commonJS((exports, module) => {
  module["exports"] = [
    "201",
    "202",
    "203",
    "205",
    "206",
    "207",
    "208",
    "209",
    "210",
    "212",
    "213",
    "214",
    "215",
    "216",
    "217",
    "218",
    "219",
    "224",
    "225",
    "227",
    "228",
    "229",
    "231",
    "234",
    "239",
    "240",
    "248",
    "251",
    "252",
    "253",
    "254",
    "256",
    "260",
    "262",
    "267",
    "269",
    "270",
    "276",
    "281",
    "283",
    "301",
    "302",
    "303",
    "304",
    "305",
    "307",
    "308",
    "309",
    "310",
    "312",
    "313",
    "314",
    "315",
    "316",
    "317",
    "318",
    "319",
    "320",
    "321",
    "323",
    "330",
    "331",
    "334",
    "336",
    "337",
    "339",
    "347",
    "351",
    "352",
    "360",
    "361",
    "386",
    "401",
    "402",
    "404",
    "405",
    "406",
    "407",
    "408",
    "409",
    "410",
    "412",
    "413",
    "414",
    "415",
    "417",
    "419",
    "423",
    "424",
    "425",
    "434",
    "435",
    "440",
    "443",
    "445",
    "464",
    "469",
    "470",
    "475",
    "478",
    "479",
    "480",
    "484",
    "501",
    "502",
    "503",
    "504",
    "505",
    "507",
    "508",
    "509",
    "510",
    "512",
    "513",
    "515",
    "516",
    "517",
    "518",
    "520",
    "530",
    "540",
    "541",
    "551",
    "557",
    "559",
    "561",
    "562",
    "563",
    "564",
    "567",
    "570",
    "571",
    "573",
    "574",
    "580",
    "585",
    "586",
    "601",
    "602",
    "603",
    "605",
    "606",
    "607",
    "608",
    "609",
    "610",
    "612",
    "614",
    "615",
    "616",
    "617",
    "618",
    "619",
    "620",
    "623",
    "626",
    "630",
    "631",
    "636",
    "641",
    "646",
    "650",
    "651",
    "660",
    "661",
    "662",
    "667",
    "678",
    "682",
    "701",
    "702",
    "703",
    "704",
    "706",
    "707",
    "708",
    "712",
    "713",
    "714",
    "715",
    "716",
    "717",
    "718",
    "719",
    "720",
    "724",
    "727",
    "731",
    "732",
    "734",
    "737",
    "740",
    "754",
    "757",
    "760",
    "763",
    "765",
    "770",
    "772",
    "773",
    "774",
    "775",
    "781",
    "785",
    "786",
    "801",
    "802",
    "803",
    "804",
    "805",
    "806",
    "808",
    "810",
    "812",
    "813",
    "814",
    "815",
    "816",
    "817",
    "818",
    "828",
    "830",
    "831",
    "832",
    "835",
    "843",
    "845",
    "847",
    "848",
    "850",
    "856",
    "857",
    "858",
    "859",
    "860",
    "862",
    "863",
    "864",
    "865",
    "870",
    "872",
    "878",
    "901",
    "903",
    "904",
    "906",
    "907",
    "908",
    "909",
    "910",
    "912",
    "913",
    "914",
    "915",
    "916",
    "917",
    "918",
    "919",
    "920",
    "925",
    "928",
    "931",
    "936",
    "937",
    "940",
    "941",
    "947",
    "949",
    "952",
    "954",
    "956",
    "959",
    "970",
    "971",
    "972",
    "973",
    "975",
    "978",
    "979",
    "980",
    "984",
    "985",
    "989"
  ];
});

// node_modules/faker/lib/locales/en_US/phone_number/index.js
var require_phone_number12 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.area_code = require_area_code();
  phone_number.exchange_code = require_exchange_code();
});

// node_modules/faker/lib/locales/en_US/index.js
var require_en_US = __commonJS((exports, module) => {
  var en_US7 = {};
  module["exports"] = en_US7;
  en_US7.title = "United States (English)";
  en_US7.internet = require_internet13();
  en_US7.address = require_address13();
  en_US7.phone_number = require_phone_number12();
});

// node_modules/faker/lib/locales/en_au_ocker/name/first_name.js
var require_first_name7 = __commonJS((exports, module) => {
  module["exports"] = [
    "Charlotte",
    "Ava",
    "Chloe",
    "Emily",
    "Olivia",
    "Zoe",
    "Lily",
    "Sophie",
    "Amelia",
    "Sofia",
    "Ella",
    "Isabella",
    "Ruby",
    "Sienna",
    "Mia+3",
    "Grace",
    "Emma",
    "Ivy",
    "Layla",
    "Abigail",
    "Isla",
    "Hannah",
    "Zara",
    "Lucy",
    "Evie",
    "Annabelle",
    "Madison",
    "Alice",
    "Georgia",
    "Maya",
    "Madeline",
    "Audrey",
    "Scarlett",
    "Isabelle",
    "Chelsea",
    "Mila",
    "Holly",
    "Indiana",
    "Poppy",
    "Harper",
    "Sarah",
    "Alyssa",
    "Jasmine",
    "Imogen",
    "Hayley",
    "Pheobe",
    "Eva",
    "Evelyn",
    "Mackenzie",
    "Ayla",
    "Oliver",
    "Jack",
    "Jackson",
    "William",
    "Ethan",
    "Charlie",
    "Lucas",
    "Cooper",
    "Lachlan",
    "Noah",
    "Liam",
    "Alexander",
    "Max",
    "Isaac",
    "Thomas",
    "Xavier",
    "Oscar",
    "Benjamin",
    "Aiden",
    "Mason",
    "Samuel",
    "James",
    "Levi",
    "Riley",
    "Harrison",
    "Ryan",
    "Henry",
    "Jacob",
    "Joshua",
    "Leo",
    "Zach",
    "Harry",
    "Hunter",
    "Flynn",
    "Archie",
    "Tyler",
    "Elijah",
    "Hayden",
    "Jayden",
    "Blake",
    "Archer",
    "Ashton",
    "Sebastian",
    "Zachery",
    "Lincoln",
    "Mitchell",
    "Luca",
    "Nathan",
    "Kai",
    "Connor",
    "Tom",
    "Nigel",
    "Matt",
    "Sean"
  ];
});

// node_modules/faker/lib/locales/en_au_ocker/name/last_name.js
var require_last_name7 = __commonJS((exports, module) => {
  module["exports"] = [
    "Smith",
    "Jones",
    "Williams",
    "Brown",
    "Wilson",
    "Taylor",
    "Morton",
    "White",
    "Martin",
    "Anderson",
    "Thompson",
    "Nguyen",
    "Thomas",
    "Walker",
    "Harris",
    "Lee",
    "Ryan",
    "Robinson",
    "Kelly",
    "King",
    "Rausch",
    "Ridge",
    "Connolly",
    "LeQuesne"
  ];
});

// node_modules/faker/lib/locales/en_au_ocker/name/ocker_first_name.js
var require_ocker_first_name = __commonJS((exports, module) => {
  module["exports"] = [
    "Bazza",
    "Bluey",
    "Davo",
    "Johno",
    "Shano",
    "Shazza"
  ];
});

// node_modules/faker/lib/locales/en_au_ocker/name/index.js
var require_name23 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name = require_first_name7();
  name2.last_name = require_last_name7();
  name2.ocker_first_name = require_ocker_first_name();
});

// node_modules/faker/lib/locales/en_au_ocker/company/suffix.js
var require_suffix12 = __commonJS((exports, module) => {
  module["exports"] = [
    "Pty Ltd",
    "and Sons",
    "Corp",
    "Group",
    "Brothers",
    "Partners"
  ];
});

// node_modules/faker/lib/locales/en_au_ocker/company/index.js
var require_company10 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.suffix = require_suffix12();
});

// node_modules/faker/lib/locales/en_au_ocker/internet/domain_suffix.js
var require_domain_suffix13 = __commonJS((exports, module) => {
  module["exports"] = [
    "com.au",
    "com",
    "net.au",
    "net",
    "org.au",
    "org"
  ];
});

// node_modules/faker/lib/locales/en_au_ocker/internet/index.js
var require_internet14 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.domain_suffix = require_domain_suffix13();
});

// node_modules/faker/lib/locales/en_au_ocker/address/street_root.js
var require_street_root3 = __commonJS((exports, module) => {
  module["exports"] = [
    "Ramsay Street",
    "Bonnie Doon",
    "Cavill Avenue",
    "Queen Street"
  ];
});

// node_modules/faker/lib/locales/en_au_ocker/address/street_name.js
var require_street_name6 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_root}"
  ];
});

// node_modules/faker/lib/locales/en_au_ocker/address/city_prefix.js
var require_city_prefix3 = __commonJS((exports, module) => {
  module["exports"] = [
    "Bondi",
    "Burleigh Heads",
    "Carlton",
    "Fitzroy",
    "Fremantle",
    "Glenelg",
    "Manly",
    "Noosa",
    "Stones Corner",
    "St Kilda",
    "Surry Hills",
    "Yarra Valley"
  ];
});

// node_modules/faker/lib/locales/en_au_ocker/address/city.js
var require_city6 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{city_prefix}"
  ];
});

// node_modules/faker/lib/locales/en_au_ocker/address/state_abbr.js
var require_state_abbr8 = __commonJS((exports, module) => {
  module["exports"] = [
    "NSW",
    "QLD",
    "NT",
    "SA",
    "WA",
    "TAS",
    "ACT",
    "VIC"
  ];
});

// node_modules/faker/lib/locales/en_au_ocker/address/region.js
var require_region = __commonJS((exports, module) => {
  module["exports"] = [
    "South East Queensland",
    "Wide Bay Burnett",
    "Margaret River",
    "Port Pirie",
    "Gippsland",
    "Elizabeth",
    "Barossa"
  ];
});

// node_modules/faker/lib/locales/en_au_ocker/address/state.js
var require_state9 = __commonJS((exports, module) => {
  module["exports"] = [
    "New South Wales",
    "Queensland",
    "Northern Territory",
    "South Australia",
    "Western Australia",
    "Tasmania",
    "Australian Capital Territory",
    "Victoria"
  ];
});

// node_modules/faker/lib/locales/en_au_ocker/address/postcode.js
var require_postcode11 = __commonJS((exports, module) => {
  module["exports"] = [
    "0###",
    "2###",
    "3###",
    "4###",
    "5###",
    "6###",
    "7###"
  ];
});

// node_modules/faker/lib/locales/en_au_ocker/address/building_number.js
var require_building_number7 = __commonJS((exports, module) => {
  module["exports"] = [
    "####",
    "###",
    "##"
  ];
});

// node_modules/faker/lib/locales/en_au_ocker/address/street_suffix.js
var require_street_suffix4 = __commonJS((exports, module) => {
  module["exports"] = [
    "Avenue",
    "Boulevard",
    "Circle",
    "Circuit",
    "Court",
    "Crescent",
    "Crest",
    "Drive",
    "Estate Dr",
    "Grove",
    "Hill",
    "Island",
    "Junction",
    "Knoll",
    "Lane",
    "Loop",
    "Mall",
    "Manor",
    "Meadow",
    "Mews",
    "Parade",
    "Parkway",
    "Pass",
    "Place",
    "Plaza",
    "Ridge",
    "Road",
    "Run",
    "Square",
    "Station St",
    "Street",
    "Summit",
    "Terrace",
    "Track",
    "Trail",
    "View Rd",
    "Way"
  ];
});

// node_modules/faker/lib/locales/en_au_ocker/address/default_country.js
var require_default_country13 = __commonJS((exports, module) => {
  module["exports"] = [
    "Australia"
  ];
});

// node_modules/faker/lib/locales/en_au_ocker/address/index.js
var require_address14 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.street_root = require_street_root3();
  address.street_name = require_street_name6();
  address.city_prefix = require_city_prefix3();
  address.city = require_city6();
  address.state_abbr = require_state_abbr8();
  address.region = require_region();
  address.state = require_state9();
  address.postcode = require_postcode11();
  address.building_number = require_building_number7();
  address.street_suffix = require_street_suffix4();
  address.default_country = require_default_country13();
});

// node_modules/faker/lib/locales/en_au_ocker/phone_number/formats.js
var require_formats17 = __commonJS((exports, module) => {
  module["exports"] = [
    "0# #### ####",
    "+61 # #### ####",
    "04## ### ###",
    "+61 4## ### ###"
  ];
});

// node_modules/faker/lib/locales/en_au_ocker/phone_number/index.js
var require_phone_number13 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats17();
});

// node_modules/faker/lib/locales/en_au_ocker/index.js
var require_en_au_ocker = __commonJS((exports, module) => {
  var en_au_ocker = {};
  module["exports"] = en_au_ocker;
  en_au_ocker.title = "Australia Ocker (English)";
  en_au_ocker.name = require_name23();
  en_au_ocker.company = require_company10();
  en_au_ocker.internet = require_internet14();
  en_au_ocker.address = require_address14();
  en_au_ocker.phone_number = require_phone_number13();
});

// node_modules/faker/lib/locales/es/address/city_prefix.js
var require_city_prefix4 = __commonJS((exports, module) => {
  module["exports"] = [
    "Parla",
    "Telde",
    "Baracaldo",
    "San Fernando",
    "Torrevieja",
    "Lugo",
    "Santiago de Compostela",
    "Gerona",
    "Cáceres",
    "Lorca",
    "Coslada",
    "Talavera de la Reina",
    "El Puerto de Santa María",
    "Cornellá de Llobregat",
    "Avilés",
    "Palencia",
    "Gecho",
    "Orihuela",
    "Pontevedra",
    "Pozuelo de Alarcón",
    "Toledo",
    "El Ejido",
    "Guadalajara",
    "Gandía",
    "Ceuta",
    "Ferrol",
    "Chiclana de la Frontera",
    "Manresa",
    "Roquetas de Mar",
    "Ciudad Real",
    "Rubí",
    "Benidorm",
    "San Sebastían de los Reyes",
    "Ponferrada",
    "Zamora",
    "Alcalá de Guadaira",
    "Fuengirola",
    "Mijas",
    "Sanlúcar de Barrameda",
    "La Línea de la Concepción",
    "Majadahonda",
    "Sagunto",
    "El Prat de LLobregat",
    "Viladecans",
    "Linares",
    "Alcoy",
    "Irún",
    "Estepona",
    "Torremolinos",
    "Rivas-Vaciamadrid",
    "Molina de Segura",
    "Paterna",
    "Granollers",
    "Santa Lucía de Tirajana",
    "Motril",
    "Cerdañola del Vallés",
    "Arrecife",
    "Segovia",
    "Torrelavega",
    "Elda",
    "Mérida",
    "Ávila",
    "Valdemoro",
    "Cuenta",
    "Collado Villalba",
    "Benalmádena",
    "Mollet del Vallés",
    "Puertollano",
    "Madrid",
    "Barcelona",
    "Valencia",
    "Sevilla",
    "Zaragoza",
    "Málaga",
    "Murcia",
    "Palma de Mallorca",
    "Las Palmas de Gran Canaria",
    "Bilbao",
    "Córdoba",
    "Alicante",
    "Valladolid",
    "Vigo",
    "Gijón",
    "Hospitalet de LLobregat",
    "La Coruña",
    "Granada",
    "Vitoria",
    "Elche",
    "Santa Cruz de Tenerife",
    "Oviedo",
    "Badalona",
    "Cartagena",
    "Móstoles",
    "Jerez de la Frontera",
    "Tarrasa",
    "Sabadell",
    "Alcalá de Henares",
    "Pamplona",
    "Fuenlabrada",
    "Almería",
    "San Sebastián",
    "Leganés",
    "Santander",
    "Burgos",
    "Castellón de la Plana",
    "Alcorcón",
    "Albacete",
    "Getafe",
    "Salamanca",
    "Huelva",
    "Logroño",
    "Badajoz",
    "San Cristróbal de la Laguna",
    "León",
    "Tarragona",
    "Cádiz",
    "Lérida",
    "Marbella",
    "Mataró",
    "Dos Hermanas",
    "Santa Coloma de Gramanet",
    "Jaén",
    "Algeciras",
    "Torrejón de Ardoz",
    "Orense",
    "Alcobendas",
    "Reus",
    "Calahorra",
    "Inca"
  ];
});

// node_modules/faker/lib/locales/es/address/country.js
var require_country6 = __commonJS((exports, module) => {
  module["exports"] = [
    "Afganistán",
    "Albania",
    "Argelia",
    "Andorra",
    "Angola",
    "Argentina",
    "Armenia",
    "Aruba",
    "Australia",
    "Austria",
    "Azerbayán",
    "Bahamas",
    "Barein",
    "Bangladesh",
    "Barbados",
    "Bielorusia",
    "Bélgica",
    "Belice",
    "Bermuda",
    "Bután",
    "Bolivia",
    "Bosnia Herzegovina",
    "Botswana",
    "Brasil",
    "Bulgaria",
    "Burkina Faso",
    "Burundi",
    "Camboya",
    "Camerún",
    "Canada",
    "Cabo Verde",
    "Islas Caimán",
    "Chad",
    "Chile",
    "China",
    "Isla de Navidad",
    "Colombia",
    "Comodos",
    "Congo",
    "Costa Rica",
    "Costa de Marfil",
    "Croacia",
    "Cuba",
    "Chipre",
    "República Checa",
    "Dinamarca",
    "Dominica",
    "República Dominicana",
    "Ecuador",
    "Egipto",
    "El Salvador",
    "Guinea Ecuatorial",
    "Eritrea",
    "Estonia",
    "Etiopía",
    "Islas Faro",
    "Fiji",
    "Finlandia",
    "Francia",
    "Gabón",
    "Gambia",
    "Georgia",
    "Alemania",
    "Ghana",
    "Grecia",
    "Groenlandia",
    "Granada",
    "Guadalupe",
    "Guam",
    "Guatemala",
    "Guinea",
    "Guinea-Bisau",
    "Guayana",
    "Haiti",
    "Honduras",
    "Hong Kong",
    "Hungria",
    "Islandia",
    "India",
    "Indonesia",
    "Iran",
    "Irak",
    "Irlanda",
    "Italia",
    "Jamaica",
    "Japón",
    "Jordania",
    "Kazajistan",
    "Kenia",
    "Kiribati",
    "Corea",
    "Kuwait",
    "Letonia",
    "Líbano",
    "Liberia",
    "Liechtenstein",
    "Lituania",
    "Luxemburgo",
    "Macao",
    "Macedonia",
    "Madagascar",
    "Malawi",
    "Malasia",
    "Maldivas",
    "Mali",
    "Malta",
    "Martinica",
    "Mauritania",
    "Méjico",
    "Micronesia",
    "Moldavia",
    "Mónaco",
    "Mongolia",
    "Montenegro",
    "Montserrat",
    "Marruecos",
    "Mozambique",
    "Namibia",
    "Nauru",
    "Nepal",
    "Holanda",
    "Nueva Zelanda",
    "Nicaragua",
    "Niger",
    "Nigeria",
    "Noruega",
    "Omán",
    "Pakistan",
    "Panamá",
    "Papúa Nueva Guinea",
    "Paraguay",
    "Perú",
    "Filipinas",
    "Poland",
    "Portugal",
    "Puerto Rico",
    "Rusia",
    "Ruanda",
    "Samoa",
    "San Marino",
    "Santo Tomé y Principe",
    "Arabia Saudí",
    "Senegal",
    "Serbia",
    "Seychelles",
    "Sierra Leona",
    "Singapur",
    "Eslovaquia",
    "Eslovenia",
    "Somalia",
    "España",
    "Sri Lanka",
    "Sudán",
    "Suriname",
    "Suecia",
    "Suiza",
    "Siria",
    "Taiwan",
    "Tajikistan",
    "Tanzania",
    "Tailandia",
    "Timor-Leste",
    "Togo",
    "Tonga",
    "Trinidad y Tobago",
    "Tunez",
    "Turquia",
    "Uganda",
    "Ucrania",
    "Emiratos Árabes Unidos",
    "Reino Unido",
    "Estados Unidos de América",
    "Uruguay",
    "Uzbekistan",
    "Vanuatu",
    "Venezuela",
    "Vietnam",
    "Yemen",
    "Zambia",
    "Zimbabwe"
  ];
});

// node_modules/faker/lib/locales/es/address/building_number.js
var require_building_number8 = __commonJS((exports, module) => {
  module["exports"] = [
    " s/n.",
    ", #",
    ", ##",
    " #",
    " ##"
  ];
});

// node_modules/faker/lib/locales/es/address/street_suffix.js
var require_street_suffix5 = __commonJS((exports, module) => {
  module["exports"] = [
    "Aldea",
    "Apartamento",
    "Arrabal",
    "Arroyo",
    "Avenida",
    "Bajada",
    "Barranco",
    "Barrio",
    "Bloque",
    "Calle",
    "Calleja",
    "Camino",
    "Carretera",
    "Caserio",
    "Colegio",
    "Colonia",
    "Conjunto",
    "Cuesta",
    "Chalet",
    "Edificio",
    "Entrada",
    "Escalinata",
    "Explanada",
    "Extramuros",
    "Extrarradio",
    "Ferrocarril",
    "Glorieta",
    "Gran Subida",
    "Grupo",
    "Huerta",
    "Jardines",
    "Lado",
    "Lugar",
    "Manzana",
    "Masía",
    "Mercado",
    "Monte",
    "Muelle",
    "Municipio",
    "Parcela",
    "Parque",
    "Partida",
    "Pasaje",
    "Paseo",
    "Plaza",
    "Poblado",
    "Polígono",
    "Prolongación",
    "Puente",
    "Puerta",
    "Quinta",
    "Ramal",
    "Rambla",
    "Rampa",
    "Riera",
    "Rincón",
    "Ronda",
    "Rua",
    "Salida",
    "Sector",
    "Sección",
    "Senda",
    "Solar",
    "Subida",
    "Terrenos",
    "Torrente",
    "Travesía",
    "Urbanización",
    "Vía",
    "Vía Pública"
  ];
});

// node_modules/faker/lib/locales/es/address/secondary_address.js
var require_secondary_address6 = __commonJS((exports, module) => {
  module["exports"] = [
    "Esc. ###",
    "Puerta ###"
  ];
});

// node_modules/faker/lib/locales/es/address/postcode.js
var require_postcode12 = __commonJS((exports, module) => {
  module["exports"] = [
    "#####"
  ];
});

// node_modules/faker/lib/locales/es/address/province.js
var require_province = __commonJS((exports, module) => {
  module["exports"] = [
    "Álava",
    "Albacete",
    "Alicante",
    "Almería",
    "Asturias",
    "Ávila",
    "Badajoz",
    "Barcelona",
    "Burgos",
    "Cantabria",
    "Castellón",
    "Ciudad Real",
    "Cuenca",
    "Cáceres",
    "Cádiz",
    "Córdoba",
    "Gerona",
    "Granada",
    "Guadalajara",
    "Guipúzcoa",
    "Huelva",
    "Huesca",
    "Islas Baleares",
    "Jaén",
    "La Coruña",
    "La Rioja",
    "Las Palmas",
    "León",
    "Lugo",
    "lérida",
    "Madrid",
    "Murcia",
    "Málaga",
    "Navarra",
    "Orense",
    "Palencia",
    "Pontevedra",
    "Salamanca",
    "Santa Cruz de Tenerife",
    "Segovia",
    "Sevilla",
    "Soria",
    "Tarragona",
    "Teruel",
    "Toledo",
    "Valencia",
    "Valladolid",
    "Vizcaya",
    "Zamora",
    "Zaragoza"
  ];
});

// node_modules/faker/lib/locales/es/address/state.js
var require_state10 = __commonJS((exports, module) => {
  module["exports"] = [
    "Andalucía",
    "Aragón",
    "Principado de Asturias",
    "Baleares",
    "Canarias",
    "Cantabria",
    "Castilla-La Mancha",
    "Castilla y León",
    "Cataluña",
    "Comunidad Valenciana",
    "Extremadura",
    "Galicia",
    "La Rioja",
    "Comunidad de Madrid",
    "Navarra",
    "País Vasco",
    "Región de Murcia"
  ];
});

// node_modules/faker/lib/locales/es/address/state_abbr.js
var require_state_abbr9 = __commonJS((exports, module) => {
  module["exports"] = [
    "And",
    "Ara",
    "Ast",
    "Bal",
    "Can",
    "Cbr",
    "Man",
    "Leo",
    "Cat",
    "Com",
    "Ext",
    "Gal",
    "Rio",
    "Mad",
    "Nav",
    "Vas",
    "Mur"
  ];
});

// node_modules/faker/lib/locales/es/address/time_zone.js
var require_time_zone3 = __commonJS((exports, module) => {
  module["exports"] = [
    "Pacífico/Midway",
    "Pacífico/Pago_Pago",
    "Pacífico/Honolulu",
    "America/Juneau",
    "America/Los_Angeles",
    "America/Tijuana",
    "America/Denver",
    "America/Phoenix",
    "America/Chihuahua",
    "America/Mazatlan",
    "America/Chicago",
    "America/Regina",
    "America/Mexico_City",
    "America/Mexico_City",
    "America/Monterrey",
    "America/Guatemala",
    "America/New_York",
    "America/Indiana/Indianapolis",
    "America/Bogota",
    "America/Lima",
    "America/Lima",
    "America/Halifax",
    "America/Caracas",
    "America/La_Paz",
    "America/Santiago",
    "America/St_Johns",
    "America/Sao_Paulo",
    "America/Argentina/Buenos_Aires",
    "America/Guyana",
    "America/Godthab",
    "Atlantic/South_Georgia",
    "Atlantic/Azores",
    "Atlantic/Cape_Verde",
    "Europa/Dublin",
    "Europa/London",
    "Europa/Lisbon",
    "Europa/London",
    "Africa/Casablanca",
    "Africa/Monrovia",
    "Etc/UTC",
    "Europa/Belgrade",
    "Europa/Bratislava",
    "Europa/Budapest",
    "Europa/Ljubljana",
    "Europa/Prague",
    "Europa/Sarajevo",
    "Europa/Skopje",
    "Europa/Warsaw",
    "Europa/Zagreb",
    "Europa/Brussels",
    "Europa/Copenhagen",
    "Europa/Madrid",
    "Europa/Paris",
    "Europa/Amsterdam",
    "Europa/Berlin",
    "Europa/Berlin",
    "Europa/Rome",
    "Europa/Stockholm",
    "Europa/Vienna",
    "Africa/Algiers",
    "Europa/Bucharest",
    "Africa/Cairo",
    "Europa/Helsinki",
    "Europa/Kiev",
    "Europa/Riga",
    "Europa/Sofia",
    "Europa/Tallinn",
    "Europa/Vilnius",
    "Europa/Athens",
    "Europa/Istanbul",
    "Europa/Minsk",
    "Asia/Jerusalen",
    "Africa/Harare",
    "Africa/Johannesburg",
    "Europa/Moscú",
    "Europa/Moscú",
    "Europa/Moscú",
    "Asia/Kuwait",
    "Asia/Riyadh",
    "Africa/Nairobi",
    "Asia/Baghdad",
    "Asia/Tehran",
    "Asia/Muscat",
    "Asia/Muscat",
    "Asia/Baku",
    "Asia/Tbilisi",
    "Asia/Yerevan",
    "Asia/Kabul",
    "Asia/Yekaterinburg",
    "Asia/Karachi",
    "Asia/Karachi",
    "Asia/Tashkent",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kathmandu",
    "Asia/Dhaka",
    "Asia/Dhaka",
    "Asia/Colombo",
    "Asia/Almaty",
    "Asia/Novosibirsk",
    "Asia/Rangoon",
    "Asia/Bangkok",
    "Asia/Bangkok",
    "Asia/Jakarta",
    "Asia/Krasnoyarsk",
    "Asia/Shanghai",
    "Asia/Chongqing",
    "Asia/Hong_Kong",
    "Asia/Urumqi",
    "Asia/Kuala_Lumpur",
    "Asia/Singapore",
    "Asia/Taipei",
    "Australia/Perth",
    "Asia/Irkutsk",
    "Asia/Ulaanbaatar",
    "Asia/Seoul",
    "Asia/Tokyo",
    "Asia/Tokyo",
    "Asia/Tokyo",
    "Asia/Yakutsk",
    "Australia/Darwin",
    "Australia/Adelaide",
    "Australia/Melbourne",
    "Australia/Melbourne",
    "Australia/Sydney",
    "Australia/Brisbane",
    "Australia/Hobart",
    "Asia/Vladivostok",
    "Pacífico/Guam",
    "Pacífico/Port_Moresby",
    "Asia/Magadan",
    "Asia/Magadan",
    "Pacífico/Noumea",
    "Pacífico/Fiji",
    "Asia/Kamchatka",
    "Pacífico/Majuro",
    "Pacífico/Auckland",
    "Pacífico/Auckland",
    "Pacífico/Tongatapu",
    "Pacífico/Fakaofo",
    "Pacífico/Apia"
  ];
});

// node_modules/faker/lib/locales/es/address/city.js
var require_city7 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{city_prefix}"
  ];
});

// node_modules/faker/lib/locales/es/address/street_name.js
var require_street_name7 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_suffix} #{Name.first_name}",
    "#{street_suffix} #{Name.first_name} #{Name.last_name}"
  ];
});

// node_modules/faker/lib/locales/es/address/street_address.js
var require_street_address6 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_name}#{building_number}",
    "#{street_name}#{building_number} #{secondary_address}"
  ];
});

// node_modules/faker/lib/locales/es/address/default_country.js
var require_default_country14 = __commonJS((exports, module) => {
  module["exports"] = [
    "España"
  ];
});

// node_modules/faker/lib/locales/es/address/index.js
var require_address15 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.city_prefix = require_city_prefix4();
  address.country = require_country6();
  address.building_number = require_building_number8();
  address.street_suffix = require_street_suffix5();
  address.secondary_address = require_secondary_address6();
  address.postcode = require_postcode12();
  address.province = require_province();
  address.state = require_state10();
  address.state_abbr = require_state_abbr9();
  address.time_zone = require_time_zone3();
  address.city = require_city7();
  address.street_name = require_street_name7();
  address.street_address = require_street_address6();
  address.default_country = require_default_country14();
});

// node_modules/faker/lib/locales/es/company/suffix.js
var require_suffix13 = __commonJS((exports, module) => {
  module["exports"] = [
    "S.L.",
    "e Hijos",
    "S.A.",
    "Hermanos"
  ];
});

// node_modules/faker/lib/locales/es/company/noun.js
var require_noun4 = __commonJS((exports, module) => {
  module["exports"] = [
    "habilidad",
    "acceso",
    "adaptador",
    "algoritmo",
    "alianza",
    "analista",
    "aplicación",
    "enfoque",
    "arquitectura",
    "archivo",
    "inteligencia artificial",
    "array",
    "actitud",
    "medición",
    "gestión presupuestaria",
    "capacidad",
    "desafío",
    "circuito",
    "colaboración",
    "complejidad",
    "concepto",
    "conglomeración",
    "contingencia",
    "núcleo",
    "fidelidad",
    "base de datos",
    "data-warehouse",
    "definición",
    "emulación",
    "codificar",
    "encriptar",
    "extranet",
    "firmware",
    "flexibilidad",
    "focus group",
    "previsión",
    "base de trabajo",
    "función",
    "funcionalidad",
    "Interfaz Gráfica",
    "groupware",
    "Interfaz gráfico de usuario",
    "hardware",
    "Soporte",
    "jerarquía",
    "conjunto",
    "implementación",
    "infraestructura",
    "iniciativa",
    "instalación",
    "conjunto de instrucciones",
    "interfaz",
    "intranet",
    "base del conocimiento",
    "red de area local",
    "aprovechar",
    "matrices",
    "metodologías",
    "middleware",
    "migración",
    "modelo",
    "moderador",
    "monitorizar",
    "arquitectura abierta",
    "sistema abierto",
    "orquestar",
    "paradigma",
    "paralelismo",
    "política",
    "portal",
    "estructura de precios",
    "proceso de mejora",
    "producto",
    "productividad",
    "proyecto",
    "proyección",
    "protocolo",
    "línea segura",
    "software",
    "solución",
    "estandardización",
    "estrategia",
    "estructura",
    "éxito",
    "superestructura",
    "soporte",
    "sinergia",
    "mediante",
    "marco de tiempo",
    "caja de herramientas",
    "utilización",
    "website",
    "fuerza de trabajo"
  ];
});

// node_modules/faker/lib/locales/es/company/descriptor.js
var require_descriptor3 = __commonJS((exports, module) => {
  module["exports"] = [
    "24 horas",
    "24/7",
    "3rd generación",
    "4th generación",
    "5th generación",
    "6th generación",
    "analizada",
    "asimétrica",
    "asíncrona",
    "monitorizada por red",
    "bidireccional",
    "bifurcada",
    "generada por el cliente",
    "cliente servidor",
    "coherente",
    "cohesiva",
    "compuesto",
    "sensible al contexto",
    "basado en el contexto",
    "basado en contenido",
    "dedicada",
    "generado por la demanda",
    "didactica",
    "direccional",
    "discreta",
    "dinámica",
    "potenciada",
    "acompasada",
    "ejecutiva",
    "explícita",
    "tolerante a fallos",
    "innovadora",
    "amplio ábanico",
    "global",
    "heurística",
    "alto nivel",
    "holística",
    "homogénea",
    "hibrida",
    "incremental",
    "intangible",
    "interactiva",
    "intermedia",
    "local",
    "logística",
    "maximizada",
    "metódica",
    "misión crítica",
    "móbil",
    "modular",
    "motivadora",
    "multimedia",
    "multiestado",
    "multitarea",
    "nacional",
    "basado en necesidades",
    "neutral",
    "nueva generación",
    "no-volátil",
    "orientado a objetos",
    "óptima",
    "optimizada",
    "radical",
    "tiempo real",
    "recíproca",
    "regional",
    "escalable",
    "secundaria",
    "orientada a soluciones",
    "estable",
    "estatica",
    "sistemática",
    "sistémica",
    "tangible",
    "terciaria",
    "transicional",
    "uniforme",
    "valor añadido",
    "vía web",
    "defectos cero",
    "tolerancia cero"
  ];
});

// node_modules/faker/lib/locales/es/company/adjective.js
var require_adjective4 = __commonJS((exports, module) => {
  module["exports"] = [
    "Adaptativo",
    "Avanzado",
    "Asimilado",
    "Automatizado",
    "Equilibrado",
    "Centrado en el negocio",
    "Centralizado",
    "Clonado",
    "Compatible",
    "Configurable",
    "Multi grupo",
    "Multi plataforma",
    "Centrado en el usuario",
    "Configurable",
    "Descentralizado",
    "Digitalizado",
    "Distribuido",
    "Diverso",
    "Reducido",
    "Mejorado",
    "Para toda la empresa",
    "Ergonomico",
    "Exclusivo",
    "Expandido",
    "Extendido",
    "Cara a cara",
    "Enfocado",
    "Totalmente configurable",
    "Fundamental",
    "Orígenes",
    "Horizontal",
    "Implementado",
    "Innovador",
    "Integrado",
    "Intuitivo",
    "Inverso",
    "Gestionado",
    "Obligatorio",
    "Monitorizado",
    "Multi canal",
    "Multi lateral",
    "Multi capa",
    "En red",
    "Orientado a objetos",
    "Open-source",
    "Operativo",
    "Optimizado",
    "Opcional",
    "Organico",
    "Organizado",
    "Perseverando",
    "Persistente",
    "en fases",
    "Polarizado",
    "Pre-emptivo",
    "Proactivo",
    "Enfocado a benficios",
    "Profundo",
    "Programable",
    "Progresivo",
    "Public-key",
    "Enfocado en la calidad",
    "Reactivo",
    "Realineado",
    "Re-contextualizado",
    "Re-implementado",
    "Reducido",
    "Ingenieria inversa",
    "Robusto",
    "Fácil",
    "Seguro",
    "Auto proporciona",
    "Compartible",
    "Intercambiable",
    "Sincronizado",
    "Orientado a equipos",
    "Total",
    "Universal",
    "Mejorado",
    "Actualizable",
    "Centrado en el usuario",
    "Amigable",
    "Versatil",
    "Virtual",
    "Visionario"
  ];
});

// node_modules/faker/lib/locales/es/company/name.js
var require_name24 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name} y #{Name.last_name}",
    "#{Name.last_name} #{Name.last_name} #{suffix}",
    "#{Name.last_name}, #{Name.last_name} y #{Name.last_name} Asociados"
  ];
});

// node_modules/faker/lib/locales/es/company/index.js
var require_company11 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.suffix = require_suffix13();
  company.noun = require_noun4();
  company.descriptor = require_descriptor3();
  company.adjective = require_adjective4();
  company.name = require_name24();
});

// node_modules/faker/lib/locales/es/internet/free_email.js
var require_free_email8 = __commonJS((exports, module) => {
  module["exports"] = [
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ];
});

// node_modules/faker/lib/locales/es/internet/domain_suffix.js
var require_domain_suffix14 = __commonJS((exports, module) => {
  module["exports"] = [
    "com",
    "es",
    "info",
    "com.es",
    "org"
  ];
});

// node_modules/faker/lib/locales/es/internet/index.js
var require_internet15 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.free_email = require_free_email8();
  internet.domain_suffix = require_domain_suffix14();
});

// node_modules/faker/lib/locales/es/name/first_name.js
var require_first_name8 = __commonJS((exports, module) => {
  module["exports"] = [
    "Adán",
    "Agustín",
    "Alberto",
    "Alejandro",
    "Alfonso",
    "Alfredo",
    "Andrés",
    "Antonio",
    "Armando",
    "Arturo",
    "Benito",
    "Benjamín",
    "Bernardo",
    "Carlos",
    "César",
    "Claudio",
    "Clemente",
    "Cristian",
    "Cristobal",
    "Daniel",
    "David",
    "Diego",
    "Eduardo",
    "Emilio",
    "Enrique",
    "Ernesto",
    "Esteban",
    "Federico",
    "Felipe",
    "Fernando",
    "Francisco",
    "Gabriel",
    "Gerardo",
    "Germán",
    "Gilberto",
    "Gonzalo",
    "Gregorio",
    "Guillermo",
    "Gustavo",
    "Hernán",
    "Homero",
    "Horacio",
    "Hugo",
    "Ignacio",
    "Jacobo",
    "Jaime",
    "Javier",
    "Jerónimo",
    "Jesús",
    "Joaquín",
    "Jorge",
    "Jorge Luis",
    "José",
    "José Eduardo",
    "José Emilio",
    "José Luis",
    "José María",
    "Juan",
    "Juan Carlos",
    "Julio",
    "Julio César",
    "Lorenzo",
    "Lucas",
    "Luis",
    "Luis Miguel",
    "Manuel",
    "Marco Antonio",
    "Marcos",
    "Mariano",
    "Mario",
    "Martín",
    "Mateo",
    "Miguel",
    "Miguel Ángel",
    "Nicolás",
    "Octavio",
    "Óscar",
    "Pablo",
    "Patricio",
    "Pedro",
    "Rafael",
    "Ramiro",
    "Ramón",
    "Raúl",
    "Ricardo",
    "Roberto",
    "Rodrigo",
    "Rubén",
    "Salvador",
    "Samuel",
    "Sancho",
    "Santiago",
    "Sergio",
    "Teodoro",
    "Timoteo",
    "Tomás",
    "Vicente",
    "Víctor",
    "Adela",
    "Adriana",
    "Alejandra",
    "Alicia",
    "Amalia",
    "Ana",
    "Ana Luisa",
    "Ana María",
    "Andrea",
    "Anita",
    "Ángela",
    "Antonia",
    "Ariadna",
    "Barbara",
    "Beatriz",
    "Berta",
    "Blanca",
    "Caridad",
    "Carla",
    "Carlota",
    "Carmen",
    "Carolina",
    "Catalina",
    "Cecilia",
    "Clara",
    "Claudia",
    "Concepción",
    "Conchita",
    "Cristina",
    "Daniela",
    "Débora",
    "Diana",
    "Dolores",
    "Lola",
    "Dorotea",
    "Elena",
    "Elisa",
    "Eloisa",
    "Elsa",
    "Elvira",
    "Emilia",
    "Esperanza",
    "Estela",
    "Ester",
    "Eva",
    "Florencia",
    "Francisca",
    "Gabriela",
    "Gloria",
    "Graciela",
    "Guadalupe",
    "Guillermina",
    "Inés",
    "Irene",
    "Isabel",
    "Isabela",
    "Josefina",
    "Juana",
    "Julia",
    "Laura",
    "Leonor",
    "Leticia",
    "Lilia",
    "Lorena",
    "Lourdes",
    "Lucia",
    "Luisa",
    "Luz",
    "Magdalena",
    "Manuela",
    "Marcela",
    "Margarita",
    "María",
    "María del Carmen",
    "María Cristina",
    "María Elena",
    "María Eugenia",
    "María José",
    "María Luisa",
    "María Soledad",
    "María Teresa",
    "Mariana",
    "Maricarmen",
    "Marilu",
    "Marisol",
    "Marta",
    "Mayte",
    "Mercedes",
    "Micaela",
    "Mónica",
    "Natalia",
    "Norma",
    "Olivia",
    "Patricia",
    "Pilar",
    "Ramona",
    "Raquel",
    "Rebeca",
    "Reina",
    "Rocio",
    "Rosa",
    "Rosalia",
    "Rosario",
    "Sara",
    "Silvia",
    "Sofia",
    "Soledad",
    "Sonia",
    "Susana",
    "Teresa",
    "Verónica",
    "Victoria",
    "Virginia",
    "Yolanda"
  ];
});

// node_modules/faker/lib/locales/es/name/last_name.js
var require_last_name8 = __commonJS((exports, module) => {
  module["exports"] = [
    "Abeyta",
    "Abrego",
    "Abreu",
    "Acevedo",
    "Acosta",
    "Acuña",
    "Adame",
    "Adorno",
    "Agosto",
    "Aguayo",
    "Águilar",
    "Aguilera",
    "Aguirre",
    "Alanis",
    "Alaniz",
    "Alarcón",
    "Alba",
    "Alcala",
    "Alcántar",
    "Alcaraz",
    "Alejandro",
    "Alemán",
    "Alfaro",
    "Alicea",
    "Almanza",
    "Almaraz",
    "Almonte",
    "Alonso",
    "Alonzo",
    "Altamirano",
    "Alva",
    "Alvarado",
    "Alvarez",
    "Amador",
    "Amaya",
    "Anaya",
    "Anguiano",
    "Angulo",
    "Aparicio",
    "Apodaca",
    "Aponte",
    "Aragón",
    "Araña",
    "Aranda",
    "Arce",
    "Archuleta",
    "Arellano",
    "Arenas",
    "Arevalo",
    "Arguello",
    "Arias",
    "Armas",
    "Armendáriz",
    "Armenta",
    "Armijo",
    "Arredondo",
    "Arreola",
    "Arriaga",
    "Arroyo",
    "Arteaga",
    "Atencio",
    "Ávalos",
    "Ávila",
    "Avilés",
    "Ayala",
    "Baca",
    "Badillo",
    "Báez",
    "Baeza",
    "Bahena",
    "Balderas",
    "Ballesteros",
    "Banda",
    "Bañuelos",
    "Barajas",
    "Barela",
    "Barragán",
    "Barraza",
    "Barrera",
    "Barreto",
    "Barrientos",
    "Barrios",
    "Batista",
    "Becerra",
    "Beltrán",
    "Benavides",
    "Benavídez",
    "Benítez",
    "Bermúdez",
    "Bernal",
    "Berríos",
    "Bétancourt",
    "Blanco",
    "Bonilla",
    "Borrego",
    "Botello",
    "Bravo",
    "Briones",
    "Briseño",
    "Brito",
    "Bueno",
    "Burgos",
    "Bustamante",
    "Bustos",
    "Caballero",
    "Cabán",
    "Cabrera",
    "Cadena",
    "Caldera",
    "Calderón",
    "Calvillo",
    "Camacho",
    "Camarillo",
    "Campos",
    "Canales",
    "Candelaria",
    "Cano",
    "Cantú",
    "Caraballo",
    "Carbajal",
    "Cardenas",
    "Cardona",
    "Carmona",
    "Carranza",
    "Carrasco",
    "Carrasquillo",
    "Carreón",
    "Carrera",
    "Carrero",
    "Carrillo",
    "Carrion",
    "Carvajal",
    "Casanova",
    "Casares",
    "Casárez",
    "Casas",
    "Casillas",
    "Castañeda",
    "Castellanos",
    "Castillo",
    "Castro",
    "Cavazos",
    "Cazares",
    "Ceballos",
    "Cedillo",
    "Ceja",
    "Centeno",
    "Cepeda",
    "Cerda",
    "Cervantes",
    "Cervántez",
    "Chacón",
    "Chapa",
    "Chavarría",
    "Chávez",
    "Cintrón",
    "Cisneros",
    "Collado",
    "Collazo",
    "Colón",
    "Colunga",
    "Concepción",
    "Contreras",
    "Cordero",
    "Córdova",
    "Cornejo",
    "Corona",
    "Coronado",
    "Corral",
    "Corrales",
    "Correa",
    "Cortés",
    "Cortez",
    "Cotto",
    "Covarrubias",
    "Crespo",
    "Cruz",
    "Cuellar",
    "Curiel",
    "Dávila",
    "de Anda",
    "de Jesús",
    "Delacrúz",
    "Delafuente",
    "Delagarza",
    "Delao",
    "Delapaz",
    "Delarosa",
    "Delatorre",
    "Deleón",
    "Delgadillo",
    "Delgado",
    "Delrío",
    "Delvalle",
    "Díaz",
    "Domínguez",
    "Domínquez",
    "Duarte",
    "Dueñas",
    "Duran",
    "Echevarría",
    "Elizondo",
    "Enríquez",
    "Escalante",
    "Escamilla",
    "Escobar",
    "Escobedo",
    "Esparza",
    "Espinal",
    "Espino",
    "Espinosa",
    "Espinoza",
    "Esquibel",
    "Esquivel",
    "Estévez",
    "Estrada",
    "Fajardo",
    "Farías",
    "Feliciano",
    "Fernández",
    "Ferrer",
    "Fierro",
    "Figueroa",
    "Flores",
    "Flórez",
    "Fonseca",
    "Franco",
    "Frías",
    "Fuentes",
    "Gaitán",
    "Galarza",
    "Galindo",
    "Gallardo",
    "Gallegos",
    "Galván",
    "Gálvez",
    "Gamboa",
    "Gamez",
    "Gaona",
    "Garay",
    "García",
    "Garibay",
    "Garica",
    "Garrido",
    "Garza",
    "Gastélum",
    "Gaytán",
    "Gil",
    "Girón",
    "Godínez",
    "Godoy",
    "Gómez",
    "Gonzales",
    "González",
    "Gollum",
    "Gracia",
    "Granado",
    "Granados",
    "Griego",
    "Grijalva",
    "Guajardo",
    "Guardado",
    "Guerra",
    "Guerrero",
    "Guevara",
    "Guillen",
    "Gurule",
    "Gutiérrez",
    "Guzmán",
    "Haro",
    "Henríquez",
    "Heredia",
    "Hernádez",
    "Hernandes",
    "Hernández",
    "Herrera",
    "Hidalgo",
    "Hinojosa",
    "Holguín",
    "Huerta",
    "Hurtado",
    "Ibarra",
    "Iglesias",
    "Irizarry",
    "Jaime",
    "Jaimes",
    "Jáquez",
    "Jaramillo",
    "Jasso",
    "Jiménez",
    "Jimínez",
    "Juárez",
    "Jurado",
    "Laboy",
    "Lara",
    "Laureano",
    "Leal",
    "Lebrón",
    "Ledesma",
    "Leiva",
    "Lemus",
    "León",
    "Lerma",
    "Leyva",
    "Limón",
    "Linares",
    "Lira",
    "Llamas",
    "Loera",
    "Lomeli",
    "Longoria",
    "López",
    "Lovato",
    "Loya",
    "Lozada",
    "Lozano",
    "Lucero",
    "Lucio",
    "Luevano",
    "Lugo",
    "Luna",
    "Macías",
    "Madera",
    "Madrid",
    "Madrigal",
    "Maestas",
    "Magaña",
    "Malave",
    "Maldonado",
    "Manzanares",
    "Mares",
    "Marín",
    "Márquez",
    "Marrero",
    "Marroquín",
    "Martínez",
    "Mascareñas",
    "Mata",
    "Mateo",
    "Matías",
    "Matos",
    "Maya",
    "Mayorga",
    "Medina",
    "Medrano",
    "Mejía",
    "Meléndez",
    "Melgar",
    "Mena",
    "Menchaca",
    "Méndez",
    "Mendoza",
    "Menéndez",
    "Meraz",
    "Mercado",
    "Merino",
    "Mesa",
    "Meza",
    "Miramontes",
    "Miranda",
    "Mireles",
    "Mojica",
    "Molina",
    "Mondragón",
    "Monroy",
    "Montalvo",
    "Montañez",
    "Montaño",
    "Montemayor",
    "Montenegro",
    "Montero",
    "Montes",
    "Montez",
    "Montoya",
    "Mora",
    "Morales",
    "Moreno",
    "Mota",
    "Moya",
    "Munguía",
    "Muñiz",
    "Muñoz",
    "Murillo",
    "Muro",
    "Nájera",
    "Naranjo",
    "Narváez",
    "Nava",
    "Navarrete",
    "Navarro",
    "Nazario",
    "Negrete",
    "Negrón",
    "Nevárez",
    "Nieto",
    "Nieves",
    "Niño",
    "Noriega",
    "Núñez",
    "Ocampo",
    "Ocasio",
    "Ochoa",
    "Ojeda",
    "Olivares",
    "Olivárez",
    "Olivas",
    "Olivera",
    "Olivo",
    "Olmos",
    "Olvera",
    "Ontiveros",
    "Oquendo",
    "Ordóñez",
    "Orellana",
    "Ornelas",
    "Orosco",
    "Orozco",
    "Orta",
    "Ortega",
    "Ortiz",
    "Osorio",
    "Otero",
    "Ozuna",
    "Pabón",
    "Pacheco",
    "Padilla",
    "Padrón",
    "Páez",
    "Pagan",
    "Palacios",
    "Palomino",
    "Palomo",
    "Pantoja",
    "Paredes",
    "Parra",
    "Partida",
    "Patiño",
    "Paz",
    "Pedraza",
    "Pedroza",
    "Pelayo",
    "Peña",
    "Perales",
    "Peralta",
    "Perea",
    "Peres",
    "Pérez",
    "Pichardo",
    "Piña",
    "Pineda",
    "Pizarro",
    "Polanco",
    "Ponce",
    "Porras",
    "Portillo",
    "Posada",
    "Prado",
    "Preciado",
    "Prieto",
    "Puente",
    "Puga",
    "Pulido",
    "Quesada",
    "Quezada",
    "Quiñones",
    "Quiñónez",
    "Quintana",
    "Quintanilla",
    "Quintero",
    "Quiroz",
    "Rael",
    "Ramírez",
    "Ramón",
    "Ramos",
    "Rangel",
    "Rascón",
    "Raya",
    "Razo",
    "Regalado",
    "Rendón",
    "Rentería",
    "Reséndez",
    "Reyes",
    "Reyna",
    "Reynoso",
    "Rico",
    "Rincón",
    "Riojas",
    "Ríos",
    "Rivas",
    "Rivera",
    "Rivero",
    "Robledo",
    "Robles",
    "Rocha",
    "Rodarte",
    "Rodrígez",
    "Rodríguez",
    "Rodríquez",
    "Rojas",
    "Rojo",
    "Roldán",
    "Rolón",
    "Romero",
    "Romo",
    "Roque",
    "Rosado",
    "Rosales",
    "Rosario",
    "Rosas",
    "Roybal",
    "Rubio",
    "Ruelas",
    "Ruiz",
    "Saavedra",
    "Sáenz",
    "Saiz",
    "Salas",
    "Salazar",
    "Salcedo",
    "Salcido",
    "Saldaña",
    "Saldivar",
    "Salgado",
    "Salinas",
    "Samaniego",
    "Sanabria",
    "Sanches",
    "Sánchez",
    "Sandoval",
    "Santacruz",
    "Santana",
    "Santiago",
    "Santillán",
    "Sarabia",
    "Sauceda",
    "Saucedo",
    "Sedillo",
    "Segovia",
    "Segura",
    "Sepúlveda",
    "Serna",
    "Serrano",
    "Serrato",
    "Sevilla",
    "Sierra",
    "Sisneros",
    "Solano",
    "Solís",
    "Soliz",
    "Solorio",
    "Solorzano",
    "Soria",
    "Sosa",
    "Sotelo",
    "Soto",
    "Suárez",
    "Tafoya",
    "Tamayo",
    "Tamez",
    "Tapia",
    "Tejada",
    "Tejeda",
    "Téllez",
    "Tello",
    "Terán",
    "Terrazas",
    "Tijerina",
    "Tirado",
    "Toledo",
    "Toro",
    "Torres",
    "Tórrez",
    "Tovar",
    "Trejo",
    "Treviño",
    "Trujillo",
    "Ulibarri",
    "Ulloa",
    "Urbina",
    "Ureña",
    "Urías",
    "Uribe",
    "Urrutia",
    "Vaca",
    "Valadez",
    "Valdés",
    "Valdez",
    "Valdivia",
    "Valencia",
    "Valentín",
    "Valenzuela",
    "Valladares",
    "Valle",
    "Vallejo",
    "Valles",
    "Valverde",
    "Vanegas",
    "Varela",
    "Vargas",
    "Vásquez",
    "Vázquez",
    "Vega",
    "Vela",
    "Velasco",
    "Velásquez",
    "Velázquez",
    "Vélez",
    "Véliz",
    "Venegas",
    "Vera",
    "Verdugo",
    "Verduzco",
    "Vergara",
    "Viera",
    "Vigil",
    "Villa",
    "Villagómez",
    "Villalobos",
    "Villalpando",
    "Villanueva",
    "Villareal",
    "Villarreal",
    "Villaseñor",
    "Villegas",
    "Yáñez",
    "Ybarra",
    "Zambrano",
    "Zamora",
    "Zamudio",
    "Zapata",
    "Zaragoza",
    "Zarate",
    "Zavala",
    "Zayas",
    "Zelaya",
    "Zepeda",
    "Zúñiga"
  ];
});

// node_modules/faker/lib/locales/es/name/prefix.js
var require_prefix8 = __commonJS((exports, module) => {
  module["exports"] = [
    "Sr.",
    "Sra.",
    "Sta."
  ];
});

// node_modules/faker/lib/locales/es/name/suffix.js
var require_suffix14 = __commonJS((exports, module) => {
  module["exports"] = [
    "Jr.",
    "Sr.",
    "I",
    "II",
    "III",
    "IV",
    "V",
    "MD",
    "DDS",
    "PhD",
    "DVM"
  ];
});

// node_modules/faker/lib/locales/es/name/title.js
var require_title3 = __commonJS((exports, module) => {
  module["exports"] = {
    descriptor: [
      "Jefe",
      "Senior",
      "Directo",
      "Corporativo",
      "Dinánmico",
      "Futuro",
      "Producto",
      "Nacional",
      "Regional",
      "Distrito",
      "Central",
      "Global",
      "Cliente",
      "Inversor",
      "International",
      "Heredado",
      "Adelante",
      "Interno",
      "Humano",
      "Gerente",
      "Director"
    ],
    level: [
      "Soluciones",
      "Programa",
      "Marca",
      "Seguridada",
      "Investigación",
      "Marketing",
      "Normas",
      "Implementación",
      "Integración",
      "Funcionalidad",
      "Respuesta",
      "Paradigma",
      "Tácticas",
      "Identidad",
      "Mercados",
      "Grupo",
      "División",
      "Aplicaciones",
      "Optimización",
      "Operaciones",
      "Infraestructura",
      "Intranet",
      "Comunicaciones",
      "Web",
      "Calidad",
      "Seguro",
      "Mobilidad",
      "Cuentas",
      "Datos",
      "Creativo",
      "Configuración",
      "Contabilidad",
      "Interacciones",
      "Factores",
      "Usabilidad",
      "Métricas"
    ],
    job: [
      "Supervisor",
      "Asociado",
      "Ejecutivo",
      "Relacciones",
      "Oficial",
      "Gerente",
      "Ingeniero",
      "Especialista",
      "Director",
      "Coordinador",
      "Administrador",
      "Arquitecto",
      "Analista",
      "Diseñador",
      "Planificador",
      "Técnico",
      "Funcionario",
      "Desarrollador",
      "Productor",
      "Consultor",
      "Asistente",
      "Facilitador",
      "Agente",
      "Representante",
      "Estratega"
    ]
  };
});

// node_modules/faker/lib/locales/es/name/name.js
var require_name26 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{prefix} #{first_name} #{last_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name}"
  ];
});

// node_modules/faker/lib/locales/es/name/index.js
var require_name25 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name = require_first_name8();
  name2.last_name = require_last_name8();
  name2.prefix = require_prefix8();
  name2.suffix = require_suffix14();
  name2.title = require_title3();
  name2.name = require_name26();
});

// node_modules/faker/lib/locales/es/phone_number/formats.js
var require_formats19 = __commonJS((exports, module) => {
  module["exports"] = [
    "9##-###-###",
    "9##.###.###",
    "9## ### ###",
    "9########"
  ];
});

// node_modules/faker/lib/locales/es/phone_number/index.js
var require_phone_number14 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats19();
});

// node_modules/faker/lib/locales/es/cell_phone/formats.js
var require_formats18 = __commonJS((exports, module) => {
  module["exports"] = [
    "6##-###-###",
    "6##.###.###",
    "6## ### ###",
    "6########"
  ];
});

// node_modules/faker/lib/locales/es/cell_phone/index.js
var require_cell_phone6 = __commonJS((exports, module) => {
  var cell_phone = {};
  module["exports"] = cell_phone;
  cell_phone.formats = require_formats18();
});

// node_modules/faker/lib/locales/es/index.js
var require_es3 = __commonJS((exports, module) => {
  var es = {};
  module["exports"] = es;
  es.title = "Spanish";
  es.address = require_address15();
  es.company = require_company11();
  es.internet = require_internet15();
  es.name = require_name25();
  es.phone_number = require_phone_number14();
  es.cell_phone = require_cell_phone6();
});

// node_modules/faker/lib/locales/es_MX/name/first_name.js
var require_first_name9 = __commonJS((exports, module) => {
  module["exports"] = [
    "Aarón",
    "Abraham",
    "Adán",
    "Agustín",
    "Alan",
    "Alberto",
    "Alejandro",
    "Alexander",
    "Alexis",
    "Alfonso",
    "Alfredo",
    "Andrés",
    "Ángel Daniel",
    "Ángel Gabriel",
    "Antonio",
    "Armando",
    "Arturo",
    "Axel",
    "Benito",
    "Benjamín",
    "Bernardo",
    "Brandon",
    "Brayan",
    "Carlos",
    "César",
    "Claudio",
    "Clemente",
    "Cristian",
    "Cristobal",
    "Damián",
    "Daniel",
    "David",
    "Diego",
    "Eduardo",
    "Elías",
    "Emiliano",
    "Emilio",
    "Emilio",
    "Emmanuel",
    "Enrique",
    "Erick",
    "Ernesto",
    "Esteban",
    "Federico",
    "Felipe",
    "Fernando",
    "Fernando Javier",
    "Francisco",
    "Francisco Javier",
    "Gabriel",
    "Gael",
    "Gerardo",
    "Germán",
    "Gilberto",
    "Gonzalo",
    "Gregorio",
    "Guillermo",
    "Gustavo",
    "Hernán",
    "Homero",
    "Horacio",
    "Hugo",
    "Ignacio",
    "Iker",
    "Isaac",
    "Isaias",
    "Israel",
    "Ivan",
    "Jacobo",
    "Jaime",
    "Javier",
    "Jerónimo",
    "Jesús",
    "Joaquín",
    "Jorge",
    "Jorge Luis",
    "José",
    "José Antonio",
    "Jose Daniel",
    "José Eduardo",
    "José Emilio",
    "José Luis",
    "José María",
    "José Miguel",
    "Juan",
    "Juan Carlos",
    "Juan Manuel",
    "Juan Pablo",
    "Julio",
    "Julio César",
    "Kevin",
    "Leonardo",
    "Lorenzo",
    "Lucas",
    "Luis",
    "Luis Ángel",
    "Luis Fernando",
    "Luis Gabino",
    "Luis Miguel",
    "Manuel",
    "Marco Antonio",
    "Marcos",
    "Mariano",
    "Mario",
    "Martín",
    "Mateo",
    "Matías",
    "Mauricio",
    "Maximiliano",
    "Miguel",
    "Miguel Ángel",
    "Nicolás",
    "Octavio",
    "Óscar",
    "Pablo",
    "Patricio",
    "Pedro",
    "Rafael",
    "Ramiro",
    "Ramón",
    "Raúl",
    "Ricardo",
    "Roberto",
    "Rodrigo",
    "Rubén",
    "Salvador",
    "Samuel",
    "Sancho",
    "Santiago",
    "Saúl",
    "Sebastian",
    "Sergio",
    "Tadeo",
    "Teodoro",
    "Timoteo",
    "Tomás",
    "Uriel",
    "Vicente",
    "Víctor",
    "Victor Manuel",
    "Adriana",
    "Alejandra",
    "Alicia",
    "Amalia",
    "Ana",
    "Ana Luisa",
    "Ana María",
    "Andrea",
    "Ángela",
    "Anita",
    "Antonia",
    "Araceli",
    "Ariadna",
    "Barbara",
    "Beatriz",
    "Berta",
    "Blanca",
    "Caridad",
    "Carla",
    "Carlota",
    "Carmen",
    "Carolina",
    "Catalina",
    "Cecilia",
    "Clara",
    "Claudia",
    "Concepción",
    "Conchita",
    "Cristina",
    "Daniela",
    "Débora",
    "Diana",
    "Dolores",
    "Dorotea",
    "Elena",
    "Elisa",
    "Elizabeth",
    "Eloisa",
    "Elsa",
    "Elvira",
    "Emilia",
    "Esperanza",
    "Estela",
    "Ester",
    "Eva",
    "Florencia",
    "Francisca",
    "Gabriela",
    "Gloria",
    "Graciela",
    "Guadalupe",
    "Guillermina",
    "Inés",
    "Irene",
    "Isabel",
    "Isabela",
    "Josefina",
    "Juana",
    "Julia",
    "Laura",
    "Leonor",
    "Leticia",
    "Lilia",
    "Lola",
    "Lorena",
    "Lourdes",
    "Lucia",
    "Luisa",
    "Luz",
    "Magdalena",
    "Manuela",
    "Marcela",
    "Margarita",
    "María",
    "María Cristina",
    "María de Jesús",
    "María de los Ángeles",
    "María del Carmen",
    "María Elena",
    "María Eugenia",
    "María Guadalupe",
    "María José",
    "María Luisa",
    "María Soledad",
    "María Teresa",
    "Mariana",
    "Maricarmen",
    "Marilu",
    "Marisol",
    "Marta",
    "Mayte",
    "Mercedes",
    "Micaela",
    "Mónica",
    "Natalia",
    "Norma",
    "Olivia",
    "Patricia",
    "Pilar",
    "Ramona",
    "Raquel",
    "Rebeca",
    "Reina",
    "Rocio",
    "Rosa",
    "Rosa María",
    "Rosalia",
    "Rosario",
    "Sara",
    "Silvia",
    "Sofia",
    "Soledad",
    "Sonia",
    "Susana",
    "Teresa",
    "Verónica",
    "Victoria",
    "Virginia",
    "Xochitl",
    "Yolanda",
    "Abigail",
    "Abril",
    "Adela",
    "Alexa",
    "Alondra Romina",
    "Ana Sofía",
    "Ana Victoria",
    "Camila",
    "Carolina",
    "Daniela",
    "Dulce María",
    "Emily",
    "Esmeralda",
    "Estefanía",
    "Evelyn",
    "Fatima",
    "Ivanna",
    "Jazmin",
    "Jennifer",
    "Jimena",
    "Julieta",
    "Kimberly",
    "Liliana",
    "Lizbeth",
    "María Fernanda",
    "Melany",
    "Melissa",
    "Miranda",
    "Monserrat",
    "Naomi",
    "Natalia",
    "Nicole",
    "Paola",
    "Paulina",
    "Regina",
    "Renata",
    "Valentina",
    "Valeria",
    "Vanessa",
    "Ximena",
    "Ximena Guadalupe",
    "Yamileth",
    "Yaretzi",
    "Zoe"
  ];
});

// node_modules/faker/lib/locales/es_MX/name/last_name.js
var require_last_name9 = __commonJS((exports, module) => {
  module["exports"] = [
    "Abeyta",
    "Abrego",
    "Abreu",
    "Acevedo",
    "Acosta",
    "Acuña",
    "Adame",
    "Adorno",
    "Agosto",
    "Aguayo",
    "Águilar",
    "Aguilera",
    "Aguirre",
    "Alanis",
    "Alaniz",
    "Alarcón",
    "Alba",
    "Alcala",
    "Alcántar",
    "Alcaraz",
    "Alejandro",
    "Alemán",
    "Alfaro",
    "Alicea",
    "Almanza",
    "Almaraz",
    "Almonte",
    "Alonso",
    "Alonzo",
    "Altamirano",
    "Alva",
    "Alvarado",
    "Alvarez",
    "Amador",
    "Amaya",
    "Anaya",
    "Anguiano",
    "Angulo",
    "Aparicio",
    "Apodaca",
    "Aponte",
    "Aragón",
    "Aranda",
    "Araña",
    "Arce",
    "Archuleta",
    "Arellano",
    "Arenas",
    "Arevalo",
    "Arguello",
    "Arias",
    "Armas",
    "Armendáriz",
    "Armenta",
    "Armijo",
    "Arredondo",
    "Arreola",
    "Arriaga",
    "Arroyo",
    "Arteaga",
    "Atencio",
    "Ávalos",
    "Ávila",
    "Avilés",
    "Ayala",
    "Baca",
    "Badillo",
    "Báez",
    "Baeza",
    "Bahena",
    "Balderas",
    "Ballesteros",
    "Banda",
    "Bañuelos",
    "Barajas",
    "Barela",
    "Barragán",
    "Barraza",
    "Barrera",
    "Barreto",
    "Barrientos",
    "Barrios",
    "Batista",
    "Becerra",
    "Beltrán",
    "Benavides",
    "Benavídez",
    "Benítez",
    "Bermúdez",
    "Bernal",
    "Berríos",
    "Bétancourt",
    "Blanco",
    "Bonilla",
    "Borrego",
    "Botello",
    "Bravo",
    "Briones",
    "Briseño",
    "Brito",
    "Bueno",
    "Burgos",
    "Bustamante",
    "Bustos",
    "Caballero",
    "Cabán",
    "Cabrera",
    "Cadena",
    "Caldera",
    "Calderón",
    "Calvillo",
    "Camacho",
    "Camarillo",
    "Campos",
    "Canales",
    "Candelaria",
    "Cano",
    "Cantú",
    "Caraballo",
    "Carbajal",
    "Cardenas",
    "Cardona",
    "Carmona",
    "Carranza",
    "Carrasco",
    "Carrasquillo",
    "Carreón",
    "Carrera",
    "Carrero",
    "Carrillo",
    "Carrion",
    "Carvajal",
    "Casanova",
    "Casares",
    "Casárez",
    "Casas",
    "Casillas",
    "Castañeda",
    "Castellanos",
    "Castillo",
    "Castro",
    "Cavazos",
    "Cazares",
    "Ceballos",
    "Cedillo",
    "Ceja",
    "Centeno",
    "Cepeda",
    "Cerda",
    "Cervantes",
    "Cervántez",
    "Chacón",
    "Chapa",
    "Chavarría",
    "Chávez",
    "Cintrón",
    "Cisneros",
    "Collado",
    "Collazo",
    "Colón",
    "Colunga",
    "Concepción",
    "Contreras",
    "Cordero",
    "Córdova",
    "Cornejo",
    "Corona",
    "Coronado",
    "Corral",
    "Corrales",
    "Correa",
    "Cortés",
    "Cortez",
    "Cotto",
    "Covarrubias",
    "Crespo",
    "Cruz",
    "Cuellar",
    "Curiel",
    "Dávila",
    "de Anda",
    "de Jesús",
    "Delacrúz",
    "Delafuente",
    "Delagarza",
    "Delao",
    "Delapaz",
    "Delarosa",
    "Delatorre",
    "Deleón",
    "Delgadillo",
    "Delgado",
    "Delrío",
    "Delvalle",
    "Díaz",
    "Domínguez",
    "Domínquez",
    "Duarte",
    "Dueñas",
    "Duran",
    "Echevarría",
    "Elizondo",
    "Enríquez",
    "Escalante",
    "Escamilla",
    "Escobar",
    "Escobedo",
    "Esparza",
    "Espinal",
    "Espino",
    "Espinosa",
    "Espinoza",
    "Esquibel",
    "Esquivel",
    "Estévez",
    "Estrada",
    "Fajardo",
    "Farías",
    "Feliciano",
    "Fernández",
    "Ferrer",
    "Fierro",
    "Figueroa",
    "Flores",
    "Flórez",
    "Fonseca",
    "Franco",
    "Frías",
    "Fuentes",
    "Gaitán",
    "Galarza",
    "Galindo",
    "Gallardo",
    "Gallegos",
    "Galván",
    "Gálvez",
    "Gamboa",
    "Gamez",
    "Gaona",
    "Garay",
    "García",
    "Garibay",
    "Garica",
    "Garrido",
    "Garza",
    "Gastélum",
    "Gaytán",
    "Gil",
    "Girón",
    "Godínez",
    "Godoy",
    "Gollum",
    "Gómez",
    "Gonzales",
    "González",
    "Gracia",
    "Granado",
    "Granados",
    "Griego",
    "Grijalva",
    "Guajardo",
    "Guardado",
    "Guerra",
    "Guerrero",
    "Guevara",
    "Guillen",
    "Gurule",
    "Gutiérrez",
    "Guzmán",
    "Haro",
    "Henríquez",
    "Heredia",
    "Hernádez",
    "Hernandes",
    "Hernández",
    "Herrera",
    "Hidalgo",
    "Hinojosa",
    "Holguín",
    "Huerta",
    "Huixtlacatl",
    "Hurtado",
    "Ibarra",
    "Iglesias",
    "Irizarry",
    "Jaime",
    "Jaimes",
    "Jáquez",
    "Jaramillo",
    "Jasso",
    "Jiménez",
    "Jimínez",
    "Juárez",
    "Jurado",
    "Kadar rodriguez",
    "Kamal",
    "Kamat",
    "Kanaria",
    "Kanea",
    "Kanimal",
    "Kano",
    "Kanzaki",
    "Kaplan",
    "Kara",
    "Karam",
    "Karan",
    "Kardache soto",
    "Karem",
    "Karen",
    "Khalid",
    "Kindelan",
    "Koenig",
    "Korta",
    "Korta hernandez",
    "Kortajarena",
    "Kranz sans",
    "Krasnova",
    "Krauel natera",
    "Kuzmina",
    "Kyra",
    "Laboy",
    "Lara",
    "Laureano",
    "Leal",
    "Lebrón",
    "Ledesma",
    "Leiva",
    "Lemus",
    "León",
    "Lerma",
    "Leyva",
    "Limón",
    "Linares",
    "Lira",
    "Llamas",
    "Loera",
    "Lomeli",
    "Longoria",
    "López",
    "Lovato",
    "Loya",
    "Lozada",
    "Lozano",
    "Lucero",
    "Lucio",
    "Luevano",
    "Lugo",
    "Luna",
    "Macías",
    "Madera",
    "Madrid",
    "Madrigal",
    "Maestas",
    "Magaña",
    "Malave",
    "Maldonado",
    "Manzanares",
    "Mares",
    "Marín",
    "Márquez",
    "Marrero",
    "Marroquín",
    "Martínez",
    "Mascareñas",
    "Mata",
    "Mateo",
    "Matías",
    "Matos",
    "Maya",
    "Mayorga",
    "Medina",
    "Medrano",
    "Mejía",
    "Meléndez",
    "Melgar",
    "Mena",
    "Menchaca",
    "Méndez",
    "Mendoza",
    "Menéndez",
    "Meraz",
    "Mercado",
    "Merino",
    "Mesa",
    "Meza",
    "Miramontes",
    "Miranda",
    "Mireles",
    "Mojica",
    "Molina",
    "Mondragón",
    "Monroy",
    "Montalvo",
    "Montañez",
    "Montaño",
    "Montemayor",
    "Montenegro",
    "Montero",
    "Montes",
    "Montez",
    "Montoya",
    "Mora",
    "Morales",
    "Moreno",
    "Mota",
    "Moya",
    "Munguía",
    "Muñiz",
    "Muñoz",
    "Murillo",
    "Muro",
    "Nájera",
    "Naranjo",
    "Narváez",
    "Nava",
    "Navarrete",
    "Navarro",
    "Nazario",
    "Negrete",
    "Negrón",
    "Nevárez",
    "Nieto",
    "Nieves",
    "Niño",
    "Noriega",
    "Núñez",
    "Ñañez",
    "Ocampo",
    "Ocasio",
    "Ochoa",
    "Ojeda",
    "Olivares",
    "Olivárez",
    "Olivas",
    "Olivera",
    "Olivo",
    "Olmos",
    "Olvera",
    "Ontiveros",
    "Oquendo",
    "Ordóñez",
    "Orellana",
    "Ornelas",
    "Orosco",
    "Orozco",
    "Orta",
    "Ortega",
    "Ortiz",
    "Osorio",
    "Otero",
    "Ozuna",
    "Pabón",
    "Pacheco",
    "Padilla",
    "Padrón",
    "Páez",
    "Pagan",
    "Palacios",
    "Palomino",
    "Palomo",
    "Pantoja",
    "Paredes",
    "Parra",
    "Partida",
    "Patiño",
    "Paz",
    "Pedraza",
    "Pedroza",
    "Pelayo",
    "Peña",
    "Perales",
    "Peralta",
    "Perea",
    "Peres",
    "Pérez",
    "Pichardo",
    "Pineda",
    "Piña",
    "Pizarro",
    "Polanco",
    "Ponce",
    "Porras",
    "Portillo",
    "Posada",
    "Prado",
    "Preciado",
    "Prieto",
    "Puente",
    "Puga",
    "Pulido",
    "Quesada",
    "Quevedo",
    "Quezada",
    "Quinta",
    "Quintairos",
    "Quintana",
    "Quintanilla",
    "Quintero",
    "Quintero cruz",
    "Quintero de la cruz",
    "Quiñones",
    "Quiñónez",
    "Quiros",
    "Quiroz",
    "Rael",
    "Ramírez",
    "Ramón",
    "Ramos",
    "Rangel",
    "Rascón",
    "Raya",
    "Razo",
    "Regalado",
    "Rendón",
    "Rentería",
    "Reséndez",
    "Reyes",
    "Reyna",
    "Reynoso",
    "Rico",
    "Rincón",
    "Riojas",
    "Ríos",
    "Rivas",
    "Rivera",
    "Rivero",
    "Robledo",
    "Robles",
    "Rocha",
    "Rodarte",
    "Rodrígez",
    "Rodríguez",
    "Rodríquez",
    "Rojas",
    "Rojo",
    "Roldán",
    "Rolón",
    "Romero",
    "Romo",
    "Roque",
    "Rosado",
    "Rosales",
    "Rosario",
    "Rosas",
    "Roybal",
    "Rubio",
    "Ruelas",
    "Ruiz",
    "Saavedra",
    "Sáenz",
    "Saiz",
    "Salas",
    "Salazar",
    "Salcedo",
    "Salcido",
    "Saldaña",
    "Saldivar",
    "Salgado",
    "Salinas",
    "Samaniego",
    "Sanabria",
    "Sanches",
    "Sánchez",
    "Sandoval",
    "Santacruz",
    "Santana",
    "Santiago",
    "Santillán",
    "Sarabia",
    "Sauceda",
    "Saucedo",
    "Sedillo",
    "Segovia",
    "Segura",
    "Sepúlveda",
    "Serna",
    "Serrano",
    "Serrato",
    "Sevilla",
    "Sierra",
    "Sisneros",
    "Solano",
    "Solís",
    "Soliz",
    "Solorio",
    "Solorzano",
    "Soria",
    "Sosa",
    "Sotelo",
    "Soto",
    "Suárez",
    "Tafoya",
    "Tamayo",
    "Tamez",
    "Tapia",
    "Tejada",
    "Tejeda",
    "Téllez",
    "Tello",
    "Terán",
    "Terrazas",
    "Tijerina",
    "Tirado",
    "Toledo",
    "Toro",
    "Torres",
    "Tórrez",
    "Tovar",
    "Trejo",
    "Treviño",
    "Trujillo",
    "Ulibarri",
    "Ulloa",
    "Urbina",
    "Ureña",
    "Urías",
    "Uribe",
    "Urrutia",
    "Vaca",
    "Valadez",
    "Valdés",
    "Valdez",
    "Valdivia",
    "Valencia",
    "Valentín",
    "Valenzuela",
    "Valladares",
    "Valle",
    "Vallejo",
    "Valles",
    "Valverde",
    "Vanegas",
    "Varela",
    "Vargas",
    "Vásquez",
    "Vázquez",
    "Vega",
    "Vela",
    "Velasco",
    "Velásquez",
    "Velázquez",
    "Vélez",
    "Véliz",
    "Venegas",
    "Vera",
    "Verdugo",
    "Verduzco",
    "Vergara",
    "Viera",
    "Vigil",
    "Villa",
    "Villagómez",
    "Villalobos",
    "Villalpando",
    "Villanueva",
    "Villareal",
    "Villarreal",
    "Villaseñor",
    "Villegas",
    "Xacon",
    "Xairo Belmonte",
    "Xana",
    "Xenia",
    "Xiana",
    "Xicoy",
    "Yago",
    "Yami",
    "Yanes",
    "Yáñez",
    "Ybarra",
    "Yebra",
    "Yunta",
    "Zabaleta",
    "Zamarreno",
    "Zamarripa",
    "Zambrana",
    "Zambrano",
    "Zamora",
    "Zamudio",
    "Zapata",
    "Zaragoza",
    "Zarate",
    "Zavala",
    "Zayas",
    "Zelaya",
    "Zepeda",
    "Zúñiga"
  ];
});

// node_modules/faker/lib/locales/es_MX/name/prefix.js
var require_prefix9 = __commonJS((exports, module) => {
  module["exports"] = [
    "Sr.",
    "Sra.",
    "Sta."
  ];
});

// node_modules/faker/lib/locales/es_MX/name/suffix.js
var require_suffix16 = __commonJS((exports, module) => {
  module["exports"] = [
    "Jr.",
    "Sr.",
    "I",
    "II",
    "III",
    "IV",
    "V",
    "MD",
    "DDS",
    "PhD",
    "DVM",
    "Ing.",
    "Lic.",
    "Dr.",
    "Mtro."
  ];
});

// node_modules/faker/lib/locales/es_MX/name/title.js
var require_title4 = __commonJS((exports, module) => {
  module["exports"] = {
    descriptor: [
      "Jefe",
      "Senior",
      "Directo",
      "Corporativo",
      "Dinánmico",
      "Futuro",
      "Producto",
      "Nacional",
      "Regional",
      "Distrito",
      "Central",
      "Global",
      "Cliente",
      "Inversor",
      "International",
      "Heredado",
      "Adelante",
      "Interno",
      "Humano",
      "Gerente",
      "SubGerente",
      "Director"
    ],
    level: [
      "Soluciones",
      "Programa",
      "Marca",
      "Seguridad",
      "Investigación",
      "Marketing",
      "Normas",
      "Implementación",
      "Integración",
      "Funcionalidad",
      "Respuesta",
      "Paradigma",
      "Tácticas",
      "Identidad",
      "Mercados",
      "Grupo",
      "División",
      "Aplicaciones",
      "Optimización",
      "Operaciones",
      "Infraestructura",
      "Intranet",
      "Comunicaciones",
      "Web",
      "Calidad",
      "Seguro",
      "Mobilidad",
      "Cuentas",
      "Datos",
      "Creativo",
      "Configuración",
      "Contabilidad",
      "Interacciones",
      "Factores",
      "Usabilidad",
      "Métricas"
    ],
    job: [
      "Supervisor",
      "Asociado",
      "Ejecutivo",
      "Relacciones",
      "Oficial",
      "Gerente",
      "Ingeniero",
      "Especialista",
      "Director",
      "Coordinador",
      "Administrador",
      "Arquitecto",
      "Analista",
      "Diseñador",
      "Planificador",
      "Técnico",
      "Funcionario",
      "Desarrollador",
      "Productor",
      "Consultor",
      "Asistente",
      "Facilitador",
      "Agente",
      "Representante",
      "Estratega",
      "Scrum Master",
      "Scrum Owner",
      "Product Owner",
      "Scrum Developer"
    ]
  };
});

// node_modules/faker/lib/locales/es_MX/name/name.js
var require_name29 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{prefix} #{first_name} #{last_name} #{last_name}",
    "#{first_name} #{last_name} de #{last_name}",
    "#{suffix} #{first_name} #{last_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name}"
  ];
});

// node_modules/faker/lib/locales/es_MX/name/index.js
var require_name28 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name = require_first_name9();
  name2.last_name = require_last_name9();
  name2.prefix = require_prefix9();
  name2.suffix = require_suffix16();
  name2.title = require_title4();
  name2.name = require_name29();
});

// node_modules/faker/lib/locales/es_MX/address/city_prefix.js
var require_city_prefix5 = __commonJS((exports, module) => {
  module["exports"] = [
    "Aguascalientes",
    "Apodaca",
    "Buenavista",
    "Campeche",
    "Cancún",
    "Cárdenas",
    "Celaya",
    "Chalco",
    "Chetumal",
    "Chicoloapan",
    "Chignahuapan",
    "Chihuahua",
    "Chilpancingo",
    "Chimalhuacán",
    "Ciudad Acuña",
    "Ciudad de México",
    "Ciudad del Carmen",
    "Ciudad López Mateos",
    "Ciudad Madero",
    "Ciudad Obregón",
    "Ciudad Valles",
    "Ciudad Victoria",
    "Coatzacoalcos",
    "Colima-Villa de Álvarez",
    "Comitán de Dominguez",
    "Córdoba",
    "Cuautitlán Izcalli",
    "Cuautla",
    "Cuernavaca",
    "Culiacán",
    "Delicias",
    "Durango",
    "Ensenada",
    "Fresnillo",
    "General Escobedo",
    "Gómez Palacio",
    "Guadalajara",
    "Guadalupe",
    "Guanajuato",
    "Guaymas",
    "Hermosillo",
    "Hidalgo del Parral",
    "Iguala",
    "Irapuato",
    "Ixtapaluca",
    "Jiutepec",
    "Juárez",
    "La Laguna",
    "La Paz",
    "La Piedad-Pénjamo",
    "León",
    "Los Cabos",
    "Los Mochis",
    "Manzanillo",
    "Matamoros",
    "Mazatlán",
    "Mérida",
    "Mexicali",
    "Minatitlán",
    "Miramar",
    "Monclova",
    "Monclova-Frontera",
    "Monterrey",
    "Morelia",
    "Naucalpan de Juárez",
    "Navojoa",
    "Nezahualcóyotl",
    "Nogales",
    "Nuevo Laredo",
    "Oaxaca",
    "Ocotlán",
    "Ojo de agua",
    "Orizaba",
    "Pachuca",
    "Piedras Negras",
    "Poza Rica",
    "Puebla",
    "Puerto Vallarta",
    "Querétaro",
    "Reynosa-Río Bravo",
    "Rioverde-Ciudad Fernández",
    "Salamanca",
    "Saltillo",
    "San Cristobal de las Casas",
    "San Francisco Coacalco",
    "San Francisco del Rincón",
    "San Juan Bautista Tuxtepec",
    "San Juan del Río",
    "San Luis Potosí-Soledad",
    "San Luis Río Colorado",
    "San Nicolás de los Garza",
    "San Pablo de las Salinas",
    "San Pedro Garza García",
    "Santa Catarina",
    "Soledad de Graciano Sánchez",
    "Tampico-Pánuco",
    "Tapachula",
    "Tecomán",
    "Tehuacán",
    "Tehuacán",
    "Tehuantepec-Salina Cruz",
    "Tepexpan",
    "Tepic",
    "Tetela de Ocampo",
    "Texcoco de Mora",
    "Tijuana",
    "Tlalnepantla",
    "Tlaquepaque",
    "Tlaxcala-Apizaco",
    "Toluca",
    "Tonalá",
    "Torreón",
    "Tula",
    "Tulancingo",
    "Tulancingo de Bravo",
    "Tuxtla Gutiérrez",
    "Uruapan",
    "Uruapan del Progreso",
    "Valle de México",
    "Veracruz",
    "Villa de Álvarez",
    "Villa Nicolás Romero",
    "Villahermosa",
    "Xalapa",
    "Zacatecas-Guadalupe",
    "Zacatlan",
    "Zacatzingo",
    "Zamora-Jacona",
    "Zapopan",
    "Zitacuaro"
  ];
});

// node_modules/faker/lib/locales/es_MX/address/city_suffix.js
var require_city_suffix3 = __commonJS((exports, module) => {
  module["exports"] = [
    "town",
    "ton",
    "land",
    "ville",
    "berg",
    "burgh",
    "borough",
    "bury",
    "view",
    "port",
    "mouth",
    "stad",
    "furt",
    "chester",
    "mouth",
    "fort",
    "haven",
    "side",
    "shire"
  ];
});

// node_modules/faker/lib/locales/es_MX/address/country.js
var require_country7 = __commonJS((exports, module) => {
  module["exports"] = [
    "Afganistán",
    "Albania",
    "Argelia",
    "Andorra",
    "Angola",
    "Argentina",
    "Armenia",
    "Aruba",
    "Australia",
    "Austria",
    "Azerbayán",
    "Bahamas",
    "Barein",
    "Bangladesh",
    "Barbados",
    "Bielorusia",
    "Bélgica",
    "Belice",
    "Bermuda",
    "Bután",
    "Bolivia",
    "Bosnia Herzegovina",
    "Botswana",
    "Brasil",
    "Bulgaria",
    "Burkina Faso",
    "Burundi",
    "Camboya",
    "Camerún",
    "Canada",
    "Cabo Verde",
    "Islas Caimán",
    "Chad",
    "Chile",
    "China",
    "Isla de Navidad",
    "Colombia",
    "Comodos",
    "Congo",
    "Costa Rica",
    "Costa de Marfil",
    "Croacia",
    "Cuba",
    "Chipre",
    "República Checa",
    "Dinamarca",
    "Dominica",
    "República Dominicana",
    "Ecuador",
    "Egipto",
    "El Salvador",
    "Guinea Ecuatorial",
    "Eritrea",
    "Estonia",
    "Etiopía",
    "Islas Faro",
    "Fiji",
    "Finlandia",
    "Francia",
    "Gabón",
    "Gambia",
    "Georgia",
    "Alemania",
    "Ghana",
    "Grecia",
    "Groenlandia",
    "Granada",
    "Guadalupe",
    "Guam",
    "Guatemala",
    "Guinea",
    "Guinea-Bisau",
    "Guayana",
    "Haiti",
    "Honduras",
    "Hong Kong",
    "Hungria",
    "Islandia",
    "India",
    "Indonesia",
    "Iran",
    "Irak",
    "Irlanda",
    "Italia",
    "Jamaica",
    "Japón",
    "Jordania",
    "Kazajistan",
    "Kenia",
    "Kiribati",
    "Corea",
    "Kuwait",
    "Letonia",
    "Líbano",
    "Liberia",
    "Liechtenstein",
    "Lituania",
    "Luxemburgo",
    "Macao",
    "Macedonia",
    "Madagascar",
    "Malawi",
    "Malasia",
    "Maldivas",
    "Mali",
    "Malta",
    "Martinica",
    "Mauritania",
    "México",
    "Micronesia",
    "Moldavia",
    "Mónaco",
    "Mongolia",
    "Montenegro",
    "Montserrat",
    "Marruecos",
    "Mozambique",
    "Namibia",
    "Nauru",
    "Nepal",
    "Holanda",
    "Nueva Zelanda",
    "Nicaragua",
    "Niger",
    "Nigeria",
    "Noruega",
    "Omán",
    "Pakistan",
    "Panamá",
    "Papúa Nueva Guinea",
    "Paraguay",
    "Perú",
    "Filipinas",
    "Poland",
    "Portugal",
    "Puerto Rico",
    "Rusia",
    "Ruanda",
    "Samoa",
    "San Marino",
    "Santo Tomé y Principe",
    "Arabia Saudí",
    "Senegal",
    "Serbia",
    "Seychelles",
    "Sierra Leona",
    "Singapur",
    "Eslovaquia",
    "Eslovenia",
    "Somalia",
    "España",
    "Sri Lanka",
    "Sudán",
    "Suriname",
    "Suecia",
    "Suiza",
    "Siria",
    "Taiwan",
    "Tajikistan",
    "Tanzania",
    "Tailandia",
    "Timor-Leste",
    "Togo",
    "Tonga",
    "Trinidad y Tobago",
    "Tunez",
    "Turquia",
    "Uganda",
    "Ucrania",
    "Emiratos Árabes Unidos",
    "Reino Unido",
    "Estados Unidos de América",
    "Uruguay",
    "Uzbekistan",
    "Vanuatu",
    "Venezuela",
    "Vietnam",
    "Yemen",
    "Zambia",
    "Zimbabwe"
  ];
});

// node_modules/faker/lib/locales/es_MX/address/building_number.js
var require_building_number9 = __commonJS((exports, module) => {
  module["exports"] = [
    " s/n.",
    ", #",
    ", ##",
    " #",
    " ##",
    " ###",
    " ####"
  ];
});

// node_modules/faker/lib/locales/es_MX/address/street_suffix.js
var require_street_suffix6 = __commonJS((exports, module) => {
  module["exports"] = [
    "Aldea",
    "Apartamento",
    "Arrabal",
    "Arroyo",
    "Avenida",
    "Bajada",
    "Barranco",
    "Barrio",
    "Bloque",
    "Calle",
    "Calleja",
    "Camino",
    "Carretera",
    "Caserio",
    "Colegio",
    "Colonia",
    "Conjunto",
    "Cuesta",
    "Chalet",
    "Edificio",
    "Entrada",
    "Escalinata",
    "Explanada",
    "Extramuros",
    "Extrarradio",
    "Ferrocarril",
    "Glorieta",
    "Gran Subida",
    "Grupo",
    "Huerta",
    "Jardines",
    "Lado",
    "Lugar",
    "Manzana",
    "Masía",
    "Mercado",
    "Monte",
    "Muelle",
    "Municipio",
    "Parcela",
    "Parque",
    "Partida",
    "Pasaje",
    "Paseo",
    "Plaza",
    "Poblado",
    "Polígono",
    "Prolongación",
    "Puente",
    "Puerta",
    "Quinta",
    "Ramal",
    "Rambla",
    "Rampa",
    "Riera",
    "Rincón",
    "Ronda",
    "Rua",
    "Salida",
    "Sector",
    "Sección",
    "Senda",
    "Solar",
    "Subida",
    "Terrenos",
    "Torrente",
    "Travesía",
    "Urbanización",
    "Vía",
    "Vía Pública"
  ];
});

// node_modules/faker/lib/locales/es_MX/address/secondary_address.js
var require_secondary_address7 = __commonJS((exports, module) => {
  module["exports"] = [
    "Esc. ###",
    "Puerta ###",
    "Edificio #"
  ];
});

// node_modules/faker/lib/locales/es_MX/address/postcode.js
var require_postcode13 = __commonJS((exports, module) => {
  module["exports"] = [
    "#####"
  ];
});

// node_modules/faker/lib/locales/es_MX/address/state.js
var require_state11 = __commonJS((exports, module) => {
  module["exports"] = [
    "Aguascalientes",
    "Baja California Norte",
    "Baja California Sur",
    "Estado de México",
    "Campeche",
    "Chiapas",
    "Chihuahua",
    "Coahuila",
    "Colima",
    "Durango",
    "Guanajuato",
    "Guerrero",
    "Hidalgo",
    "Jalisco",
    "Michoacan",
    "Morelos",
    "Nayarit",
    "Nuevo León",
    "Oaxaca",
    "Puebla",
    "Querétaro",
    "Quintana Roo",
    "San Luis Potosí",
    "Sinaloa",
    "Sonora",
    "Tabasco",
    "Tamaulipas",
    "Tlaxcala",
    "Veracruz",
    "Yucatán",
    "Zacatecas"
  ];
});

// node_modules/faker/lib/locales/es_MX/address/state_abbr.js
var require_state_abbr10 = __commonJS((exports, module) => {
  module["exports"] = [
    "AS",
    "BC",
    "BS",
    "CC",
    "CS",
    "CH",
    "CL",
    "CM",
    "DF",
    "DG",
    "GT",
    "GR",
    "HG",
    "JC",
    "MC",
    "MN",
    "MS",
    "NT",
    "NL",
    "OC",
    "PL",
    "QT",
    "QR",
    "SP",
    "SL",
    "SR",
    "TC",
    "TS",
    "TL",
    "VZ",
    "YN",
    "ZS"
  ];
});

// node_modules/faker/lib/locales/es_MX/address/time_zone.js
var require_time_zone4 = __commonJS((exports, module) => {
  module["exports"] = [
    "Pacífico/Midway",
    "Pacífico/Pago_Pago",
    "Pacífico/Honolulu",
    "America/Juneau",
    "America/Los_Angeles",
    "America/Tijuana",
    "America/Denver",
    "America/Phoenix",
    "America/Chihuahua",
    "America/Mazatlan",
    "America/Chicago",
    "America/Regina",
    "America/Mexico_City",
    "America/Monterrey",
    "America/Guatemala",
    "America/New_York",
    "America/Indiana/Indianapolis",
    "America/Bogota",
    "America/Lima",
    "America/Lima",
    "America/Halifax",
    "America/Caracas",
    "America/La_Paz",
    "America/Santiago",
    "America/St_Johns",
    "America/Sao_Paulo",
    "America/Argentina/Buenos_Aires",
    "America/Guyana",
    "America/Godthab",
    "Atlantic/South_Georgia",
    "Atlantic/Azores",
    "Atlantic/Cape_Verde",
    "Europa/Dublin",
    "Europa/London",
    "Europa/Lisbon",
    "Europa/London",
    "Africa/Casablanca",
    "Africa/Monrovia",
    "Etc/UTC",
    "Europa/Belgrade",
    "Europa/Bratislava",
    "Europa/Budapest",
    "Europa/Ljubljana",
    "Europa/Prague",
    "Europa/Sarajevo",
    "Europa/Skopje",
    "Europa/Warsaw",
    "Europa/Zagreb",
    "Europa/Brussels",
    "Europa/Copenhagen",
    "Europa/Madrid",
    "Europa/Paris",
    "Europa/Amsterdam",
    "Europa/Berlin",
    "Europa/Berlin",
    "Europa/Rome",
    "Europa/Stockholm",
    "Europa/Vienna",
    "Africa/Algiers",
    "Europa/Bucharest",
    "Africa/Cairo",
    "Europa/Helsinki",
    "Europa/Kiev",
    "Europa/Riga",
    "Europa/Sofia",
    "Europa/Tallinn",
    "Europa/Vilnius",
    "Europa/Athens",
    "Europa/Istanbul",
    "Europa/Minsk",
    "Asia/Jerusalen",
    "Africa/Harare",
    "Africa/Johannesburg",
    "Europa/Moscú",
    "Europa/Moscú",
    "Europa/Moscú",
    "Asia/Kuwait",
    "Asia/Riyadh",
    "Africa/Nairobi",
    "Asia/Baghdad",
    "Asia/Tehran",
    "Asia/Muscat",
    "Asia/Muscat",
    "Asia/Baku",
    "Asia/Tbilisi",
    "Asia/Yerevan",
    "Asia/Kabul",
    "Asia/Yekaterinburg",
    "Asia/Karachi",
    "Asia/Karachi",
    "Asia/Tashkent",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kathmandu",
    "Asia/Dhaka",
    "Asia/Dhaka",
    "Asia/Colombo",
    "Asia/Almaty",
    "Asia/Novosibirsk",
    "Asia/Rangoon",
    "Asia/Bangkok",
    "Asia/Bangkok",
    "Asia/Jakarta",
    "Asia/Krasnoyarsk",
    "Asia/Shanghai",
    "Asia/Chongqing",
    "Asia/Hong_Kong",
    "Asia/Urumqi",
    "Asia/Kuala_Lumpur",
    "Asia/Singapore",
    "Asia/Taipei",
    "Australia/Perth",
    "Asia/Irkutsk",
    "Asia/Ulaanbaatar",
    "Asia/Seoul",
    "Asia/Tokyo",
    "Asia/Tokyo",
    "Asia/Tokyo",
    "Asia/Yakutsk",
    "Australia/Darwin",
    "Australia/Adelaide",
    "Australia/Melbourne",
    "Australia/Melbourne",
    "Australia/Sydney",
    "Australia/Brisbane",
    "Australia/Hobart",
    "Asia/Vladivostok",
    "Pacífico/Guam",
    "Pacífico/Port_Moresby",
    "Asia/Magadan",
    "Asia/Magadan",
    "Pacífico/Noumea",
    "Pacífico/Fiji",
    "Asia/Kamchatka",
    "Pacífico/Majuro",
    "Pacífico/Auckland",
    "Pacífico/Auckland",
    "Pacífico/Tongatapu",
    "Pacífico/Fakaofo",
    "Pacífico/Apia"
  ];
});

// node_modules/faker/lib/locales/es_MX/address/city.js
var require_city8 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{city_prefix}"
  ];
});

// node_modules/faker/lib/locales/es_MX/address/street.js
var require_street2 = __commonJS((exports, module) => {
  module["exports"] = [
    "20 de Noviembre",
    "Cinco de Mayo",
    "Cuahutemoc",
    "Manzanares",
    "Donceles",
    "Francisco I. Madero",
    "Juárez",
    "Repúplica de Cuba",
    "Repúplica de Chile",
    "Repúplica de Argentina",
    "Repúplica de Uruguay",
    "Isabel la Católica",
    "Izazaga",
    "Eje Central",
    "Eje 6",
    "Eje 5",
    "La viga",
    "Aniceto Ortega",
    "Miguel Ángel de Quevedo",
    "Amores",
    "Coyoacán",
    "Coruña",
    "Batalla de Naco",
    "La otra banda",
    "Piedra del Comal",
    "Balcón de los edecanes",
    "Barrio la Lonja",
    "Jicolapa",
    "Zacatlán",
    "Zapata",
    "Polotitlan",
    "Calimaya",
    "Flor Marina",
    "Flor Solvestre",
    "San Miguel",
    "Naranjo",
    "Cedro",
    "Jalisco",
    "Avena"
  ];
});

// node_modules/faker/lib/locales/es_MX/address/street_name.js
var require_street_name8 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_suffix} #{Name.first_name}",
    "#{street_suffix} #{Name.first_name} #{Name.last_name}",
    "#{street_suffix} #{street}",
    "#{street_suffix} #{street}",
    "#{street_suffix} #{street}",
    "#{street_suffix} #{street}"
  ];
});

// node_modules/faker/lib/locales/es_MX/address/street_address.js
var require_street_address7 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_name}#{building_number}",
    "#{street_name}#{building_number} #{secondary_address}"
  ];
});

// node_modules/faker/lib/locales/es_MX/address/default_country.js
var require_default_country15 = __commonJS((exports, module) => {
  module["exports"] = [
    "México"
  ];
});

// node_modules/faker/lib/locales/es_MX/address/index.js
var require_address16 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.city_prefix = require_city_prefix5();
  address.city_suffix = require_city_suffix3();
  address.country = require_country7();
  address.building_number = require_building_number9();
  address.street_suffix = require_street_suffix6();
  address.secondary_address = require_secondary_address7();
  address.postcode = require_postcode13();
  address.state = require_state11();
  address.state_abbr = require_state_abbr10();
  address.time_zone = require_time_zone4();
  address.city = require_city8();
  address.street = require_street2();
  address.street_name = require_street_name8();
  address.street_address = require_street_address7();
  address.default_country = require_default_country15();
});

// node_modules/faker/lib/locales/es_MX/company/suffix.js
var require_suffix15 = __commonJS((exports, module) => {
  module["exports"] = [
    "S.L.",
    "e Hijos",
    "S.A.",
    "Hermanos"
  ];
});

// node_modules/faker/lib/locales/es_MX/company/adjective.js
var require_adjective5 = __commonJS((exports, module) => {
  module["exports"] = [
    "Adaptativo",
    "Avanzado",
    "Asimilado",
    "Automatizado",
    "Equilibrado",
    "Centrado en el negocio",
    "Centralizado",
    "Clonado",
    "Compatible",
    "Configurable",
    "Multi grupo",
    "Multi plataforma",
    "Centrado en el usuario",
    "Configurable",
    "Descentralizado",
    "Digitalizado",
    "Distribuido",
    "Diverso",
    "Reducido",
    "Mejorado",
    "Para toda la empresa",
    "Ergonomico",
    "Exclusivo",
    "Expandido",
    "Extendido",
    "Cara a cara",
    "Enfocado",
    "Totalmente configurable",
    "Fundamental",
    "Orígenes",
    "Horizontal",
    "Implementado",
    "Innovador",
    "Integrado",
    "Intuitivo",
    "Inverso",
    "Gestionado",
    "Obligatorio",
    "Monitorizado",
    "Multi canal",
    "Multi lateral",
    "Multi capa",
    "En red",
    "Orientado a objetos",
    "Open-source",
    "Operativo",
    "Optimizado",
    "Opcional",
    "Organico",
    "Organizado",
    "Perseverando",
    "Persistente",
    "en fases",
    "Polarizado",
    "Pre-emptivo",
    "Proactivo",
    "Enfocado a benficios",
    "Profundo",
    "Programable",
    "Progresivo",
    "Public-key",
    "Enfocado en la calidad",
    "Reactivo",
    "Realineado",
    "Re-contextualizado",
    "Re-implementado",
    "Reducido",
    "Ingenieria inversa",
    "Robusto",
    "Fácil",
    "Seguro",
    "Auto proporciona",
    "Compartible",
    "Intercambiable",
    "Sincronizado",
    "Orientado a equipos",
    "Total",
    "Universal",
    "Mejorado",
    "Actualizable",
    "Centrado en el usuario",
    "Amigable",
    "Versatil",
    "Virtual",
    "Visionario"
  ];
});

// node_modules/faker/lib/locales/es_MX/company/descriptor.js
var require_descriptor4 = __commonJS((exports, module) => {
  module["exports"] = [
    "24 horas",
    "24/7",
    "3rd generación",
    "4th generación",
    "5th generación",
    "6th generación",
    "analizada",
    "asimétrica",
    "asíncrona",
    "monitorizada por red",
    "bidireccional",
    "bifurcada",
    "generada por el cliente",
    "cliente servidor",
    "coherente",
    "cohesiva",
    "compuesto",
    "sensible al contexto",
    "basado en el contexto",
    "basado en contenido",
    "dedicada",
    "generado por la demanda",
    "didactica",
    "direccional",
    "discreta",
    "dinámica",
    "potenciada",
    "acompasada",
    "ejecutiva",
    "explícita",
    "tolerante a fallos",
    "innovadora",
    "amplio ábanico",
    "global",
    "heurística",
    "alto nivel",
    "holística",
    "homogénea",
    "hibrida",
    "incremental",
    "intangible",
    "interactiva",
    "intermedia",
    "local",
    "logística",
    "maximizada",
    "metódica",
    "misión crítica",
    "móbil",
    "modular",
    "motivadora",
    "multimedia",
    "multiestado",
    "multitarea",
    "nacional",
    "basado en necesidades",
    "neutral",
    "nueva generación",
    "no-volátil",
    "orientado a objetos",
    "óptima",
    "optimizada",
    "radical",
    "tiempo real",
    "recíproca",
    "regional",
    "escalable",
    "secundaria",
    "orientada a soluciones",
    "estable",
    "estatica",
    "sistemática",
    "sistémica",
    "tangible",
    "terciaria",
    "transicional",
    "uniforme",
    "valor añadido",
    "vía web",
    "defectos cero",
    "tolerancia cero"
  ];
});

// node_modules/faker/lib/locales/es_MX/company/noun.js
var require_noun5 = __commonJS((exports, module) => {
  module["exports"] = [
    "habilidad",
    "acceso",
    "adaptador",
    "algoritmo",
    "alianza",
    "analista",
    "aplicación",
    "enfoque",
    "arquitectura",
    "archivo",
    "inteligencia artificial",
    "array",
    "actitud",
    "medición",
    "gestión presupuestaria",
    "capacidad",
    "desafío",
    "circuito",
    "colaboración",
    "complejidad",
    "concepto",
    "conglomeración",
    "contingencia",
    "núcleo",
    "fidelidad",
    "base de datos",
    "data-warehouse",
    "definición",
    "emulación",
    "codificar",
    "encriptar",
    "extranet",
    "firmware",
    "flexibilidad",
    "focus group",
    "previsión",
    "base de trabajo",
    "función",
    "funcionalidad",
    "Interfaz Gráfica",
    "groupware",
    "Interfaz gráfico de usuario",
    "hardware",
    "Soporte",
    "jerarquía",
    "conjunto",
    "implementación",
    "infraestructura",
    "iniciativa",
    "instalación",
    "conjunto de instrucciones",
    "interfaz",
    "intranet",
    "base del conocimiento",
    "red de area local",
    "aprovechar",
    "matrices",
    "metodologías",
    "middleware",
    "migración",
    "modelo",
    "moderador",
    "monitorizar",
    "arquitectura abierta",
    "sistema abierto",
    "orquestar",
    "paradigma",
    "paralelismo",
    "política",
    "portal",
    "estructura de precios",
    "proceso de mejora",
    "producto",
    "productividad",
    "proyecto",
    "proyección",
    "protocolo",
    "línea segura",
    "software",
    "solución",
    "estandardización",
    "estrategia",
    "estructura",
    "éxito",
    "superestructura",
    "soporte",
    "sinergia",
    "mediante",
    "marco de tiempo",
    "caja de herramientas",
    "utilización",
    "website",
    "fuerza de trabajo"
  ];
});

// node_modules/faker/lib/locales/es_MX/company/bs_verb.js
var require_bs_verb3 = __commonJS((exports, module) => {
  module["exports"] = [
    "poner en práctica",
    "utilizar",
    "integrar",
    "racionalizar",
    "optimizar",
    "evolucionar",
    "transformar",
    "abrazar",
    "habilitar",
    "orquestar",
    "apalancamiento",
    "reinventar",
    "agregado",
    "arquitecto",
    "mejorar",
    "incentivar",
    "transformarse",
    "empoderar",
    "Envisioneer",
    "monetizar",
    "arnés",
    "facilitar",
    "aprovechar",
    "desintermediar",
    "sinergia",
    "estrategias",
    "desplegar",
    "marca",
    "crecer",
    "objetivo",
    "sindicato",
    "sintetizar",
    "entregue",
    "malla",
    "incubar",
    "enganchar",
    "maximizar",
    "punto de referencia",
    "acelerar",
    "reintermediate",
    "pizarra",
    "visualizar",
    "reutilizar",
    "innovar",
    "escala",
    "desatar",
    "conducir",
    "extender",
    "ingeniero",
    "revolucionar",
    "generar",
    "explotar",
    "transición",
    "e-enable",
    "repetir",
    "cultivar",
    "matriz",
    "productize",
    "redefinir",
    "recontextualizar"
  ];
});

// node_modules/faker/lib/locales/es_MX/company/name.js
var require_name27 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name} y #{Name.last_name}",
    "#{Name.last_name} #{Name.last_name} #{suffix}",
    "#{Name.last_name}, #{Name.last_name} y #{Name.last_name} Asociados"
  ];
});

// node_modules/faker/lib/locales/es_MX/company/bs_adjective.js
var require_bs_adjective2 = __commonJS((exports, module) => {
  module["exports"] = [
    "Clics y mortero",
    "Valor añadido",
    "Vertical",
    "Proactivo",
    "Robusto",
    "Revolucionario",
    "Escalable",
    "De vanguardia",
    "Innovador",
    "Intuitivo",
    "Estratégico",
    "E-business",
    "Misión crítica",
    "Pegajosa",
    "Doce y cincuenta y nueve de la noche",
    "24/7",
    "De extremo a extremo",
    "Global",
    "B2B",
    "B2C",
    "Granular",
    "Fricción",
    "Virtual",
    "Viral",
    "Dinámico",
    "24/365",
    "Mejor de su clase",
    "Asesino",
    "Magnética",
    "Filo sangriento",
    "Habilitado web",
    "Interactiva",
    "Punto com",
    "Sexy",
    "Back-end",
    "Tiempo real",
    "Eficiente",
    "Frontal",
    "Distribuida",
    "Sin costura",
    "Extensible",
    "Llave en mano",
    "Clase mundial",
    "Código abierto",
    "Multiplataforma",
    "Cross-media",
    "Sinérgico",
    "ladrillos y clics",
    "Fuera de la caja",
    "Empresa",
    "Integrado",
    "Impactante",
    "Inalámbrico",
    "Transparente",
    "Próxima generación",
    "Innovador",
    "User-centric",
    "Visionario",
    "A medida",
    "Ubicua",
    "Enchufa y juega",
    "Colaboración",
    "Convincente",
    "Holístico",
    "Ricos"
  ];
});

// node_modules/faker/lib/locales/es_MX/company/bs_noun.js
var require_bs_noun3 = __commonJS((exports, module) => {
  module["exports"] = [
    "sinergias",
    "web-readiness",
    "paradigmas",
    "mercados",
    "asociaciones",
    "infraestructuras",
    "plataformas",
    "iniciativas",
    "canales",
    "ojos",
    "comunidades",
    "ROI",
    "soluciones",
    "minoristas electrónicos",
    "e-servicios",
    "elementos de acción",
    "portales",
    "nichos",
    "tecnologías",
    "contenido",
    "vortales",
    "cadenas de suministro",
    "convergencia",
    "relaciones",
    "arquitecturas",
    "interfaces",
    "mercados electrónicos",
    "e-commerce",
    "sistemas",
    "ancho de banda",
    "infomediarios",
    "modelos",
    "Mindshare",
    "entregables",
    "usuarios",
    "esquemas",
    "redes",
    "aplicaciones",
    "métricas",
    "e-business",
    "funcionalidades",
    "experiencias",
    "servicios web",
    "metodologías"
  ];
});

// node_modules/faker/lib/locales/es_MX/company/index.js
var require_company12 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.suffix = require_suffix15();
  company.adjective = require_adjective5();
  company.descriptor = require_descriptor4();
  company.noun = require_noun5();
  company.bs_verb = require_bs_verb3();
  company.name = require_name27();
  company.bs_adjective = require_bs_adjective2();
  company.bs_noun = require_bs_noun3();
});

// node_modules/faker/lib/locales/es_MX/internet/free_email.js
var require_free_email9 = __commonJS((exports, module) => {
  module["exports"] = [
    "gmail.com",
    "yahoo.com",
    "hotmail.com",
    "nearbpo.com",
    "corpfolder.com"
  ];
});

// node_modules/faker/lib/locales/es_MX/internet/domain_suffix.js
var require_domain_suffix15 = __commonJS((exports, module) => {
  module["exports"] = [
    "com",
    "mx",
    "info",
    "com.mx",
    "org",
    "gob.mx"
  ];
});

// node_modules/faker/lib/locales/es_MX/internet/index.js
var require_internet16 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.free_email = require_free_email9();
  internet.domain_suffix = require_domain_suffix15();
});

// node_modules/faker/lib/locales/es_MX/phone_number/formats.js
var require_formats21 = __commonJS((exports, module) => {
  module["exports"] = [
    "5###-###-###",
    "5##.###.###",
    "5## ### ###",
    "5########"
  ];
});

// node_modules/faker/lib/locales/es_MX/phone_number/index.js
var require_phone_number15 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats21();
});

// node_modules/faker/lib/locales/es_MX/cell_phone/formats.js
var require_formats20 = __commonJS((exports, module) => {
  module["exports"] = [
    "5##-###-###",
    "5##.###.###",
    "5## ### ###",
    "5########"
  ];
});

// node_modules/faker/lib/locales/es_MX/cell_phone/index.js
var require_cell_phone7 = __commonJS((exports, module) => {
  var cell_phone = {};
  module["exports"] = cell_phone;
  cell_phone.formats = require_formats20();
});

// node_modules/faker/lib/locales/es_MX/lorem/words.js
var require_words5 = __commonJS((exports, module) => {
  module["exports"] = [
    "Abacalero",
    "Abacería",
    "Abacero",
    "Abacial",
    "Abaco",
    "Abacora",
    "Abacorar",
    "Abad",
    "Abada",
    "Abadejo",
    "Abadengo",
    "Abadernar",
    "Abadesa",
    "Abadí",
    "Abadía",
    "Abadiado",
    "Abadiato",
    "Abajadero",
    "Abajamiento",
    "Abajar",
    "Abajeño",
    "Abajera",
    "Abajo",
    "Abalada",
    "Abalanzar",
    "Abalar",
    "Abalaustrado",
    "Abaldonadamente",
    "Abaldonamiento",
    "Bastonada",
    "Bastonazo",
    "Bastoncillo",
    "Bastonear",
    "Bastonero",
    "Bástulo",
    "Basura",
    "Basural",
    "Basurear",
    "Basurero",
    "Bata",
    "Batacazo",
    "Batahola",
    "Batalán",
    "Batalla",
    "Batallador",
    "Batallar",
    "Batallaroso",
    "Batallola",
    "Batallón",
    "Batallona",
    "Batalloso",
    "Batán",
    "Batanar",
    "Batanear",
    "Batanero",
    "Batanga",
    "Bataola",
    "Batata",
    "Batatazo",
    "Batato",
    "Batavia",
    "Bátavo",
    "Batayola",
    "Batazo",
    "Bate",
    "Batea",
    "Bateador",
    "Bateaguas",
    "Cenagar",
    "Cenagoso",
    "Cenal",
    "Cenaoscuras",
    "Ceñar",
    "Cenata",
    "Cenca",
    "Cencapa",
    "Cencellada",
    "Cenceñada",
    "Cenceño",
    "Cencero",
    "Cencerra",
    "Cencerrada",
    "Cencerrado",
    "Cencerrear",
    "Cencerreo",
    "Cencerril",
    "Cencerrillas",
    "Cencerro",
    "Cencerrón",
    "Cencha",
    "Cencido",
    "Cencío",
    "Cencivera",
    "Cenco",
    "Cencuate",
    "Cendal",
    "Cendalí",
    "Céndea",
    "Cendolilla",
    "Cendra",
    "Cendrada",
    "Cendradilla",
    "Cendrado",
    "Cendrar",
    "Cendrazo",
    "Cenefa",
    "Cenegar",
    "Ceneque",
    "Cenero",
    "Cenestesia",
    "Desceñir",
    "Descensión",
    "Descenso",
    "Descentrado",
    "Descentralización",
    "Descentralizador",
    "Descentralizar",
    "Descentrar",
    "Descepar",
    "Descerar",
    "Descercado",
    "Descercador",
    "Descercar",
    "Descerco",
    "Descerebración",
    "Descerebrado",
    "Descerebrar",
    "Descerezar",
    "Descerrajado",
    "Descerrajadura",
    "Descerrajar",
    "Descerrar",
    "Descerrumarse",
    "Descervigamiento",
    "Descervigar",
    "Deschapar",
    "Descharchar",
    "Deschavetado",
    "Deschavetarse",
    "Deschuponar",
    "Descifrable",
    "Descifrador",
    "Desciframiento",
    "Descifrar",
    "Descifre",
    "Descimbramiento",
    "Descimbrar",
    "Engarbarse",
    "Engarberar",
    "Engarbullar",
    "Engarce",
    "Engarfiar",
    "Engargantadura",
    "Engargantar",
    "Engargante",
    "Engargolado",
    "Engargolar",
    "Engaritar",
    "Engarmarse",
    "Engarnio",
    "Engarrafador",
    "Engarrafar",
    "Engarrar",
    "Engarro",
    "Engarronar",
    "Engarrotar",
    "Engarzador",
    "Engarzadura",
    "Engarzar",
    "Engasgarse",
    "Engastador",
    "Engastadura",
    "Engastar",
    "Engaste",
    "Ficción",
    "Fice",
    "Ficha",
    "Fichaje",
    "Fichar",
    "Fichero",
    "Ficoideo",
    "Ficticio",
    "Fidalgo",
    "Fidecomiso",
    "Fidedigno",
    "Fideero",
    "Fideicomisario",
    "Fideicomiso",
    "Fideicomitente",
    "Fideísmo",
    "Fidelidad",
    "Fidelísimo",
    "Fideo",
    "Fido",
    "Fiducia",
    "Geminación",
    "Geminado",
    "Geminar",
    "Géminis",
    "Gémino",
    "Gemíparo",
    "Gemiquear",
    "Gemiqueo",
    "Gemir",
    "Gemología",
    "Gemológico",
    "Gemólogo",
    "Gemonias",
    "Gemoso",
    "Gemoterapia",
    "Gen",
    "Genciana",
    "Gencianáceo",
    "Gencianeo",
    "Gendarme",
    "Gendarmería",
    "Genealogía",
    "Genealógico",
    "Genealogista",
    "Genearca",
    "Geneático",
    "Generable",
    "Generación",
    "Generacional",
    "Generador",
    "General",
    "Generala",
    "Generalato",
    "Generalidad",
    "Generalísimo",
    "Incordio",
    "Incorporación",
    "Incorporal",
    "Incorporalmente",
    "Incorporar",
    "Incorporeidad",
    "Incorpóreo",
    "Incorporo",
    "Incorrección",
    "Incorrectamente",
    "Incorrecto",
    "Incorregibilidad",
    "Incorregible",
    "Incorregiblemente",
    "Incorrupción",
    "Incorruptamente",
    "Incorruptibilidad",
    "Incorruptible",
    "Incorrupto",
    "Incrasar",
    "Increado",
    "Incredibilidad",
    "Incrédulamente",
    "Incredulidad",
    "Incrédulo",
    "Increíble",
    "Increíblemente",
    "Incrementar",
    "Incremento",
    "Increpación",
    "Increpador",
    "Increpar",
    "Incriminación",
    "Incriminar",
    "Incristalizable",
    "Incruentamente",
    "Incruento",
    "Incrustación"
  ];
});

// node_modules/faker/lib/locales/es_MX/lorem/supplemental.js
var require_supplemental3 = __commonJS((exports, module) => {
  module["exports"] = [
    "abbas",
    "abduco",
    "abeo",
    "abscido",
    "absconditus",
    "absens",
    "absorbeo",
    "absque",
    "abstergo",
    "absum",
    "abundans",
    "abutor",
    "accedo",
    "accendo",
    "acceptus",
    "accipio",
    "accommodo",
    "accusator",
    "acer",
    "acerbitas",
    "acervus",
    "acidus",
    "acies",
    "acquiro",
    "acsi",
    "adamo",
    "adaugeo",
    "addo",
    "adduco",
    "ademptio",
    "adeo",
    "adeptio",
    "adfectus",
    "adfero",
    "adficio",
    "adflicto",
    "adhaero",
    "adhuc",
    "adicio",
    "adimpleo",
    "adinventitias",
    "adipiscor",
    "adiuvo",
    "administratio",
    "admiratio",
    "admitto",
    "admoneo",
    "admoveo",
    "adnuo",
    "adopto",
    "adsidue",
    "adstringo",
    "adsuesco",
    "adsum",
    "adulatio",
    "adulescens",
    "adultus",
    "aduro",
    "advenio",
    "adversus",
    "advoco",
    "aedificium",
    "aeger",
    "aegre",
    "aegrotatio",
    "aegrus",
    "aeneus",
    "aequitas",
    "aequus",
    "aer",
    "aestas",
    "aestivus",
    "aestus",
    "aetas",
    "aeternus",
    "ager",
    "aggero",
    "aggredior",
    "agnitio",
    "agnosco",
    "ago",
    "ait",
    "aiunt",
    "alienus",
    "alii",
    "alioqui",
    "aliqua",
    "alius",
    "allatus",
    "alo",
    "alter",
    "altus",
    "alveus",
    "amaritudo",
    "ambitus",
    "ambulo",
    "amicitia",
    "amiculum",
    "amissio",
    "amita",
    "amitto",
    "amo",
    "amor",
    "amoveo",
    "amplexus",
    "amplitudo",
    "amplus",
    "ancilla",
    "angelus",
    "angulus",
    "angustus",
    "animadverto",
    "animi",
    "animus",
    "annus",
    "anser",
    "ante",
    "antea",
    "antepono",
    "antiquus",
    "aperio",
    "aperte",
    "apostolus",
    "apparatus",
    "appello",
    "appono",
    "appositus",
    "approbo",
    "apto",
    "aptus",
    "apud",
    "aqua",
    "ara",
    "aranea",
    "arbitro",
    "arbor",
    "arbustum",
    "arca",
    "arceo",
    "arcesso",
    "arcus",
    "argentum",
    "argumentum",
    "arguo",
    "arma",
    "armarium",
    "armo",
    "aro",
    "ars",
    "articulus",
    "artificiose",
    "arto",
    "arx",
    "ascisco",
    "ascit",
    "asper",
    "aspicio",
    "asporto",
    "assentator",
    "astrum",
    "atavus",
    "ater",
    "atqui",
    "atrocitas",
    "atrox",
    "attero",
    "attollo",
    "attonbitus",
    "auctor",
    "auctus",
    "audacia",
    "audax",
    "audentia",
    "audeo",
    "audio",
    "auditor",
    "aufero",
    "aureus",
    "auris",
    "aurum",
    "aut",
    "autem",
    "autus",
    "auxilium",
    "avaritia",
    "avarus",
    "aveho",
    "averto",
    "avoco",
    "baiulus",
    "balbus",
    "barba",
    "bardus",
    "basium",
    "beatus",
    "bellicus",
    "bellum",
    "bene",
    "beneficium",
    "benevolentia",
    "benigne",
    "bestia",
    "bibo",
    "bis",
    "blandior",
    "bonus",
    "bos",
    "brevis",
    "cado",
    "caecus",
    "caelestis",
    "caelum",
    "calamitas",
    "calcar",
    "calco",
    "calculus",
    "callide",
    "campana",
    "candidus",
    "canis",
    "canonicus",
    "canto",
    "capillus",
    "capio",
    "capitulus",
    "capto",
    "caput",
    "carbo",
    "carcer",
    "careo",
    "caries",
    "cariosus",
    "caritas",
    "carmen",
    "carpo",
    "carus",
    "casso",
    "caste",
    "casus",
    "catena",
    "caterva",
    "cattus",
    "cauda",
    "causa",
    "caute",
    "caveo",
    "cavus",
    "cedo",
    "celebrer",
    "celer",
    "celo",
    "cena",
    "cenaculum",
    "ceno",
    "censura",
    "centum",
    "cerno",
    "cernuus",
    "certe",
    "certo",
    "certus",
    "cervus",
    "cetera",
    "charisma",
    "chirographum",
    "cibo",
    "cibus",
    "cicuta",
    "cilicium",
    "cimentarius",
    "ciminatio",
    "cinis",
    "circumvenio",
    "cito",
    "civis",
    "civitas",
    "clam",
    "clamo",
    "claro",
    "clarus",
    "claudeo",
    "claustrum",
    "clementia",
    "clibanus",
    "coadunatio",
    "coaegresco",
    "coepi",
    "coerceo",
    "cogito",
    "cognatus",
    "cognomen",
    "cogo",
    "cohaero",
    "cohibeo",
    "cohors",
    "colligo",
    "colloco",
    "collum",
    "colo",
    "color",
    "coma",
    "combibo",
    "comburo",
    "comedo",
    "comes",
    "cometes",
    "comis",
    "comitatus",
    "commemoro",
    "comminor",
    "commodo",
    "communis",
    "comparo",
    "compello",
    "complectus",
    "compono",
    "comprehendo",
    "comptus",
    "conatus",
    "concedo",
    "concido",
    "conculco",
    "condico",
    "conduco",
    "confero",
    "confido",
    "conforto",
    "confugo",
    "congregatio",
    "conicio",
    "coniecto",
    "conitor",
    "coniuratio",
    "conor",
    "conqueror",
    "conscendo",
    "conservo",
    "considero",
    "conspergo",
    "constans",
    "consuasor",
    "contabesco",
    "contego",
    "contigo",
    "contra",
    "conturbo",
    "conventus",
    "convoco",
    "copia",
    "copiose",
    "cornu",
    "corona",
    "corpus",
    "correptius",
    "corrigo",
    "corroboro",
    "corrumpo",
    "coruscus",
    "cotidie",
    "crapula",
    "cras",
    "crastinus",
    "creator",
    "creber",
    "crebro",
    "credo",
    "creo",
    "creptio",
    "crepusculum",
    "cresco",
    "creta",
    "cribro",
    "crinis",
    "cruciamentum",
    "crudelis",
    "cruentus",
    "crur",
    "crustulum",
    "crux",
    "cubicularis",
    "cubitum",
    "cubo",
    "cui",
    "cuius",
    "culpa",
    "culpo",
    "cultellus",
    "cultura",
    "cum",
    "cunabula",
    "cunae",
    "cunctatio",
    "cupiditas",
    "cupio",
    "cuppedia",
    "cupressus",
    "cur",
    "cura",
    "curatio",
    "curia",
    "curiositas",
    "curis",
    "curo",
    "curriculum",
    "currus",
    "cursim",
    "curso",
    "cursus",
    "curto",
    "curtus",
    "curvo",
    "curvus",
    "custodia",
    "damnatio",
    "damno",
    "dapifer",
    "debeo",
    "debilito",
    "decens",
    "decerno",
    "decet",
    "decimus",
    "decipio",
    "decor",
    "decretum",
    "decumbo",
    "dedecor",
    "dedico",
    "deduco",
    "defaeco",
    "defendo",
    "defero",
    "defessus",
    "defetiscor",
    "deficio",
    "defigo",
    "defleo",
    "defluo",
    "defungo",
    "degenero",
    "degero",
    "degusto",
    "deinde",
    "delectatio",
    "delego",
    "deleo",
    "delibero",
    "delicate",
    "delinquo",
    "deludo",
    "demens",
    "demergo",
    "demitto",
    "demo",
    "demonstro",
    "demoror",
    "demulceo",
    "demum",
    "denego",
    "denique",
    "dens",
    "denuncio",
    "denuo",
    "deorsum",
    "depereo",
    "depono",
    "depopulo",
    "deporto",
    "depraedor",
    "deprecator",
    "deprimo",
    "depromo",
    "depulso",
    "deputo",
    "derelinquo",
    "derideo",
    "deripio",
    "desidero",
    "desino",
    "desipio",
    "desolo",
    "desparatus",
    "despecto",
    "despirmatio",
    "infit",
    "inflammatio",
    "paens",
    "patior",
    "patria",
    "patrocinor",
    "patruus",
    "pauci",
    "paulatim",
    "pauper",
    "pax",
    "peccatus",
    "pecco",
    "pecto",
    "pectus",
    "pecunia",
    "pecus",
    "peior",
    "pel",
    "ocer",
    "socius",
    "sodalitas",
    "sol",
    "soleo",
    "solio",
    "solitudo",
    "solium",
    "sollers",
    "sollicito",
    "solum",
    "solus",
    "solutio",
    "solvo",
    "somniculosus",
    "somnus",
    "sonitus",
    "sono",
    "sophismata",
    "sopor",
    "sordeo",
    "sortitus",
    "spargo",
    "speciosus",
    "spectaculum",
    "speculum",
    "sperno",
    "spero",
    "spes",
    "spiculum",
    "spiritus",
    "spoliatio",
    "sponte",
    "stabilis",
    "statim",
    "statua",
    "stella",
    "stillicidium",
    "stipes",
    "stips",
    "sto",
    "strenuus",
    "strues",
    "studio",
    "stultus",
    "suadeo",
    "suasoria",
    "sub",
    "subito",
    "subiungo",
    "sublime",
    "subnecto",
    "subseco",
    "substantia",
    "subvenio",
    "succedo",
    "succurro",
    "sufficio",
    "suffoco",
    "suffragium",
    "suggero",
    "sui",
    "sulum",
    "sum",
    "summa",
    "summisse",
    "summopere",
    "sumo",
    "sumptus",
    "supellex",
    "super",
    "suppellex",
    "supplanto",
    "suppono",
    "supra",
    "surculus",
    "surgo",
    "sursum",
    "suscipio",
    "suspendo",
    "sustineo",
    "suus",
    "synagoga",
    "tabella",
    "tabernus",
    "tabesco",
    "tabgo",
    "tabula",
    "taceo",
    "tactus",
    "taedium",
    "talio",
    "talis",
    "talus",
    "tam",
    "tamdiu",
    "tamen",
    "tametsi",
    "tamisium",
    "tamquam",
    "tandem",
    "tantillus",
    "tantum",
    "tardus",
    "tego",
    "temeritas",
    "temperantia",
    "templum",
    "temptatio",
    "tempus",
    "tenax",
    "tendo",
    "teneo",
    "tener",
    "tenuis",
    "tenus",
    "tepesco",
    "tepidus",
    "ter",
    "terebro",
    "teres",
    "terga",
    "tergeo",
    "tergiversatio",
    "tergo",
    "tergum",
    "termes",
    "terminatio",
    "tero",
    "terra",
    "terreo",
    "territo",
    "terror",
    "tersus",
    "tertius",
    "testimonium",
    "texo",
    "textilis",
    "textor",
    "textus",
    "thalassinus",
    "theatrum",
    "theca",
    "thema",
    "theologus",
    "thermae",
    "thesaurus",
    "thesis",
    "thorax",
    "thymbra",
    "thymum",
    "tibi",
    "timidus",
    "timor",
    "titulus",
    "tolero",
    "tollo",
    "tondeo",
    "tonsor",
    "torqueo",
    "torrens",
    "tot",
    "totidem",
    "toties",
    "totus",
    "tracto",
    "trado",
    "traho",
    "trans",
    "tredecim",
    "tremo",
    "trepide",
    "tres",
    "tribuo",
    "tricesimus",
    "triduana",
    "triginta",
    "tripudio",
    "tristis",
    "triumphus",
    "trucido",
    "truculenter",
    "tubineus",
    "tui",
    "tum",
    "tumultus",
    "tunc",
    "turba",
    "turbo",
    "turpe",
    "turpis",
    "tutamen",
    "tutis",
    "tyrannus",
    "uberrime",
    "ubi",
    "ulciscor",
    "ullus",
    "ulterius",
    "ultio",
    "ultra",
    "umbra",
    "umerus",
    "umquam",
    "una",
    "unde",
    "undique",
    "universe",
    "unus",
    "urbanus",
    "urbs",
    "uredo",
    "usitas",
    "usque",
    "ustilo",
    "ustulo",
    "usus",
    "uter",
    "uterque",
    "utilis",
    "utique",
    "utor",
    "utpote",
    "utrimque",
    "utroque",
    "utrum",
    "uxor",
    "vaco",
    "vacuus",
    "vado",
    "vae",
    "valde",
    "valens",
    "valeo",
    "valetudo",
    "validus",
    "vallum",
    "vapulus",
    "varietas",
    "varius",
    "vehemens",
    "vel",
    "velociter",
    "velum",
    "velut",
    "venia",
    "venio",
    "ventito",
    "ventosus",
    "ventus",
    "venustas",
    "ver",
    "verbera",
    "verbum",
    "vere",
    "verecundia",
    "vereor",
    "vergo",
    "veritas",
    "vero",
    "versus",
    "verto",
    "verumtamen",
    "verus",
    "vesco",
    "vesica",
    "vesper",
    "vespillo",
    "vester",
    "vestigium",
    "vestrum",
    "vetus",
    "via",
    "vicinus",
    "vicissitudo",
    "victoria",
    "victus",
    "videlicet",
    "video",
    "viduata",
    "viduo",
    "vigilo",
    "vigor",
    "vilicus",
    "vilis",
    "vilitas",
    "villa",
    "vinco",
    "vinculum",
    "vindico",
    "vinitor",
    "vinum",
    "vir",
    "virga",
    "virgo",
    "viridis",
    "viriliter",
    "virtus",
    "vis",
    "viscus",
    "vita",
    "vitiosus",
    "vitium",
    "vito",
    "vivo",
    "vix",
    "vobis",
    "vociferor",
    "voco",
    "volaticus",
    "volo",
    "volubilis",
    "voluntarius",
    "volup",
    "volutabrum",
    "volva",
    "vomer",
    "vomica",
    "vomito",
    "vorago",
    "vorax",
    "voro",
    "vos",
    "votum",
    "voveo",
    "vox",
    "vulariter",
    "vulgaris",
    "vulgivagus",
    "vulgo",
    "vulgus",
    "vulnero",
    "vulnus",
    "vulpes",
    "vulticulus",
    "vultuosus",
    "xiphias"
  ];
});

// node_modules/faker/lib/locales/es_MX/lorem/index.js
var require_lorem5 = __commonJS((exports, module) => {
  var lorem = {};
  module["exports"] = lorem;
  lorem.words = require_words5();
  lorem.supplemental = require_supplemental3();
});

// node_modules/faker/lib/locales/es_MX/commerce/color.js
var require_color3 = __commonJS((exports, module) => {
  module["exports"] = [
    "rojo",
    "verde",
    "azul",
    "amarillo",
    "morado",
    "Menta verde",
    "teal",
    "blanco",
    "negro",
    "Naranja",
    "Rosa",
    "gris",
    "marrón",
    "violeta",
    "turquesa",
    "tan",
    "cielo azul",
    "salmón",
    "ciruela",
    "orquídea",
    "aceituna",
    "magenta",
    "Lima",
    "marfil",
    "índigo",
    "oro",
    "fucsia",
    "cian",
    "azul",
    "lavanda",
    "plata"
  ];
});

// node_modules/faker/lib/locales/es_MX/commerce/department.js
var require_department3 = __commonJS((exports, module) => {
  module["exports"] = [
    "Libros",
    "Películas",
    "Música",
    "Juegos",
    "Electrónica",
    "Ordenadores",
    "Hogar",
    "Jardín",
    "Herramientas",
    "Ultramarinos",
    "Salud",
    "Belleza",
    "Juguetes",
    "Kids",
    "Baby",
    "Ropa",
    "Zapatos",
    "Joyería",
    "Deportes",
    "Aire libre",
    "Automoción",
    "Industrial"
  ];
});

// node_modules/faker/lib/locales/es_MX/commerce/product_name.js
var require_product_name3 = __commonJS((exports, module) => {
  module["exports"] = {
    adjective: [
      "Pequeño",
      "Ergonómico",
      "Rústico",
      "Inteligente",
      "Gorgeous",
      "Increíble",
      "Fantástico",
      "Práctica",
      "Elegante",
      "Increíble",
      "Genérica",
      "Artesanal",
      "Hecho a mano",
      "Licencia",
      "Refinado",
      "Sin marca",
      "Sabrosa"
    ],
    material: [
      "Acero",
      "Madera",
      "Hormigón",
      "Plástico",
      "Cotton",
      "Granito",
      "Caucho",
      "Metal",
      "Soft",
      "Fresco",
      "Frozen"
    ],
    product: [
      "Presidente",
      "Auto",
      "Computadora",
      "Teclado",
      "Ratón",
      "Bike",
      "Pelota",
      "Guantes",
      "Pantalones",
      "Camisa",
      "Mesa",
      "Zapatos",
      "Sombrero",
      "Toallas",
      "Jabón",
      "Tuna",
      "Pollo",
      "Pescado",
      "Queso",
      "Tocino",
      "Pizza",
      "Ensalada",
      "Embutidos"
    ]
  };
});

// node_modules/faker/lib/locales/es_MX/commerce/index.js
var require_commerce4 = __commonJS((exports, module) => {
  var commerce = {};
  module["exports"] = commerce;
  commerce.color = require_color3();
  commerce.department = require_department3();
  commerce.product_name = require_product_name3();
});

// node_modules/faker/lib/locales/es_MX/team/creature.js
var require_creature2 = __commonJS((exports, module) => {
  module["exports"] = [
    "hormigas",
    "murciélagos",
    "osos",
    "abejas",
    "pájaros",
    "búfalo",
    "gatos",
    "pollos",
    "ganado",
    "perros",
    "delfines",
    "patos",
    "elefantes",
    "peces",
    "zorros",
    "ranas",
    "gansos",
    "cabras",
    "caballos",
    "canguros",
    "leones",
    "monos",
    "búhos",
    "bueyes",
    "pingüinos",
    "pueblo",
    "cerdos",
    "conejos",
    "ovejas",
    "tigres",
    "ballenas",
    "lobos",
    "cebras",
    "almas en pena",
    "cuervos",
    "gatos negros",
    "quimeras",
    "fantasmas",
    "conspiradores",
    "dragones",
    "enanos",
    "duendes",
    "encantadores",
    "exorcistas",
    "hijos",
    "enemigos",
    "gigantes",
    "gnomos",
    "duendes",
    "gansos",
    "grifos",
    "licántropos",
    "némesis",
    "ogros",
    "oráculos",
    "profetas",
    "hechiceros",
    "arañas",
    "espíritus",
    "vampiros",
    "brujos",
    "zorras",
    "hombres lobo",
    "brujas",
    "adoradores",
    "zombies",
    "druidas"
  ];
});

// node_modules/faker/lib/locales/es_MX/team/name.js
var require_name30 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Address.state} #{creature}"
  ];
});

// node_modules/faker/lib/locales/es_MX/team/index.js
var require_team2 = __commonJS((exports, module) => {
  var team = {};
  module["exports"] = team;
  team.creature = require_creature2();
  team.name = require_name30();
});

// node_modules/faker/lib/locales/es_MX/index.js
var require_es_MX = __commonJS((exports, module) => {
  var es_MX = {};
  module["exports"] = es_MX;
  es_MX.title = "Spanish Mexico";
  es_MX.separator = " & ";
  es_MX.name = require_name28();
  es_MX.address = require_address16();
  es_MX.company = require_company12();
  es_MX.internet = require_internet16();
  es_MX.phone_number = require_phone_number15();
  es_MX.cell_phone = require_cell_phone7();
  es_MX.lorem = require_lorem5();
  es_MX.commerce = require_commerce4();
  es_MX.team = require_team2();
});

// node_modules/faker/lib/locales/fa/name/first_name.js
var require_first_name10 = __commonJS((exports, module) => {
  module["exports"] = [
    "آبان دخت",
    "آبتین",
    "آتوسا",
    "آفر",
    "آفره دخت",
    "آذرنوش‌",
    "آذین",
    "آراه",
    "آرزو",
    "آرش",
    "آرتین",
    "آرتام",
    "آرتمن",
    "آرشام",
    "آرمان",
    "آرمین",
    "آرمیتا",
    "آریا فر",
    "آریا",
    "آریا مهر",
    "آرین",
    "آزاده",
    "آزرم",
    "آزرمدخت",
    "آزیتا",
    "آناهیتا",
    "آونگ",
    "آهو",
    "آیدا",
    "اتسز",
    "اختر",
    "ارد",
    "ارد شیر",
    "اردوان",
    "ارژن",
    "ارژنگ",
    "ارسلان",
    "ارغوان",
    "ارمغان",
    "ارنواز",
    "اروانه",
    "استر",
    "اسفندیار",
    "اشکان",
    "اشکبوس",
    "افسانه",
    "افسون",
    "افشین",
    "امید",
    "انوش (‌ آنوشا )",
    "انوشروان",
    "اورنگ",
    "اوژن",
    "اوستا",
    "اهورا",
    "ایاز",
    "ایران",
    "ایراندخت",
    "ایرج",
    "ایزدیار",
    "بابک",
    "باپوک",
    "باربد",
    "بارمان",
    "بامداد",
    "بامشاد",
    "بانو",
    "بختیار",
    "برانوش",
    "بردیا",
    "برزو",
    "برزویه",
    "برزین",
    "برمک",
    "بزرگمهر",
    "بنفشه",
    "بوژان",
    "بویان",
    "بهار",
    "بهارک",
    "بهاره",
    "بهتاش",
    "بهداد",
    "بهرام",
    "بهدیس",
    "بهرخ",
    "بهرنگ",
    "بهروز",
    "بهزاد",
    "بهشاد",
    "بهمن",
    "بهناز",
    "بهنام",
    "بهنود",
    "بهنوش",
    "بیتا",
    "بیژن",
    "پارسا",
    "پاکان",
    "پاکتن",
    "پاکدخت",
    "پانته آ",
    "پدرام",
    "پرتو",
    "پرشنگ",
    "پرتو",
    "پرستو",
    "پرویز",
    "پردیس",
    "پرهام",
    "پژمان",
    "پژوا",
    "پرنیا",
    "پشنگ",
    "پروانه",
    "پروین",
    "پری",
    "پریچهر",
    "پریدخت",
    "پریسا",
    "پرناز",
    "پریوش",
    "پریا",
    "پوپک",
    "پوران",
    "پوراندخت",
    "پوریا",
    "پولاد",
    "پویا",
    "پونه",
    "پیام",
    "پیروز",
    "پیمان",
    "تابان",
    "تاباندخت",
    "تاجی",
    "تارا",
    "تاویار",
    "ترانه",
    "تناز",
    "توران",
    "توراندخت",
    "تورج",
    "تورتک",
    "توفان",
    "توژال",
    "تیر داد",
    "تینا",
    "تینو",
    "جابان",
    "جامین",
    "جاوید",
    "جریره",
    "جمشید",
    "جوان",
    "جویا",
    "جهان",
    "جهانبخت",
    "جهانبخش",
    "جهاندار",
    "جهانگیر",
    "جهان بانو",
    "جهاندخت",
    "جهان ناز",
    "جیران",
    "چابک",
    "چالاک",
    "چاوش",
    "چترا",
    "چوبین",
    "چهرزاد",
    "خاوردخت",
    "خداداد",
    "خدایار",
    "خرم",
    "خرمدخت",
    "خسرو",
    "خشایار",
    "خورشید",
    "دادمهر",
    "دارا",
    "داراب",
    "داریا",
    "داریوش",
    "دانوش",
    "داور‌",
    "دایان",
    "دریا",
    "دل آرا",
    "دل آویز",
    "دلارام",
    "دل انگیز",
    "دلبر",
    "دلبند",
    "دلربا",
    "دلشاد",
    "دلکش",
    "دلناز",
    "دلنواز",
    "دورشاسب",
    "دنیا",
    "دیااکو",
    "دیانوش",
    "دیبا",
    "دیبا دخت",
    "رابو",
    "رابین",
    "رادبانو",
    "رادمان",
    "رازبان",
    "راژانه",
    "راسا",
    "رامتین",
    "رامش",
    "رامشگر",
    "رامونا",
    "رامیار",
    "رامیلا",
    "رامین",
    "راویار",
    "رژینا",
    "رخپاک",
    "رخسار",
    "رخشانه",
    "رخشنده",
    "رزمیار",
    "رستم",
    "رکسانا",
    "روبینا",
    "رودابه",
    "روزبه",
    "روشنک",
    "روناک",
    "رهام",
    "رهی",
    "ریبار",
    "راسپینا",
    "زادبخت",
    "زاد به",
    "زاد چهر",
    "زاد فر",
    "زال",
    "زادماسب",
    "زاوا",
    "زردشت",
    "زرنگار",
    "زری",
    "زرین",
    "زرینه",
    "زمانه",
    "زونا",
    "زیبا",
    "زیبار",
    "زیما",
    "زینو",
    "ژاله",
    "ژالان",
    "ژیار",
    "ژینا",
    "ژیوار",
    "سارا",
    "سارک",
    "سارنگ",
    "ساره",
    "ساسان",
    "ساغر",
    "سام",
    "سامان",
    "سانا",
    "ساناز",
    "سانیار",
    "ساویز",
    "ساهی",
    "ساینا",
    "سایه",
    "سپنتا",
    "سپند",
    "سپهر",
    "سپهرداد",
    "سپیدار",
    "سپید بانو",
    "سپیده",
    "ستاره",
    "ستی",
    "سرافراز",
    "سرور",
    "سروش",
    "سرور",
    "سوبا",
    "سوبار",
    "سنبله",
    "سودابه",
    "سوری",
    "سورن",
    "سورنا",
    "سوزان",
    "سوزه",
    "سوسن",
    "سومار",
    "سولان",
    "سولماز",
    "سوگند",
    "سهراب",
    "سهره",
    "سهند",
    "سیامک",
    "سیاوش",
    "سیبوبه ‌",
    "سیما",
    "سیمدخت",
    "سینا",
    "سیمین",
    "سیمین دخت",
    "شاپرک",
    "شادی",
    "شادمهر",
    "شاران",
    "شاهپور",
    "شاهدخت",
    "شاهرخ",
    "شاهین",
    "شاهیندخت",
    "شایسته",
    "شباهنگ",
    "شب بو",
    "شبدیز",
    "شبنم",
    "شراره",
    "شرمین",
    "شروین",
    "شکوفه",
    "شکفته",
    "شمشاد",
    "شمین",
    "شوان",
    "شمیلا",
    "شورانگیز",
    "شوری",
    "شهاب",
    "شهبار",
    "شهباز",
    "شهبال",
    "شهپر",
    "شهداد",
    "شهرآرا",
    "شهرام",
    "شهربانو",
    "شهرزاد",
    "شهرناز",
    "شهرنوش",
    "شهره",
    "شهریار",
    "شهرزاد",
    "شهلا",
    "شهنواز",
    "شهین",
    "شیبا",
    "شیدا",
    "شیده",
    "شیردل",
    "شیرزاد",
    "شیرنگ",
    "شیرو",
    "شیرین دخت",
    "شیما",
    "شینا",
    "شیرین",
    "شیوا",
    "طوس",
    "طوطی",
    "طهماسب",
    "طهمورث",
    "غوغا",
    "غنچه",
    "فتانه",
    "فدا",
    "فراز",
    "فرامرز",
    "فرانک",
    "فراهان",
    "فربد",
    "فربغ",
    "فرجاد",
    "فرخ",
    "فرخ پی",
    "فرخ داد",
    "فرخ رو",
    "فرخ زاد",
    "فرخ لقا",
    "فرخ مهر",
    "فرداد",
    "فردیس",
    "فرین",
    "فرزاد",
    "فرزام",
    "فرزان",
    "فرزانه",
    "فرزین",
    "فرشاد",
    "فرشته",
    "فرشید",
    "فرمان",
    "فرناز",
    "فرنگیس",
    "فرنود",
    "فرنوش",
    "فرنیا",
    "فروتن",
    "فرود",
    "فروز",
    "فروزان",
    "فروزش",
    "فروزنده",
    "فروغ",
    "فرهاد",
    "فرهنگ",
    "فرهود",
    "فربار",
    "فریبا",
    "فرید",
    "فریدخت",
    "فریدون",
    "فریمان",
    "فریناز",
    "فرینوش",
    "فریوش",
    "فیروز",
    "فیروزه",
    "قابوس",
    "قباد",
    "قدسی",
    "کابان",
    "کابوک",
    "کارا",
    "کارو",
    "کاراکو",
    "کامبخت",
    "کامبخش",
    "کامبیز",
    "کامجو",
    "کامدین",
    "کامران",
    "کامراوا",
    "کامک",
    "کامنوش",
    "کامیار",
    "کانیار",
    "کاووس",
    "کاوه",
    "کتایون",
    "کرشمه",
    "کسری",
    "کلاله",
    "کمبوجیه",
    "کوشا",
    "کهبد",
    "کهرام",
    "کهزاد",
    "کیارش",
    "کیان",
    "کیانا",
    "کیانچهر",
    "کیاندخت",
    "کیانوش",
    "کیاوش",
    "کیخسرو",
    "کیقباد",
    "کیکاووس",
    "کیوان",
    "کیوان دخت",
    "کیومرث",
    "کیهان",
    "کیاندخت",
    "کیهانه",
    "گرد آفرید",
    "گردان",
    "گرشا",
    "گرشاسب",
    "گرشین",
    "گرگین",
    "گزل",
    "گشتاسب",
    "گشسب",
    "گشسب بانو",
    "گل",
    "گل آذین",
    "گل آرا‌",
    "گلاره",
    "گل افروز",
    "گلاله",
    "گل اندام",
    "گلاویز",
    "گلباد",
    "گلبار",
    "گلبام",
    "گلبان",
    "گلبانو",
    "گلبرگ",
    "گلبو",
    "گلبهار",
    "گلبیز",
    "گلپاره",
    "گلپر",
    "گلپری",
    "گلپوش",
    "گل پونه",
    "گلچین",
    "گلدخت",
    "گلدیس",
    "گلربا",
    "گلرخ",
    "گلرنگ",
    "گلرو",
    "گلشن",
    "گلریز",
    "گلزاد",
    "گلزار",
    "گلسا",
    "گلشید",
    "گلنار",
    "گلناز",
    "گلنسا",
    "گلنواز",
    "گلنوش",
    "گلی",
    "گودرز",
    "گوماتو",
    "گهر چهر",
    "گوهر ناز",
    "گیتی",
    "گیسو",
    "گیلدا",
    "گیو",
    "لادن",
    "لاله",
    "لاله رخ",
    "لاله دخت",
    "لبخند",
    "لقاء",
    "لومانا",
    "لهراسب",
    "مارال",
    "ماری",
    "مازیار",
    "ماکان",
    "مامک",
    "مانا",
    "ماندانا",
    "مانوش",
    "مانی",
    "مانیا",
    "ماهان",
    "ماهاندخت",
    "ماه برزین",
    "ماه جهان",
    "ماهچهر",
    "ماهدخت",
    "ماهور",
    "ماهرخ",
    "ماهزاد",
    "مردآویز",
    "مرداس",
    "مرزبان",
    "مرمر",
    "مزدک",
    "مژده",
    "مژگان",
    "مستان",
    "مستانه",
    "مشکاندخت",
    "مشکناز",
    "مشکین دخت",
    "منیژه",
    "منوچهر",
    "مهبانو",
    "مهبد",
    "مه داد",
    "مهتاب",
    "مهدیس",
    "مه جبین",
    "مه دخت",
    "مهر آذر",
    "مهر آرا",
    "مهر آسا",
    "مهر آفاق",
    "مهر افرین",
    "مهرآب",
    "مهرداد",
    "مهر افزون",
    "مهرام",
    "مهران",
    "مهراندخت",
    "مهراندیش",
    "مهرانفر",
    "مهرانگیز",
    "مهرداد",
    "مهر دخت",
    "مهرزاده ‌",
    "مهرناز",
    "مهرنوش",
    "مهرنکار",
    "مهرنیا",
    "مهروز",
    "مهری",
    "مهریار",
    "مهسا",
    "مهستی",
    "مه سیما",
    "مهشاد",
    "مهشید",
    "مهنام",
    "مهناز",
    "مهنوش",
    "مهوش",
    "مهیار",
    "مهین",
    "مهین دخت",
    "میترا",
    "میخک",
    "مینا",
    "مینا دخت",
    "مینو",
    "مینودخت",
    "مینو فر",
    "نادر",
    "ناز آفرین",
    "نازبانو",
    "نازپرور",
    "نازچهر",
    "نازفر",
    "نازلی",
    "نازی",
    "نازیدخت",
    "نامور",
    "ناهید",
    "ندا",
    "نرسی",
    "نرگس",
    "نرمک",
    "نرمین",
    "نریمان",
    "نسترن",
    "نسرین",
    "نسرین دخت",
    "نسرین نوش",
    "نکیسا",
    "نگار",
    "نگاره",
    "نگارین",
    "نگین",
    "نوا",
    "نوش",
    "نوش آذر",
    "نوش آور",
    "نوشا",
    "نوش آفرین",
    "نوشدخت",
    "نوشروان",
    "نوشفر",
    "نوشناز",
    "نوشین",
    "نوید",
    "نوین",
    "نوین دخت",
    "نیش ا",
    "نیک بین",
    "نیک پی",
    "نیک چهر",
    "نیک خواه",
    "نیکداد",
    "نیکدخت",
    "نیکدل",
    "نیکزاد",
    "نیلوفر",
    "نیما",
    "وامق",
    "ورجاوند",
    "وریا",
    "وشمگیر",
    "وهرز",
    "وهسودان",
    "ویدا",
    "ویس",
    "ویشتاسب",
    "ویگن",
    "هژیر",
    "هخامنش",
    "هربد( هیربد )",
    "هرمز",
    "همایون",
    "هما",
    "همادخت",
    "همدم",
    "همراز",
    "همراه",
    "هنگامه",
    "هوتن",
    "هور",
    "هورتاش",
    "هورچهر",
    "هورداد",
    "هوردخت",
    "هورزاد",
    "هورمند",
    "هوروش",
    "هوشنگ",
    "هوشیار",
    "هومان",
    "هومن",
    "هونام",
    "هویدا",
    "هیتاسب",
    "هیرمند",
    "هیما",
    "هیوا",
    "یادگار",
    "یاسمن ( یاسمین )",
    "یاشار",
    "یاور",
    "یزدان",
    "یگانه",
    "یوشیتا"
  ];
});

// node_modules/faker/lib/locales/fa/name/last_name.js
var require_last_name10 = __commonJS((exports, module) => {
  module["exports"] = [
    "عارف",
    "عاشوری",
    "عالی",
    "عبادی",
    "عبدالکریمی",
    "عبدالملکی",
    "عراقی",
    "عزیزی",
    "عصار",
    "عقیلی",
    "علم",
    "علم‌الهدی",
    "علی عسگری",
    "علی‌آبادی",
    "علیا",
    "علی‌پور",
    "علی‌زمانی",
    "عنایت",
    "غضنفری",
    "غنی",
    "فارسی",
    "فاطمی",
    "فانی",
    "فتاحی",
    "فرامرزی",
    "فرج",
    "فرشیدورد",
    "فرمانفرمائیان",
    "فروتن",
    "فرهنگ",
    "فریاد",
    "فنایی",
    "فنی‌زاده",
    "فولادوند",
    "فهمیده",
    "قاضی",
    "قانعی",
    "قانونی",
    "قمیشی",
    "قنبری",
    "قهرمان",
    "قهرمانی",
    "قهرمانیان",
    "قهستانی",
    "کاشی",
    "کاکاوند",
    "کامکار",
    "کاملی",
    "کاویانی",
    "کدیور",
    "کردبچه",
    "کرمانی",
    "کریمی",
    "کلباسی",
    "کمالی",
    "کوشکی",
    "کهنمویی",
    "کیان",
    "کیانی (نام خانوادگی)",
    "کیمیایی",
    "گل محمدی",
    "گلپایگانی",
    "گنجی",
    "لاجوردی",
    "لاچینی",
    "لاهوتی",
    "لنکرانی",
    "لوکس",
    "مجاهد",
    "مجتبایی",
    "مجتبوی",
    "مجتهد شبستری",
    "مجتهدی",
    "مجرد",
    "محجوب",
    "محجوبی",
    "محدثی",
    "محمدرضایی",
    "محمدی",
    "مددی",
    "مرادخانی",
    "مرتضوی",
    "مستوفی",
    "مشا",
    "مصاحب",
    "مصباح",
    "مصباح‌زاده",
    "مطهری",
    "مظفر",
    "معارف",
    "معروف",
    "معین",
    "مفتاح",
    "مفتح",
    "مقدم",
    "ملایری",
    "ملک",
    "ملکیان",
    "منوچهری",
    "موحد",
    "موسوی",
    "موسویان",
    "مهاجرانی",
    "مهدی‌پور",
    "میرباقری",
    "میردامادی",
    "میرزاده",
    "میرسپاسی",
    "میزبانی",
    "ناظری",
    "نامور",
    "نجفی",
    "ندوشن",
    "نراقی",
    "نعمت‌زاده",
    "نقدی",
    "نقیب‌زاده",
    "نواب",
    "نوبخت",
    "نوبختی",
    "نهاوندی",
    "نیشابوری",
    "نیلوفری",
    "واثقی",
    "واعظ",
    "واعظ‌زاده",
    "واعظی",
    "وکیلی",
    "هاشمی",
    "هاشمی رفسنجانی",
    "هاشمیان",
    "هامون",
    "هدایت",
    "هراتی",
    "هروی",
    "همایون",
    "همت",
    "همدانی",
    "هوشیار",
    "هومن",
    "یاحقی",
    "یادگار",
    "یثربی",
    "یلدا"
  ];
});

// node_modules/faker/lib/locales/fa/name/prefix.js
var require_prefix10 = __commonJS((exports, module) => {
  module["exports"] = [
    "آقای",
    "خانم",
    "دکتر"
  ];
});

// node_modules/faker/lib/locales/fa/name/index.js
var require_name31 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name = require_first_name10();
  name2.last_name = require_last_name10();
  name2.prefix = require_prefix10();
});

// node_modules/faker/lib/locales/fa/index.js
var require_fa = __commonJS((exports, module) => {
  var fa = {};
  module["exports"] = fa;
  fa.title = "Farsi";
  fa.name = require_name31();
});

// node_modules/faker/lib/locales/fr/address/building_number.js
var require_building_number10 = __commonJS((exports, module) => {
  module["exports"] = [
    "####",
    "###",
    "##",
    "#"
  ];
});

// node_modules/faker/lib/locales/fr/address/street_prefix.js
var require_street_prefix = __commonJS((exports, module) => {
  module["exports"] = [
    "Allée, Voie",
    "Rue",
    "Avenue",
    "Boulevard",
    "Quai",
    "Passage",
    "Impasse",
    "Place"
  ];
});

// node_modules/faker/lib/locales/fr/address/secondary_address.js
var require_secondary_address8 = __commonJS((exports, module) => {
  module["exports"] = [
    "Apt. ###",
    "# étage"
  ];
});

// node_modules/faker/lib/locales/fr/address/postcode.js
var require_postcode14 = __commonJS((exports, module) => {
  module["exports"] = [
    "#####"
  ];
});

// node_modules/faker/lib/locales/fr/address/state.js
var require_state12 = __commonJS((exports, module) => {
  module["exports"] = [
    "Alsace",
    "Aquitaine",
    "Auvergne",
    "Basse-Normandie",
    "Bourgogne",
    "Bretagne",
    "Centre",
    "Champagne-Ardenne",
    "Corse",
    "Franche-Comté",
    "Haute-Normandie",
    "Île-de-France",
    "Languedoc-Roussillon",
    "Limousin",
    "Lorraine",
    "Midi-Pyrénées",
    "Nord-Pas-de-Calais",
    "Pays de la Loire",
    "Picardie",
    "Poitou-Charentes",
    "Provence-Alpes-Côte d'Azur",
    "Rhône-Alpes"
  ];
});

// node_modules/faker/lib/locales/fr/address/city_name.js
var require_city_name4 = __commonJS((exports, module) => {
  module["exports"] = [
    "Paris",
    "Marseille",
    "Lyon",
    "Toulouse",
    "Nice",
    "Nantes",
    "Strasbourg",
    "Montpellier",
    "Bordeaux",
    "Lille13",
    "Rennes",
    "Reims",
    "Le Havre",
    "Saint-Étienne",
    "Toulon",
    "Grenoble",
    "Dijon",
    "Angers",
    "Saint-Denis",
    "Villeurbanne",
    "Le Mans",
    "Aix-en-Provence",
    "Brest",
    "Nîmes",
    "Limoges",
    "Clermont-Ferrand",
    "Tours",
    "Amiens",
    "Metz",
    "Perpignan",
    "Besançon",
    "Orléans",
    "Boulogne-Billancourt",
    "Mulhouse",
    "Rouen",
    "Caen",
    "Nancy",
    "Saint-Denis",
    "Saint-Paul",
    "Montreuil",
    "Argenteuil",
    "Roubaix",
    "Dunkerque14",
    "Tourcoing",
    "Nanterre",
    "Avignon",
    "Créteil",
    "Poitiers",
    "Fort-de-France",
    "Courbevoie",
    "Versailles",
    "Vitry-sur-Seine",
    "Colombes",
    "Pau",
    "Aulnay-sous-Bois",
    "Asnières-sur-Seine",
    "Rueil-Malmaison",
    "Saint-Pierre",
    "Antibes",
    "Saint-Maur-des-Fossés",
    "Champigny-sur-Marne",
    "La Rochelle",
    "Aubervilliers",
    "Calais",
    "Cannes",
    "Le Tampon",
    "Béziers",
    "Colmar",
    "Bourges",
    "Drancy",
    "Mérignac",
    "Saint-Nazaire",
    "Valence",
    "Ajaccio",
    "Issy-les-Moulineaux",
    "Villeneuve-d'Ascq",
    "Levallois-Perret",
    "Noisy-le-Grand",
    "Quimper",
    "La Seyne-sur-Mer",
    "Antony",
    "Troyes",
    "Neuilly-sur-Seine",
    "Sarcelles",
    "Les Abymes",
    "Vénissieux",
    "Clichy",
    "Lorient",
    "Pessac",
    "Ivry-sur-Seine",
    "Cergy",
    "Cayenne",
    "Niort",
    "Chambéry",
    "Montauban",
    "Saint-Quentin",
    "Villejuif",
    "Hyères",
    "Beauvais",
    "Cholet"
  ];
});

// node_modules/faker/lib/locales/fr/address/city.js
var require_city9 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{city_name}"
  ];
});

// node_modules/faker/lib/locales/fr/address/street_suffix.js
var require_street_suffix7 = __commonJS((exports, module) => {
  module["exports"] = [
    "de l'Abbaye",
    "Adolphe Mille",
    "d'Alésia",
    "d'Argenteuil",
    "d'Assas",
    "du Bac",
    "de Paris",
    "La Boétie",
    "Bonaparte",
    "de la Bûcherie",
    "de Caumartin",
    "Charlemagne",
    "du Chat-qui-Pêche",
    "de la Chaussée-d'Antin",
    "du Dahomey",
    "Dauphine",
    "Delesseux",
    "du Faubourg Saint-Honoré",
    "du Faubourg-Saint-Denis",
    "de la Ferronnerie",
    "des Francs-Bourgeois",
    "des Grands Augustins",
    "de la Harpe",
    "du Havre",
    "de la Huchette",
    "Joubert",
    "Laffitte",
    "Lepic",
    "des Lombards",
    "Marcadet",
    "Molière",
    "Monsieur-le-Prince",
    "de Montmorency",
    "Montorgueil",
    "Mouffetard",
    "de Nesle",
    "Oberkampf",
    "de l'Odéon",
    "d'Orsel",
    "de la Paix",
    "des Panoramas",
    "Pastourelle",
    "Pierre Charron",
    "de la Pompe",
    "de Presbourg",
    "de Provence",
    "de Richelieu",
    "de Rivoli",
    "des Rosiers",
    "Royale",
    "d'Abbeville",
    "Saint-Honoré",
    "Saint-Bernard",
    "Saint-Denis",
    "Saint-Dominique",
    "Saint-Jacques",
    "Saint-Séverin",
    "des Saussaies",
    "de Seine",
    "de Solférino",
    "Du Sommerard",
    "de Tilsitt",
    "Vaneau",
    "de Vaugirard",
    "de la Victoire",
    "Zadkine"
  ];
});

// node_modules/faker/lib/locales/fr/address/street_name.js
var require_street_name9 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_prefix} #{street_suffix}"
  ];
});

// node_modules/faker/lib/locales/fr/address/street_address.js
var require_street_address8 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{building_number} #{street_name}"
  ];
});

// node_modules/faker/lib/locales/fr/address/default_country.js
var require_default_country16 = __commonJS((exports, module) => {
  module["exports"] = [
    "France"
  ];
});

// node_modules/faker/lib/locales/fr/address/index.js
var require_address17 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.building_number = require_building_number10();
  address.street_prefix = require_street_prefix();
  address.secondary_address = require_secondary_address8();
  address.postcode = require_postcode14();
  address.state = require_state12();
  address.city_name = require_city_name4();
  address.city = require_city9();
  address.street_suffix = require_street_suffix7();
  address.street_name = require_street_name9();
  address.street_address = require_street_address8();
  address.default_country = require_default_country16();
});

// node_modules/faker/lib/locales/fr/company/suffix.js
var require_suffix17 = __commonJS((exports, module) => {
  module["exports"] = [
    "SARL",
    "SA",
    "EURL",
    "SAS",
    "SEM",
    "SCOP",
    "GIE",
    "EI"
  ];
});

// node_modules/faker/lib/locales/fr/company/adjective.js
var require_adjective6 = __commonJS((exports, module) => {
  module["exports"] = [
    "Adaptive",
    "Advanced",
    "Ameliorated",
    "Assimilated",
    "Automated",
    "Balanced",
    "Business-focused",
    "Centralized",
    "Cloned",
    "Compatible",
    "Configurable",
    "Cross-group",
    "Cross-platform",
    "Customer-focused",
    "Customizable",
    "Decentralized",
    "De-engineered",
    "Devolved",
    "Digitized",
    "Distributed",
    "Diverse",
    "Down-sized",
    "Enhanced",
    "Enterprise-wide",
    "Ergonomic",
    "Exclusive",
    "Expanded",
    "Extended",
    "Face to face",
    "Focused",
    "Front-line",
    "Fully-configurable",
    "Function-based",
    "Fundamental",
    "Future-proofed",
    "Grass-roots",
    "Horizontal",
    "Implemented",
    "Innovative",
    "Integrated",
    "Intuitive",
    "Inverse",
    "Managed",
    "Mandatory",
    "Monitored",
    "Multi-channelled",
    "Multi-lateral",
    "Multi-layered",
    "Multi-tiered",
    "Networked",
    "Object-based",
    "Open-architected",
    "Open-source",
    "Operative",
    "Optimized",
    "Optional",
    "Organic",
    "Organized",
    "Persevering",
    "Persistent",
    "Phased",
    "Polarised",
    "Pre-emptive",
    "Proactive",
    "Profit-focused",
    "Profound",
    "Programmable",
    "Progressive",
    "Public-key",
    "Quality-focused",
    "Reactive",
    "Realigned",
    "Re-contextualized",
    "Re-engineered",
    "Reduced",
    "Reverse-engineered",
    "Right-sized",
    "Robust",
    "Seamless",
    "Secured",
    "Self-enabling",
    "Sharable",
    "Stand-alone",
    "Streamlined",
    "Switchable",
    "Synchronised",
    "Synergistic",
    "Synergized",
    "Team-oriented",
    "Total",
    "Triple-buffered",
    "Universal",
    "Up-sized",
    "Upgradable",
    "User-centric",
    "User-friendly",
    "Versatile",
    "Virtual",
    "Visionary",
    "Vision-oriented"
  ];
});

// node_modules/faker/lib/locales/fr/company/descriptor.js
var require_descriptor5 = __commonJS((exports, module) => {
  module["exports"] = [
    "24 hour",
    "24/7",
    "3rd generation",
    "4th generation",
    "5th generation",
    "6th generation",
    "actuating",
    "analyzing",
    "asymmetric",
    "asynchronous",
    "attitude-oriented",
    "background",
    "bandwidth-monitored",
    "bi-directional",
    "bifurcated",
    "bottom-line",
    "clear-thinking",
    "client-driven",
    "client-server",
    "coherent",
    "cohesive",
    "composite",
    "context-sensitive",
    "contextually-based",
    "content-based",
    "dedicated",
    "demand-driven",
    "didactic",
    "directional",
    "discrete",
    "disintermediate",
    "dynamic",
    "eco-centric",
    "empowering",
    "encompassing",
    "even-keeled",
    "executive",
    "explicit",
    "exuding",
    "fault-tolerant",
    "foreground",
    "fresh-thinking",
    "full-range",
    "global",
    "grid-enabled",
    "heuristic",
    "high-level",
    "holistic",
    "homogeneous",
    "human-resource",
    "hybrid",
    "impactful",
    "incremental",
    "intangible",
    "interactive",
    "intermediate",
    "leading edge",
    "local",
    "logistical",
    "maximized",
    "methodical",
    "mission-critical",
    "mobile",
    "modular",
    "motivating",
    "multimedia",
    "multi-state",
    "multi-tasking",
    "national",
    "needs-based",
    "neutral",
    "next generation",
    "non-volatile",
    "object-oriented",
    "optimal",
    "optimizing",
    "radical",
    "real-time",
    "reciprocal",
    "regional",
    "responsive",
    "scalable",
    "secondary",
    "solution-oriented",
    "stable",
    "static",
    "systematic",
    "systemic",
    "system-worthy",
    "tangible",
    "tertiary",
    "transitional",
    "uniform",
    "upward-trending",
    "user-facing",
    "value-added",
    "web-enabled",
    "well-modulated",
    "zero administration",
    "zero defect",
    "zero tolerance"
  ];
});

// node_modules/faker/lib/locales/fr/company/noun.js
var require_noun6 = __commonJS((exports, module) => {
  module["exports"] = [
    "ability",
    "access",
    "adapter",
    "algorithm",
    "alliance",
    "analyzer",
    "application",
    "approach",
    "architecture",
    "archive",
    "artificial intelligence",
    "array",
    "attitude",
    "benchmark",
    "budgetary management",
    "capability",
    "capacity",
    "challenge",
    "circuit",
    "collaboration",
    "complexity",
    "concept",
    "conglomeration",
    "contingency",
    "core",
    "customer loyalty",
    "database",
    "data-warehouse",
    "definition",
    "emulation",
    "encoding",
    "encryption",
    "extranet",
    "firmware",
    "flexibility",
    "focus group",
    "forecast",
    "frame",
    "framework",
    "function",
    "functionalities",
    "Graphic Interface",
    "groupware",
    "Graphical User Interface",
    "hardware",
    "help-desk",
    "hierarchy",
    "hub",
    "implementation",
    "info-mediaries",
    "infrastructure",
    "initiative",
    "installation",
    "instruction set",
    "interface",
    "internet solution",
    "intranet",
    "knowledge user",
    "knowledge base",
    "local area network",
    "leverage",
    "matrices",
    "matrix",
    "methodology",
    "middleware",
    "migration",
    "model",
    "moderator",
    "monitoring",
    "moratorium",
    "neural-net",
    "open architecture",
    "open system",
    "orchestration",
    "paradigm",
    "parallelism",
    "policy",
    "portal",
    "pricing structure",
    "process improvement",
    "product",
    "productivity",
    "project",
    "projection",
    "protocol",
    "secured line",
    "service-desk",
    "software",
    "solution",
    "standardization",
    "strategy",
    "structure",
    "success",
    "superstructure",
    "support",
    "synergy",
    "system engine",
    "task-force",
    "throughput",
    "time-frame",
    "toolset",
    "utilisation",
    "website",
    "workforce"
  ];
});

// node_modules/faker/lib/locales/fr/company/bs_verb.js
var require_bs_verb4 = __commonJS((exports, module) => {
  module["exports"] = [
    "implement",
    "utilize",
    "integrate",
    "streamline",
    "optimize",
    "evolve",
    "transform",
    "embrace",
    "enable",
    "orchestrate",
    "leverage",
    "reinvent",
    "aggregate",
    "architect",
    "enhance",
    "incentivize",
    "morph",
    "empower",
    "envisioneer",
    "monetize",
    "harness",
    "facilitate",
    "seize",
    "disintermediate",
    "synergize",
    "strategize",
    "deploy",
    "brand",
    "grow",
    "target",
    "syndicate",
    "synthesize",
    "deliver",
    "mesh",
    "incubate",
    "engage",
    "maximize",
    "benchmark",
    "expedite",
    "reintermediate",
    "whiteboard",
    "visualize",
    "repurpose",
    "innovate",
    "scale",
    "unleash",
    "drive",
    "extend",
    "engineer",
    "revolutionize",
    "generate",
    "exploit",
    "transition",
    "e-enable",
    "iterate",
    "cultivate",
    "matrix",
    "productize",
    "redefine",
    "recontextualize"
  ];
});

// node_modules/faker/lib/locales/fr/company/bs_adjective.js
var require_bs_adjective3 = __commonJS((exports, module) => {
  module["exports"] = [
    "clicks-and-mortar",
    "value-added",
    "vertical",
    "proactive",
    "robust",
    "revolutionary",
    "scalable",
    "leading-edge",
    "innovative",
    "intuitive",
    "strategic",
    "e-business",
    "mission-critical",
    "sticky",
    "one-to-one",
    "24/7",
    "end-to-end",
    "global",
    "B2B",
    "B2C",
    "granular",
    "frictionless",
    "virtual",
    "viral",
    "dynamic",
    "24/365",
    "best-of-breed",
    "killer",
    "magnetic",
    "bleeding-edge",
    "web-enabled",
    "interactive",
    "dot-com",
    "sexy",
    "back-end",
    "real-time",
    "efficient",
    "front-end",
    "distributed",
    "seamless",
    "extensible",
    "turn-key",
    "world-class",
    "open-source",
    "cross-platform",
    "cross-media",
    "synergistic",
    "bricks-and-clicks",
    "out-of-the-box",
    "enterprise",
    "integrated",
    "impactful",
    "wireless",
    "transparent",
    "next-generation",
    "cutting-edge",
    "user-centric",
    "visionary",
    "customized",
    "ubiquitous",
    "plug-and-play",
    "collaborative",
    "compelling",
    "holistic",
    "rich"
  ];
});

// node_modules/faker/lib/locales/fr/company/bs_noun.js
var require_bs_noun4 = __commonJS((exports, module) => {
  module["exports"] = [
    "synergies",
    "web-readiness",
    "paradigms",
    "markets",
    "partnerships",
    "infrastructures",
    "platforms",
    "initiatives",
    "channels",
    "eyeballs",
    "communities",
    "ROI",
    "solutions",
    "e-tailers",
    "e-services",
    "action-items",
    "portals",
    "niches",
    "technologies",
    "content",
    "vortals",
    "supply-chains",
    "convergence",
    "relationships",
    "architectures",
    "interfaces",
    "e-markets",
    "e-commerce",
    "systems",
    "bandwidth",
    "infomediaries",
    "models",
    "mindshare",
    "deliverables",
    "users",
    "schemas",
    "networks",
    "applications",
    "metrics",
    "e-business",
    "functionalities",
    "experiences",
    "web services",
    "methodologies"
  ];
});

// node_modules/faker/lib/locales/fr/company/name.js
var require_name32 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name} et #{Name.last_name}"
  ];
});

// node_modules/faker/lib/locales/fr/company/index.js
var require_company13 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.suffix = require_suffix17();
  company.adjective = require_adjective6();
  company.descriptor = require_descriptor5();
  company.noun = require_noun6();
  company.bs_verb = require_bs_verb4();
  company.bs_adjective = require_bs_adjective3();
  company.bs_noun = require_bs_noun4();
  company.name = require_name32();
});

// node_modules/faker/lib/locales/fr/internet/free_email.js
var require_free_email10 = __commonJS((exports, module) => {
  module["exports"] = [
    "gmail.com",
    "yahoo.fr",
    "hotmail.fr"
  ];
});

// node_modules/faker/lib/locales/fr/internet/domain_suffix.js
var require_domain_suffix16 = __commonJS((exports, module) => {
  module["exports"] = [
    "com",
    "fr",
    "eu",
    "info",
    "name",
    "net",
    "org"
  ];
});

// node_modules/faker/lib/locales/fr/internet/index.js
var require_internet17 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.free_email = require_free_email10();
  internet.domain_suffix = require_domain_suffix16();
});

// node_modules/faker/lib/locales/fr/lorem/words.js
var require_words6 = __commonJS((exports, module) => {
  module["exports"] = [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ];
});

// node_modules/faker/lib/locales/fr/lorem/supplemental.js
var require_supplemental4 = __commonJS((exports, module) => {
  module["exports"] = [
    "abbas",
    "abduco",
    "abeo",
    "abscido",
    "absconditus",
    "absens",
    "absorbeo",
    "absque",
    "abstergo",
    "absum",
    "abundans",
    "abutor",
    "accedo",
    "accendo",
    "acceptus",
    "accipio",
    "accommodo",
    "accusator",
    "acer",
    "acerbitas",
    "acervus",
    "acidus",
    "acies",
    "acquiro",
    "acsi",
    "adamo",
    "adaugeo",
    "addo",
    "adduco",
    "ademptio",
    "adeo",
    "adeptio",
    "adfectus",
    "adfero",
    "adficio",
    "adflicto",
    "adhaero",
    "adhuc",
    "adicio",
    "adimpleo",
    "adinventitias",
    "adipiscor",
    "adiuvo",
    "administratio",
    "admiratio",
    "admitto",
    "admoneo",
    "admoveo",
    "adnuo",
    "adopto",
    "adsidue",
    "adstringo",
    "adsuesco",
    "adsum",
    "adulatio",
    "adulescens",
    "adultus",
    "aduro",
    "advenio",
    "adversus",
    "advoco",
    "aedificium",
    "aeger",
    "aegre",
    "aegrotatio",
    "aegrus",
    "aeneus",
    "aequitas",
    "aequus",
    "aer",
    "aestas",
    "aestivus",
    "aestus",
    "aetas",
    "aeternus",
    "ager",
    "aggero",
    "aggredior",
    "agnitio",
    "agnosco",
    "ago",
    "ait",
    "aiunt",
    "alienus",
    "alii",
    "alioqui",
    "aliqua",
    "alius",
    "allatus",
    "alo",
    "alter",
    "altus",
    "alveus",
    "amaritudo",
    "ambitus",
    "ambulo",
    "amicitia",
    "amiculum",
    "amissio",
    "amita",
    "amitto",
    "amo",
    "amor",
    "amoveo",
    "amplexus",
    "amplitudo",
    "amplus",
    "ancilla",
    "angelus",
    "angulus",
    "angustus",
    "animadverto",
    "animi",
    "animus",
    "annus",
    "anser",
    "ante",
    "antea",
    "antepono",
    "antiquus",
    "aperio",
    "aperte",
    "apostolus",
    "apparatus",
    "appello",
    "appono",
    "appositus",
    "approbo",
    "apto",
    "aptus",
    "apud",
    "aqua",
    "ara",
    "aranea",
    "arbitro",
    "arbor",
    "arbustum",
    "arca",
    "arceo",
    "arcesso",
    "arcus",
    "argentum",
    "argumentum",
    "arguo",
    "arma",
    "armarium",
    "armo",
    "aro",
    "ars",
    "articulus",
    "artificiose",
    "arto",
    "arx",
    "ascisco",
    "ascit",
    "asper",
    "aspicio",
    "asporto",
    "assentator",
    "astrum",
    "atavus",
    "ater",
    "atqui",
    "atrocitas",
    "atrox",
    "attero",
    "attollo",
    "attonbitus",
    "auctor",
    "auctus",
    "audacia",
    "audax",
    "audentia",
    "audeo",
    "audio",
    "auditor",
    "aufero",
    "aureus",
    "auris",
    "aurum",
    "aut",
    "autem",
    "autus",
    "auxilium",
    "avaritia",
    "avarus",
    "aveho",
    "averto",
    "avoco",
    "baiulus",
    "balbus",
    "barba",
    "bardus",
    "basium",
    "beatus",
    "bellicus",
    "bellum",
    "bene",
    "beneficium",
    "benevolentia",
    "benigne",
    "bestia",
    "bibo",
    "bis",
    "blandior",
    "bonus",
    "bos",
    "brevis",
    "cado",
    "caecus",
    "caelestis",
    "caelum",
    "calamitas",
    "calcar",
    "calco",
    "calculus",
    "callide",
    "campana",
    "candidus",
    "canis",
    "canonicus",
    "canto",
    "capillus",
    "capio",
    "capitulus",
    "capto",
    "caput",
    "carbo",
    "carcer",
    "careo",
    "caries",
    "cariosus",
    "caritas",
    "carmen",
    "carpo",
    "carus",
    "casso",
    "caste",
    "casus",
    "catena",
    "caterva",
    "cattus",
    "cauda",
    "causa",
    "caute",
    "caveo",
    "cavus",
    "cedo",
    "celebrer",
    "celer",
    "celo",
    "cena",
    "cenaculum",
    "ceno",
    "censura",
    "centum",
    "cerno",
    "cernuus",
    "certe",
    "certo",
    "certus",
    "cervus",
    "cetera",
    "charisma",
    "chirographum",
    "cibo",
    "cibus",
    "cicuta",
    "cilicium",
    "cimentarius",
    "ciminatio",
    "cinis",
    "circumvenio",
    "cito",
    "civis",
    "civitas",
    "clam",
    "clamo",
    "claro",
    "clarus",
    "claudeo",
    "claustrum",
    "clementia",
    "clibanus",
    "coadunatio",
    "coaegresco",
    "coepi",
    "coerceo",
    "cogito",
    "cognatus",
    "cognomen",
    "cogo",
    "cohaero",
    "cohibeo",
    "cohors",
    "colligo",
    "colloco",
    "collum",
    "colo",
    "color",
    "coma",
    "combibo",
    "comburo",
    "comedo",
    "comes",
    "cometes",
    "comis",
    "comitatus",
    "commemoro",
    "comminor",
    "commodo",
    "communis",
    "comparo",
    "compello",
    "complectus",
    "compono",
    "comprehendo",
    "comptus",
    "conatus",
    "concedo",
    "concido",
    "conculco",
    "condico",
    "conduco",
    "confero",
    "confido",
    "conforto",
    "confugo",
    "congregatio",
    "conicio",
    "coniecto",
    "conitor",
    "coniuratio",
    "conor",
    "conqueror",
    "conscendo",
    "conservo",
    "considero",
    "conspergo",
    "constans",
    "consuasor",
    "contabesco",
    "contego",
    "contigo",
    "contra",
    "conturbo",
    "conventus",
    "convoco",
    "copia",
    "copiose",
    "cornu",
    "corona",
    "corpus",
    "correptius",
    "corrigo",
    "corroboro",
    "corrumpo",
    "coruscus",
    "cotidie",
    "crapula",
    "cras",
    "crastinus",
    "creator",
    "creber",
    "crebro",
    "credo",
    "creo",
    "creptio",
    "crepusculum",
    "cresco",
    "creta",
    "cribro",
    "crinis",
    "cruciamentum",
    "crudelis",
    "cruentus",
    "crur",
    "crustulum",
    "crux",
    "cubicularis",
    "cubitum",
    "cubo",
    "cui",
    "cuius",
    "culpa",
    "culpo",
    "cultellus",
    "cultura",
    "cum",
    "cunabula",
    "cunae",
    "cunctatio",
    "cupiditas",
    "cupio",
    "cuppedia",
    "cupressus",
    "cur",
    "cura",
    "curatio",
    "curia",
    "curiositas",
    "curis",
    "curo",
    "curriculum",
    "currus",
    "cursim",
    "curso",
    "cursus",
    "curto",
    "curtus",
    "curvo",
    "curvus",
    "custodia",
    "damnatio",
    "damno",
    "dapifer",
    "debeo",
    "debilito",
    "decens",
    "decerno",
    "decet",
    "decimus",
    "decipio",
    "decor",
    "decretum",
    "decumbo",
    "dedecor",
    "dedico",
    "deduco",
    "defaeco",
    "defendo",
    "defero",
    "defessus",
    "defetiscor",
    "deficio",
    "defigo",
    "defleo",
    "defluo",
    "defungo",
    "degenero",
    "degero",
    "degusto",
    "deinde",
    "delectatio",
    "delego",
    "deleo",
    "delibero",
    "delicate",
    "delinquo",
    "deludo",
    "demens",
    "demergo",
    "demitto",
    "demo",
    "demonstro",
    "demoror",
    "demulceo",
    "demum",
    "denego",
    "denique",
    "dens",
    "denuncio",
    "denuo",
    "deorsum",
    "depereo",
    "depono",
    "depopulo",
    "deporto",
    "depraedor",
    "deprecator",
    "deprimo",
    "depromo",
    "depulso",
    "deputo",
    "derelinquo",
    "derideo",
    "deripio",
    "desidero",
    "desino",
    "desipio",
    "desolo",
    "desparatus",
    "despecto",
    "despirmatio",
    "infit",
    "inflammatio",
    "paens",
    "patior",
    "patria",
    "patrocinor",
    "patruus",
    "pauci",
    "paulatim",
    "pauper",
    "pax",
    "peccatus",
    "pecco",
    "pecto",
    "pectus",
    "pecunia",
    "pecus",
    "peior",
    "pel",
    "ocer",
    "socius",
    "sodalitas",
    "sol",
    "soleo",
    "solio",
    "solitudo",
    "solium",
    "sollers",
    "sollicito",
    "solum",
    "solus",
    "solutio",
    "solvo",
    "somniculosus",
    "somnus",
    "sonitus",
    "sono",
    "sophismata",
    "sopor",
    "sordeo",
    "sortitus",
    "spargo",
    "speciosus",
    "spectaculum",
    "speculum",
    "sperno",
    "spero",
    "spes",
    "spiculum",
    "spiritus",
    "spoliatio",
    "sponte",
    "stabilis",
    "statim",
    "statua",
    "stella",
    "stillicidium",
    "stipes",
    "stips",
    "sto",
    "strenuus",
    "strues",
    "studio",
    "stultus",
    "suadeo",
    "suasoria",
    "sub",
    "subito",
    "subiungo",
    "sublime",
    "subnecto",
    "subseco",
    "substantia",
    "subvenio",
    "succedo",
    "succurro",
    "sufficio",
    "suffoco",
    "suffragium",
    "suggero",
    "sui",
    "sulum",
    "sum",
    "summa",
    "summisse",
    "summopere",
    "sumo",
    "sumptus",
    "supellex",
    "super",
    "suppellex",
    "supplanto",
    "suppono",
    "supra",
    "surculus",
    "surgo",
    "sursum",
    "suscipio",
    "suspendo",
    "sustineo",
    "suus",
    "synagoga",
    "tabella",
    "tabernus",
    "tabesco",
    "tabgo",
    "tabula",
    "taceo",
    "tactus",
    "taedium",
    "talio",
    "talis",
    "talus",
    "tam",
    "tamdiu",
    "tamen",
    "tametsi",
    "tamisium",
    "tamquam",
    "tandem",
    "tantillus",
    "tantum",
    "tardus",
    "tego",
    "temeritas",
    "temperantia",
    "templum",
    "temptatio",
    "tempus",
    "tenax",
    "tendo",
    "teneo",
    "tener",
    "tenuis",
    "tenus",
    "tepesco",
    "tepidus",
    "ter",
    "terebro",
    "teres",
    "terga",
    "tergeo",
    "tergiversatio",
    "tergo",
    "tergum",
    "termes",
    "terminatio",
    "tero",
    "terra",
    "terreo",
    "territo",
    "terror",
    "tersus",
    "tertius",
    "testimonium",
    "texo",
    "textilis",
    "textor",
    "textus",
    "thalassinus",
    "theatrum",
    "theca",
    "thema",
    "theologus",
    "thermae",
    "thesaurus",
    "thesis",
    "thorax",
    "thymbra",
    "thymum",
    "tibi",
    "timidus",
    "timor",
    "titulus",
    "tolero",
    "tollo",
    "tondeo",
    "tonsor",
    "torqueo",
    "torrens",
    "tot",
    "totidem",
    "toties",
    "totus",
    "tracto",
    "trado",
    "traho",
    "trans",
    "tredecim",
    "tremo",
    "trepide",
    "tres",
    "tribuo",
    "tricesimus",
    "triduana",
    "triginta",
    "tripudio",
    "tristis",
    "triumphus",
    "trucido",
    "truculenter",
    "tubineus",
    "tui",
    "tum",
    "tumultus",
    "tunc",
    "turba",
    "turbo",
    "turpe",
    "turpis",
    "tutamen",
    "tutis",
    "tyrannus",
    "uberrime",
    "ubi",
    "ulciscor",
    "ullus",
    "ulterius",
    "ultio",
    "ultra",
    "umbra",
    "umerus",
    "umquam",
    "una",
    "unde",
    "undique",
    "universe",
    "unus",
    "urbanus",
    "urbs",
    "uredo",
    "usitas",
    "usque",
    "ustilo",
    "ustulo",
    "usus",
    "uter",
    "uterque",
    "utilis",
    "utique",
    "utor",
    "utpote",
    "utrimque",
    "utroque",
    "utrum",
    "uxor",
    "vaco",
    "vacuus",
    "vado",
    "vae",
    "valde",
    "valens",
    "valeo",
    "valetudo",
    "validus",
    "vallum",
    "vapulus",
    "varietas",
    "varius",
    "vehemens",
    "vel",
    "velociter",
    "velum",
    "velut",
    "venia",
    "venio",
    "ventito",
    "ventosus",
    "ventus",
    "venustas",
    "ver",
    "verbera",
    "verbum",
    "vere",
    "verecundia",
    "vereor",
    "vergo",
    "veritas",
    "vero",
    "versus",
    "verto",
    "verumtamen",
    "verus",
    "vesco",
    "vesica",
    "vesper",
    "vespillo",
    "vester",
    "vestigium",
    "vestrum",
    "vetus",
    "via",
    "vicinus",
    "vicissitudo",
    "victoria",
    "victus",
    "videlicet",
    "video",
    "viduata",
    "viduo",
    "vigilo",
    "vigor",
    "vilicus",
    "vilis",
    "vilitas",
    "villa",
    "vinco",
    "vinculum",
    "vindico",
    "vinitor",
    "vinum",
    "vir",
    "virga",
    "virgo",
    "viridis",
    "viriliter",
    "virtus",
    "vis",
    "viscus",
    "vita",
    "vitiosus",
    "vitium",
    "vito",
    "vivo",
    "vix",
    "vobis",
    "vociferor",
    "voco",
    "volaticus",
    "volo",
    "volubilis",
    "voluntarius",
    "volup",
    "volutabrum",
    "volva",
    "vomer",
    "vomica",
    "vomito",
    "vorago",
    "vorax",
    "voro",
    "vos",
    "votum",
    "voveo",
    "vox",
    "vulariter",
    "vulgaris",
    "vulgivagus",
    "vulgo",
    "vulgus",
    "vulnero",
    "vulnus",
    "vulpes",
    "vulticulus",
    "vultuosus",
    "xiphias"
  ];
});

// node_modules/faker/lib/locales/fr/lorem/index.js
var require_lorem6 = __commonJS((exports, module) => {
  var lorem = {};
  module["exports"] = lorem;
  lorem.words = require_words6();
  lorem.supplemental = require_supplemental4();
});

// node_modules/faker/lib/locales/fr/name/first_name.js
var require_first_name11 = __commonJS((exports, module) => {
  module["exports"] = [
    "Enzo",
    "Lucas",
    "Mathis",
    "Nathan",
    "Thomas",
    "Hugo",
    "Théo",
    "Tom",
    "Louis",
    "Raphaël",
    "Clément",
    "Léo",
    "Mathéo",
    "Maxime",
    "Alexandre",
    "Antoine",
    "Yanis",
    "Paul",
    "Baptiste",
    "Alexis",
    "Gabriel",
    "Arthur",
    "Jules",
    "Ethan",
    "Noah",
    "Quentin",
    "Axel",
    "Evan",
    "Mattéo",
    "Romain",
    "Valentin",
    "Maxence",
    "Noa",
    "Adam",
    "Nicolas",
    "Julien",
    "Mael",
    "Pierre",
    "Rayan",
    "Victor",
    "Mohamed",
    "Adrien",
    "Kylian",
    "Sacha",
    "Benjamin",
    "Léa",
    "Clara",
    "Manon",
    "Chloé",
    "Camille",
    "Ines",
    "Sarah",
    "Jade",
    "Lola",
    "Anaïs",
    "Lucie",
    "Océane",
    "Lilou",
    "Marie",
    "Eva",
    "Romane",
    "Lisa",
    "Zoe",
    "Julie",
    "Mathilde",
    "Louise",
    "Juliette",
    "Clémence",
    "Célia",
    "Laura",
    "Lena",
    "Maëlys",
    "Charlotte",
    "Ambre",
    "Maeva",
    "Pauline",
    "Lina",
    "Jeanne",
    "Lou",
    "Noémie",
    "Justine",
    "Louna",
    "Elisa",
    "Alice",
    "Emilie",
    "Carla",
    "Maëlle",
    "Alicia",
    "Mélissa"
  ];
});

// node_modules/faker/lib/locales/fr/name/last_name.js
var require_last_name11 = __commonJS((exports, module) => {
  module["exports"] = [
    "Martin",
    "Bernard",
    "Dubois",
    "Thomas",
    "Robert",
    "Richard",
    "Petit",
    "Durand",
    "Leroy",
    "Moreau",
    "Simon",
    "Laurent",
    "Lefebvre",
    "Michel",
    "Garcia",
    "David",
    "Bertrand",
    "Roux",
    "Vincent",
    "Fournier",
    "Morel",
    "Girard",
    "Andre",
    "Lefevre",
    "Mercier",
    "Dupont",
    "Lambert",
    "Bonnet",
    "Francois",
    "Martinez",
    "Legrand",
    "Garnier",
    "Faure",
    "Rousseau",
    "Blanc",
    "Guerin",
    "Muller",
    "Henry",
    "Roussel",
    "Nicolas",
    "Perrin",
    "Morin",
    "Mathieu",
    "Clement",
    "Gauthier",
    "Dumont",
    "Lopez",
    "Fontaine",
    "Chevalier",
    "Robin",
    "Masson",
    "Sanchez",
    "Gerard",
    "Nguyen",
    "Boyer",
    "Denis",
    "Lemaire",
    "Duval",
    "Joly",
    "Gautier",
    "Roger",
    "Roche",
    "Roy",
    "Noel",
    "Meyer",
    "Lucas",
    "Meunier",
    "Jean",
    "Perez",
    "Marchand",
    "Dufour",
    "Blanchard",
    "Marie",
    "Barbier",
    "Brun",
    "Dumas",
    "Brunet",
    "Schmitt",
    "Leroux",
    "Colin",
    "Fernandez",
    "Pierre",
    "Renard",
    "Arnaud",
    "Rolland",
    "Caron",
    "Aubert",
    "Giraud",
    "Leclerc",
    "Vidal",
    "Bourgeois",
    "Renaud",
    "Lemoine",
    "Picard",
    "Gaillard",
    "Philippe",
    "Leclercq",
    "Lacroix",
    "Fabre",
    "Dupuis",
    "Olivier",
    "Rodriguez",
    "Da silva",
    "Hubert",
    "Louis",
    "Charles",
    "Guillot",
    "Riviere",
    "Le gall",
    "Guillaume",
    "Adam",
    "Rey",
    "Moulin",
    "Gonzalez",
    "Berger",
    "Lecomte",
    "Menard",
    "Fleury",
    "Deschamps",
    "Carpentier",
    "Julien",
    "Benoit",
    "Paris",
    "Maillard",
    "Marchal",
    "Aubry",
    "Vasseur",
    "Le roux",
    "Renault",
    "Jacquet",
    "Collet",
    "Prevost",
    "Poirier",
    "Charpentier",
    "Royer",
    "Huet",
    "Baron",
    "Dupuy",
    "Pons",
    "Paul",
    "Laine",
    "Carre",
    "Breton",
    "Remy",
    "Schneider",
    "Perrot",
    "Guyot",
    "Barre",
    "Marty",
    "Cousin"
  ];
});

// node_modules/faker/lib/locales/fr/name/prefix.js
var require_prefix11 = __commonJS((exports, module) => {
  module["exports"] = [
    "M",
    "Mme",
    "Mlle",
    "Dr",
    "Prof"
  ];
});

// node_modules/faker/lib/locales/fr/name/title.js
var require_title5 = __commonJS((exports, module) => {
  module["exports"] = {
    job: [
      "Superviseur",
      "Executif",
      "Manager",
      "Ingenieur",
      "Specialiste",
      "Directeur",
      "Coordinateur",
      "Administrateur",
      "Architecte",
      "Analyste",
      "Designer",
      "Technicien",
      "Developpeur",
      "Producteur",
      "Consultant",
      "Assistant",
      "Agent",
      "Stagiaire"
    ]
  };
});

// node_modules/faker/lib/locales/fr/name/name.js
var require_name34 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{last_name} #{first_name}"
  ];
});

// node_modules/faker/lib/locales/fr/name/index.js
var require_name33 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name = require_first_name11();
  name2.last_name = require_last_name11();
  name2.prefix = require_prefix11();
  name2.title = require_title5();
  name2.name = require_name34();
});

// node_modules/faker/lib/locales/fr/phone_number/formats.js
var require_formats22 = __commonJS((exports, module) => {
  module["exports"] = [
    "01########",
    "02########",
    "03########",
    "04########",
    "05########",
    "06########",
    "07########",
    "+33 1########",
    "+33 2########",
    "+33 3########",
    "+33 4########",
    "+33 5########",
    "+33 6########",
    "+33 7########"
  ];
});

// node_modules/faker/lib/locales/fr/phone_number/index.js
var require_phone_number16 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats22();
});

// node_modules/faker/lib/locales/fr/index.js
var require_fr = __commonJS((exports, module) => {
  var fr = {};
  module["exports"] = fr;
  fr.title = "French";
  fr.address = require_address17();
  fr.company = require_company13();
  fr.internet = require_internet17();
  fr.lorem = require_lorem6();
  fr.name = require_name33();
  fr.phone_number = require_phone_number16();
});

// node_modules/faker/lib/locales/fr_CA/address/postcode.js
var require_postcode15 = __commonJS((exports, module) => {
  module["exports"] = [
    "?#? #?#"
  ];
});

// node_modules/faker/lib/locales/fr_CA/address/state.js
var require_state13 = __commonJS((exports, module) => {
  module["exports"] = [
    "Alberta",
    "Colombie-Britannique",
    "Manitoba",
    "Nouveau-Brunswick",
    "Terre-Neuve-et-Labrador",
    "Nouvelle-Écosse",
    "Territoires du Nord-Ouest",
    "Nunavut",
    "Ontario",
    "Île-du-Prince-Édouard",
    "Québec",
    "Saskatchewan",
    "Yukon"
  ];
});

// node_modules/faker/lib/locales/fr_CA/address/state_abbr.js
var require_state_abbr11 = __commonJS((exports, module) => {
  module["exports"] = [
    "AB",
    "BC",
    "MB",
    "NB",
    "NL",
    "NS",
    "NU",
    "NT",
    "ON",
    "PE",
    "QC",
    "SK",
    "YK"
  ];
});

// node_modules/faker/lib/locales/fr_CA/address/default_country.js
var require_default_country17 = __commonJS((exports, module) => {
  module["exports"] = [
    "Canada"
  ];
});

// node_modules/faker/lib/locales/fr_CA/address/index.js
var require_address18 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.postcode = require_postcode15();
  address.state = require_state13();
  address.state_abbr = require_state_abbr11();
  address.default_country = require_default_country17();
});

// node_modules/faker/lib/locales/fr_CA/internet/free_email.js
var require_free_email11 = __commonJS((exports, module) => {
  module["exports"] = [
    "gmail.com",
    "yahoo.ca",
    "hotmail.com"
  ];
});

// node_modules/faker/lib/locales/fr_CA/internet/domain_suffix.js
var require_domain_suffix17 = __commonJS((exports, module) => {
  module["exports"] = [
    "qc.ca",
    "ca",
    "com",
    "biz",
    "info",
    "name",
    "net",
    "org"
  ];
});

// node_modules/faker/lib/locales/fr_CA/internet/index.js
var require_internet18 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.free_email = require_free_email11();
  internet.domain_suffix = require_domain_suffix17();
});

// node_modules/faker/lib/locales/fr_CA/phone_number/formats.js
var require_formats23 = __commonJS((exports, module) => {
  module["exports"] = [
    "### ###-####",
    "1 ### ###-####",
    "### ###-####, poste ###"
  ];
});

// node_modules/faker/lib/locales/fr_CA/phone_number/index.js
var require_phone_number17 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats23();
});

// node_modules/faker/lib/locales/fr_CA/index.js
var require_fr_CA = __commonJS((exports, module) => {
  var fr_CA = {};
  module["exports"] = fr_CA;
  fr_CA.title = "Canada (French)";
  fr_CA.address = require_address18();
  fr_CA.internet = require_internet18();
  fr_CA.phone_number = require_phone_number17();
});

// node_modules/faker/lib/locales/ge/name/first_name.js
var require_first_name12 = __commonJS((exports, module) => {
  module["exports"] = [
    "აგული",
    "აგუნა",
    "ადოლა",
    "ავთანდილ",
    "ავთო",
    "აკაკი",
    "აკო",
    "ალეკო",
    "ალექსანდრე",
    "ალექსი",
    "ალიო",
    "ამირან",
    "ანა",
    "ანანო",
    "ანზორ",
    "ანნა",
    "ანუკა",
    "ანუკი",
    "არჩილ",
    "ასკილა",
    "ასლანაზ",
    "აჩიკო",
    "ბადრი",
    "ბაია",
    "ბარბარე",
    "ბაქარ",
    "ბაჩა",
    "ბაჩანა",
    "ბაჭუა",
    "ბაჭუკი",
    "ბახვა",
    "ბელა",
    "ბერა",
    "ბერდია",
    "ბესიკ",
    "ბესიკ",
    "ბესო",
    "ბექა",
    "ბიძინა",
    "ბიჭიკო",
    "ბოჩია",
    "ბოცო",
    "ბროლა",
    "ბუბუ",
    "ბუდუ",
    "ბუხუტი",
    "გაგა",
    "გაგი",
    "გახა",
    "გეგა",
    "გეგი",
    "გედია",
    "გელა",
    "გენადი",
    "გვადი",
    "გვანცა",
    "გვანჯი",
    "გვიტია",
    "გვრიტა",
    "გია",
    "გიგა",
    "გიგი",
    "გიგილო",
    "გიგლა",
    "გიგოლი",
    "გივი",
    "გივიკო",
    "გიორგი",
    "გოგი",
    "გოგიტა",
    "გოგიჩა",
    "გოგოთურ",
    "გოგოლა",
    "გოდერძი",
    "გოლა",
    "გოჩა",
    "გრიგოლ",
    "გუგა",
    "გუგუ",
    "გუგულა",
    "გუგული",
    "გუგუნა",
    "გუკა",
    "გულარისა",
    "გულვარდი",
    "გულვარდისა",
    "გულთამზე",
    "გულია",
    "გულიკო",
    "გულისა",
    "გულნარა",
    "გურამ",
    "დავით",
    "დალი",
    "დარეჯან",
    "დიანა",
    "დიმიტრი",
    "დოდო",
    "დუტუ",
    "ეთერ",
    "ეთო",
    "ეკა",
    "ეკატერინე",
    "ელგუჯა",
    "ელენა",
    "ელენე",
    "ელზა",
    "ელიკო",
    "ელისო",
    "ემზარ",
    "ეშხა",
    "ვალენტინა",
    "ვალერი",
    "ვანო",
    "ვაჟა",
    "ვაჟა",
    "ვარდო",
    "ვარსკვლავისა",
    "ვასიკო",
    "ვასილ",
    "ვატო",
    "ვახო",
    "ვახტანგ",
    "ვენერა",
    "ვერა",
    "ვერიკო",
    "ზაზა",
    "ზაირა",
    "ზაურ",
    "ზეზვა",
    "ზვიად",
    "ზინა",
    "ზოია",
    "ზუკა",
    "ზურა",
    "ზურაბ",
    "ზურია",
    "ზურიკო",
    "თაზო",
    "თათა",
    "თათია",
    "თათული",
    "თაია",
    "თაკო",
    "თალიკო",
    "თამაზ",
    "თამარ",
    "თამარა",
    "თამთა",
    "თამთიკე",
    "თამი",
    "თამილა",
    "თამრიკო",
    "თამრო",
    "თამუნა",
    "თამჩო",
    "თანანა",
    "თანდილა",
    "თაყა",
    "თეა",
    "თებრონე",
    "თეიმურაზ",
    "თემურ",
    "თენგიზ",
    "თენგო",
    "თეონა",
    "თიკა",
    "თიკო",
    "თიკუნა",
    "თინა",
    "თინათინ",
    "თინიკო",
    "თმაგიშერა",
    "თორნიკე",
    "თუთა",
    "თუთია",
    "ია",
    "იათამზე",
    "იამზე",
    "ივანე",
    "ივერი",
    "ივქირიონ",
    "იზოლდა",
    "ილია",
    "ილიკო",
    "იმედა",
    "ინგა",
    "იოსებ",
    "ირაკლი",
    "ირინა",
    "ირინე",
    "ირინკა",
    "ირმა",
    "იური",
    "კაკო",
    "კალე",
    "კატო",
    "კახა",
    "კახაბერ",
    "კეკელა",
    "კესანე",
    "კესო",
    "კვირია",
    "კიტა",
    "კობა",
    "კოკა",
    "კონსტანტინე",
    "კოსტა",
    "კოტე",
    "კუკური",
    "ლადო",
    "ლალი",
    "ლამაზა",
    "ლამარა",
    "ლამზირა",
    "ლაშა",
    "ლევან",
    "ლეილა",
    "ლელა",
    "ლენა",
    "ლერწამისა",
    "ლექსო",
    "ლია",
    "ლიანა",
    "ლიზა",
    "ლიზიკო",
    "ლილე",
    "ლილი",
    "ლილიკო",
    "ლომია",
    "ლუიზა",
    "მაგული",
    "მადონა",
    "მათიკო",
    "მაია",
    "მაიკო",
    "მაისა",
    "მაკა",
    "მაკო",
    "მაკუნა",
    "მალხაზ",
    "მამამზე",
    "მამია",
    "მამისა",
    "მამისთვალი",
    "მამისიმედი",
    "მამუკა",
    "მამულა",
    "მანანა",
    "მანჩო",
    "მარადი",
    "მარი",
    "მარია",
    "მარიამი",
    "მარიკა",
    "მარინა",
    "მარინე",
    "მარიტა",
    "მაყვალა",
    "მაყვალა",
    "მაშიკო",
    "მაშო",
    "მაცაცო",
    "მგელია",
    "მგელიკა",
    "მედეა",
    "მეკაშო",
    "მელანო",
    "მერაბ",
    "მერი",
    "მეტია",
    "მზაღო",
    "მზევინარ",
    "მზეთამზე",
    "მზეთვალა",
    "მზეონა",
    "მზექალა",
    "მზეხა",
    "მზეხათუნი",
    "მზია",
    "მზირა",
    "მზისადარ",
    "მზისთანადარი",
    "მზიულა",
    "მთვარისა",
    "მინდია",
    "მიშა",
    "მიშიკო",
    "მიხეილ",
    "მნათობი",
    "მნათობისა",
    "მოგელი",
    "მონავარდისა",
    "მურმან",
    "მუხრან",
    "ნაზი",
    "ნაზიკო",
    "ნათელა",
    "ნათია",
    "ნაირა",
    "ნანა",
    "ნანი",
    "ნანიკო",
    "ნანუკა",
    "ნანული",
    "ნარგიზი",
    "ნასყიდა",
    "ნატალია",
    "ნატო",
    "ნელი",
    "ნენე",
    "ნესტან",
    "ნია",
    "ნიაკო",
    "ნიკა",
    "ნიკოლოზ",
    "ნინა",
    "ნინაკა",
    "ნინი",
    "ნინიკო",
    "ნინო",
    "ნინუკა",
    "ნინუცა",
    "ნოდარ",
    "ნოდო",
    "ნონა",
    "ნორა",
    "ნუგზარ",
    "ნუგო",
    "ნუკა",
    "ნუკი",
    "ნუკრი",
    "ნუნუ",
    "ნუნუ",
    "ნუნუკა",
    "ნუცა",
    "ნუცი",
    "ოთარ",
    "ოთია",
    "ოთო",
    "ომარ",
    "ორბელ",
    "ოტია",
    "ოქროპირ",
    "პაატა",
    "პაპუნა",
    "პატარკაცი",
    "პატარქალი",
    "პეპელა",
    "პირვარდისა",
    "პირიმზე",
    "ჟამიერა",
    "ჟამიტა",
    "ჟამუტა",
    "ჟუჟუნა",
    "რამაზ",
    "რევაზ",
    "რეზი",
    "რეზო",
    "როზა",
    "რომან",
    "რუსკა",
    "რუსუდან",
    "საბა",
    "სალი",
    "სალომე",
    "სანათა",
    "სანდრო",
    "სერგო",
    "სესია",
    "სეხნია",
    "სვეტლანა",
    "სიხარულა",
    "სოსო",
    "სოფიკო",
    "სოფიო",
    "სოფო",
    "სულა",
    "სულიკო",
    "ტარიელ",
    "ტასიკო",
    "ტასო",
    "ტატიანა",
    "ტატო",
    "ტეტია",
    "ტურია",
    "უმანკო",
    "უტა",
    "უჩა",
    "ფაქიზო",
    "ფაცია",
    "ფეფელა",
    "ფეფენა",
    "ფეფიკო",
    "ფეფო",
    "ფოსო",
    "ფოფო",
    "ქაბატო",
    "ქავთარი",
    "ქალია",
    "ქართლოს",
    "ქეთათო",
    "ქეთევან",
    "ქეთი",
    "ქეთინო",
    "ქეთო",
    "ქველი",
    "ქიტესა",
    "ქიშვარდი",
    "ქობული",
    "ქრისტესია",
    "ქტისტეფორე",
    "ქურციკა",
    "ღარიბა",
    "ღვთისავარი",
    "ღვთისია",
    "ღვთისო",
    "ღვინია",
    "ღუღუნა",
    "ყაითამზა",
    "ყაყიტა",
    "ყვარყვარე",
    "ყიასა",
    "შაბური",
    "შაკო",
    "შალვა",
    "შალიკო",
    "შანშე",
    "შარია",
    "შაქარა",
    "შაქრო",
    "შოთა",
    "შორენა",
    "შოშია",
    "შუქია",
    "ჩიორა",
    "ჩიტო",
    "ჩიტო",
    "ჩოყოლა",
    "ცაგო",
    "ცაგული",
    "ცანგალა",
    "ცარო",
    "ცაცა",
    "ცაცო",
    "ციალა",
    "ციკო",
    "ცინარა",
    "ცირა",
    "ცისანა",
    "ცისია",
    "ცისკარა",
    "ცისკარი",
    "ცისმარა",
    "ცისმარი",
    "ციური",
    "ციცი",
    "ციცია",
    "ციცინო",
    "ცოტნე",
    "ცოქალა",
    "ცუცა",
    "ცხვარი",
    "ძაბული",
    "ძამისა",
    "ძაღინა",
    "ძიძია",
    "წათე",
    "წყალობა",
    "ჭაბუკა",
    "ჭიაბერ",
    "ჭიკჭიკა",
    "ჭიჭია",
    "ჭიჭიკო",
    "ჭოლა",
    "ხათუნა",
    "ხარება",
    "ხატია",
    "ხახულა",
    "ხახუტა",
    "ხეჩუა",
    "ხვიჩა",
    "ხიზანა",
    "ხირხელა",
    "ხობელასი",
    "ხოხია",
    "ხოხიტა",
    "ხუტა",
    "ხუცია",
    "ჯაბა",
    "ჯავახი",
    "ჯარჯი",
    "ჯემალ",
    "ჯონდო",
    "ჯოტო",
    "ჯუბი",
    "ჯულიეტა",
    "ჯუმბერ",
    "ჰამლეტ"
  ];
});

// node_modules/faker/lib/locales/ge/name/last_name.js
var require_last_name12 = __commonJS((exports, module) => {
  module["exports"] = [
    "აბაზაძე",
    "აბაშიძე",
    "აბრამაშვილი",
    "აბუსერიძე",
    "აბშილავა",
    "ავაზნელი",
    "ავალიშვილი",
    "ამილახვარი",
    "ანთაძე",
    "ასლამაზიშვილი",
    "ასპანიძე",
    "აშკარელი",
    "ახალბედაშვილი",
    "ახალკაცი",
    "ახვლედიანი",
    "ბარათაშვილი",
    "ბარდაველიძე",
    "ბახტაძე",
    "ბედიანიძე",
    "ბერიძე",
    "ბერუაშვილი",
    "ბეჟანიშვილი",
    "ბოგველიშვილი",
    "ბოტკოველი",
    "გაბრიჩიძე",
    "გაგნიძე",
    "გამრეკელი",
    "გელაშვილი",
    "გზირიშვილი",
    "გიგაური",
    "გურამიშვილი",
    "გურგენიძე",
    "დადიანი",
    "დავითიშვილი",
    "დათუაშვილი",
    "დარბაისელი",
    "დეკანოიძე",
    "დვალი",
    "დოლაბერიძე",
    "ედიშერაშვილი",
    "ელიზბარაშვილი",
    "ელიოზაშვილი",
    "ერისთავი",
    "ვარამაშვილი",
    "ვარდიაშვილი",
    "ვაჩნაძე",
    "ვარდანიძე",
    "ველიაშვილი",
    "ველიჯანაშვილი",
    "ზარანდია",
    "ზარიძე",
    "ზედგინიძე",
    "ზუბიაშვილი",
    "თაბაგარი",
    "თავდგირიძე",
    "თათარაშვილი",
    "თამაზაშვილი",
    "თამარაშვილი",
    "თაქთაქიშვილი",
    "თაყაიშვილი",
    "თბილელი",
    "თუხარელი",
    "იაშვილი",
    "იგითხანიშვილი",
    "ინასარიძე",
    "იშხნელი",
    "კანდელაკი",
    "კაცია",
    "კერესელიძე",
    "კვირიკაშვილი",
    "კიკნაძე",
    "კლდიაშვილი",
    "კოვზაძე",
    "კოპაძე",
    "კოპტონაშვილი",
    "კოშკელაშვილი",
    "ლაბაძე",
    "ლეკიშვილი",
    "ლიქოკელი",
    "ლოლაძე",
    "ლურსმანაშვილი",
    "მაისურაძე",
    "მარტოლეკი",
    "მაღალაძე",
    "მახარაშვილი",
    "მგალობლიშვილი",
    "მეგრელიშვილი",
    "მელაშვილი",
    "მელიქიძე",
    "მერაბიშვილი",
    "მეფარიშვილი",
    "მუჯირი",
    "მჭედლიძე",
    "მხეიძე",
    "ნათაძე",
    "ნაჭყებია",
    "ნოზაძე",
    "ოდიშვილი",
    "ონოფრიშვილი",
    "პარეხელაშვილი",
    "პეტრიაშვილი",
    "სააკაძე",
    "სააკაშვილი",
    "საგინაშვილი",
    "სადუნიშვილი",
    "საძაგლიშვილი",
    "სებისკვერიძე",
    "სეთური",
    "სუთიაშვილი",
    "სულაშვილი",
    "ტაბაღუა",
    "ტყეშელაშვილი",
    "ულუმბელაშვილი",
    "უნდილაძე",
    "ქავთარაძე",
    "ქართველიშვილი",
    "ყაზბეგი",
    "ყაუხჩიშვილი",
    "შავლაშვილი",
    "შალიკაშვილი",
    "შონია",
    "ჩიბუხაშვილი",
    "ჩიხრაძე",
    "ჩიქოვანი",
    "ჩუბინიძე",
    "ჩოლოყაშვილი",
    "ჩოხელი",
    "ჩხვიმიანი",
    "ცალუღელაშვილი",
    "ცაძიკიძე",
    "ციციშვილი",
    "ციხელაშვილი",
    "ციხისთავი",
    "ცხოვრებაძე",
    "ცხომარია",
    "წამალაიძე",
    "წერეთელი",
    "წიკლაური",
    "წიფურია",
    "ჭაბუკაშვილი",
    "ჭავჭავაძე",
    "ჭანტურია",
    "ჭარელიძე",
    "ჭიორელი",
    "ჭუმბურიძე",
    "ხაბაზი",
    "ხარაძე",
    "ხარატიშვილი",
    "ხარატასშვილი",
    "ხარისჭირაშვილი",
    "ხარხელაური",
    "ხაშმელაშვილი",
    "ხეთაგური",
    "ხიზამბარელი",
    "ხიზანიშვილი",
    "ხიმშიაშვილი",
    "ხოსრუაშვილი",
    "ხოჯივანიშვილი",
    "ხუციშვილი",
    "ჯაბადარი",
    "ჯავახი",
    "ჯავახიშვილი",
    "ჯანელიძე",
    "ჯაფარიძე",
    "ჯაყელი",
    "ჯაჯანიძე",
    "ჯვარელია",
    "ჯინიუზაშვილი",
    "ჯუღაშვილი"
  ];
});

// node_modules/faker/lib/locales/ge/name/prefix.js
var require_prefix13 = __commonJS((exports, module) => {
  module["exports"] = [
    "ბ-ნი",
    "ბატონი",
    "ქ-ნი",
    "ქალბატონი"
  ];
});

// node_modules/faker/lib/locales/ge/name/title.js
var require_title6 = __commonJS((exports, module) => {
  module["exports"] = {
    descriptor: [
      "გენერალური",
      "მთავარი",
      "სტაჟიორ",
      "უმცროსი",
      "ყოფილი",
      "წამყვანი"
    ],
    level: [
      "აღრიცხვების",
      "ბრენდინგის",
      "ბრენიდს",
      "ბუღალტერიის",
      "განყოფილების",
      "გაყიდვების",
      "გუნდის",
      "დახმარების",
      "დიზაინის",
      "თავდაცვის",
      "ინფორმაციის",
      "კვლევების",
      "კომუნიკაციების",
      "მარკეტინგის",
      "ოპერაციათა",
      "ოპტიმიზაციების",
      "პიარ",
      "პროგრამის",
      "საქმეთა",
      "ტაქტიკური",
      "უსაფრთხოების",
      "ფინანსთა",
      "ქსელის",
      "ხარისხის",
      "ჯგუფის"
    ],
    job: [
      "აგენტი",
      "ადვოკატი",
      "ადმინისტრატორი",
      "არქიტექტორი",
      "ასისტენტი",
      "აღმასრულებელი დირექტორი",
      "დეველოპერი",
      "დეკანი",
      "დიზაინერი",
      "დირექტორი",
      "ელექტრიკოსი",
      "ექსპერტი",
      "ინჟინერი",
      "იურისტი",
      "კონსტრუქტორი",
      "კონსულტანტი",
      "კოორდინატორი",
      "ლექტორი",
      "მასაჟისტი",
      "მემანქანე",
      "მენეჯერი",
      "მძღოლი",
      "მწვრთნელი",
      "ოპერატორი",
      "ოფიცერი",
      "პედაგოგი",
      "პოლიციელი",
      "პროგრამისტი",
      "პროდიუსერი",
      "პრორექტორი",
      "ჟურნალისტი",
      "რექტორი",
      "სპეციალისტი",
      "სტრატეგისტი",
      "ტექნიკოსი",
      "ფოტოგრაფი",
      "წარმომადგენელი"
    ]
  };
});

// node_modules/faker/lib/locales/ge/name/name.js
var require_name37 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}"
  ];
});

// node_modules/faker/lib/locales/ge/name/index.js
var require_name36 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name = require_first_name12();
  name2.last_name = require_last_name12();
  name2.prefix = require_prefix13();
  name2.title = require_title6();
  name2.name = require_name37();
});

// node_modules/faker/lib/locales/ge/address/city_prefix.js
var require_city_prefix6 = __commonJS((exports, module) => {
  module["exports"] = [
    "ახალი",
    "ძველი",
    "ზემო",
    "ქვემო"
  ];
});

// node_modules/faker/lib/locales/ge/address/city_suffix.js
var require_city_suffix4 = __commonJS((exports, module) => {
  module["exports"] = [
    "სოფელი",
    "ძირი",
    "სკარი",
    "დაბა"
  ];
});

// node_modules/faker/lib/locales/ge/address/city.js
var require_city10 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{city_prefix} #{Name.first_name}#{city_suffix}",
    "#{city_prefix} #{Name.first_name}",
    "#{Name.first_name}#{city_suffix}",
    "#{Name.first_name}#{city_suffix}",
    "#{Name.last_name}#{city_suffix}",
    "#{Name.last_name}#{city_suffix}"
  ];
});

// node_modules/faker/lib/locales/ge/address/country.js
var require_country8 = __commonJS((exports, module) => {
  module["exports"] = [
    "ავსტრალია",
    "ავსტრია",
    "ავღანეთი",
    "აზავადი",
    "აზერბაიჯანი",
    "აზიაში",
    "აზიის",
    "ალბანეთი",
    "ალჟირი",
    "ამაღლება და ტრისტანი-და-კუნია",
    "ამერიკის ვირჯინიის კუნძულები",
    "ამერიკის სამოა",
    "ამერიკის შეერთებული შტატები",
    "ამერიკის",
    "ანგილია",
    "ანგოლა",
    "ანდორა",
    "ანტიგუა და ბარბუდა",
    "არაბეთის საემიროები",
    "არაბთა გაერთიანებული საამიროები",
    "არაბული ქვეყნების ლიგის",
    "არგენტინა",
    "არუბა",
    "არცნობილი ქვეყნების სია",
    "აფრიკაში",
    "აფრიკაშია",
    "აღდგომის კუნძული",
    "აღმ. ტიმორი",
    "აღმოსავლეთი აფრიკა",
    "აღმოსავლეთი ტიმორი",
    "აშშ",
    "აშშ-ის ვირჯინის კუნძულები",
    "ახალი ზელანდია",
    "ახალი კალედონია",
    "ბანგლადეში",
    "ბარბადოსი",
    "ბაჰამის კუნძულები",
    "ბაჰრეინი",
    "ბელარუსი",
    "ბელგია",
    "ბელიზი",
    "ბენინი",
    "ბერმუდა",
    "ბერმუდის კუნძულები",
    "ბოლივია",
    "ბოსნია და ჰერცეგოვინა",
    "ბოტსვანა",
    "ბრაზილია",
    "ბრიტანეთის ვირჯინიის კუნძულები",
    "ბრიტანეთის ვირჯინის კუნძულები",
    "ბრიტანეთის ინდოეთის ოკეანის ტერიტორია",
    "ბრუნეი",
    "ბულგარეთი",
    "ბურკინა ფასო",
    "ბურკინა-ფასო",
    "ბურუნდი",
    "ბჰუტანი",
    "გაბონი",
    "გაერთიანებული სამეფო",
    "გაეროს",
    "გაიანა",
    "გამბია",
    "განა",
    "გერმანია",
    "გვადელუპა",
    "გვატემალა",
    "გვინეა",
    "გვინეა-ბისაუ",
    "გიბრალტარი",
    "გრენადა",
    "გრენლანდია",
    "გუამი",
    "დამოკიდებული ტერ.",
    "დამოკიდებული ტერიტორია",
    "დამოკიდებული",
    "დანია",
    "დასავლეთი აფრიკა",
    "დასავლეთი საჰარა",
    "დიდი ბრიტანეთი",
    "დომინიკა",
    "დომინიკელთა რესპუბლიკა",
    "ეგვიპტე",
    "ევროკავშირის",
    "ევროპასთან",
    "ევროპაშია",
    "ევროპის ქვეყნები",
    "ეთიოპია",
    "ეკვადორი",
    "ეკვატორული გვინეა",
    "ეპარსეს კუნძული",
    "ერაყი",
    "ერიტრეა",
    "ესპანეთი",
    "ესპანეთის სუვერენული ტერიტორიები",
    "ესტონეთი",
    "ეშმორის და კარტიეს კუნძულები",
    "ვანუატუ",
    "ვატიკანი",
    "ვენესუელა",
    "ვიეტნამი",
    "ზამბია",
    "ზიმბაბვე",
    "თურქეთი",
    "თურქმენეთი",
    "იამაიკა",
    "იან მაიენი",
    "იაპონია",
    "იემენი",
    "ინდოეთი",
    "ინდონეზია",
    "იორდანია",
    "ირანი",
    "ირლანდია",
    "ისლანდია",
    "ისრაელი",
    "იტალია",
    "კაბო-ვერდე",
    "კაიმანის კუნძულები",
    "კამბოჯა",
    "კამერუნი",
    "კანადა",
    "კანარის კუნძულები",
    "კარიბის ზღვის",
    "კატარი",
    "კენია",
    "კვიპროსი",
    "კინგმენის რიფი",
    "კირიბატი",
    "კლიპერტონი",
    "კოლუმბია",
    "კომორი",
    "კომორის კუნძულები",
    "კონგოს დემოკრატიული რესპუბლიკა",
    "კონგოს რესპუბლიკა",
    "კორეის რესპუბლიკა",
    "კოსტა-რიკა",
    "კოტ-დ’ივუარი",
    "კუბა",
    "კუკის კუნძულები",
    "ლაოსი",
    "ლატვია",
    "ლესოთო",
    "ლიბანი",
    "ლიბერია",
    "ლიბია",
    "ლიტვა",
    "ლიხტენშტაინი",
    "ლუქსემბურგი",
    "მადაგასკარი",
    "მადეირა",
    "მავრიკი",
    "მავრიტანია",
    "მაიოტა",
    "მაკაო",
    "მაკედონია",
    "მალავი",
    "მალაიზია",
    "მალდივი",
    "მალდივის კუნძულები",
    "მალი",
    "მალტა",
    "მაროკო",
    "მარტინიკა",
    "მარშალის კუნძულები",
    "მარჯნის ზღვის კუნძულები",
    "მელილია",
    "მექსიკა",
    "მიანმარი",
    "მიკრონეზია",
    "მიკრონეზიის ფედერაციული შტატები",
    "მიმდებარე კუნძულები",
    "მოზამბიკი",
    "მოლდოვა",
    "მონაკო",
    "მონსერატი",
    "მონღოლეთი",
    "ნამიბია",
    "ნაურუ",
    "ნაწილობრივ აფრიკაში",
    "ნეპალი",
    "ნიგერი",
    "ნიგერია",
    "ნიდერლანდი",
    "ნიდერლანდის ანტილები",
    "ნიკარაგუა",
    "ნიუე",
    "ნორვეგია",
    "ნორფოლკის კუნძული",
    "ოკეანეთის",
    "ოკეანიას",
    "ომანი",
    "პაკისტანი",
    "პალაუ",
    "პალესტინა",
    "პალმირა (ატოლი)",
    "პანამა",
    "პანტელერია",
    "პაპუა-ახალი გვინეა",
    "პარაგვაი",
    "პერუ",
    "პიტკერნის კუნძულები",
    "პოლონეთი",
    "პორტუგალია",
    "პრინც-ედუარდის კუნძული",
    "პუერტო-რიკო",
    "რეუნიონი",
    "როტუმა",
    "რუანდა",
    "რუმინეთი",
    "რუსეთი",
    "საბერძნეთი",
    "სადავო ტერიტორიები",
    "სალვადორი",
    "სამოა",
    "სამხ. კორეა",
    "სამხრეთ ამერიკაშია",
    "სამხრეთ ამერიკის",
    "სამხრეთ აფრიკის რესპუბლიკა",
    "სამხრეთი აფრიკა",
    "სამხრეთი გეორგია და სამხრეთ სენდვიჩის კუნძულები",
    "სამხრეთი სუდანი",
    "სან-მარინო",
    "სან-ტომე და პრინსიპი",
    "საუდის არაბეთი",
    "საფრანგეთი",
    "საფრანგეთის გვიანა",
    "საფრანგეთის პოლინეზია",
    "საქართველო",
    "საჰარის არაბთა დემოკრატიული რესპუბლიკა",
    "სეიშელის კუნძულები",
    "სენ-ბართელმი",
    "სენ-მარტენი",
    "სენ-პიერი და მიკელონი",
    "სენეგალი",
    "სენტ-ვინსენტი და გრენადინები",
    "სენტ-კიტსი და ნევისი",
    "სენტ-ლუსია",
    "სერბეთი",
    "სეუტა",
    "სვაზილენდი",
    "სვალბარდი",
    "სიერა-ლეონე",
    "სინგაპური",
    "სირია",
    "სლოვაკეთი",
    "სლოვენია",
    "სოკოტრა",
    "სოლომონის კუნძულები",
    "სომალი",
    "სომალილენდი",
    "სომხეთი",
    "სუდანი",
    "სუვერენული სახელმწიფოები",
    "სურინამი",
    "ტაივანი",
    "ტაილანდი",
    "ტანზანია",
    "ტაჯიკეთი",
    "ტერიტორიები",
    "ტერქსისა და კაიკოსის კუნძულები",
    "ტოგო",
    "ტოკელაუ",
    "ტონგა",
    "ტრანსკონტინენტური ქვეყანა",
    "ტრინიდადი და ტობაგო",
    "ტუვალუ",
    "ტუნისი",
    "უგანდა",
    "უზბეკეთი",
    "უკრაინა",
    "უნგრეთი",
    "უოლისი და ფუტუნა",
    "ურუგვაი",
    "ფარერის კუნძულები",
    "ფილიპინები",
    "ფინეთი",
    "ფიჯი",
    "ფოლკლენდის კუნძულები",
    "ქვეყნები",
    "ქოქოსის კუნძულები",
    "ქუვეითი",
    "ღაზის სექტორი",
    "ყაზახეთი",
    "ყირგიზეთი",
    "შვედეთი",
    "შვეიცარია",
    "შობის კუნძული",
    "შრი-ლანკა",
    "ჩადი",
    "ჩერნოგორია",
    "ჩეჩნეთის რესპუბლიკა იჩქერია",
    "ჩეხეთი",
    "ჩილე",
    "ჩინეთი",
    "ჩრდ. კორეა",
    "ჩრდილოეთ ამერიკის",
    "ჩრდილოეთ მარიანას კუნძულები",
    "ჩრდილოეთი აფრიკა",
    "ჩრდილოეთი კორეა",
    "ჩრდილოეთი მარიანას კუნძულები",
    "ცენტრალური აფრიკა",
    "ცენტრალური აფრიკის რესპუბლიკა",
    "წევრები",
    "წმინდა ელენე",
    "წმინდა ელენეს კუნძული",
    "ხორვატია",
    "ჯერსი",
    "ჯიბუტი",
    "ჰავაი",
    "ჰაიტი",
    "ჰერდი და მაკდონალდის კუნძულები",
    "ჰონდურასი",
    "ჰონკონგი"
  ];
});

// node_modules/faker/lib/locales/ge/address/building_number.js
var require_building_number11 = __commonJS((exports, module) => {
  module["exports"] = [
    "###",
    "##",
    "#"
  ];
});

// node_modules/faker/lib/locales/ge/address/street_suffix.js
var require_street_suffix8 = __commonJS((exports, module) => {
  module["exports"] = [
    "გამზ.",
    "გამზირი",
    "ქ.",
    "ქუჩა",
    "ჩიხი",
    "ხეივანი"
  ];
});

// node_modules/faker/lib/locales/ge/address/secondary_address.js
var require_secondary_address9 = __commonJS((exports, module) => {
  module["exports"] = [
    "კორპ. ##",
    "შენობა ###"
  ];
});

// node_modules/faker/lib/locales/ge/address/postcode.js
var require_postcode16 = __commonJS((exports, module) => {
  module["exports"] = [
    "01##"
  ];
});

// node_modules/faker/lib/locales/ge/address/city_name.js
var require_city_name5 = __commonJS((exports, module) => {
  module["exports"] = [
    "აბასთუმანი",
    "აბაშა",
    "ადიგენი",
    "ამბროლაური",
    "ანაკლია",
    "ასპინძა",
    "ახალგორი",
    "ახალქალაქი",
    "ახალციხე",
    "ახმეტა",
    "ბათუმი",
    "ბაკურიანი",
    "ბაღდათი",
    "ბახმარო",
    "ბოლნისი",
    "ბორჯომი",
    "გარდაბანი",
    "გონიო",
    "გორი",
    "გრიგოლეთი",
    "გუდაური",
    "გურჯაანი",
    "დედოფლისწყარო",
    "დმანისი",
    "დუშეთი",
    "ვანი",
    "ზესტაფონი",
    "ზუგდიდი",
    "თბილისი",
    "თეთრიწყარო",
    "თელავი",
    "თერჯოლა",
    "თიანეთი",
    "კასპი",
    "კვარიათი",
    "კიკეთი",
    "კოჯორი",
    "ლაგოდეხი",
    "ლანჩხუთი",
    "ლენტეხი",
    "მარნეული",
    "მარტვილი",
    "მესტია",
    "მცხეთა",
    "მწვანე კონცხი",
    "ნინოწმინდა",
    "ოზურგეთი",
    "ონი",
    "რუსთავი",
    "საგარეჯო",
    "საგურამო",
    "საირმე",
    "სამტრედია",
    "სარფი",
    "საჩხერე",
    "სენაკი",
    "სიღნაღი",
    "სტეფანწმინდა",
    "სურამი",
    "ტაბახმელა",
    "ტყიბული",
    "ურეკი",
    "ფოთი",
    "ქარელი",
    "ქედა",
    "ქობულეთი",
    "ქუთაისი",
    "ყვარელი",
    "შუახევი",
    "ჩაქვი",
    "ჩოხატაური",
    "ცაგერი",
    "ცხოროჭყუ",
    "წავკისი",
    "წალენჯიხა",
    "წალკა",
    "წაღვერი",
    "წეროვანი",
    "წნორი",
    "წყალტუბო",
    "წყნეთი",
    "ჭიათურა",
    "ხარაგაული",
    "ხაშური",
    "ხელვაჩაური",
    "ხობი",
    "ხონი",
    "ხულო"
  ];
});

// node_modules/faker/lib/locales/ge/address/street_title.js
var require_street_title2 = __commonJS((exports, module) => {
  module["exports"] = [
    "აბაშიძის",
    "აბესაძის",
    "აბულაძის",
    "აგლაძის",
    "ადლერის",
    "ავიაქიმიის",
    "ავლაბრის",
    "ათარბეგოვის",
    "ათონელის",
    "ალავერდოვის",
    "ალექსიძის",
    "ალილუევის",
    "ალმასიანის",
    "ამაღლების",
    "ამირეჯიბის",
    "ანაგის",
    "ანდრონიკაშვილის",
    "ანთელავას",
    "ანჯაფარიძის",
    "არაგვის",
    "არდონის",
    "არეშიძის",
    "ასათიანის",
    "ასკურავას",
    "ასლანიდის",
    "ატენის",
    "აფხაზი",
    "აღმაშენებლის",
    "ახალშენის",
    "ახვლედიანის",
    "ბააზოვის",
    "ბაბისხევის",
    "ბაბუშკინის",
    "ბაგრატიონის",
    "ბალანჩივაძეების",
    "ბალანჩივაძის",
    "ბალანჩინის",
    "ბალმაშევის",
    "ბარამიძის",
    "ბარნოვის",
    "ბაშალეიშვილის",
    "ბევრეთის",
    "ბელინსკის",
    "ბელოსტოკის",
    "ბენაშვილის",
    "ბეჟანიშვილის",
    "ბერიძის",
    "ბოლქვაძის",
    "ბოცვაძის",
    "ბოჭორიშვილის",
    "ბოჭორიძის",
    "ბუაჩიძის",
    "ბუდაპეშტის",
    "ბურკიაშვილის",
    "ბურძგლას",
    "გაბესკირიას",
    "გაგარინის",
    "გაზაფხულის",
    "გამრეკელის",
    "გამსახურდიას",
    "გარეჯელის",
    "გეგეჭკორის",
    "გედაურის",
    "გელოვანი",
    "გელოვანის",
    "გერცენის",
    "გლდანის",
    "გოგებაშვილის",
    "გოგიბერიძის",
    "გოგოლის",
    "გონაშვილის",
    "გორგასლის",
    "გრანელის",
    "გრიზოდუბოვას",
    "გრინევიცკის",
    "გრომოვას",
    "გრუზინსკის",
    "გუდიაშვილის",
    "გულრიფშის",
    "გულუას",
    "გურამიშვილის",
    "გურგენიძის",
    "დადიანის",
    "დავითაშვილის",
    "დამაკავშირებელი",
    "დარიალის",
    "დედოფლისწყაროს",
    "დეპუტატის",
    "დიდგორის",
    "დიდი",
    "დიდუბის",
    "დიუმას",
    "დიღმის",
    "დიღომში",
    "დოლიძის",
    "დუნდუას",
    "დურმიშიძის",
    "ელიავას",
    "ენგელსის",
    "ენგურის",
    "ეპისკოპოსის",
    "ერისთავი",
    "ერისთავის",
    "ვაზისუბნის",
    "ვაკელის",
    "ვართაგავას",
    "ვატუტინის",
    "ვაჩნაძის",
    "ვაცეკის",
    "ვეკუას",
    "ვეშაპურის",
    "ვირსალაძის",
    "ვოლოდარსკის",
    "ვორონინის",
    "ზაარბრიუკენის",
    "ზაზიაშვილის",
    "ზაზიშვილის",
    "ზაკომოლდინის",
    "ზანდუკელის",
    "ზაქარაიას",
    "ზაქარიაძის",
    "ზახაროვის",
    "ზაჰესის",
    "ზნაურის",
    "ზურაბაშვილის",
    "ზღვის",
    "თაბუკაშვილის",
    "თავაძის",
    "თავისუფლების",
    "თამარაშვილის",
    "თაქთაქიშვილის",
    "თბილელის",
    "თელიას",
    "თორაძის",
    "თოფურიძის",
    "იალბუზის",
    "იამანიძის",
    "იაშვილის",
    "იბერიის",
    "იერუსალიმის",
    "ივანიძის",
    "ივერიელის",
    "იზაშვილის",
    "ილურიძის",
    "იმედაშვილის",
    "იმედაძის",
    "იმედის",
    "ინანიშვილის",
    "ინგოროყვას",
    "ინდუსტრიალიზაციის",
    "ინჟინრის",
    "ინწკირველის",
    "ირბახის",
    "ირემაშვილის",
    "ისაკაძის",
    "ისპასჰანლის",
    "იტალიის",
    "იუნკერთა",
    "კათალიკოსის",
    "კაიროს",
    "კაკაბაძის",
    "კაკაბეთის",
    "კაკლიანის",
    "კალანდაძის",
    "კალიაევის",
    "კალინინის",
    "კამალოვის",
    "კამოს",
    "კაშენის",
    "კახოვკის",
    "კედიას",
    "კელაპტრიშვილის",
    "კერესელიძის",
    "კეცხოველის",
    "კიბალჩიჩის",
    "კიკნაძის",
    "კიროვის",
    "კობარეთის",
    "კოლექტივიზაციის",
    "კოლმეურნეობის",
    "კოლხეთის",
    "კომკავშირის",
    "კომუნისტური",
    "კონსტიტუციის",
    "კოოპერაციის",
    "კოსტავას",
    "კოტეტიშვილის",
    "კოჩეტკოვის",
    "კოჯრის",
    "კრონშტადტის",
    "კროპოტკინის",
    "კრუპსკაიას",
    "კუიბიშევის",
    "კურნატოვსკის",
    "კურტანოვსკის",
    "კუტუზოვის",
    "ლაღიძის",
    "ლელაშვილის",
    "ლენინაშენის",
    "ლენინგრადის",
    "ლენინის",
    "ლენის",
    "ლეონიძის",
    "ლვოვის",
    "ლორთქიფანიძის",
    "ლოტკინის",
    "ლუბლიანის",
    "ლუბოვსკის",
    "ლუნაჩარსკის",
    "ლუქსემბურგის",
    "მაგნიტოგორსკის",
    "მაზნიაშვილის",
    "მაისურაძის",
    "მამარდაშვილის",
    "მამაცაშვილის",
    "მანაგაძის",
    "მანჯგალაძის",
    "მარის",
    "მარუაშვილის",
    "მარქსის",
    "მარჯანის",
    "მატროსოვის",
    "მაჭავარიანი",
    "მახალდიანის",
    "მახარაძის",
    "მებაღიშვილის",
    "მეგობრობის",
    "მელაანის",
    "მერკვილაძის",
    "მესხიას",
    "მესხის",
    "მეტეხის",
    "მეტრეველი",
    "მეჩნიკოვის",
    "მთავარანგელოზის",
    "მიასნიკოვის",
    "მილორავას",
    "მიმინოშვილის",
    "მიროტაძის",
    "მიქატაძის",
    "მიქელაძის",
    "მონტინის",
    "მორეტის",
    "მოსკოვის",
    "მრევლიშვილის",
    "მუშკორის",
    "მუჯირიშვილის",
    "მშვიდობის",
    "მცხეთის",
    "ნადირაძის",
    "ნაკაშიძის",
    "ნარიმანოვის",
    "ნასიძის",
    "ნაფარეულის",
    "ნეკრასოვის",
    "ნიაღვრის",
    "ნინიძის",
    "ნიშნიანიძის",
    "ობოლაძის",
    "ონიანის",
    "ოჟიოს",
    "ორახელაშვილის",
    "ორბელიანის",
    "ორჯონიკიძის",
    "ოქტომბრის",
    "ოცდაექვსი",
    "პავლოვის",
    "პარალელურის",
    "პარიზის",
    "პეკინის",
    "პეროვსკაიას",
    "პეტეფის",
    "პიონერის",
    "პირველი",
    "პისარევის",
    "პლეხანოვის",
    "პრავდის",
    "პროლეტარიატის",
    "ჟელიაბოვის",
    "ჟვანიას",
    "ჟორდანიას",
    "ჟღენტი",
    "ჟღენტის",
    "რადიანის",
    "რამიშვილი",
    "რასკოვას",
    "რენინგერის",
    "რინგის",
    "რიჟინაშვილის",
    "რობაქიძის",
    "რობესპიერის",
    "რუსის",
    "რუხაძის",
    "რჩეულიშვილის",
    "სააკაძის",
    "საბადურის",
    "საბაშვილის",
    "საბურთალოს",
    "საბჭოს",
    "საგურამოს",
    "სამრეკლოს",
    "სამღერეთის",
    "სანაკოევის",
    "სარაჯიშვილის",
    "საჯაიას",
    "სევასტოპოლის",
    "სერგი",
    "სვანიძის",
    "სვერდლოვის",
    "სტახანოვის",
    "სულთნიშნის",
    "სურგულაძის",
    "სხირტლაძის",
    "ტაბიძის",
    "ტატიშვილის",
    "ტელმანის",
    "ტერევერკოს",
    "ტეტელაშვილის",
    "ტოვსტონოგოვის",
    "ტოროშელიძის",
    "ტრაქტორის",
    "ტრიკოტაჟის",
    "ტურბინის",
    "უბილავას",
    "უბინაშვილის",
    "უზნაძის",
    "უკლებას",
    "ულიანოვის",
    "ურიდიას",
    "ფაბრიციუსის",
    "ფაღავას",
    "ფერისცვალების",
    "ფიგნერის",
    "ფიზკულტურის",
    "ფიოლეტოვის",
    "ფიფიების",
    "ფოცხიშვილის",
    "ქართველიშვილის",
    "ქართლელიშვილის",
    "ქინქლაძის",
    "ქიქოძის",
    "ქსოვრელის",
    "ქუთათელაძის",
    "ქუთათელის",
    "ქურდიანის",
    "ღოღობერიძის",
    "ღუდუშაურის",
    "ყავლაშვილის",
    "ყაზბეგის",
    "ყარყარაშვილის",
    "ყიფიანის",
    "ყუშიტაშვილის",
    "შანიძის",
    "შარტავას",
    "შატილოვის",
    "შაუმიანის",
    "შენგელაიას",
    "შერვაშიძის",
    "შეროზიას",
    "შირშოვის",
    "შმიდტის",
    "შრომის",
    "შუშინის",
    "შჩორსის",
    "ჩალაუბნის",
    "ჩანტლაძის",
    "ჩაპაევის",
    "ჩაჩავას",
    "ჩელუსკინელების",
    "ჩერნიახოვსკის",
    "ჩერქეზიშვილი",
    "ჩერქეზიშვილის",
    "ჩვიდმეტი",
    "ჩიტაიას",
    "ჩიტაძის",
    "ჩიქვანაიას",
    "ჩიქობავას",
    "ჩიხლაძის",
    "ჩოდრიშვილის",
    "ჩოლოყაშვილის",
    "ჩუღურეთის",
    "ცაბაძის",
    "ცაგარელის",
    "ცეტკინის",
    "ცინცაძის",
    "ცისკარიშვილის",
    "ცურტაველის",
    "ცქიტიშვილის",
    "ცხაკაიას",
    "ძმობის",
    "ძნელაძის",
    "წერეთლის",
    "წითელი",
    "წითელწყაროს",
    "წინამძღვრიშვილის",
    "წულაძის",
    "წულუკიძის",
    "ჭაბუკიანის",
    "ჭავჭავაძის",
    "ჭანტურიას",
    "ჭოველიძის",
    "ჭონქაძის",
    "ჭყონდიდელის",
    "ხანძთელის",
    "ხვამლის",
    "ხვინგიას",
    "ხვიჩიას",
    "ხიმშიაშვილის",
    "ხმელნიცკის",
    "ხორნაბუჯის",
    "ხრამჰესის",
    "ხუციშვილის",
    "ჯავახიშვილის",
    "ჯაფარიძის",
    "ჯიბლაძის",
    "ჯორჯიაშვილის"
  ];
});

// node_modules/faker/lib/locales/ge/address/street_name.js
var require_street_name10 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_title} #{street_suffix}"
  ];
});

// node_modules/faker/lib/locales/ge/address/street_address.js
var require_street_address9 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_name} #{building_number}"
  ];
});

// node_modules/faker/lib/locales/ge/address/default_country.js
var require_default_country18 = __commonJS((exports, module) => {
  module["exports"] = [
    "საქართველო"
  ];
});

// node_modules/faker/lib/locales/ge/address/index.js
var require_address19 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.city_prefix = require_city_prefix6();
  address.city_suffix = require_city_suffix4();
  address.city = require_city10();
  address.country = require_country8();
  address.building_number = require_building_number11();
  address.street_suffix = require_street_suffix8();
  address.secondary_address = require_secondary_address9();
  address.postcode = require_postcode16();
  address.city_name = require_city_name5();
  address.street_title = require_street_title2();
  address.street_name = require_street_name10();
  address.street_address = require_street_address9();
  address.default_country = require_default_country18();
});

// node_modules/faker/lib/locales/ge/internet/free_email.js
var require_free_email12 = __commonJS((exports, module) => {
  module["exports"] = [
    "gmail.com",
    "yahoo.com",
    "posta.ge"
  ];
});

// node_modules/faker/lib/locales/ge/internet/domain_suffix.js
var require_domain_suffix18 = __commonJS((exports, module) => {
  module["exports"] = [
    "ge",
    "com",
    "net",
    "org",
    "com.ge",
    "org.ge"
  ];
});

// node_modules/faker/lib/locales/ge/internet/index.js
var require_internet19 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.free_email = require_free_email12();
  internet.domain_suffix = require_domain_suffix18();
});

// node_modules/faker/lib/locales/ge/company/prefix.js
var require_prefix12 = __commonJS((exports, module) => {
  module["exports"] = [
    "შპს",
    "სს",
    "ააიპ",
    "სსიპ"
  ];
});

// node_modules/faker/lib/locales/ge/company/suffix.js
var require_suffix18 = __commonJS((exports, module) => {
  module["exports"] = [
    "ჯგუფი",
    "და კომპანია",
    "სტუდია",
    "გრუპი"
  ];
});

// node_modules/faker/lib/locales/ge/company/name.js
var require_name35 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{prefix} #{Name.first_name}",
    "#{prefix} #{Name.last_name}",
    "#{prefix} #{Name.last_name} #{suffix}",
    "#{prefix} #{Name.first_name} #{suffix}",
    "#{prefix} #{Name.last_name}-#{Name.last_name}"
  ];
});

// node_modules/faker/lib/locales/ge/company/index.js
var require_company14 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.prefix = require_prefix12();
  company.suffix = require_suffix18();
  company.name = require_name35();
});

// node_modules/faker/lib/locales/ge/phone_number/formats.js
var require_formats25 = __commonJS((exports, module) => {
  module["exports"] = [
    "5##-###-###",
    "5########",
    "5## ## ## ##",
    "5## ######",
    "5## ### ###",
    "995 5##-###-###",
    "995 5########",
    "995 5## ## ## ##",
    "995 5## ######",
    "995 5## ### ###",
    "+995 5##-###-###",
    "+995 5########",
    "+995 5## ## ## ##",
    "+995 5## ######",
    "+995 5## ### ###",
    "(+995) 5##-###-###",
    "(+995) 5########",
    "(+995) 5## ## ## ##",
    "(+995) 5## ######",
    "(+995) 5## ### ###"
  ];
});

// node_modules/faker/lib/locales/ge/phone_number/index.js
var require_phone_number18 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats25();
});

// node_modules/faker/lib/locales/ge/cell_phone/formats.js
var require_formats24 = __commonJS((exports, module) => {
  module["exports"] = [
    "(+995 32) 2-##-##-##",
    "032-2-##-##-##",
    "032-2-######",
    "032-2-###-###",
    "032 2 ## ## ##",
    "032 2 ######",
    "2 ## ## ##",
    "2######",
    "2 ### ###"
  ];
});

// node_modules/faker/lib/locales/ge/cell_phone/index.js
var require_cell_phone8 = __commonJS((exports, module) => {
  var cell_phone = {};
  module["exports"] = cell_phone;
  cell_phone.formats = require_formats24();
});

// node_modules/faker/lib/locales/ge/index.js
var require_ge = __commonJS((exports, module) => {
  var ge = {};
  module["exports"] = ge;
  ge.title = "Georgian";
  ge.separator = " და ";
  ge.name = require_name36();
  ge.address = require_address19();
  ge.internet = require_internet19();
  ge.company = require_company14();
  ge.phone_number = require_phone_number18();
  ge.cell_phone = require_cell_phone8();
});

// node_modules/faker/lib/locales/id_ID/address/building_number.js
var require_building_number12 = __commonJS((exports, module) => {
  module["exports"] = [
    "##",
    "#"
  ];
});

// node_modules/faker/lib/locales/id_ID/address/postcode.js
var require_postcode17 = __commonJS((exports, module) => {
  module["exports"] = [
    "#####"
  ];
});

// node_modules/faker/lib/locales/id_ID/address/state.js
var require_state14 = __commonJS((exports, module) => {
  module["exports"] = [
    "Aceh",
    "Sumatera Utara",
    "Sumatera Barat",
    "Jambi",
    "Bangka Belitung",
    "Riau",
    "Kepulauan Riau",
    "Bengkulu",
    "Sumatera Selatan",
    "Lampung",
    "Banten",
    "DKI Jakarta",
    "Jawa Barat",
    "Jawa Tengah",
    "Jawa Timur",
    "Nusa Tenggara Timur",
    "DI Yogyakarta",
    "Bali",
    "Nusa Tenggara Barat",
    "Kalimantan Barat",
    "Kalimantan Tengah",
    "Kalimantan Selatan",
    "Kalimantan Timur",
    "Kalimantan Utara",
    "Sulawesi Selatan",
    "Sulawesi Utara",
    "Gorontalo",
    "Sulawesi Tengah",
    "Sulawesi Barat",
    "Sulawesi Tenggara",
    "Maluku",
    "Maluku Utara",
    "Papua Barat",
    "Papua"
  ];
});

// node_modules/faker/lib/locales/id_ID/address/city_name.js
var require_city_name6 = __commonJS((exports, module) => {
  module["exports"] = [
    "Airmadidi",
    "Ampana",
    "Amurang",
    "Andolo",
    "Banggai",
    "Bantaeng",
    "Barru",
    "Bau-Bau",
    "Benteng",
    "Bitung",
    "Bolaang Uki",
    "Boroko",
    "Bulukumba",
    "Bungku",
    "Buol",
    "Buranga",
    "Donggala",
    "Enrekang",
    "Gorontalo",
    "Jeneponto",
    "Kawangkoan",
    "Kendari",
    "Kolaka",
    "Kotamobagu",
    "Kota Raha",
    "Kwandang",
    "Lasusua",
    "Luwuk",
    "Majene",
    "Makale",
    "Makassar",
    "Malili",
    "Mamasa",
    "Mamuju",
    "Manado",
    "Marisa",
    "Maros",
    "Masamba",
    "Melonguane",
    "Ondong Siau",
    "Palopo",
    "Palu",
    "Pangkajene",
    "Pare-Pare",
    "Parigi",
    "Pasangkayu",
    "Pinrang",
    "Polewali",
    "Poso",
    "Rantepao",
    "Ratahan",
    "Rumbia",
    "Sengkang",
    "Sidenreng",
    "Sigi Biromaru",
    "Sinjai",
    "Sunggu Minasa",
    "Suwawa",
    "Tahuna",
    "Takalar",
    "Tilamuta",
    "Toli Toli",
    "Tomohon",
    "Tondano",
    "Tutuyan",
    "Unaaha",
    "Wangi Wangi",
    "Wanggudu",
    "Watampone",
    "Watan Soppeng",
    "Ambarawa",
    "Anyer",
    "Bandung",
    "Bangil",
    "Banjar (Jawa Barat)",
    "Banjarnegara",
    "Bangkalan",
    "Bantul",
    "Banyumas",
    "Banyuwangi",
    "Batang",
    "Batu",
    "Bekasi",
    "Blitar",
    "Blora",
    "Bogor",
    "Bojonegoro",
    "Bondowoso",
    "Boyolali",
    "Bumiayu",
    "Brebes",
    "Caruban",
    "Cianjur",
    "Ciamis",
    "Cibinong",
    "Cikampek",
    "Cikarang",
    "Cilacap",
    "Cilegon",
    "Cirebon",
    "Demak",
    "Depok",
    "Garut",
    "Gresik",
    "Indramayu",
    "Jakarta",
    "Jember",
    "Jepara",
    "Jombang",
    "Kajen",
    "Karanganyar",
    "Kebumen",
    "Kediri",
    "Kendal",
    "Kepanjen",
    "Klaten",
    "Pelabuhan Ratu",
    "Kraksaan",
    "Kudus",
    "Kuningan",
    "Lamongan",
    "Lumajang",
    "Madiun",
    "Magelang",
    "Magetan",
    "Majalengka",
    "Malang",
    "Mojokerto",
    "Mojosari",
    "Mungkid",
    "Ngamprah",
    "Nganjuk",
    "Ngawi",
    "Pacitan",
    "Pamekasan",
    "Pandeglang",
    "Pare",
    "Pati",
    "Pasuruan",
    "Pekalongan",
    "Pemalang",
    "Ponorogo",
    "Probolinggo",
    "Purbalingga",
    "Purwakarta",
    "Purwodadi",
    "Purwokerto",
    "Purworejo",
    "Rangkasbitung",
    "Rembang",
    "Salatiga",
    "Sampang",
    "Semarang",
    "Serang",
    "Sidayu",
    "Sidoarjo",
    "Singaparna",
    "Situbondo",
    "Slawi",
    "Sleman",
    "Soreang",
    "Sragen",
    "Subang",
    "Sukabumi",
    "Sukoharjo",
    "Sumber",
    "Sumedang",
    "Sumenep",
    "Surabaya",
    "Surakarta",
    "Tasikmalaya",
    "Tangerang",
    "Tangerang Selatan",
    "Tegal",
    "Temanggung",
    "Tigaraksa",
    "Trenggalek",
    "Tuban",
    "Tulungagung",
    "Ungaran",
    "Wates",
    "Wlingi",
    "Wonogiri",
    "Wonosari",
    "Wonosobo",
    "Yogyakarta",
    "Atambua",
    "Baa",
    "Badung",
    "Bajawa",
    "Bangli",
    "Bima",
    "Denpasar",
    "Dompu",
    "Ende",
    "Gianyar",
    "Kalabahi",
    "Karangasem",
    "Kefamenanu",
    "Klungkung",
    "Kupang",
    "Labuhan Bajo",
    "Larantuka",
    "Lewoleba",
    "Maumere",
    "Mataram",
    "Mbay",
    "Negara",
    "Praya",
    "Raba",
    "Ruteng",
    "Selong",
    "Singaraja",
    "Soe",
    "Sumbawa Besar",
    "Tabanan",
    "Taliwang",
    "Tambolaka",
    "Tanjung",
    "Waibakul",
    "Waikabubak",
    "Waingapu",
    "Denpasar",
    "Negara,Bali",
    "Singaraja",
    "Tabanan",
    "Bangli"
  ];
});

// node_modules/faker/lib/locales/id_ID/address/city.js
var require_city11 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{city_name}"
  ];
});

// node_modules/faker/lib/locales/id_ID/address/street_prefix.js
var require_street_prefix2 = __commonJS((exports, module) => {
  module["exports"] = [
    "Ds.",
    "Dk.",
    "Gg.",
    "Jln.",
    "Jr.",
    "Kpg.",
    "Ki.",
    "Psr."
  ];
});

// node_modules/faker/lib/locales/id_ID/address/street_name.js
var require_street_name11 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_prefix} #{Name.first_name}",
    "#{street_prefix} #{Name.last_name}"
  ];
});

// node_modules/faker/lib/locales/id_ID/address/street_address.js
var require_street_address10 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_name} no #{building_number}"
  ];
});

// node_modules/faker/lib/locales/id_ID/address/default_country.js
var require_default_country19 = __commonJS((exports, module) => {
  module["exports"] = [
    "Indonesia"
  ];
});

// node_modules/faker/lib/locales/id_ID/address/index.js
var require_address20 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.building_number = require_building_number12();
  address.postcode = require_postcode17();
  address.state = require_state14();
  address.city_name = require_city_name6();
  address.city = require_city11();
  address.street_prefix = require_street_prefix2();
  address.street_name = require_street_name11();
  address.street_address = require_street_address10();
  address.default_country = require_default_country19();
});

// node_modules/faker/lib/locales/id_ID/company/prefix.js
var require_prefix14 = __commonJS((exports, module) => {
  module["exports"] = [
    "PT",
    "CV",
    "UD",
    "PD",
    "Perum"
  ];
});

// node_modules/faker/lib/locales/id_ID/company/suffix.js
var require_suffix19 = __commonJS((exports, module) => {
  module["exports"] = [
    "(Persero) Tbk",
    "Tbk"
  ];
});

// node_modules/faker/lib/locales/id_ID/company/name.js
var require_name38 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{prefix} #{Name.last_name}",
    "#{Name.last_name} #{suffix}",
    "#{prefix} #{Name.last_name} #{suffix}"
  ];
});

// node_modules/faker/lib/locales/id_ID/company/index.js
var require_company15 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.prefix = require_prefix14();
  company.suffix = require_suffix19();
  company.name = require_name38();
});

// node_modules/faker/lib/locales/id_ID/internet/free_email.js
var require_free_email13 = __commonJS((exports, module) => {
  module["exports"] = [
    "gmail.com",
    "yahoo.com",
    "gmail.co.id",
    "yahoo.co.id"
  ];
});

// node_modules/faker/lib/locales/id_ID/internet/domain_suffix.js
var require_domain_suffix19 = __commonJS((exports, module) => {
  module["exports"] = [
    "com",
    "net",
    "org",
    "asia",
    "tv",
    "biz",
    "info",
    "in",
    "name",
    "co",
    "ac.id",
    "sch.id",
    "go.id",
    "mil.id",
    "co.id",
    "or.id",
    "web.id",
    "my.id",
    "biz.id",
    "desa.id"
  ];
});

// node_modules/faker/lib/locales/id_ID/internet/index.js
var require_internet20 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.free_email = require_free_email13();
  internet.domain_suffix = require_domain_suffix19();
});

// node_modules/faker/lib/locales/id_ID/date/month.js
var require_month4 = __commonJS((exports, module) => {
  module["exports"] = {
    wide: [
      "Januari",
      "Februari",
      "Maret",
      "April",
      "Mei",
      "Juni",
      "Juli",
      "Agustus",
      "September",
      "Oktober",
      "November",
      "Desember"
    ],
    wide_context: [
      "Januari",
      "Februari",
      "Maret",
      "April",
      "Mei",
      "Juni",
      "Juli",
      "Agustus",
      "September",
      "Oktober",
      "November",
      "Desember"
    ],
    abbr: [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "Mei",
      "Jun",
      "Jul",
      "Ags",
      "Sep",
      "Okt",
      "Nov",
      "Des"
    ],
    abbr_context: [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "Mei",
      "Jun",
      "Jul",
      "Ags",
      "Sep",
      "Okt",
      "Nov",
      "Des"
    ]
  };
});

// node_modules/faker/lib/locales/id_ID/date/weekday.js
var require_weekday4 = __commonJS((exports, module) => {
  module["exports"] = {
    wide: [
      "Minggu",
      "Senin",
      "Selasa",
      "Rabu",
      "Kamis",
      "Jumat",
      "Sabtu"
    ],
    wide_context: [
      "Minggu",
      "Senin",
      "Selasa",
      "Rabu",
      "Kamis",
      "Jumat",
      "Sabtu"
    ],
    abbr: [
      "Min",
      "Sen",
      "Sel",
      "Rab",
      "Kam",
      "Jum",
      "Sab"
    ],
    abbr_context: [
      "Min",
      "Sen",
      "Sel",
      "Rab",
      "Kam",
      "Jum",
      "Sab"
    ]
  };
});

// node_modules/faker/lib/locales/id_ID/date/index.js
var require_date5 = __commonJS((exports, module) => {
  var date2 = {};
  module["exports"] = date2;
  date2.month = require_month4();
  date2.weekday = require_weekday4();
});

// node_modules/faker/lib/locales/id_ID/name/male_first_name.js
var require_male_first_name3 = __commonJS((exports, module) => {
  module["exports"] = [
    "Abyasa",
    "Ade",
    "Adhiarja",
    "Adiarja",
    "Adika",
    "Adikara",
    "Adinata",
    "Aditya",
    "Agus",
    "Ajiman",
    "Ajimat",
    "Ajimin",
    "Ajiono",
    "Akarsana",
    "Alambana",
    "Among",
    "Anggabaya",
    "Anom",
    "Argono",
    "Aris",
    "Arta",
    "Artanto",
    "Artawan",
    "Arsipatra",
    "Asirwada",
    "Asirwanda",
    "Aslijan",
    "Asmadi",
    "Asman",
    "Asmianto",
    "Asmuni",
    "Aswani",
    "Atma",
    "Atmaja",
    "Bagas",
    "Bagiya",
    "Bagus",
    "Bagya",
    "Bahuraksa",
    "Bahuwarna",
    "Bahuwirya",
    "Bajragin",
    "Bakda",
    "Bakiadi",
    "Bakianto",
    "Bakidin",
    "Bakijan",
    "Bakiman",
    "Bakiono",
    "Bakti",
    "Baktiadi",
    "Baktianto",
    "Baktiono",
    "Bala",
    "Balamantri",
    "Balangga",
    "Balapati",
    "Balidin",
    "Balijan",
    "Bambang",
    "Banara",
    "Banawa",
    "Banawi",
    "Bancar",
    "Budi",
    "Cagak",
    "Cager",
    "Cahyadi",
    "Cahyanto",
    "Cahya",
    "Cahyo",
    "Cahyono",
    "Caket",
    "Cakrabirawa",
    "Cakrabuana",
    "Cakrajiya",
    "Cakrawala",
    "Cakrawangsa",
    "Candra",
    "Chandra",
    "Candrakanta",
    "Capa",
    "Caraka",
    "Carub",
    "Catur",
    "Caturangga",
    "Cawisadi",
    "Cawisono",
    "Cawuk",
    "Cayadi",
    "Cecep",
    "Cemani",
    "Cemeti",
    "Cemplunk",
    "Cengkal",
    "Cengkir",
    "Dacin",
    "Dadap",
    "Dadi",
    "Dagel",
    "Daliman",
    "Dalimin",
    "Daliono",
    "Damar",
    "Damu",
    "Danang",
    "Daniswara",
    "Danu",
    "Danuja",
    "Dariati",
    "Darijan",
    "Darimin",
    "Darmaji",
    "Darman",
    "Darmana",
    "Darmanto",
    "Darsirah",
    "Dartono",
    "Daru",
    "Daruna",
    "Daryani",
    "Dasa",
    "Digdaya",
    "Dimas",
    "Dimaz",
    "Dipa",
    "Dirja",
    "Drajat",
    "Dwi",
    "Dono",
    "Dodo",
    "Edi",
    "Eka",
    "Elon",
    "Eluh",
    "Eman",
    "Emas",
    "Embuh",
    "Emong",
    "Empluk",
    "Endra",
    "Enteng",
    "Estiawan",
    "Estiono",
    "Eko",
    "Edi",
    "Edison",
    "Edward",
    "Elvin",
    "Erik",
    "Emil",
    "Ega",
    "Emin",
    "Eja",
    "Gada",
    "Gadang",
    "Gaduh",
    "Gaiman",
    "Galak",
    "Galang",
    "Galar",
    "Galih",
    "Galiono",
    "Galuh",
    "Galur",
    "Gaman",
    "Gamani",
    "Gamanto",
    "Gambira",
    "Gamblang",
    "Ganda",
    "Gandewa",
    "Gandi",
    "Gandi",
    "Ganep",
    "Gangsa",
    "Gangsar",
    "Ganjaran",
    "Gantar",
    "Gara",
    "Garan",
    "Garang",
    "Garda",
    "Gatot",
    "Gatra",
    "Gilang",
    "Galih",
    "Ghani",
    "Gading",
    "Hairyanto",
    "Hardana",
    "Hardi",
    "Harimurti",
    "Harja",
    "Harjasa",
    "Harjaya",
    "Harjo",
    "Harsana",
    "Harsanto",
    "Harsaya",
    "Hartaka",
    "Hartana",
    "Harto",
    "Hasta",
    "Heru",
    "Himawan",
    "Hadi",
    "Halim",
    "Hasim",
    "Hasan",
    "Hendra",
    "Hendri",
    "Heryanto",
    "Hamzah",
    "Hari",
    "Imam",
    "Indra",
    "Irwan",
    "Irsad",
    "Ikhsan",
    "Irfan",
    "Ian",
    "Ibrahim",
    "Ibrani",
    "Ismail",
    "Irnanto",
    "Ilyas",
    "Ibun",
    "Ivan",
    "Ikin",
    "Ihsan",
    "Jabal",
    "Jaeman",
    "Jaga",
    "Jagapati",
    "Jagaraga",
    "Jail",
    "Jaiman",
    "Jaka",
    "Jarwa",
    "Jarwadi",
    "Jarwi",
    "Jasmani",
    "Jaswadi",
    "Jati",
    "Jatmiko",
    "Jaya",
    "Jayadi",
    "Jayeng",
    "Jinawi",
    "Jindra",
    "Joko",
    "Jumadi",
    "Jumari",
    "Jamal",
    "Jamil",
    "Jais",
    "Jefri",
    "Johan",
    "Jono",
    "Kacung",
    "Kajen",
    "Kambali",
    "Kamidin",
    "Kariman",
    "Karja",
    "Karma",
    "Karman",
    "Karna",
    "Karsa",
    "Karsana",
    "Karta",
    "Kasiran",
    "Kasusra",
    "Kawaca",
    "Kawaya",
    "Kayun",
    "Kemba",
    "Kenari",
    "Kenes",
    "Kuncara",
    "Kunthara",
    "Kusuma",
    "Kadir",
    "Kala",
    "Kalim",
    "Kurnia",
    "Kanda",
    "Kardi",
    "Karya",
    "Kasim",
    "Kairav",
    "Kenzie",
    "Kemal",
    "Kamal",
    "Koko",
    "Labuh",
    "Laksana",
    "Lamar",
    "Lanang",
    "Langgeng",
    "Lanjar",
    "Lantar",
    "Lega",
    "Legawa",
    "Lembah",
    "Liman",
    "Limar",
    "Luhung",
    "Lukita",
    "Luluh",
    "Lulut",
    "Lurhur",
    "Luwar",
    "Luwes",
    "Latif",
    "Lasmanto",
    "Lukman",
    "Luthfi",
    "Leo",
    "Luis",
    "Lutfan",
    "Lasmono",
    "Laswi",
    "Mahesa",
    "Makara",
    "Makuta",
    "Manah",
    "Maras",
    "Margana",
    "Mariadi",
    "Marsudi",
    "Martaka",
    "Martana",
    "Martani",
    "Marwata",
    "Maryadi",
    "Maryanto",
    "Mitra",
    "Mujur",
    "Mulya",
    "Mulyanto",
    "Mulyono",
    "Mumpuni",
    "Muni",
    "Mursita",
    "Murti",
    "Mustika",
    "Maman",
    "Mahmud",
    "Mahdi",
    "Mahfud",
    "Malik",
    "Muhammad",
    "Mustofa",
    "Marsito",
    "Mursinin",
    "Nalar",
    "Naradi",
    "Nardi",
    "Niyaga",
    "Nrima",
    "Nugraha",
    "Nyana",
    "Narji",
    "Nasab",
    "Nasrullah",
    "Nasim",
    "Najib",
    "Najam",
    "Nyoman",
    "Olga",
    "Ozy",
    "Omar",
    "Opan",
    "Oskar",
    "Oman",
    "Okto",
    "Okta",
    "Opung",
    "Paiman",
    "Panca",
    "Pangeran",
    "Pangestu",
    "Pardi",
    "Parman",
    "Perkasa",
    "Praba",
    "Prabu",
    "Prabawa",
    "Prabowo",
    "Prakosa",
    "Pranata",
    "Pranawa",
    "Prasetya",
    "Prasetyo",
    "Prayitna",
    "Prayoga",
    "Prayogo",
    "Purwadi",
    "Purwa",
    "Purwanto",
    "Panji",
    "Pandu",
    "Paiman",
    "Prima",
    "Putu",
    "Raden",
    "Raditya",
    "Raharja",
    "Rama",
    "Rangga",
    "Reksa",
    "Respati",
    "Rusman",
    "Rosman",
    "Rahmat",
    "Rahman",
    "Rendy",
    "Reza",
    "Rizki",
    "Ridwan",
    "Rudi",
    "Raden",
    "Radit",
    "Radika",
    "Rafi",
    "Rafid",
    "Raihan",
    "Salman",
    "Saadat",
    "Saiful",
    "Surya",
    "Slamet",
    "Samsul",
    "Soleh",
    "Simon",
    "Sabar",
    "Sabri",
    "Sidiq",
    "Satya",
    "Setya",
    "Saka",
    "Sakti",
    "Taswir",
    "Tedi",
    "Teddy",
    "Taufan",
    "Taufik",
    "Tomi",
    "Tasnim",
    "Teguh",
    "Tasdik",
    "Timbul",
    "Tirta",
    "Tirtayasa",
    "Tri",
    "Tugiman",
    "Umar",
    "Usman",
    "Uda",
    "Umay",
    "Unggul",
    "Utama",
    "Umaya",
    "Upik",
    "Viktor",
    "Vino",
    "Vinsen",
    "Vero",
    "Vega",
    "Viman",
    "Virman",
    "Wahyu",
    "Wira",
    "Wisnu",
    "Wadi",
    "Wardi",
    "Warji",
    "Waluyo",
    "Wakiman",
    "Wage",
    "Wardaya",
    "Warsa",
    "Warsita",
    "Warta",
    "Wasis",
    "Wawan",
    "Xanana",
    "Yahya",
    "Yusuf",
    "Yosef",
    "Yono",
    "Yoga"
  ];
});

// node_modules/faker/lib/locales/id_ID/name/male_last_name.js
var require_male_last_name3 = __commonJS((exports, module) => {
  module["exports"] = [
    "Adriansyah",
    "Ardianto",
    "Anggriawan",
    "Budiman",
    "Budiyanto",
    "Damanik",
    "Dongoran",
    "Dabukke",
    "Firmansyah",
    "Firgantoro",
    "Gunarto",
    "Gunawan",
    "Hardiansyah",
    "Habibi",
    "Hakim",
    "Halim",
    "Haryanto",
    "Hidayat",
    "Hidayanto",
    "Hutagalung",
    "Hutapea",
    "Hutasoit",
    "Irawan",
    "Iswahyudi",
    "Kuswoyo",
    "Januar",
    "Jailani",
    "Kurniawan",
    "Kusumo",
    "Latupono",
    "Lazuardi",
    "Maheswara",
    "Mahendra",
    "Mustofa",
    "Mansur",
    "Mandala",
    "Megantara",
    "Maulana",
    "Maryadi",
    "Mangunsong",
    "Manullang",
    "Marpaung",
    "Marbun",
    "Narpati",
    "Natsir",
    "Nugroho",
    "Najmudin",
    "Nashiruddin",
    "Nainggolan",
    "Nababan",
    "Napitupulu",
    "Pangestu",
    "Putra",
    "Pranowo",
    "Prabowo",
    "Pratama",
    "Prasetya",
    "Prasetyo",
    "Pradana",
    "Pradipta",
    "Prakasa",
    "Permadi",
    "Prasasta",
    "Prayoga",
    "Ramadan",
    "Rajasa",
    "Rajata",
    "Saptono",
    "Santoso",
    "Saputra",
    "Saefullah",
    "Setiawan",
    "Suryono",
    "Suwarno",
    "Siregar",
    "Sihombing",
    "Salahudin",
    "Sihombing",
    "Samosir",
    "Saragih",
    "Sihotang",
    "Simanjuntak",
    "Sinaga",
    "Simbolon",
    "Sitompul",
    "Sitorus",
    "Sirait",
    "Siregar",
    "Situmorang",
    "Tampubolon",
    "Thamrin",
    "Tamba",
    "Tarihoran",
    "Utama",
    "Uwais",
    "Wahyudin",
    "Waluyo",
    "Wibowo",
    "Winarno",
    "Wibisono",
    "Wijaya",
    "Widodo",
    "Wacana",
    "Waskita",
    "Wasita",
    "Zulkarnain"
  ];
});

// node_modules/faker/lib/locales/id_ID/name/female_first_name.js
var require_female_first_name3 = __commonJS((exports, module) => {
  module["exports"] = [
    "Ade",
    "Agnes",
    "Ajeng",
    "Amalia",
    "Anita",
    "Ayu",
    "Aisyah",
    "Ana",
    "Ami",
    "Ani",
    "Azalea",
    "Aurora",
    "Alika",
    "Anastasia",
    "Amelia",
    "Almira",
    "Bella",
    "Betania",
    "Belinda",
    "Citra",
    "Cindy",
    "Chelsea",
    "Clara",
    "Cornelia",
    "Cinta",
    "Cinthia",
    "Ciaobella",
    "Cici",
    "Carla",
    "Calista",
    "Devi",
    "Dewi",
    "Dian",
    "Diah",
    "Diana",
    "Dina",
    "Dinda",
    "Dalima",
    "Eka",
    "Eva",
    "Endah",
    "Elisa",
    "Eli",
    "Ella",
    "Ellis",
    "Elma",
    "Elvina",
    "Fitria",
    "Fitriani",
    "Febi",
    "Faizah",
    "Farah",
    "Farhunnisa",
    "Fathonah",
    "Gabriella",
    "Gasti",
    "Gawati",
    "Genta",
    "Ghaliyati",
    "Gina",
    "Gilda",
    "Halima",
    "Hesti",
    "Hilda",
    "Hafshah",
    "Hamima",
    "Hana",
    "Hani",
    "Hasna",
    "Humaira",
    "Ika",
    "Indah",
    "Intan",
    "Irma",
    "Icha",
    "Ida",
    "Ifa",
    "Ilsa",
    "Ina",
    "Ira",
    "Iriana",
    "Jamalia",
    "Janet",
    "Jane",
    "Julia",
    "Juli",
    "Jessica",
    "Jasmin",
    "Jelita",
    "Kamaria",
    "Kamila",
    "Kani",
    "Karen",
    "Karimah",
    "Kartika",
    "Kasiyah",
    "Keisha",
    "Kezia",
    "Kiandra",
    "Kayla",
    "Kania",
    "Lala",
    "Lalita",
    "Latika",
    "Laila",
    "Laras",
    "Lidya",
    "Lili",
    "Lintang",
    "Maria",
    "Mala",
    "Maya",
    "Maida",
    "Maimunah",
    "Melinda",
    "Mila",
    "Mutia",
    "Michelle",
    "Malika",
    "Nadia",
    "Nadine",
    "Nabila",
    "Natalia",
    "Novi",
    "Nova",
    "Nurul",
    "Nilam",
    "Najwa",
    "Olivia",
    "Ophelia",
    "Oni",
    "Oliva",
    "Padma",
    "Putri",
    "Paramita",
    "Paris",
    "Patricia",
    "Paulin",
    "Puput",
    "Puji",
    "Pia",
    "Puspa",
    "Puti",
    "Putri",
    "Padmi",
    "Qori",
    "Queen",
    "Ratih",
    "Ratna",
    "Restu",
    "Rini",
    "Rika",
    "Rina",
    "Rahayu",
    "Rahmi",
    "Rachel",
    "Rahmi",
    "Raisa",
    "Raina",
    "Sarah",
    "Sari",
    "Siti",
    "Siska",
    "Suci",
    "Syahrini",
    "Septi",
    "Sadina",
    "Safina",
    "Sakura",
    "Salimah",
    "Salwa",
    "Salsabila",
    "Samiah",
    "Shania",
    "Sabrina",
    "Silvia",
    "Shakila",
    "Talia",
    "Tami",
    "Tira",
    "Tiara",
    "Titin",
    "Tania",
    "Tina",
    "Tantri",
    "Tari",
    "Titi",
    "Uchita",
    "Unjani",
    "Ulya",
    "Uli",
    "Ulva",
    "Umi",
    "Usyi",
    "Vanya",
    "Vanesa",
    "Vivi",
    "Vera",
    "Vicky",
    "Victoria",
    "Violet",
    "Winda",
    "Widya",
    "Wulan",
    "Wirda",
    "Wani",
    "Yani",
    "Yessi",
    "Yulia",
    "Yuliana",
    "Yuni",
    "Yunita",
    "Yance",
    "Zahra",
    "Zalindra",
    "Zaenab",
    "Zulfa",
    "Zizi",
    "Zulaikha",
    "Zamira",
    "Zelda",
    "Zelaya"
  ];
});

// node_modules/faker/lib/locales/id_ID/name/female_last_name.js
var require_female_last_name3 = __commonJS((exports, module) => {
  module["exports"] = [
    "Agustina",
    "Andriani",
    "Anggraini",
    "Aryani",
    "Astuti",
    "Fujiati",
    "Farida",
    "Handayani",
    "Hassanah",
    "Hartati",
    "Hasanah",
    "Haryanti",
    "Hariyah",
    "Hastuti",
    "Halimah",
    "Kusmawati",
    "Kuswandari",
    "Laksmiwati",
    "Laksita",
    "Lestari",
    "Lailasari",
    "Mandasari",
    "Mardhiyah",
    "Mayasari",
    "Melani",
    "Mulyani",
    "Maryati",
    "Nurdiyanti",
    "Novitasari",
    "Nuraini",
    "Nasyidah",
    "Nasyiah",
    "Namaga",
    "Palastri",
    "Pudjiastuti",
    "Puspasari",
    "Puspita",
    "Purwanti",
    "Pratiwi",
    "Purnawati",
    "Pertiwi",
    "Permata",
    "Prastuti",
    "Padmasari",
    "Rahmawati",
    "Rahayu",
    "Riyanti",
    "Rahimah",
    "Suartini",
    "Sudiati",
    "Suryatmi",
    "Susanti",
    "Safitri",
    "Oktaviani",
    "Utami",
    "Usamah",
    "Usada",
    "Uyainah",
    "Yuniar",
    "Yuliarti",
    "Yulianti",
    "Yolanda",
    "Wahyuni",
    "Wijayanti",
    "Widiastuti",
    "Winarsih",
    "Wulandari",
    "Wastuti",
    "Zulaika"
  ];
});

// node_modules/faker/lib/locales/id_ID/name/prefix.js
var require_prefix15 = __commonJS((exports, module) => {
  module["exports"] = [];
});

// node_modules/faker/lib/locales/id_ID/name/suffix.js
var require_suffix20 = __commonJS((exports, module) => {
  module["exports"] = [
    "S.Ked",
    "S.Gz",
    "S.Pt",
    "S.IP",
    "S.E.I",
    "S.E.",
    "S.Kom",
    "S.H.",
    "S.T.",
    "S.Pd",
    "S.Psi",
    "S.I.Kom",
    "S.Sos",
    "S.Farm",
    "M.M.",
    "M.Kom.",
    "M.TI.",
    "M.Pd",
    "M.Farm",
    "M.Ak"
  ];
});

// node_modules/faker/lib/locales/id_ID/name/name.js
var require_name40 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{male_first_name} #{male_last_name}",
    "#{male_last_name} #{male_first_name}",
    "#{male_first_name} #{male_first_name} #{male_last_name}",
    "#{female_first_name} #{female_last_name}",
    "#{female_first_name} #{male_last_name}",
    "#{female_last_name} #{female_first_name}",
    "#{female_first_name} #{female_first_name} #{female_last_name}"
  ];
});

// node_modules/faker/lib/locales/id_ID/name/index.js
var require_name39 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.male_first_name = require_male_first_name3();
  name2.male_last_name = require_male_last_name3();
  name2.female_first_name = require_female_first_name3();
  name2.female_last_name = require_female_last_name3();
  name2.prefix = require_prefix15();
  name2.suffix = require_suffix20();
  name2.name = require_name40();
});

// node_modules/faker/lib/locales/id_ID/phone_number/formats.js
var require_formats26 = __commonJS((exports, module) => {
  module["exports"] = [
    "02# #### ###",
    "02## #### ###",
    "03## #### ###",
    "04## #### ###",
    "05## #### ###",
    "06## #### ###",
    "07## #### ###",
    "09## #### ###",
    "02# #### ####",
    "02## #### ####",
    "03## #### ####",
    "04## #### ####",
    "05## #### ####",
    "06## #### ####",
    "07## #### ####",
    "09## #### ####",
    "08## ### ###",
    "08## #### ###",
    "08## #### ####",
    "(+62) 8## ### ###",
    "(+62) 2# #### ###",
    "(+62) 2## #### ###",
    "(+62) 3## #### ###",
    "(+62) 4## #### ###",
    "(+62) 5## #### ###",
    "(+62) 6## #### ###",
    "(+62) 7## #### ###",
    "(+62) 8## #### ###",
    "(+62) 9## #### ###",
    "(+62) 2# #### ####",
    "(+62) 2## #### ####",
    "(+62) 3## #### ####",
    "(+62) 4## #### ####",
    "(+62) 5## #### ####",
    "(+62) 6## #### ####",
    "(+62) 7## #### ####",
    "(+62) 8## #### ####",
    "(+62) 9## #### ####"
  ];
});

// node_modules/faker/lib/locales/id_ID/phone_number/index.js
var require_phone_number19 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats26();
});

// node_modules/faker/lib/locales/id_ID/index.js
var require_id_ID = __commonJS((exports, module) => {
  var id = {};
  module["exports"] = id;
  id.title = "Indonesia";
  id.address = require_address20();
  id.company = require_company15();
  id.internet = require_internet20();
  id.date = require_date5();
  id.name = require_name39();
  id.phone_number = require_phone_number19();
});

// node_modules/faker/lib/locales/it/address/city_prefix.js
var require_city_prefix7 = __commonJS((exports, module) => {
  module["exports"] = [
    "San",
    "Borgo",
    "Sesto",
    "Quarto",
    "Settimo"
  ];
});

// node_modules/faker/lib/locales/it/address/city_suffix.js
var require_city_suffix5 = __commonJS((exports, module) => {
  module["exports"] = [
    "a mare",
    "lido",
    "ligure",
    "del friuli",
    "salentino",
    "calabro",
    "veneto",
    "nell'emilia",
    "umbro",
    "laziale",
    "terme",
    "sardo"
  ];
});

// node_modules/faker/lib/locales/it/address/country.js
var require_country9 = __commonJS((exports, module) => {
  module["exports"] = [
    "Afghanistan",
    "Albania",
    "Algeria",
    "American Samoa",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antartide (territori a sud del 60° parallelo)",
    "Antigua e Barbuda",
    "Argentina",
    "Armenia",
    "Aruba",
    "Australia",
    "Austria",
    "Azerbaijan",
    "Bahamas",
    "Bahrain",
    "Bangladesh",
    "Barbados",
    "Bielorussia",
    "Belgio",
    "Belize",
    "Benin",
    "Bermuda",
    "Bhutan",
    "Bolivia",
    "Bosnia e Herzegovina",
    "Botswana",
    "Bouvet Island (Bouvetoya)",
    "Brasile",
    "Territorio dell'arcipelago indiano",
    "Isole Vergini Britanniche",
    "Brunei Darussalam",
    "Bulgaria",
    "Burkina Faso",
    "Burundi",
    "Cambogia",
    "Cameroon",
    "Canada",
    "Capo Verde",
    "Isole Cayman",
    "Repubblica Centrale Africana",
    "Chad",
    "Cile",
    "Cina",
    "Isola di Pasqua",
    "Isola di Cocos (Keeling)",
    "Colombia",
    "Comoros",
    "Congo",
    "Isole Cook",
    "Costa Rica",
    "Costa d'Avorio",
    "Croazia",
    "Cuba",
    "Cipro",
    "Repubblica Ceca",
    "Danimarca",
    "Gibuti",
    "Repubblica Dominicana",
    "Equador",
    "Egitto",
    "El Salvador",
    "Guinea Equatoriale",
    "Eritrea",
    "Estonia",
    "Etiopia",
    "Isole Faroe",
    "Isole Falkland (Malvinas)",
    "Fiji",
    "Finlandia",
    "Francia",
    "Guyana Francese",
    "Polinesia Francese",
    "Territori Francesi del sud",
    "Gabon",
    "Gambia",
    "Georgia",
    "Germania",
    "Ghana",
    "Gibilterra",
    "Grecia",
    "Groenlandia",
    "Grenada",
    "Guadalupa",
    "Guam",
    "Guatemala",
    "Guernsey",
    "Guinea",
    "Guinea-Bissau",
    "Guyana",
    "Haiti",
    "Heard Island and McDonald Islands",
    "Città del Vaticano",
    "Honduras",
    "Hong Kong",
    "Ungheria",
    "Islanda",
    "India",
    "Indonesia",
    "Iran",
    "Iraq",
    "Irlanda",
    "Isola di Man",
    "Israele",
    "Italia",
    "Giamaica",
    "Giappone",
    "Jersey",
    "Giordania",
    "Kazakhstan",
    "Kenya",
    "Kiribati",
    "Korea",
    "Kuwait",
    "Republicca Kirgiza",
    "Repubblica del Laos",
    "Latvia",
    "Libano",
    "Lesotho",
    "Liberia",
    "Libyan Arab Jamahiriya",
    "Liechtenstein",
    "Lituania",
    "Lussemburgo",
    "Macao",
    "Macedonia",
    "Madagascar",
    "Malawi",
    "Malesia",
    "Maldive",
    "Mali",
    "Malta",
    "Isole Marshall",
    "Martinica",
    "Mauritania",
    "Mauritius",
    "Mayotte",
    "Messico",
    "Micronesia",
    "Moldova",
    "Principato di Monaco",
    "Mongolia",
    "Montenegro",
    "Montserrat",
    "Marocco",
    "Mozambico",
    "Myanmar",
    "Namibia",
    "Nauru",
    "Nepal",
    "Antille Olandesi",
    "Olanda",
    "Nuova Caledonia",
    "Nuova Zelanda",
    "Nicaragua",
    "Niger",
    "Nigeria",
    "Niue",
    "Isole Norfolk",
    "Northern Mariana Islands",
    "Norvegia",
    "Oman",
    "Pakistan",
    "Palau",
    "Palestina",
    "Panama",
    "Papua Nuova Guinea",
    "Paraguay",
    "Peru",
    "Filippine",
    "Pitcairn Islands",
    "Polonia",
    "Portogallo",
    "Porto Rico",
    "Qatar",
    "Reunion",
    "Romania",
    "Russia",
    "Rwanda",
    "San Bartolomeo",
    "Sant'Elena",
    "Saint Kitts and Nevis",
    "Saint Lucia",
    "Saint Martin",
    "Saint Pierre and Miquelon",
    "Saint Vincent and the Grenadines",
    "Samoa",
    "San Marino",
    "Sao Tome and Principe",
    "Arabia Saudita",
    "Senegal",
    "Serbia",
    "Seychelles",
    "Sierra Leone",
    "Singapore",
    "Slovenia",
    "Isole Solomon",
    "Somalia",
    "Sud Africa",
    "Georgia del sud e South Sandwich Islands",
    "Spagna",
    "Sri Lanka",
    "Sudan",
    "Suriname",
    "Svalbard & Jan Mayen Islands",
    "Swaziland",
    "Svezia",
    "Svizzera",
    "Siria",
    "Taiwan",
    "Tajikistan",
    "Tanzania",
    "Tailandia",
    "Timor-Leste",
    "Togo",
    "Tokelau",
    "Tonga",
    "Trinidad e Tobago",
    "Tunisia",
    "Turchia",
    "Turkmenistan",
    "Isole di Turks and Caicos",
    "Tuvalu",
    "Uganda",
    "Ucraina",
    "Emirati Arabi Uniti",
    "Regno Unito",
    "Stati Uniti d'America",
    "United States Minor Outlying Islands",
    "Isole Vergini Statunitensi",
    "Uruguay",
    "Uzbekistan",
    "Vanuatu",
    "Venezuela",
    "Vietnam",
    "Wallis and Futuna",
    "Western Sahara",
    "Yemen",
    "Zambia",
    "Zimbabwe"
  ];
});

// node_modules/faker/lib/locales/it/address/building_number.js
var require_building_number13 = __commonJS((exports, module) => {
  module["exports"] = [
    "###",
    "##",
    "#"
  ];
});

// node_modules/faker/lib/locales/it/address/street_suffix.js
var require_street_suffix9 = __commonJS((exports, module) => {
  module["exports"] = [
    "Piazza",
    "Strada",
    "Via",
    "Borgo",
    "Contrada",
    "Rotonda",
    "Incrocio"
  ];
});

// node_modules/faker/lib/locales/it/address/secondary_address.js
var require_secondary_address10 = __commonJS((exports, module) => {
  module["exports"] = [
    "Appartamento ##",
    "Piano #"
  ];
});

// node_modules/faker/lib/locales/it/address/postcode.js
var require_postcode18 = __commonJS((exports, module) => {
  module["exports"] = [
    "#####"
  ];
});

// node_modules/faker/lib/locales/it/address/state.js
var require_state15 = __commonJS((exports, module) => {
  module["exports"] = [
    "Agrigento",
    "Alessandria",
    "Ancona",
    "Aosta",
    "Arezzo",
    "Ascoli Piceno",
    "Asti",
    "Avellino",
    "Bari",
    "Barletta-Andria-Trani",
    "Belluno",
    "Benevento",
    "Bergamo",
    "Biella",
    "Bologna",
    "Bolzano",
    "Brescia",
    "Brindisi",
    "Cagliari",
    "Caltanissetta",
    "Campobasso",
    "Carbonia-Iglesias",
    "Caserta",
    "Catania",
    "Catanzaro",
    "Chieti",
    "Como",
    "Cosenza",
    "Cremona",
    "Crotone",
    "Cuneo",
    "Enna",
    "Fermo",
    "Ferrara",
    "Firenze",
    "Foggia",
    "Forlì-Cesena",
    "Frosinone",
    "Genova",
    "Gorizia",
    "Grosseto",
    "Imperia",
    "Isernia",
    "La Spezia",
    "L'Aquila",
    "Latina",
    "Lecce",
    "Lecco",
    "Livorno",
    "Lodi",
    "Lucca",
    "Macerata",
    "Mantova",
    "Massa-Carrara",
    "Matera",
    "Messina",
    "Milano",
    "Modena",
    "Monza e della Brianza",
    "Napoli",
    "Novara",
    "Nuoro",
    "Olbia-Tempio",
    "Oristano",
    "Padova",
    "Palermo",
    "Parma",
    "Pavia",
    "Perugia",
    "Pesaro e Urbino",
    "Pescara",
    "Piacenza",
    "Pisa",
    "Pistoia",
    "Pordenone",
    "Potenza",
    "Prato",
    "Ragusa",
    "Ravenna",
    "Reggio Calabria",
    "Reggio Emilia",
    "Rieti",
    "Rimini",
    "Roma",
    "Rovigo",
    "Salerno",
    "Medio Campidano",
    "Sassari",
    "Savona",
    "Siena",
    "Siracusa",
    "Sondrio",
    "Taranto",
    "Teramo",
    "Terni",
    "Torino",
    "Ogliastra",
    "Trapani",
    "Trento",
    "Treviso",
    "Trieste",
    "Udine",
    "Varese",
    "Venezia",
    "Verbano-Cusio-Ossola",
    "Vercelli",
    "Verona",
    "Vibo Valentia",
    "Vicenza",
    "Viterbo"
  ];
});

// node_modules/faker/lib/locales/it/address/state_abbr.js
var require_state_abbr12 = __commonJS((exports, module) => {
  module["exports"] = [
    "AG",
    "AL",
    "AN",
    "AO",
    "AR",
    "AP",
    "AT",
    "AV",
    "BA",
    "BT",
    "BL",
    "BN",
    "BG",
    "BI",
    "BO",
    "BZ",
    "BS",
    "BR",
    "CA",
    "CL",
    "CB",
    "CI",
    "CE",
    "CT",
    "CZ",
    "CH",
    "CO",
    "CS",
    "CR",
    "KR",
    "CN",
    "EN",
    "FM",
    "FE",
    "FI",
    "FG",
    "FC",
    "FR",
    "GE",
    "GO",
    "GR",
    "IM",
    "IS",
    "SP",
    "AQ",
    "LT",
    "LE",
    "LC",
    "LI",
    "LO",
    "LU",
    "MC",
    "MN",
    "MS",
    "MT",
    "ME",
    "MI",
    "MO",
    "MB",
    "NA",
    "NO",
    "NU",
    "OT",
    "OR",
    "PD",
    "PA",
    "PR",
    "PV",
    "PG",
    "PU",
    "PE",
    "PC",
    "PI",
    "PT",
    "PN",
    "PZ",
    "PO",
    "RG",
    "RA",
    "RC",
    "RE",
    "RI",
    "RN",
    "RM",
    "RO",
    "SA",
    "VS",
    "SS",
    "SV",
    "SI",
    "SR",
    "SO",
    "TA",
    "TE",
    "TR",
    "TO",
    "OG",
    "TP",
    "TN",
    "TV",
    "TS",
    "UD",
    "VA",
    "VE",
    "VB",
    "VC",
    "VR",
    "VV",
    "VI",
    "VT"
  ];
});

// node_modules/faker/lib/locales/it/address/city.js
var require_city12 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{city_prefix} #{Name.first_name} #{city_suffix}",
    "#{city_prefix} #{Name.first_name}",
    "#{Name.first_name} #{city_suffix}",
    "#{Name.last_name} #{city_suffix}"
  ];
});

// node_modules/faker/lib/locales/it/address/street_name.js
var require_street_name12 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_suffix} #{Name.first_name}",
    "#{street_suffix} #{Name.last_name}"
  ];
});

// node_modules/faker/lib/locales/it/address/street_address.js
var require_street_address11 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_name} #{building_number}",
    "#{street_name} #{building_number}, #{secondary_address}"
  ];
});

// node_modules/faker/lib/locales/it/address/default_country.js
var require_default_country20 = __commonJS((exports, module) => {
  module["exports"] = [
    "Italia"
  ];
});

// node_modules/faker/lib/locales/it/address/index.js
var require_address21 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.city_prefix = require_city_prefix7();
  address.city_suffix = require_city_suffix5();
  address.country = require_country9();
  address.building_number = require_building_number13();
  address.street_suffix = require_street_suffix9();
  address.secondary_address = require_secondary_address10();
  address.postcode = require_postcode18();
  address.state = require_state15();
  address.state_abbr = require_state_abbr12();
  address.city = require_city12();
  address.street_name = require_street_name12();
  address.street_address = require_street_address11();
  address.default_country = require_default_country20();
});

// node_modules/faker/lib/locales/it/company/suffix.js
var require_suffix21 = __commonJS((exports, module) => {
  module["exports"] = [
    "SPA",
    "e figli",
    "Group",
    "s.r.l."
  ];
});

// node_modules/faker/lib/locales/it/company/noun.js
var require_noun7 = __commonJS((exports, module) => {
  module["exports"] = [
    "Abilità",
    "Access",
    "Adattatore",
    "Algoritmo",
    "Alleanza",
    "Analizzatore",
    "Applicazione",
    "Approccio",
    "Architettura",
    "Archivio",
    "Intelligenza artificiale",
    "Array",
    "Attitudine",
    "Benchmark",
    "Capacità",
    "Sfida",
    "Circuito",
    "Collaborazione",
    "Complessità",
    "Concetto",
    "Conglomerato",
    "Contingenza",
    "Core",
    "Database",
    "Data-warehouse",
    "Definizione",
    "Emulazione",
    "Codifica",
    "Criptazione",
    "Firmware",
    "Flessibilità",
    "Previsione",
    "Frame",
    "framework",
    "Funzione",
    "Funzionalità",
    "Interfaccia grafica",
    "Hardware",
    "Help-desk",
    "Gerarchia",
    "Hub",
    "Implementazione",
    "Infrastruttura",
    "Iniziativa",
    "Installazione",
    "Set di istruzioni",
    "Interfaccia",
    "Soluzione internet",
    "Intranet",
    "Conoscenza base",
    "Matrici",
    "Matrice",
    "Metodologia",
    "Middleware",
    "Migrazione",
    "Modello",
    "Moderazione",
    "Monitoraggio",
    "Moratoria",
    "Rete",
    "Architettura aperta",
    "Sistema aperto",
    "Orchestrazione",
    "Paradigma",
    "Parallelismo",
    "Policy",
    "Portale",
    "Struttura di prezzo",
    "Prodotto",
    "Produttività",
    "Progetto",
    "Proiezione",
    "Protocollo",
    "Servizio clienti",
    "Software",
    "Soluzione",
    "Standardizzazione",
    "Strategia",
    "Struttura",
    "Successo",
    "Sovrastruttura",
    "Supporto",
    "Sinergia",
    "Task-force",
    "Finestra temporale",
    "Strumenti",
    "Utilizzazione",
    "Sito web",
    "Forza lavoro"
  ];
});

// node_modules/faker/lib/locales/it/company/descriptor.js
var require_descriptor6 = __commonJS((exports, module) => {
  module["exports"] = [
    "adattiva",
    "avanzata",
    "migliorata",
    "assimilata",
    "automatizzata",
    "bilanciata",
    "centralizzata",
    "compatibile",
    "configurabile",
    "cross-platform",
    "decentralizzata",
    "digitalizzata",
    "distribuita",
    "piccola",
    "ergonomica",
    "esclusiva",
    "espansa",
    "estesa",
    "configurabile",
    "fondamentale",
    "orizzontale",
    "implementata",
    "innovativa",
    "integrata",
    "intuitiva",
    "inversa",
    "gestita",
    "obbligatoria",
    "monitorata",
    "multi-canale",
    "multi-laterale",
    "open-source",
    "operativa",
    "ottimizzata",
    "organica",
    "persistente",
    "polarizzata",
    "proattiva",
    "programmabile",
    "progressiva",
    "reattiva",
    "riallineata",
    "ricontestualizzata",
    "ridotta",
    "robusta",
    "sicura",
    "condivisibile",
    "stand-alone",
    "switchabile",
    "sincronizzata",
    "sinergica",
    "totale",
    "universale",
    "user-friendly",
    "versatile",
    "virtuale",
    "visionaria"
  ];
});

// node_modules/faker/lib/locales/it/company/adjective.js
var require_adjective7 = __commonJS((exports, module) => {
  module["exports"] = [
    "24 ore",
    "24/7",
    "terza generazione",
    "quarta generazione",
    "quinta generazione",
    "sesta generazione",
    "asimmetrica",
    "asincrona",
    "background",
    "bi-direzionale",
    "biforcata",
    "bottom-line",
    "coerente",
    "coesiva",
    "composita",
    "sensibile al contesto",
    "basta sul contesto",
    "basata sul contenuto",
    "dedicata",
    "didattica",
    "direzionale",
    "discreta",
    "dinamica",
    "eco-centrica",
    "esecutiva",
    "esplicita",
    "full-range",
    "globale",
    "euristica",
    "alto livello",
    "olistica",
    "omogenea",
    "ibrida",
    "impattante",
    "incrementale",
    "intangibile",
    "interattiva",
    "intermediaria",
    "locale",
    "logistica",
    "massimizzata",
    "metodica",
    "mission-critical",
    "mobile",
    "modulare",
    "motivazionale",
    "multimedia",
    "multi-tasking",
    "nazionale",
    "neutrale",
    "nextgeneration",
    "non-volatile",
    "object-oriented",
    "ottima",
    "ottimizzante",
    "radicale",
    "real-time",
    "reciproca",
    "regionale",
    "responsiva",
    "scalabile",
    "secondaria",
    "stabile",
    "statica",
    "sistematica",
    "sistemica",
    "tangibile",
    "terziaria",
    "uniforme",
    "valore aggiunto"
  ];
});

// node_modules/faker/lib/locales/it/company/bs_noun.js
var require_bs_noun5 = __commonJS((exports, module) => {
  module["exports"] = [
    "partnerships",
    "comunità",
    "ROI",
    "soluzioni",
    "e-services",
    "nicchie",
    "tecnologie",
    "contenuti",
    "supply-chains",
    "convergenze",
    "relazioni",
    "architetture",
    "interfacce",
    "mercati",
    "e-commerce",
    "sistemi",
    "modelli",
    "schemi",
    "reti",
    "applicazioni",
    "metriche",
    "e-business",
    "funzionalità",
    "esperienze",
    "webservices",
    "metodologie"
  ];
});

// node_modules/faker/lib/locales/it/company/bs_verb.js
var require_bs_verb5 = __commonJS((exports, module) => {
  module["exports"] = [
    "implementate",
    "utilizzo",
    "integrate",
    "ottimali",
    "evolutive",
    "abilitate",
    "reinventate",
    "aggregate",
    "migliorate",
    "incentivate",
    "monetizzate",
    "sinergizzate",
    "strategiche",
    "deploy",
    "marchi",
    "accrescitive",
    "target",
    "sintetizzate",
    "spedizioni",
    "massimizzate",
    "innovazione",
    "guida",
    "estensioni",
    "generate",
    "exploit",
    "transizionali",
    "matrici",
    "ricontestualizzate"
  ];
});

// node_modules/faker/lib/locales/it/company/bs_adjective.js
var require_bs_adjective4 = __commonJS((exports, module) => {
  module["exports"] = [
    "valore aggiunto",
    "verticalizzate",
    "proattive",
    "forti",
    "rivoluzionari",
    "scalabili",
    "innovativi",
    "intuitivi",
    "strategici",
    "e-business",
    "mission-critical",
    "24/7",
    "globali",
    "B2B",
    "B2C",
    "granulari",
    "virtuali",
    "virali",
    "dinamiche",
    "magnetiche",
    "web",
    "interattive",
    "sexy",
    "back-end",
    "real-time",
    "efficienti",
    "front-end",
    "distributivi",
    "estensibili",
    "mondiali",
    "open-source",
    "cross-platform",
    "sinergiche",
    "out-of-the-box",
    "enterprise",
    "integrate",
    "di impatto",
    "wireless",
    "trasparenti",
    "next-generation",
    "cutting-edge",
    "visionari",
    "plug-and-play",
    "collaborative",
    "olistiche",
    "ricche"
  ];
});

// node_modules/faker/lib/locales/it/company/name.js
var require_name41 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name} #{suffix}",
    "#{Name.last_name}, #{Name.last_name} e #{Name.last_name} #{suffix}"
  ];
});

// node_modules/faker/lib/locales/it/company/index.js
var require_company16 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.suffix = require_suffix21();
  company.noun = require_noun7();
  company.descriptor = require_descriptor6();
  company.adjective = require_adjective7();
  company.bs_noun = require_bs_noun5();
  company.bs_verb = require_bs_verb5();
  company.bs_adjective = require_bs_adjective4();
  company.name = require_name41();
});

// node_modules/faker/lib/locales/it/internet/free_email.js
var require_free_email14 = __commonJS((exports, module) => {
  module["exports"] = [
    "gmail.com",
    "yahoo.com",
    "hotmail.com",
    "email.it",
    "libero.it",
    "yahoo.it"
  ];
});

// node_modules/faker/lib/locales/it/internet/domain_suffix.js
var require_domain_suffix20 = __commonJS((exports, module) => {
  module["exports"] = [
    "com",
    "com",
    "com",
    "net",
    "org",
    "it",
    "it",
    "it"
  ];
});

// node_modules/faker/lib/locales/it/internet/index.js
var require_internet21 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.free_email = require_free_email14();
  internet.domain_suffix = require_domain_suffix20();
});

// node_modules/faker/lib/locales/it/name/first_name.js
var require_first_name13 = __commonJS((exports, module) => {
  module["exports"] = [
    "Aaron",
    "Akira",
    "Alberto",
    "Alessandro",
    "Alighieri",
    "Amedeo",
    "Amos",
    "Anselmo",
    "Antonino",
    "Arcibaldo",
    "Armando",
    "Artes",
    "Audenico",
    "Ausonio",
    "Bacchisio",
    "Battista",
    "Bernardo",
    "Boris",
    "Caio",
    "Carlo",
    "Cecco",
    "Cirino",
    "Cleros",
    "Costantino",
    "Damiano",
    "Danny",
    "Davide",
    "Demian",
    "Dimitri",
    "Domingo",
    "Dylan",
    "Edilio",
    "Egidio",
    "Elio",
    "Emanuel",
    "Enrico",
    "Ercole",
    "Ermes",
    "Ethan",
    "Eusebio",
    "Evangelista",
    "Fabiano",
    "Ferdinando",
    "Fiorentino",
    "Flavio",
    "Fulvio",
    "Gabriele",
    "Gastone",
    "Germano",
    "Giacinto",
    "Gianantonio",
    "Gianleonardo",
    "Gianmarco",
    "Gianriccardo",
    "Gioacchino",
    "Giordano",
    "Giuliano",
    "Graziano",
    "Guido",
    "Harry",
    "Iacopo",
    "Ilario",
    "Ione",
    "Italo",
    "Jack",
    "Jari",
    "Joey",
    "Joseph",
    "Kai",
    "Kociss",
    "Laerte",
    "Lauro",
    "Leonardo",
    "Liborio",
    "Lorenzo",
    "Ludovico",
    "Maggiore",
    "Manuele",
    "Mariano",
    "Marvin",
    "Matteo",
    "Mauro",
    "Michael",
    "Mirco",
    "Modesto",
    "Muzio",
    "Nabil",
    "Nathan",
    "Nick",
    "Noah",
    "Odino",
    "Olo",
    "Oreste",
    "Osea",
    "Pablo",
    "Patrizio",
    "Piererminio",
    "Pierfrancesco",
    "Piersilvio",
    "Priamo",
    "Quarto",
    "Quirino",
    "Radames",
    "Raniero",
    "Renato",
    "Rocco",
    "Romeo",
    "Rosalino",
    "Rudy",
    "Sabatino",
    "Samuel",
    "Santo",
    "Sebastian",
    "Serse",
    "Silvano",
    "Sirio",
    "Tancredi",
    "Terzo",
    "Timoteo",
    "Tolomeo",
    "Trevis",
    "Ubaldo",
    "Ulrico",
    "Valdo",
    "Neri",
    "Vinicio",
    "Walter",
    "Xavier",
    "Yago",
    "Zaccaria",
    "Abramo",
    "Adriano",
    "Alan",
    "Albino",
    "Alessio",
    "Alighiero",
    "Amerigo",
    "Anastasio",
    "Antimo",
    "Antonio",
    "Arduino",
    "Aroldo",
    "Arturo",
    "Augusto",
    "Avide",
    "Baldassarre",
    "Bettino",
    "Bortolo",
    "Caligola",
    "Carmelo",
    "Celeste",
    "Ciro",
    "Costanzo",
    "Dante",
    "Danthon",
    "Davis",
    "Demis",
    "Dindo",
    "Domiziano",
    "Edipo",
    "Egisto",
    "Eliziario",
    "Emidio",
    "Enzo",
    "Eriberto",
    "Erminio",
    "Ettore",
    "Eustachio",
    "Fabio",
    "Fernando",
    "Fiorenzo",
    "Folco",
    "Furio",
    "Gaetano",
    "Gavino",
    "Gerlando",
    "Giacobbe",
    "Giancarlo",
    "Gianmaria",
    "Giobbe",
    "Giorgio",
    "Giulio",
    "Gregorio",
    "Hector",
    "Ian",
    "Ippolito",
    "Ivano",
    "Jacopo",
    "Jarno",
    "Joannes",
    "Joshua",
    "Karim",
    "Kris",
    "Lamberto",
    "Lazzaro",
    "Leone",
    "Lino",
    "Loris",
    "Luigi",
    "Manfredi",
    "Marco",
    "Marino",
    "Marzio",
    "Mattia",
    "Max",
    "Michele",
    "Mirko",
    "Moreno",
    "Nadir",
    "Nazzareno",
    "Nestore",
    "Nico",
    "Noel",
    "Odone",
    "Omar",
    "Orfeo",
    "Osvaldo",
    "Pacifico",
    "Pericle",
    "Pietro",
    "Primo",
    "Quasimodo",
    "Radio",
    "Raoul",
    "Renzo",
    "Rodolfo",
    "Romolo",
    "Rosolino",
    "Rufo",
    "Sabino",
    "Sandro",
    "Sasha",
    "Secondo",
    "Sesto",
    "Silverio",
    "Siro",
    "Tazio",
    "Teseo",
    "Timothy",
    "Tommaso",
    "Tristano",
    "Umberto",
    "Ariel",
    "Artemide",
    "Assia",
    "Azue",
    "Benedetta",
    "Bibiana",
    "Brigitta",
    "Carmela",
    "Cassiopea",
    "Cesidia",
    "Cira",
    "Clea",
    "Cleopatra",
    "Clodovea",
    "Concetta",
    "Cosetta",
    "Cristyn",
    "Damiana",
    "Danuta",
    "Deborah",
    "Demi",
    "Diamante",
    "Diana",
    "Donatella",
    "Doriana",
    "Edvige",
    "Elda",
    "Elga",
    "Elsa",
    "Emilia",
    "Enrica",
    "Erminia",
    "Eufemia",
    "Evita",
    "Fatima",
    "Felicia",
    "Filomena",
    "Flaviana",
    "Fortunata",
    "Gelsomina",
    "Genziana",
    "Giacinta",
    "Gilda",
    "Giovanna",
    "Giulietta",
    "Grazia",
    "Guendalina",
    "Helga",
    "Ileana",
    "Ingrid",
    "Irene",
    "Isabel",
    "Isira",
    "Ivonne",
    "Jelena",
    "Jole",
    "Claudia",
    "Kayla",
    "Kristel",
    "Laura",
    "Lucia",
    "Lia",
    "Lidia",
    "Lisa",
    "Loredana",
    "Loretta",
    "Luce",
    "Lucrezia",
    "Luna",
    "Maika",
    "Marcella",
    "Maria",
    "Mariagiulia",
    "Marianita",
    "Mariapia",
    "Marieva",
    "Marina",
    "Maristella",
    "Maruska",
    "Matilde",
    "Mecren",
    "Mercedes",
    "Mietta",
    "Miriana",
    "Miriam",
    "Monia",
    "Morgana",
    "Naomi",
    "Nayade",
    "Nicoletta",
    "Ninfa",
    "Noemi",
    "Nunzia",
    "Olimpia",
    "Oretta",
    "Ortensia",
    "Penelope",
    "Piccarda",
    "Prisca",
    "Rebecca",
    "Rita",
    "Rosalba",
    "Rosaria",
    "Rosita",
    "Ruth",
    "Samira",
    "Sarita",
    "Selvaggia",
    "Shaira",
    "Sibilla",
    "Soriana",
    "Thea",
    "Tosca",
    "Ursula",
    "Vania",
    "Vera",
    "Vienna",
    "Violante",
    "Vitalba",
    "Zelida"
  ];
});

// node_modules/faker/lib/locales/it/name/last_name.js
var require_last_name13 = __commonJS((exports, module) => {
  module["exports"] = [
    "Amato",
    "Barbieri",
    "Barone",
    "Basile",
    "Battaglia",
    "Bellini",
    "Benedetti",
    "Bernardi",
    "Bianc",
    "Bianchi",
    "Bruno",
    "Caputo",
    "Carbon",
    "Caruso",
    "Cattaneo",
    "Colombo",
    "Cont",
    "Conte",
    "Coppola",
    "Costa",
    "Costantin",
    "D'amico",
    "D'angelo",
    "Damico",
    "De Angelis",
    "De luca",
    "De rosa",
    "De Santis",
    "Donati",
    "Esposito",
    "Fabbri",
    "Farin",
    "Ferrara",
    "Ferrari",
    "Ferraro",
    "Ferretti",
    "Ferri",
    "Fior",
    "Fontana",
    "Galli",
    "Gallo",
    "Gatti",
    "Gentile",
    "Giordano",
    "Giuliani",
    "Grassi",
    "Grasso",
    "Greco",
    "Guerra",
    "Leone",
    "Lombardi",
    "Lombardo",
    "Longo",
    "Mancini",
    "Marchetti",
    "Marian",
    "Marini",
    "Marino",
    "Martinelli",
    "Martini",
    "Martino",
    "Mazza",
    "Messina",
    "Milani",
    "Montanari",
    "Monti",
    "Morelli",
    "Moretti",
    "Negri",
    "Neri",
    "Orlando",
    "Pagano",
    "Palmieri",
    "Palumbo",
    "Parisi",
    "Pellegrini",
    "Pellegrino",
    "Piras",
    "Ricci",
    "Rinaldi",
    "Riva",
    "Rizzi",
    "Rizzo",
    "Romano",
    "Ross",
    "Rossetti",
    "Ruggiero",
    "Russo",
    "Sala",
    "Sanna",
    "Santoro",
    "Sartori",
    "Serr",
    "Silvestri",
    "Sorrentino",
    "Testa",
    "Valentini",
    "Villa",
    "Vitale",
    "Vitali"
  ];
});

// node_modules/faker/lib/locales/it/name/prefix.js
var require_prefix16 = __commonJS((exports, module) => {
  module["exports"] = [
    "Sig.",
    "Dott.",
    "Dr.",
    "Ing."
  ];
});

// node_modules/faker/lib/locales/it/name/suffix.js
var require_suffix22 = __commonJS((exports, module) => {
  module["exports"] = [];
});

// node_modules/faker/lib/locales/it/name/name.js
var require_name43 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}"
  ];
});

// node_modules/faker/lib/locales/it/name/index.js
var require_name42 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name = require_first_name13();
  name2.last_name = require_last_name13();
  name2.prefix = require_prefix16();
  name2.suffix = require_suffix22();
  name2.name = require_name43();
});

// node_modules/faker/lib/locales/it/phone_number/formats.js
var require_formats27 = __commonJS((exports, module) => {
  module["exports"] = [
    "+## ### ## ## ####",
    "+## ## #######",
    "+## ## ########",
    "+## ### #######",
    "+## ### ########",
    "+## #### #######",
    "+## #### ########",
    "0## ### ####",
    "+39 0## ### ###",
    "3## ### ###",
    "+39 3## ### ###"
  ];
});

// node_modules/faker/lib/locales/it/phone_number/index.js
var require_phone_number20 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats27();
});

// node_modules/faker/lib/locales/it/index.js
var require_it = __commonJS((exports, module) => {
  var it = {};
  module["exports"] = it;
  it.title = "Italian";
  it.address = require_address21();
  it.company = require_company16();
  it.internet = require_internet21();
  it.name = require_name42();
  it.phone_number = require_phone_number20();
});

// node_modules/faker/lib/locales/ja/address/postcode.js
var require_postcode19 = __commonJS((exports, module) => {
  module["exports"] = [
    "###-####"
  ];
});

// node_modules/faker/lib/locales/ja/address/state.js
var require_state16 = __commonJS((exports, module) => {
  module["exports"] = [
    "北海道",
    "青森県",
    "岩手県",
    "宮城県",
    "秋田県",
    "山形県",
    "福島県",
    "茨城県",
    "栃木県",
    "群馬県",
    "埼玉県",
    "千葉県",
    "東京都",
    "神奈川県",
    "新潟県",
    "富山県",
    "石川県",
    "福井県",
    "山梨県",
    "長野県",
    "岐阜県",
    "静岡県",
    "愛知県",
    "三重県",
    "滋賀県",
    "京都府",
    "大阪府",
    "兵庫県",
    "奈良県",
    "和歌山県",
    "鳥取県",
    "島根県",
    "岡山県",
    "広島県",
    "山口県",
    "徳島県",
    "香川県",
    "愛媛県",
    "高知県",
    "福岡県",
    "佐賀県",
    "長崎県",
    "熊本県",
    "大分県",
    "宮崎県",
    "鹿児島県",
    "沖縄県"
  ];
});

// node_modules/faker/lib/locales/ja/address/state_abbr.js
var require_state_abbr13 = __commonJS((exports, module) => {
  module["exports"] = [
    "1",
    "2",
    "3",
    "4",
    "5",
    "6",
    "7",
    "8",
    "9",
    "10",
    "11",
    "12",
    "13",
    "14",
    "15",
    "16",
    "17",
    "18",
    "19",
    "20",
    "21",
    "22",
    "23",
    "24",
    "25",
    "26",
    "27",
    "28",
    "29",
    "30",
    "31",
    "32",
    "33",
    "34",
    "35",
    "36",
    "37",
    "38",
    "39",
    "40",
    "41",
    "42",
    "43",
    "44",
    "45",
    "46",
    "47"
  ];
});

// node_modules/faker/lib/locales/ja/address/city_prefix.js
var require_city_prefix8 = __commonJS((exports, module) => {
  module["exports"] = [
    "北",
    "東",
    "西",
    "南",
    "新",
    "湖",
    "港"
  ];
});

// node_modules/faker/lib/locales/ja/address/city_suffix.js
var require_city_suffix6 = __commonJS((exports, module) => {
  module["exports"] = [
    "市",
    "区",
    "町",
    "村"
  ];
});

// node_modules/faker/lib/locales/ja/address/city.js
var require_city13 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{city_prefix}#{Name.first_name}#{city_suffix}",
    "#{Name.first_name}#{city_suffix}",
    "#{city_prefix}#{Name.last_name}#{city_suffix}",
    "#{Name.last_name}#{city_suffix}"
  ];
});

// node_modules/faker/lib/locales/ja/address/street_name.js
var require_street_name13 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Name.first_name}#{street_suffix}",
    "#{Name.last_name}#{street_suffix}"
  ];
});

// node_modules/faker/lib/locales/ja/address/index.js
var require_address22 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.postcode = require_postcode19();
  address.state = require_state16();
  address.state_abbr = require_state_abbr13();
  address.city_prefix = require_city_prefix8();
  address.city_suffix = require_city_suffix6();
  address.city = require_city13();
  address.street_name = require_street_name13();
});

// node_modules/faker/lib/locales/ja/phone_number/formats.js
var require_formats29 = __commonJS((exports, module) => {
  module["exports"] = [
    "0####-#-####",
    "0###-##-####",
    "0##-###-####",
    "0#-####-####"
  ];
});

// node_modules/faker/lib/locales/ja/phone_number/index.js
var require_phone_number21 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats29();
});

// node_modules/faker/lib/locales/ja/cell_phone/formats.js
var require_formats28 = __commonJS((exports, module) => {
  module["exports"] = [
    "090-####-####",
    "080-####-####",
    "070-####-####"
  ];
});

// node_modules/faker/lib/locales/ja/cell_phone/index.js
var require_cell_phone9 = __commonJS((exports, module) => {
  var cell_phone = {};
  module["exports"] = cell_phone;
  cell_phone.formats = require_formats28();
});

// node_modules/faker/lib/locales/ja/name/last_name.js
var require_last_name14 = __commonJS((exports, module) => {
  module["exports"] = [
    "佐藤",
    "鈴木",
    "高橋",
    "田中",
    "渡辺",
    "伊藤",
    "山本",
    "中村",
    "小林",
    "加藤",
    "吉田",
    "山田",
    "佐々木",
    "山口",
    "斎藤",
    "松本",
    "井上",
    "木村",
    "林",
    "清水"
  ];
});

// node_modules/faker/lib/locales/ja/name/first_name.js
var require_first_name14 = __commonJS((exports, module) => {
  module["exports"] = [
    "大翔",
    "蓮",
    "颯太",
    "樹",
    "大和",
    "陽翔",
    "陸斗",
    "太一",
    "海翔",
    "蒼空",
    "翼",
    "陽菜",
    "結愛",
    "結衣",
    "杏",
    "莉子",
    "美羽",
    "結菜",
    "心愛",
    "愛菜",
    "美咲"
  ];
});

// node_modules/faker/lib/locales/ja/name/name.js
var require_name45 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{last_name} #{first_name}"
  ];
});

// node_modules/faker/lib/locales/ja/name/index.js
var require_name44 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.last_name = require_last_name14();
  name2.first_name = require_first_name14();
  name2.name = require_name45();
});

// node_modules/faker/lib/locales/ja/index.js
var require_ja = __commonJS((exports, module) => {
  var ja = {};
  module["exports"] = ja;
  ja.title = "Japanese";
  ja.address = require_address22();
  ja.phone_number = require_phone_number21();
  ja.cell_phone = require_cell_phone9();
  ja.name = require_name44();
});

// node_modules/faker/lib/locales/ko/address/postcode.js
var require_postcode20 = __commonJS((exports, module) => {
  module["exports"] = [
    "###-###"
  ];
});

// node_modules/faker/lib/locales/ko/address/state.js
var require_state17 = __commonJS((exports, module) => {
  module["exports"] = [
    "강원",
    "경기",
    "경남",
    "경북",
    "광주",
    "대구",
    "대전",
    "부산",
    "서울",
    "울산",
    "인천",
    "전남",
    "전북",
    "제주",
    "충남",
    "충북",
    "세종"
  ];
});

// node_modules/faker/lib/locales/ko/address/state_abbr.js
var require_state_abbr14 = __commonJS((exports, module) => {
  module["exports"] = [
    "강원",
    "경기",
    "경남",
    "경북",
    "광주",
    "대구",
    "대전",
    "부산",
    "서울",
    "울산",
    "인천",
    "전남",
    "전북",
    "제주",
    "충남",
    "충북",
    "세종"
  ];
});

// node_modules/faker/lib/locales/ko/address/city_suffix.js
var require_city_suffix7 = __commonJS((exports, module) => {
  module["exports"] = [
    "구",
    "시",
    "군"
  ];
});

// node_modules/faker/lib/locales/ko/address/city_name.js
var require_city_name7 = __commonJS((exports, module) => {
  module["exports"] = [
    "강릉",
    "양양",
    "인제",
    "광주",
    "구리",
    "부천",
    "밀양",
    "통영",
    "창원",
    "거창",
    "고성",
    "양산",
    "김천",
    "구미",
    "영주",
    "광산",
    "남",
    "북",
    "고창",
    "군산",
    "남원",
    "동작",
    "마포",
    "송파",
    "용산",
    "부평",
    "강화",
    "수성"
  ];
});

// node_modules/faker/lib/locales/ko/address/city.js
var require_city14 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{city_name}#{city_suffix}"
  ];
});

// node_modules/faker/lib/locales/ko/address/street_root.js
var require_street_root4 = __commonJS((exports, module) => {
  module["exports"] = [
    "상계",
    "화곡",
    "신정",
    "목",
    "잠실",
    "면목",
    "주안",
    "안양",
    "중",
    "정왕",
    "구로",
    "신월",
    "연산",
    "부평",
    "창",
    "만수",
    "중계",
    "검단",
    "시흥",
    "상도",
    "방배",
    "장유",
    "상",
    "광명",
    "신길",
    "행신",
    "대명",
    "동탄"
  ];
});

// node_modules/faker/lib/locales/ko/address/street_suffix.js
var require_street_suffix10 = __commonJS((exports, module) => {
  module["exports"] = [
    "읍",
    "면",
    "동"
  ];
});

// node_modules/faker/lib/locales/ko/address/street_name.js
var require_street_name14 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_root}#{street_suffix}"
  ];
});

// node_modules/faker/lib/locales/ko/address/index.js
var require_address23 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.postcode = require_postcode20();
  address.state = require_state17();
  address.state_abbr = require_state_abbr14();
  address.city_suffix = require_city_suffix7();
  address.city_name = require_city_name7();
  address.city = require_city14();
  address.street_root = require_street_root4();
  address.street_suffix = require_street_suffix10();
  address.street_name = require_street_name14();
});

// node_modules/faker/lib/locales/ko/phone_number/formats.js
var require_formats30 = __commonJS((exports, module) => {
  module["exports"] = [
    "0#-#####-####",
    "0##-###-####",
    "0##-####-####"
  ];
});

// node_modules/faker/lib/locales/ko/phone_number/index.js
var require_phone_number22 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats30();
});

// node_modules/faker/lib/locales/ko/company/suffix.js
var require_suffix23 = __commonJS((exports, module) => {
  module["exports"] = [
    "연구소",
    "게임즈",
    "그룹",
    "전자",
    "물산",
    "코리아"
  ];
});

// node_modules/faker/lib/locales/ko/company/prefix.js
var require_prefix17 = __commonJS((exports, module) => {
  module["exports"] = [
    "주식회사",
    "한국"
  ];
});

// node_modules/faker/lib/locales/ko/company/name.js
var require_name46 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{prefix} #{Name.first_name}",
    "#{Name.first_name} #{suffix}"
  ];
});

// node_modules/faker/lib/locales/ko/company/index.js
var require_company17 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.suffix = require_suffix23();
  company.prefix = require_prefix17();
  company.name = require_name46();
});

// node_modules/faker/lib/locales/ko/internet/free_email.js
var require_free_email15 = __commonJS((exports, module) => {
  module["exports"] = [
    "gmail.com",
    "yahoo.co.kr",
    "hanmail.net",
    "naver.com"
  ];
});

// node_modules/faker/lib/locales/ko/internet/domain_suffix.js
var require_domain_suffix21 = __commonJS((exports, module) => {
  module["exports"] = [
    "co.kr",
    "com",
    "biz",
    "info",
    "ne.kr",
    "net",
    "or.kr",
    "org"
  ];
});

// node_modules/faker/lib/locales/ko/internet/index.js
var require_internet22 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.free_email = require_free_email15();
  internet.domain_suffix = require_domain_suffix21();
});

// node_modules/faker/lib/locales/ko/lorem/words.js
var require_words7 = __commonJS((exports, module) => {
  module["exports"] = [
    "국가는",
    "법률이",
    "정하는",
    "바에",
    "의하여",
    "재외국민을",
    "보호할",
    "의무를",
    "진다.",
    "모든",
    "국민은",
    "신체의",
    "자유를",
    "가진다.",
    "국가는",
    "전통문화의",
    "계승·발전과",
    "민족문화의",
    "창달에",
    "노력하여야",
    "한다.",
    "통신·방송의",
    "시설기준과",
    "신문의",
    "기능을",
    "보장하기",
    "위하여",
    "필요한",
    "사항은",
    "법률로",
    "정한다.",
    "헌법에",
    "의하여",
    "체결·공포된",
    "조약과",
    "일반적으로",
    "승인된",
    "국제법규는",
    "국내법과",
    "같은",
    "효력을",
    "가진다.",
    "다만,",
    "현행범인인",
    "경우와",
    "장기",
    "3년",
    "이상의",
    "형에",
    "해당하는",
    "죄를",
    "범하고",
    "도피",
    "또는",
    "증거인멸의",
    "염려가",
    "있을",
    "때에는",
    "사후에",
    "영장을",
    "청구할",
    "수",
    "있다.",
    "저작자·발명가·과학기술자와",
    "예술가의",
    "권리는",
    "법률로써",
    "보호한다.",
    "형사피고인은",
    "유죄의",
    "판결이",
    "확정될",
    "때까지는",
    "무죄로",
    "추정된다.",
    "모든",
    "국민은",
    "행위시의",
    "법률에",
    "의하여",
    "범죄를",
    "구성하지",
    "아니하는",
    "행위로",
    "소추되지",
    "아니하며,",
    "동일한",
    "범죄에",
    "대하여",
    "거듭",
    "처벌받지",
    "아니한다.",
    "국가는",
    "평생교육을",
    "진흥하여야",
    "한다.",
    "모든",
    "국민은",
    "사생활의",
    "비밀과",
    "자유를",
    "침해받지",
    "아니한다.",
    "의무교육은",
    "무상으로",
    "한다.",
    "저작자·발명가·과학기술자와",
    "예술가의",
    "권리는",
    "법률로써",
    "보호한다.",
    "국가는",
    "모성의",
    "보호를",
    "위하여",
    "노력하여야",
    "한다.",
    "헌법에",
    "의하여",
    "체결·공포된",
    "조약과",
    "일반적으로",
    "승인된",
    "국제법규는",
    "국내법과",
    "같은",
    "효력을",
    "가진다."
  ];
});

// node_modules/faker/lib/locales/ko/lorem/index.js
var require_lorem7 = __commonJS((exports, module) => {
  var lorem = {};
  module["exports"] = lorem;
  lorem.words = require_words7();
});

// node_modules/faker/lib/locales/ko/name/last_name.js
var require_last_name15 = __commonJS((exports, module) => {
  module["exports"] = [
    "김",
    "이",
    "박",
    "최",
    "정",
    "강",
    "조",
    "윤",
    "장",
    "임",
    "오",
    "한",
    "신",
    "서",
    "권",
    "황",
    "안",
    "송",
    "류",
    "홍"
  ];
});

// node_modules/faker/lib/locales/ko/name/first_name.js
var require_first_name15 = __commonJS((exports, module) => {
  module["exports"] = [
    "서연",
    "민서",
    "서현",
    "지우",
    "서윤",
    "지민",
    "수빈",
    "하은",
    "예은",
    "윤서",
    "민준",
    "지후",
    "지훈",
    "준서",
    "현우",
    "예준",
    "건우",
    "현준",
    "민재",
    "우진",
    "은주"
  ];
});

// node_modules/faker/lib/locales/ko/name/name.js
var require_name48 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{last_name} #{first_name}"
  ];
});

// node_modules/faker/lib/locales/ko/name/index.js
var require_name47 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.last_name = require_last_name15();
  name2.first_name = require_first_name15();
  name2.name = require_name48();
});

// node_modules/faker/lib/locales/ko/index.js
var require_ko = __commonJS((exports, module) => {
  var ko = {};
  module["exports"] = ko;
  ko.title = "Korean";
  ko.address = require_address23();
  ko.phone_number = require_phone_number22();
  ko.company = require_company17();
  ko.internet = require_internet22();
  ko.lorem = require_lorem7();
  ko.name = require_name47();
});

// node_modules/faker/lib/locales/nb_NO/address/city_root.js
var require_city_root = __commonJS((exports, module) => {
  module["exports"] = [
    "Fet",
    "Gjes",
    "Høy",
    "Inn",
    "Fager",
    "Lille",
    "Lo",
    "Mal",
    "Nord",
    "Nær",
    "Sand",
    "Sme",
    "Stav",
    "Stor",
    "Tand",
    "Ut",
    "Vest"
  ];
});

// node_modules/faker/lib/locales/nb_NO/address/city_suffix.js
var require_city_suffix8 = __commonJS((exports, module) => {
  module["exports"] = [
    "berg",
    "borg",
    "by",
    "bø",
    "dal",
    "eid",
    "fjell",
    "fjord",
    "foss",
    "grunn",
    "hamn",
    "havn",
    "helle",
    "mark",
    "nes",
    "odden",
    "sand",
    "sjøen",
    "stad",
    "strand",
    "strøm",
    "sund",
    "vik",
    "vær",
    "våg",
    "ø",
    "øy",
    "ås"
  ];
});

// node_modules/faker/lib/locales/nb_NO/address/street_prefix.js
var require_street_prefix3 = __commonJS((exports, module) => {
  module["exports"] = [
    "Øvre",
    "Nedre",
    "Søndre",
    "Gamle",
    "Østre",
    "Vestre"
  ];
});

// node_modules/faker/lib/locales/nb_NO/address/street_root.js
var require_street_root5 = __commonJS((exports, module) => {
  module["exports"] = [
    "Eike",
    "Bjørke",
    "Gran",
    "Vass",
    "Furu",
    "Litj",
    "Lille",
    "Høy",
    "Fosse",
    "Elve",
    "Ku",
    "Konvall",
    "Soldugg",
    "Hestemyr",
    "Granitt",
    "Hegge",
    "Rogne",
    "Fiol",
    "Sol",
    "Ting",
    "Malm",
    "Klokker",
    "Preste",
    "Dam",
    "Geiterygg",
    "Bekke",
    "Berg",
    "Kirke",
    "Kors",
    "Bru",
    "Blåveis",
    "Torg",
    "Sjø"
  ];
});

// node_modules/faker/lib/locales/nb_NO/address/street_suffix.js
var require_street_suffix11 = __commonJS((exports, module) => {
  module["exports"] = [
    "alléen",
    "bakken",
    "berget",
    "bråten",
    "eggen",
    "engen",
    "ekra",
    "faret",
    "flata",
    "gata",
    "gjerdet",
    "grenda",
    "gropa",
    "hagen",
    "haugen",
    "havna",
    "holtet",
    "høgda",
    "jordet",
    "kollen",
    "kroken",
    "lia",
    "lunden",
    "lyngen",
    "løkka",
    "marka",
    "moen",
    "myra",
    "plassen",
    "ringen",
    "roa",
    "røa",
    "skogen",
    "skrenten",
    "spranget",
    "stien",
    "stranda",
    "stubben",
    "stykket",
    "svingen",
    "tjernet",
    "toppen",
    "tunet",
    "vollen",
    "vika",
    "åsen"
  ];
});

// node_modules/faker/lib/locales/nb_NO/address/common_street_suffix.js
var require_common_street_suffix = __commonJS((exports, module) => {
  module["exports"] = [
    "sgate",
    "svei",
    "s Gate",
    "s Vei",
    "gata",
    "veien"
  ];
});

// node_modules/faker/lib/locales/nb_NO/address/building_number.js
var require_building_number14 = __commonJS((exports, module) => {
  module["exports"] = [
    "#",
    "##"
  ];
});

// node_modules/faker/lib/locales/nb_NO/address/secondary_address.js
var require_secondary_address11 = __commonJS((exports, module) => {
  module["exports"] = [
    "Leil. ###",
    "Oppgang A",
    "Oppgang B"
  ];
});

// node_modules/faker/lib/locales/nb_NO/address/postcode.js
var require_postcode21 = __commonJS((exports, module) => {
  module["exports"] = [
    "####",
    "####",
    "####",
    "0###"
  ];
});

// node_modules/faker/lib/locales/nb_NO/address/state.js
var require_state18 = __commonJS((exports, module) => {
  module["exports"] = [
    ""
  ];
});

// node_modules/faker/lib/locales/nb_NO/address/city.js
var require_city15 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{city_root}#{city_suffix}"
  ];
});

// node_modules/faker/lib/locales/nb_NO/address/street_name.js
var require_street_name15 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_root}#{street_suffix}",
    "#{street_prefix} #{street_root}#{street_suffix}",
    "#{Name.first_name}#{common_street_suffix}",
    "#{Name.last_name}#{common_street_suffix}"
  ];
});

// node_modules/faker/lib/locales/nb_NO/address/street_address.js
var require_street_address12 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_name} #{building_number}"
  ];
});

// node_modules/faker/lib/locales/nb_NO/address/default_country.js
var require_default_country21 = __commonJS((exports, module) => {
  module["exports"] = [
    "Norge"
  ];
});

// node_modules/faker/lib/locales/nb_NO/address/index.js
var require_address24 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.city_root = require_city_root();
  address.city_suffix = require_city_suffix8();
  address.street_prefix = require_street_prefix3();
  address.street_root = require_street_root5();
  address.street_suffix = require_street_suffix11();
  address.common_street_suffix = require_common_street_suffix();
  address.building_number = require_building_number14();
  address.secondary_address = require_secondary_address11();
  address.postcode = require_postcode21();
  address.state = require_state18();
  address.city = require_city15();
  address.street_name = require_street_name15();
  address.street_address = require_street_address12();
  address.default_country = require_default_country21();
});

// node_modules/faker/lib/locales/nb_NO/company/suffix.js
var require_suffix24 = __commonJS((exports, module) => {
  module["exports"] = [
    "Gruppen",
    "AS",
    "ASA",
    "BA",
    "RFH",
    "og Sønner"
  ];
});

// node_modules/faker/lib/locales/nb_NO/company/name.js
var require_name49 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} og #{Name.last_name}"
  ];
});

// node_modules/faker/lib/locales/nb_NO/company/index.js
var require_company18 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.suffix = require_suffix24();
  company.name = require_name49();
});

// node_modules/faker/lib/locales/nb_NO/internet/domain_suffix.js
var require_domain_suffix22 = __commonJS((exports, module) => {
  module["exports"] = [
    "no",
    "com",
    "net",
    "org"
  ];
});

// node_modules/faker/lib/locales/nb_NO/internet/index.js
var require_internet23 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.domain_suffix = require_domain_suffix22();
});

// node_modules/faker/lib/locales/nb_NO/name/first_name.js
var require_first_name16 = __commonJS((exports, module) => {
  module["exports"] = [
    "Emma",
    "Sara",
    "Thea",
    "Ida",
    "Julie",
    "Nora",
    "Emilie",
    "Ingrid",
    "Hanna",
    "Maria",
    "Sofie",
    "Anna",
    "Malin",
    "Amalie",
    "Vilde",
    "Frida",
    "Andrea",
    "Tuva",
    "Victoria",
    "Mia",
    "Karoline",
    "Mathilde",
    "Martine",
    "Linnea",
    "Marte",
    "Hedda",
    "Marie",
    "Helene",
    "Silje",
    "Leah",
    "Maja",
    "Elise",
    "Oda",
    "Kristine",
    "Aurora",
    "Kaja",
    "Camilla",
    "Mari",
    "Maren",
    "Mina",
    "Selma",
    "Jenny",
    "Celine",
    "Eline",
    "Sunniva",
    "Natalie",
    "Tiril",
    "Synne",
    "Sandra",
    "Madeleine",
    "Markus",
    "Mathias",
    "Kristian",
    "Jonas",
    "Andreas",
    "Alexander",
    "Martin",
    "Sander",
    "Daniel",
    "Magnus",
    "Henrik",
    "Tobias",
    "Kristoffer",
    "Emil",
    "Adrian",
    "Sebastian",
    "Marius",
    "Elias",
    "Fredrik",
    "Thomas",
    "Sondre",
    "Benjamin",
    "Jakob",
    "Oliver",
    "Lucas",
    "Oskar",
    "Nikolai",
    "Filip",
    "Mats",
    "William",
    "Erik",
    "Simen",
    "Ole",
    "Eirik",
    "Isak",
    "Kasper",
    "Noah",
    "Lars",
    "Joakim",
    "Johannes",
    "Håkon",
    "Sindre",
    "Jørgen",
    "Herman",
    "Anders",
    "Jonathan",
    "Even",
    "Theodor",
    "Mikkel",
    "Aksel"
  ];
});

// node_modules/faker/lib/locales/nb_NO/name/feminine_name.js
var require_feminine_name = __commonJS((exports, module) => {
  module["exports"] = [
    "Emma",
    "Sara",
    "Thea",
    "Ida",
    "Julie",
    "Nora",
    "Emilie",
    "Ingrid",
    "Hanna",
    "Maria",
    "Sofie",
    "Anna",
    "Malin",
    "Amalie",
    "Vilde",
    "Frida",
    "Andrea",
    "Tuva",
    "Victoria",
    "Mia",
    "Karoline",
    "Mathilde",
    "Martine",
    "Linnea",
    "Marte",
    "Hedda",
    "Marie",
    "Helene",
    "Silje",
    "Leah",
    "Maja",
    "Elise",
    "Oda",
    "Kristine",
    "Aurora",
    "Kaja",
    "Camilla",
    "Mari",
    "Maren",
    "Mina",
    "Selma",
    "Jenny",
    "Celine",
    "Eline",
    "Sunniva",
    "Natalie",
    "Tiril",
    "Synne",
    "Sandra",
    "Madeleine"
  ];
});

// node_modules/faker/lib/locales/nb_NO/name/masculine_name.js
var require_masculine_name = __commonJS((exports, module) => {
  module["exports"] = [
    "Markus",
    "Mathias",
    "Kristian",
    "Jonas",
    "Andreas",
    "Alexander",
    "Martin",
    "Sander",
    "Daniel",
    "Magnus",
    "Henrik",
    "Tobias",
    "Kristoffer",
    "Emil",
    "Adrian",
    "Sebastian",
    "Marius",
    "Elias",
    "Fredrik",
    "Thomas",
    "Sondre",
    "Benjamin",
    "Jakob",
    "Oliver",
    "Lucas",
    "Oskar",
    "Nikolai",
    "Filip",
    "Mats",
    "William",
    "Erik",
    "Simen",
    "Ole",
    "Eirik",
    "Isak",
    "Kasper",
    "Noah",
    "Lars",
    "Joakim",
    "Johannes",
    "Håkon",
    "Sindre",
    "Jørgen",
    "Herman",
    "Anders",
    "Jonathan",
    "Even",
    "Theodor",
    "Mikkel",
    "Aksel"
  ];
});

// node_modules/faker/lib/locales/nb_NO/name/last_name.js
var require_last_name16 = __commonJS((exports, module) => {
  module["exports"] = [
    "Johansen",
    "Hansen",
    "Andersen",
    "Kristiansen",
    "Larsen",
    "Olsen",
    "Solberg",
    "Andresen",
    "Pedersen",
    "Nilsen",
    "Berg",
    "Halvorsen",
    "Karlsen",
    "Svendsen",
    "Jensen",
    "Haugen",
    "Martinsen",
    "Eriksen",
    "Sørensen",
    "Johnsen",
    "Myhrer",
    "Johannessen",
    "Nielsen",
    "Hagen",
    "Pettersen",
    "Bakke",
    "Skuterud",
    "Løken",
    "Gundersen",
    "Strand",
    "Jørgensen",
    "Kvarme",
    "Røed",
    "Sæther",
    "Stensrud",
    "Moe",
    "Kristoffersen",
    "Jakobsen",
    "Holm",
    "Aas",
    "Lie",
    "Moen",
    "Andreassen",
    "Vedvik",
    "Nguyen",
    "Jacobsen",
    "Torgersen",
    "Ruud",
    "Krogh",
    "Christiansen",
    "Bjerke",
    "Aalerud",
    "Borge",
    "Sørlie",
    "Berge",
    "Østli",
    "Ødegård",
    "Torp",
    "Henriksen",
    "Haukelidsæter",
    "Fjeld",
    "Danielsen",
    "Aasen",
    "Fredriksen",
    "Dahl",
    "Berntsen",
    "Arnesen",
    "Wold",
    "Thoresen",
    "Solheim",
    "Skoglund",
    "Bakken",
    "Amundsen",
    "Solli",
    "Smogeli",
    "Kristensen",
    "Glosli",
    "Fossum",
    "Evensen",
    "Eide",
    "Carlsen",
    "Østby",
    "Vegge",
    "Tangen",
    "Smedsrud",
    "Olstad",
    "Lunde",
    "Kleven",
    "Huseby",
    "Bjørnstad",
    "Ryan",
    "Rasmussen",
    "Nygård",
    "Nordskaug",
    "Nordby",
    "Mathisen",
    "Hopland",
    "Gran",
    "Finstad",
    "Edvardsen"
  ];
});

// node_modules/faker/lib/locales/nb_NO/name/prefix.js
var require_prefix18 = __commonJS((exports, module) => {
  module["exports"] = [
    "Dr.",
    "Prof."
  ];
});

// node_modules/faker/lib/locales/nb_NO/name/suffix.js
var require_suffix25 = __commonJS((exports, module) => {
  module["exports"] = [
    "Jr.",
    "Sr.",
    "I",
    "II",
    "III",
    "IV",
    "V"
  ];
});

// node_modules/faker/lib/locales/nb_NO/name/name.js
var require_name51 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{last_name} #{suffix}",
    "#{feminine_name} #{feminine_name} #{last_name}",
    "#{masculine_name} #{masculine_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name}",
    "#{first_name} #{last_name}"
  ];
});

// node_modules/faker/lib/locales/nb_NO/name/index.js
var require_name50 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name = require_first_name16();
  name2.feminine_name = require_feminine_name();
  name2.masculine_name = require_masculine_name();
  name2.last_name = require_last_name16();
  name2.prefix = require_prefix18();
  name2.suffix = require_suffix25();
  name2.name = require_name51();
});

// node_modules/faker/lib/locales/nb_NO/phone_number/formats.js
var require_formats31 = __commonJS((exports, module) => {
  module["exports"] = [
    "########",
    "## ## ## ##",
    "### ## ###",
    "+47 ## ## ## ##"
  ];
});

// node_modules/faker/lib/locales/nb_NO/phone_number/index.js
var require_phone_number23 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats31();
});

// node_modules/faker/lib/locales/nb_NO/index.js
var require_nb_NO = __commonJS((exports, module) => {
  var nb_NO = {};
  module["exports"] = nb_NO;
  nb_NO.title = "Norwegian";
  nb_NO.address = require_address24();
  nb_NO.company = require_company18();
  nb_NO.internet = require_internet23();
  nb_NO.name = require_name50();
  nb_NO.phone_number = require_phone_number23();
});

// node_modules/faker/lib/locales/nep/name/first_name.js
var require_first_name17 = __commonJS((exports, module) => {
  module["exports"] = [
    "Aarav",
    "Ajita",
    "Amit",
    "Amita",
    "Amrit",
    "Arijit",
    "Ashmi",
    "Asmita",
    "Bibek",
    "Bijay",
    "Bikash",
    "Bina",
    "Bishal",
    "Bishnu",
    "Buddha",
    "Deepika",
    "Dipendra",
    "Gagan",
    "Ganesh",
    "Khem",
    "Krishna",
    "Laxmi",
    "Manisha",
    "Nabin",
    "Nikita",
    "Niraj",
    "Nischal",
    "Padam",
    "Pooja",
    "Prabin",
    "Prakash",
    "Prashant",
    "Prem",
    "Purna",
    "Rajendra",
    "Rajina",
    "Raju",
    "Rakesh",
    "Ranjan",
    "Ratna",
    "Sagar",
    "Sandeep",
    "Sanjay",
    "Santosh",
    "Sarita",
    "Shilpa",
    "Shirisha",
    "Shristi",
    "Siddhartha",
    "Subash",
    "Sumeet",
    "Sunita",
    "Suraj",
    "Susan",
    "Sushant"
  ];
});

// node_modules/faker/lib/locales/nep/name/last_name.js
var require_last_name17 = __commonJS((exports, module) => {
  module["exports"] = [
    "Adhikari",
    "Aryal",
    "Baral",
    "Basnet",
    "Bastola",
    "Basynat",
    "Bhandari",
    "Bhattarai",
    "Chettri",
    "Devkota",
    "Dhakal",
    "Dongol",
    "Ghale",
    "Gurung",
    "Gyawali",
    "Hamal",
    "Jung",
    "KC",
    "Kafle",
    "Karki",
    "Khadka",
    "Koirala",
    "Lama",
    "Limbu",
    "Magar",
    "Maharjan",
    "Niroula",
    "Pandey",
    "Pradhan",
    "Rana",
    "Raut",
    "Sai",
    "Shai",
    "Shakya",
    "Sherpa",
    "Shrestha",
    "Subedi",
    "Tamang",
    "Thapa"
  ];
});

// node_modules/faker/lib/locales/nep/name/index.js
var require_name52 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name = require_first_name17();
  name2.last_name = require_last_name17();
});

// node_modules/faker/lib/locales/nep/address/postcode.js
var require_postcode22 = __commonJS((exports, module) => {
  module["exports"] = [
    0
  ];
});

// node_modules/faker/lib/locales/nep/address/state.js
var require_state19 = __commonJS((exports, module) => {
  module["exports"] = [
    "Baglung",
    "Banke",
    "Bara",
    "Bardiya",
    "Bhaktapur",
    "Bhojupu",
    "Chitwan",
    "Dailekh",
    "Dang",
    "Dhading",
    "Dhankuta",
    "Dhanusa",
    "Dolakha",
    "Dolpha",
    "Gorkha",
    "Gulmi",
    "Humla",
    "Ilam",
    "Jajarkot",
    "Jhapa",
    "Jumla",
    "Kabhrepalanchok",
    "Kalikot",
    "Kapilvastu",
    "Kaski",
    "Kathmandu",
    "Lalitpur",
    "Lamjung",
    "Manang",
    "Mohottari",
    "Morang",
    "Mugu",
    "Mustang",
    "Myagdi",
    "Nawalparasi",
    "Nuwakot",
    "Palpa",
    "Parbat",
    "Parsa",
    "Ramechhap",
    "Rauswa",
    "Rautahat",
    "Rolpa",
    "Rupandehi",
    "Sankhuwasabha",
    "Sarlahi",
    "Sindhuli",
    "Sindhupalchok",
    "Sunsari",
    "Surket",
    "Syangja",
    "Tanahu",
    "Terhathum"
  ];
});

// node_modules/faker/lib/locales/nep/address/city.js
var require_city16 = __commonJS((exports, module) => {
  module["exports"] = [
    "Bhaktapur",
    "Biratnagar",
    "Birendranagar",
    "Birgunj",
    "Butwal",
    "Damak",
    "Dharan",
    "Gaur",
    "Gorkha",
    "Hetauda",
    "Itahari",
    "Janakpur",
    "Kathmandu",
    "Lahan",
    "Nepalgunj",
    "Pokhara"
  ];
});

// node_modules/faker/lib/locales/nep/address/default_country.js
var require_default_country22 = __commonJS((exports, module) => {
  module["exports"] = [
    "Nepal"
  ];
});

// node_modules/faker/lib/locales/nep/address/index.js
var require_address25 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.postcode = require_postcode22();
  address.state = require_state19();
  address.city = require_city16();
  address.default_country = require_default_country22();
});

// node_modules/faker/lib/locales/nep/internet/free_email.js
var require_free_email16 = __commonJS((exports, module) => {
  module["exports"] = [
    "worldlink.com.np",
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ];
});

// node_modules/faker/lib/locales/nep/internet/domain_suffix.js
var require_domain_suffix23 = __commonJS((exports, module) => {
  module["exports"] = [
    "np",
    "com",
    "info",
    "net",
    "org"
  ];
});

// node_modules/faker/lib/locales/nep/internet/index.js
var require_internet24 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.free_email = require_free_email16();
  internet.domain_suffix = require_domain_suffix23();
});

// node_modules/faker/lib/locales/nep/company/suffix.js
var require_suffix26 = __commonJS((exports, module) => {
  module["exports"] = [
    "Pvt Ltd",
    "Group",
    "Ltd",
    "Limited"
  ];
});

// node_modules/faker/lib/locales/nep/company/index.js
var require_company19 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.suffix = require_suffix26();
});

// node_modules/faker/lib/locales/nep/phone_number/formats.js
var require_formats32 = __commonJS((exports, module) => {
  module["exports"] = [
    "##-#######",
    "+977-#-#######",
    "+977########"
  ];
});

// node_modules/faker/lib/locales/nep/phone_number/index.js
var require_phone_number24 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats32();
});

// node_modules/faker/lib/locales/nep/index.js
var require_nep = __commonJS((exports, module) => {
  var nep = {};
  module["exports"] = nep;
  nep.title = "Nepalese";
  nep.name = require_name52();
  nep.address = require_address25();
  nep.internet = require_internet24();
  nep.company = require_company19();
  nep.phone_number = require_phone_number24();
});

// node_modules/faker/lib/locales/nl/address/city_prefix.js
var require_city_prefix9 = __commonJS((exports, module) => {
  module["exports"] = [
    "Aagte",
    "Aal",
    "Aalden",
    "Aals",
    "Aalst",
    "Aalsum",
    "Aanschot",
    "Aarden",
    "Aarle",
    "Abbe",
    "Abbegea",
    "Abben",
    "Abbestede",
    "Abcoven",
    "Absdale",
    "Abts",
    "Acht",
    "Achter",
    "Achterste",
    "Achtmaal",
    "Achttien",
    "Acquoy",
    "Aduard",
    "Aduarder",
    "Aekinga",
    "Aerde",
    "Aerden",
    "Aerdt",
    "Afferden",
    "Aijen",
    "Akersloot",
    "Akker",
    "Akkerput",
    "Akkrun",
    "Akmarijp",
    "Aldeboarn",
    "Aldegae",
    "Aldtsjerk",
    "Aling",
    "Alkmaar",
    "Allersma",
    "Allinga",
    "Almere",
    "Alphen",
    "Altena",
    "Alteveer",
    "Alting",
    "Altweert",
    "Alverna",
    "Ameide",
    "Amerika",
    "Amerongen",
    "Ammerstol",
    "Ams",
    "Amster",
    "Andel",
    "Angeren",
    "Anholt",
    "Anjum",
    "Anke",
    "Ankum",
    "Anna",
    "Annendaal",
    "Anneville",
    "Anreep",
    "Ansen",
    "Apeldoorn",
    "Apen",
    "Appel",
    "Appen",
    "Arcen",
    "Archem",
    "Arendnest",
    "Arensge",
    "Arkens",
    "Armweide",
    "Arnhem",
    "Arnoud",
    "Arriën",
    "Arriër",
    "Arum",
    "Arwerd",
    "Asch",
    "Asenray",
    "Asperen",
    "Asschat",
    "Assel",
    "Asselt",
    "Assen",
    "Asten",
    "Atze",
    "Augs",
    "Averlo",
    "Avest",
    "Azelo",
    "Azewijn",
    "Ba",
    "Baaium",
    "Baak",
    "Baaks",
    "Baal",
    "Baamsum",
    "Baan",
    "Baard",
    "Baarder",
    "Baarle",
    "Baarlo",
    "Baars",
    "Baarschot",
    "Baexem",
    "Baflo",
    "Bahr",
    "Bakel",
    "Bakelse",
    "Bakertand",
    "Bakke",
    "Bakkerom",
    "Balgoij",
    "Balinge",
    "Ballast",
    "Balleman",
    "Ballum",
    "Balma",
    "Bane",
    "Bankert",
    "Bantega",
    "Bare",
    "Bargebek",
    "Barlage",
    "Barlaque",
    "Barlo",
    "Barnflair",
    "Barrier",
    "Bars",
    "Basse",
    "Basser",
    "Baten",
    "Bath",
    "Bathmen",
    "Bavinkel",
    "Bazuin",
    "Bears",
    "Beckum",
    "Bedaf",
    "Bedum",
    "Beekb",
    "Beekkant",
    "Beemdkant",
    "Beemte",
    "Beertsen",
    "Beerze",
    "Beerzer",
    "Beesd",
    "Beetgum",
    "Beetgumer",
    "Behelp",
    "Beilen",
    "Beinum",
    "Beke",
    "Beldert",
    "Belgen",
    "Belgeren",
    "Belt",
    "Belvert",
    "Bemmel",
    "Bemmer",
    "Benderse",
    "Beneden",
    "Benne",
    "Bennekom",
    "Bent",
    "Bente",
    "Benthem",
    "Berg",
    "Bergakker",
    "Bergen",
    "Bergens",
    "Bergerden",
    "Bergharen",
    "Berghem",
    "Berghum",
    "Bergstoep",
    "Berik",
    "Beringe",
    "Berk",
    "Berke",
    "Berken",
    "Berkt",
    "Berlicum",
    "Bern",
    "Besse",
    "Besthmen",
    "Beswerd",
    "Bethlehem",
    "Beugt",
    "Beuke",
    "Beun",
    "Beusb",
    "Beusichem",
    "Bever",
    "Bidding",
    "Biert",
    "Bierum",
    "Biessum",
    "Biest",
    "Biezen",
    "Bigge",
    "Bijster",
    "Bijsteren",
    "Billing",
    "Bilt",
    "Bingerden",
    "Bisselt",
    "Bissen",
    "Blaker",
    "Blaricum",
    "Blauhûs",
    "Blauw",
    "Blauwe",
    "Blauwen",
    "Bleijen",
    "Bleijs",
    "Blekslage",
    "Blenkert",
    "Blerick",
    "Blessum",
    "Blije",
    "Blijham",
    "Blijnse",
    "Blok",
    "Blokken",
    "Blokum",
    "Boazum",
    "Boberden",
    "Bocholtz",
    "Bocht",
    "Boeiink",
    "Boek",
    "Boekel",
    "Boekelo",
    "Boekelte",
    "Boekend",
    "Boer",
    "Boerakker",
    "Boerelaan",
    "Boeren",
    "Boerengat",
    "Boerenhol",
    "Boerhaar",
    "Boijl",
    "Boks",
    "Boksum",
    "Bokt",
    "Bollinga",
    "Bols",
    "Bolst",
    "Bolt",
    "Bommerig",
    "Bong",
    "Bonkwert",
    "Bonner",
    "Bonrepas",
    "Bontebok",
    "Boomen",
    "Boord",
    "Borger",
    "Borgharen",
    "Borgs",
    "Borgweg",
    "Borkel",
    "Borkeld",
    "Born",
    "Borne",
    "Borneo",
    "Bornwird",
    "Bos",
    "Boschkens",
    "Bosje",
    "Bosjes",
    "Boskamp",
    "Boskant",
    "Boskoop",
    "Boslust",
    "Bosschen",
    "Bosscher",
    "Bosven",
    "Boter",
    "Botshoofd",
    "Boukoul",
    "Bourtange",
    "Boven",
    "Bovenstad",
    "Boxtel",
    "Braak",
    "Braamt",
    "Brabander",
    "Brakel",
    "Brand",
    "Brande",
    "Brandt",
    "Brantgum",
    "Breda",
    "Brede",
    "Bree",
    "Breede",
    "Breedeweg",
    "Breehees",
    "Breezand",
    "Brem",
    "Breskens",
    "Breugel",
    "Breukele",
    "Breyvin",
    "Brielle",
    "Brigdamme",
    "Brij",
    "Brillerij",
    "Briltil",
    "Brinkmans",
    "Britsum",
    "Britswert",
    "Broek",
    "Broekens",
    "Broekkant",
    "Brommelen",
    "Brons",
    "Bruchem",
    "Bruggen",
    "Brugger",
    "Bruil",
    "Bruinisse",
    "Bruister",
    "Brumhold",
    "Brunssum",
    "Brunsting",
    "Bruntinge",
    "Buchten",
    "Buggenum",
    "Buis",
    "Buiten",
    "Bulkenaar",
    "Bult",
    "Bultinge",
    "Bunne",
    "Bunnik",
    "Burdaard",
    "Burger",
    "Burgh",
    "Burgt",
    "Burgum",
    "Burgwerd",
    "Burstum",
    "Burum",
    "Bussel",
    "Busselte",
    "Busser",
    "Buttinge",
    "Buurtje",
    "Cadier",
    "Cadzand",
    "Calfven",
    "Calslagen",
    "Caluna",
    "Camerig",
    "Capelle",
    "Carnisse",
    "Cartils",
    "Castelré",
    "Castenray",
    "Castert",
    "Castricum",
    "Catsop",
    "Chaam",
    "Clinge",
    "Coevorden",
    "Colmont",
    "Cornjum",
    "Cornwerd",
    "Cottessen",
    "Crapoel",
    "Crau",
    "Crix",
    "Crob",
    "Croy",
    "Culemborg",
    "Daarle",
    "Dale",
    "Dalem",
    "Dalen",
    "Daler",
    "Dalerend",
    "Dalerpeel",
    "Dallinge",
    "Damwâld",
    "Daniken",
    "Darp",
    "Dassemus",
    "Dearsum",
    "Dedgum",
    "Deelen",
    "Deelse",
    "Deelshurk",
    "Deense",
    "Deest",
    "Deil",
    "Deinum",
    "Dekes",
    "Dekkers",
    "Del",
    "Delden",
    "Delf",
    "Delft",
    "Dellen",
    "Delwijnen",
    "Demen",
    "Den ",
    "Deursen",
    "Deuteren",
    "Deventer",
    "Dieden",
    "Diemen",
    "Diepen",
    "Diependal",
    "Diepswal",
    "Diermen",
    "Dieskant",
    "Dieteren",
    "Diever",
    "Dijken",
    "Dijker",
    "Dijkster",
    "Dijkwel",
    "Dintelsas",
    "Dinther",
    "Dintherse",
    "Diphoorn",
    "Dirkshorn",
    "Dis",
    "Diunt",
    "Doenrade",
    "Does",
    "Doeveren",
    "Doezum",
    "Doijum",
    "Dokkum",
    "Doldersum",
    "Dom",
    "Dommelen",
    "Donderen",
    "Dongen",
    "Donia",
    "Doniaga",
    "Donzel",
    "Dood",
    "Doodstil",
    "Doon",
    "Doorn",
    "Doornen",
    "Doornik",
    "Doorning",
    "Doorwerth",
    "Doosje",
    "Dorkwerd",
    "Dorst",
    "Dorther",
    "Douverge",
    "Douwen",
    "Draai",
    "Drachten",
    "Dreischor",
    "Drie",
    "Drieboere",
    "Driehuis",
    "Driene",
    "Dries",
    "Driewegen",
    "Driezum",
    "Drieën",
    "Drijber",
    "Drimmelen",
    "Drogeham",
    "Drogt",
    "Dronrijp",
    "Dronten",
    "Druif",
    "Drunen",
    "Druten",
    "Drylts",
    "Duifhuis",
    "Duinen",
    "Duiven",
    "Duizel",
    "Duizend",
    "Dulder",
    "Dunsborg",
    "Dussen",
    "Duur",
    "Duurends",
    "Eagum",
    "Earnewâld",
    "Easterein",
    "Eastermar",
    "Easthim",
    "Echt",
    "Echten",
    "Echtener",
    "Echter",
    "Eder",
    "Eede",
    "Eefsele",
    "Eekt",
    "Eekwerd",
    "Eelde",
    "Eelen",
    "Eems",
    "Eemster",
    "Eemten",
    "Een",
    "Eenigen",
    "Eenrum",
    "Eenum",
    "Eerde",
    "Eersel",
    "Eerste",
    "Ees",
    "Eesterga",
    "Effen",
    "Egchel",
    "Egede",
    "Egmond",
    "Egypte",
    "Eikelen",
    "Eikelhof",
    "Eimeren",
    "Eindewege",
    "Eindje",
    "Ekamp",
    "Elde",
    "Elden",
    "Eldik",
    "Eldrik",
    "Elft",
    "Elkerzee",
    "Ellemeet",
    "Eller",
    "Ellerhei",
    "Ellersing",
    "Elsen",
    "Elshof",
    "Elspeet",
    "Elst",
    "Elsteren",
    "Elzet",
    "Emmeloord",
    "Emmen",
    "Empel",
    "Endepoel",
    "Eng",
    "Enge",
    "Engel",
    "Engelbert",
    "Engelen",
    "Engelum",
    "Englum",
    "Engwegen",
    "Engwierum",
    "Enk",
    "Enschedé",
    "Enspijk",
    "Enumatil",
    "Enzelens",
    "Eper",
    "Eppen",
    "Erichem",
    "Erlecom",
    "Ermelo",
    "Ermer",
    "Escharen",
    "Eschoten",
    "Espelo",
    "Essen",
    "Etenaken",
    "Etzenrade",
    "Eursing",
    "Eursinge",
    "Euverem",
    "Ever",
    "Everd",
    "Everlo",
    "Everse",
    "Ewer",
    "Ewinkel",
    "Exmorra",
    "Eygels",
    "Eyser",
    "Ezinge",
    "Ezuma",
    "Faan",
    "Falom",
    "Farmsum",
    "Fatum",
    "Feerwerd",
    "Fel",
    "Ferwert",
    "Fiemel",
    "Fijfhûs",
    "Finke",
    "Finkum",
    "Flieren",
    "Flânsum",
    "Fokkers",
    "Follega",
    "Folsgeare",
    "Formerum",
    "Fort",
    "Fortmond",
    "Foudgum",
    "Fraamklap",
    "Frankhuis",
    "Frankrijk",
    "Fransum",
    "Friens",
    "Frytum",
    "Fûns",
    "Gaag",
    "Gaanderen",
    "Gaar",
    "Gaast",
    "Gaasten",
    "Gaastmar",
    "Gaete",
    "Gagel",
    "Galder",
    "Gameren",
    "Gammelke",
    "Ganzert",
    "Gapinge",
    "Garminge",
    "Garnwerd",
    "Garre",
    "Garrels",
    "Garst",
    "Garyp",
    "Gassel",
    "Gasthuis",
    "Gawege",
    "Gebergte",
    "Geefs",
    "Geen",
    "Geer",
    "Gees",
    "Geeuwen",
    "Geffen",
    "Gelders",
    "Gelderse",
    "Geleen",
    "Gelkenes",
    "Gellicum",
    "Gemaal",
    "Gement",
    "Gemert",
    "Gemonde",
    "Gendt",
    "Geneijgen",
    "Genen",
    "Gening",
    "Genne",
    "Gennep",
    "Genooi",
    "Gerheggen",
    "Gerner",
    "Gersloot",
    "Gerven",
    "Gerwen",
    "Geulhem",
    "Gever",
    "Geverik",
    "Gewande",
    "Giers",
    "Giessen",
    "Gietelo",
    "Giethmen",
    "Giethoorn",
    "Gijbe",
    "Gijsselte",
    "Gijzel",
    "Gilze",
    "Ginkel",
    "Ginnum",
    "Glaner",
    "Goaiïngea",
    "Godlinze",
    "Goes",
    "Goilberd",
    "Goirle",
    "Goldhoorn",
    "Gooium",
    "Goor",
    "Gorinchem",
    "Gorp",
    "Gortel",
    "Gouda",
    "Gouderak",
    "Goudseweg",
    "Goënga",
    "Graaf",
    "Graauw",
    "Gracht",
    "Graet",
    "Graf",
    "Grafwegen",
    "Gras",
    "Graspeel",
    "Graszode",
    "Grathem",
    "Grauwe",
    "Grave",
    "Grazen",
    "Greonterp",
    "Greup",
    "Griete",
    "Grijps",
    "Grits",
    "Groe",
    "Groede",
    "Groen",
    "Groenekan",
    "Groeneweg",
    "Groenlo",
    "Groep",
    "Groes",
    "Groessen",
    "Groet",
    "Groeve",
    "Groeze",
    "Gron",
    "Groot",
    "Groote",
    "Grote",
    "Grotel",
    "Grou",
    "Gytsjerk",
    "Haaften",
    "Haag",
    "Haagje",
    "Haaks",
    "Haakswold",
    "Haalderen",
    "Haalweide",
    "Haamstede",
    "Haandrik",
    "Haar",
    "Haarlem",
    "Haarsteeg",
    "Haart",
    "Haelen",
    "Haerst",
    "Hagestein",
    "Haiink",
    "Halder",
    "Haler",
    "Half",
    "Halfmijl",
    "Halfweg",
    "Halle",
    "Haller",
    "Hallum",
    "Halte",
    "Halvink",
    "Hamrik",
    "Hamshorn",
    "Handel",
    "Hane",
    "Hank",
    "Hankate",
    "Hansweert",
    "Hantum",
    "Hantumer",
    "Harculo",
    "Harde",
    "Hardinx",
    "Haren",
    "Harener",
    "Haring",
    "Harke",
    "Harkema",
    "Harl",
    "Harles",
    "Harpel",
    "Harre",
    "Harse",
    "Harskamp",
    "Harssens",
    "Hartwerd",
    "Haspel",
    "Hasselt",
    "Hasselter",
    "Hatte",
    "Hattem",
    "Hauwert",
    "Havelt",
    "Havelte",
    "Hayum",
    "Haze",
    "Hazenhurk",
    "Hazennest",
    "Heaburgen",
    "Hedel",
    "Hedik",
    "Heech",
    "Heegher",
    "Heek",
    "Heelsum",
    "Heems",
    "Heemstede",
    "Heenweg",
    "Heer",
    "Heerde",
    "Heere",
    "Heeren",
    "Heers",
    "Hees",
    "Heesakker",
    "Heesbeen",
    "Heesboom",
    "Heesch",
    "Heesselt",
    "Heet",
    "Heezeren",
    "Hefswal",
    "Hegge",
    "Hei",
    "Heiakker",
    "Heibloem",
    "Heid",
    "Heide",
    "Heidekant",
    "Heiden",
    "Heier",
    "Heihoefke",
    "Heij",
    "Heijen",
    "Heikant",
    "Heikantse",
    "Heille",
    "Heine",
    "Heioord",
    "Heister",
    "Heitrak",
    "Hekel",
    "Hekkum",
    "Hel",
    "Helden",
    "Helkant",
    "Hell",
    "Helle",
    "Hellegat",
    "Hellen",
    "Hellevoet",
    "Helling",
    "Hellouw",
    "Helwerd",
    "Hemert",
    "Hemrik",
    "Hendrik",
    "Henge",
    "Herfte",
    "Herike",
    "Herk",
    "Herken",
    "Hermalen",
    "Hernen",
    "Herpen",
    "Herpt",
    "Hersel",
    "Hersend",
    "Hert",
    "Herten",
    "Hertme",
    "Herveld",
    "Herwen",
    "Herwijnen",
    "Herxen",
    "Hesens",
    "Hespe",
    "Hessum",
    "Heugde",
    "Heukelom",
    "Heukelum",
    "Heult",
    "Heumen",
    "Heure",
    "Heurne",
    "Heusden",
    "Heuvel",
    "Heuvels",
    "Heuveltje",
    "Hexel",
    "Heze",
    "Hiaure",
    "Hichtum",
    "Hidaard",
    "Hien",
    "Hierden",
    "Hieslum",
    "Hijken",
    "Hijum",
    "Hilaard",
    "Hilakker",
    "Hild",
    "Hill",
    "Hilte",
    "Hilversum",
    "Hinnaard",
    "Hintham",
    "Hitsertse",
    "Hodenpijl",
    "Hoef",
    "Hoefkens",
    "Hoek",
    "Hoekdries",
    "Hoekelum",
    "Hoekens",
    "Hoekje",
    "Hoeks",
    "Hoekske",
    "Hoetmans",
    "Hoeve",
    "Hoeven",
    "Hoeves",
    "Hoge",
    "Hogert",
    "Hogeweg",
    "Holker",
    "Hollum",
    "Holm",
    "Holset",
    "Holsloot",
    "Holst",
    "Holt",
    "Holte",
    "Holten",
    "Holter",
    "Holthe",
    "Holtien",
    "Holtinge",
    "Holtum",
    "Holwerd",
    "Holwierde",
    "Holwinde",
    "Hommelse",
    "Hommert",
    "Hommerts",
    "Honderd",
    "Honds",
    "Hondsrug",
    "Hongerige",
    "Honthem",
    "Hoog",
    "Hoogcruts",
    "Hooge",
    "Hoogehaar",
    "Hoogen",
    "Hoogeweg",
    "Hooghalen",
    "Hoogmade",
    "Hoogmeien",
    "Hoogwatum",
    "Hool",
    "Hoon",
    "Hoonte",
    "Hoorn",
    "Hoornder",
    "Hoptille",
    "Horck",
    "Horick",
    "Horn",
    "Horssen",
    "Horsten",
    "Horzik",
    "Hout",
    "Houterd",
    "Houtgoor",
    "Houthei",
    "Houthem",
    "Houw",
    "Houwer",
    "Hugten",
    "Huij",
    "Huinen",
    "Huinerwal",
    "Huis",
    "Huissen",
    "Huize",
    "Huizinge",
    "Hul",
    "Huls",
    "Hulsen",
    "Hulst",
    "Hulten",
    "Hultje",
    "Humcoven",
    "Hunnecum",
    "Hunsel",
    "Hupsel",
    "Hurkske",
    "Hurpesch",
    "Hutten",
    "Huurne",
    "Höchte",
    "Höfke",
    "Húns",
    "Idaerd",
    "Idserda",
    "Idsken",
    "Idzegea",
    "Iens",
    "IJmuiden",
    "IJpe",
    "IJpelo",
    "IJsselham",
    "IJzen",
    "IJzeren",
    "IJzerlo",
    "Illik",
    "Indoornik",
    "Ingwert",
    "Inia",
    "Itens",
    "Itteren",
    "Jaars",
    "Jammer",
    "Jannum",
    "Jellum",
    "Jelsum",
    "Jeth",
    "Jipsing",
    "Jirnsum",
    "Jislum",
    "Jisp",
    "Jistrum",
    "Jonas",
    "Jonen",
    "Jonkers",
    "Jorwert",
    "Joure",
    "Jous",
    "Jousterp",
    "Jouswerd",
    "Jouwer",
    "Jubbega",
    "Jukwerd",
    "Junne",
    "Jutryp",
    "Kaag",
    "Kaakhorn",
    "Kaard",
    "Kaarschot",
    "Kaat",
    "Kade",
    "Kadoelen",
    "Kalis",
    "Kalteren",
    "Kameren",
    "Kamp",
    "Kampen",
    "Kamper",
    "Kamperei",
    "Kampers",
    "Kamperzee",
    "Kantens",
    "Kantje",
    "Kapel",
    "Kapelle",
    "Kapolder",
    "Kappert",
    "Karre",
    "Kasen",
    "Kasteren",
    "Kater",
    "Katerveer",
    "Kathagen",
    "Katlijk",
    "Kats",
    "Katwijk",
    "Kaumes",
    "Kavel",
    "Kaweide",
    "Kedichem",
    "Keegen",
    "Keent",
    "Keersop",
    "Keinsmer",
    "Keizers",
    "Kekerdom",
    "Kelmond",
    "Kelpen",
    "Kempkens",
    "Kerk",
    "Kerken",
    "Kerkhof",
    "Kerkrade",
    "Kerkwerve",
    "Keske",
    "Kessel",
    "Kesseleik",
    "Ketting",
    "Keulse",
    "Keunen",
    "Keup",
    "Keuter",
    "Kibbel",
    "Kiel",
    "Kiester",
    "Kievit",
    "Kijf",
    "Kijfwaard",
    "Kijkuit",
    "Kilder",
    "Kille",
    "Kimswerd",
    "Kinderbos",
    "Kink",
    "Kinnum",
    "Kipper",
    "Klaaswaal",
    "Kladde",
    "Klaren",
    "Klatering",
    "Klef",
    "Klei",
    "Klein",
    "Kleinder",
    "Kleine",
    "Kleinge",
    "Klem",
    "Kletter",
    "Klevers",
    "Klispoel",
    "Klomp",
    "Klooster",
    "Klosse",
    "Klösse",
    "Knaphof",
    "Knegsel",
    "Knipe",
    "Knol",
    "Knolle",
    "Knuiters",
    "Koedood",
    "Koehool",
    "Koekange",
    "Koekanger",
    "Koekoek",
    "Koel",
    "Koevering",
    "Kokkelert",
    "Kolder",
    "Kolhol",
    "Kolhorn",
    "Kolk",
    "Kollum",
    "Kolonie",
    "Kommer",
    "Konings",
    "Koog",
    "Kooi",
    "Kooldert",
    "Kopaf",
    "Korhorn",
    "Korn",
    "Kornhorn",
    "Kort",
    "Korte",
    "Korteraar",
    "Korteven",
    "Kortgene",
    "Kostvlies",
    "Koude",
    "Kouden",
    "Koudhoorn",
    "Koulen",
    "Kraan",
    "Kraanven",
    "Kraats",
    "Krabben",
    "Krachtig",
    "Kranen",
    "Krassum",
    "Kreek",
    "Kreielt",
    "Kreijel",
    "Kreijl",
    "Krewerd",
    "Krim",
    "Krimpen",
    "Krol",
    "Kruin",
    "Kruishaar",
    "Kruispunt",
    "Kruisweg",
    "Kuikhorne",
    "Kuiks",
    "Kuinre",
    "Kuitaart",
    "Kuivezand",
    "Kulert",
    "Kulsdom",
    "Kunrade",
    "Kutt",
    "Kuundert",
    "Kuzemer",
    "Kwaal",
    "Kwakel",
    "Kwakkel",
    "Kwartier",
    "Kûkherne",
    "Laag",
    "Laaghalen",
    "Laaghaler",
    "Laak",
    "Laaksum",
    "Laan",
    "Lage",
    "Lagekant",
    "Lageweg",
    "Lakei",
    "Laker",
    "Lalle",
    "Lammer",
    "Lammerweg",
    "Lamperen",
    "Landerum",
    "Landsrade",
    "Lang",
    "Lange",
    "Langeraar",
    "Langerak",
    "Langereit",
    "Lank",
    "Lankes",
    "Laren",
    "Laskwerd",
    "Lattrop",
    "Laude",
    "Lauwer",
    "Ledeacker",
    "Leeg",
    "Leegte",
    "Leek",
    "Leem",
    "Leen",
    "Leens",
    "Leensel",
    "Leermens",
    "Leersum",
    "Leeuw",
    "Leeuwerik",
    "Leeuwte",
    "Lege",
    "Legert",
    "Leiden",
    "Leimuiden",
    "Leker",
    "Lekker",
    "Lelystad",
    "Lemel",
    "Lemele",
    "Lemmer",
    "Lemselo",
    "Lengel",
    "Lent",
    "Lenthe",
    "Leons",
    "Lerop",
    "Lethe",
    "Lettele",
    "Leuke",
    "Leunen",
    "Leur",
    "Leusden",
    "Leutes",
    "Leuth",
    "Leuven",
    "Leuvenum",
    "Leveroy",
    "Lexmond",
    "Lhee",
    "Lichtaard",
    "Lichtmis",
    "Liefkens",
    "Liempde",
    "Lienden",
    "Lier",
    "Lieren",
    "Lierop",
    "Lies",
    "Lievelde",
    "Lieving",
    "Lijnden",
    "Limbricht",
    "Limmen",
    "Linde",
    "Lingsfort",
    "Lintelo",
    "Lintvelde",
    "Lioessens",
    "Lippen",
    "Lith",
    "Lithoijen",
    "Lobith",
    "Loc",
    "Locht",
    "Loenen",
    "Loer",
    "Loete",
    "Logt",
    "Loil",
    "Lollum",
    "Lomm",
    "Lonneker",
    "Loo",
    "Loobrink",
    "Loofaert",
    "Looi",
    "Looien",
    "Look",
    "Loon",
    "Loons",
    "Loonse",
    "Looveer",
    "Loppersum",
    "Lovendaal",
    "Loveren",
    "Loënga",
    "Lubbinge",
    "Luchen",
    "Luchten",
    "Luissel",
    "Luitert",
    "Lula",
    "Lunen",
    "Lunteren",
    "Lunters",
    "Lutjegast",
    "Lutjerijp",
    "Lutke",
    "Lutkepost",
    "Lutten",
    "Lutter",
    "Lytse",
    "Lytshuzen",
    "Maagd",
    "Maaijkant",
    "Maalb",
    "Maaldrift",
    "Maalstede",
    "Maar",
    "Maarn",
    "Maars",
    "Maarssen",
    "Maasband",
    "Maasbree",
    "Maaskant",
    "Maat",
    "Maatsehei",
    "Macharen",
    "Made",
    "Magele",
    "Magrette",
    "Makkum",
    "Mal",
    "Malden",
    "Mallem",
    "Mamelis",
    "Manen",
    "Mantgum",
    "Mantinge",
    "Maren",
    "Maria",
    "Maris",
    "Mark",
    "Markvelde",
    "Marle",
    "Marrum",
    "Mars",
    "Marssum",
    "Marsum",
    "Martens",
    "Marum",
    "Mataram",
    "Maten",
    "Mathijs",
    "Maurik",
    "Maxet",
    "Medemblik",
    "Medevoort",
    "Medler",
    "Meed",
    "Meeden",
    "Meele",
    "Meemortel",
    "Meene",
    "Meer",
    "Meeren",
    "Meern",
    "Meerten",
    "Meerven",
    "Meerwijck",
    "Megelsum",
    "Megen",
    "Meije",
    "Meijel",
    "Melick",
    "Melis",
    "Melissant",
    "Menaldum",
    "Mensinge",
    "Menzel",
    "Meppen",
    "Merkel",
    "Merm",
    "Merselo",
    "Merum",
    "Mesch",
    "Meteren",
    "Metsla",
    "Midbuul",
    "Midde",
    "Middel",
    "Middelijk",
    "Midden",
    "Middenhof",
    "Midlaren",
    "Midlum",
    "Mids",
    "Midwolde",
    "Miedum",
    "Mildert",
    "Milheeze",
    "Mill",
    "Mils",
    "Milschot",
    "Minkeloos",
    "Mispel",
    "Moddergat",
    "Moer",
    "Moeren",
    "Moerslag",
    "Moespot",
    "Molembaix",
    "Molenbaan",
    "Molenbelt",
    "Molengat",
    "Molenhof",
    "Molenperk",
    "Molenrij",
    "Molenstad",
    "Molkwar",
    "Monster",
    "Montfort",
    "Mook",
    "Moord",
    "Moorsel",
    "Morige",
    "Morra",
    "Mortel",
    "Mosbulten",
    "Mosik",
    "Moskou",
    "Mosse",
    "Mossel",
    "Most",
    "Muggenhol",
    "Muis",
    "Muizenhol",
    "Mulderij",
    "Mullegen",
    "Munneke",
    "Munnekens",
    "Munniken",
    "Munte",
    "Murns",
    "Mussel",
    "Mûnein",
    "Naarder",
    "Nabbegat",
    "Nagel",
    "Nansum",
    "Napels",
    "Natten",
    "Neder",
    "Nederbiel",
    "Neer",
    "Neerijnen",
    "Neeritter",
    "Neerloon",
    "Neerst",
    "Negen",
    "Nekke",
    "Nergena",
    "Nia",
    "Nie",
    "Niebert",
    "Niehove",
    "Nier",
    "Niersen",
    "Niesoord",
    "Nieuw",
    "Nieuwaal",
    "Nieuwe",
    "Nieuwer",
    "Nieuwklap",
    "Nieuwkoop",
    "Nieuwolda",
    "Nieuwstad",
    "Niftrik",
    "Nijega",
    "Nijehaske",
    "Nijesyl",
    "Nijken",
    "Nijkerker",
    "Nijlân",
    "Nijmegen",
    "Nijnsel",
    "Nijrees",
    "Nijstad",
    "Nijve",
    "Nispense",
    "Noardein",
    "Noenes",
    "Nolde",
    "Noord",
    "Noorden",
    "Noorder",
    "Noordhorn",
    "Noordink",
    "Noordkant",
    "Noordse",
    "Notendaal",
    "Notsel",
    "Noukoop",
    "Nuenen",
    "Nuijen",
    "Nuil",
    "Nuis",
    "Nunhem",
    "Nunspeet",
    "Nuth",
    "Obbicht",
    "Ock",
    "Oegst",
    "Oekel",
    "Oeken",
    "Oele",
    "Oensel",
    "Oentsjerk",
    "Oerle",
    "Oete",
    "Oever",
    "Offinga",
    "Ofwegen",
    "Ohé;",
    "Oijen",
    "Oirlo",
    "Oirs",
    "Okswerd",
    "Olde",
    "Oldehove",
    "Oldemarkt",
    "Olden",
    "Oldeneel",
    "Oldenhave",
    "Oldeouwer",
    "Oldörp",
    "Olen",
    "Oler",
    "Oling",
    "Olterterp",
    "Ommel",
    "Ommen",
    "Ommeren",
    "Onder",
    "Onna",
    "Onsenoort",
    "Onstwedde",
    "Ooij",
    "Ooijen",
    "Oost",
    "Oostappen",
    "Ooste",
    "Ooster",
    "Oosterend",
    "Oosterens",
    "Oosterhof",
    "Oosterik",
    "Oosternie",
    "Oosternij",
    "Oosterse",
    "Oosterzee",
    "Oosthem",
    "Oostindië",
    "Oostrum",
    "Oostum",
    "Oostwold",
    "Oostzaan",
    "Op",
    "Opende",
    "Ophemert",
    "Ophuis",
    "Opijnen",
    "Opmeeden",
    "Opper",
    "Opperdoes",
    "Opperduit",
    "Opwetten",
    "Opwierde",
    "Oranje",
    "Orvelte",
    "Osen",
    "Oshaar",
    "Ospel",
    "Ossen",
    "Ossenisse",
    "Ostaaijen",
    "Osterbos",
    "Othene",
    "Otterlo",
    "Ottersum",
    "Ou",
    "OuBildt",
    "Oude",
    "Oudega",
    "Oudehaske",
    "Oudehorne",
    "Ouden",
    "Oudenrijn",
    "Ouder",
    "Oudeschip",
    "Oudleusen",
    "Oukoop",
    "OuLeede",
    "OuLeije",
    "OuPolder",
    "OuSchouw",
    "OuStaten",
    "OuStee",
    "OuStoof",
    "OuStrumpt",
    "OuWaranda",
    "Ouwer",
    "OuWillem",
    "Ouwster",
    "Oventje",
    "Over",
    "Overa",
    "Overakker",
    "Overbiel",
    "Overeys",
    "Overgeul",
    "Overheek",
    "Overschot",
    "Overval",
    "Overwater",
    "Paal",
    "Paarde",
    "Paarlo",
    "Paauwen",
    "Paddepoel",
    "Padhuis",
    "Paesens",
    "Palestina",
    "Pallert",
    "Pandgat",
    "Panheel",
    "Pann",
    "Pannerden",
    "Papen",
    "Papenveer",
    "Park",
    "Parrega",
    "Partij",
    "Pasop",
    "Patrijzen",
    "Peebos",
    "Peelkant",
    "Peij",
    "Peizerweg",
    "Pelikaan",
    "Pepinus",
    "Pernis",
    "Pers",
    "Pesaken",
    "Peters",
    "Petten",
    "Piaam",
    "Pieperij",
    "Piepert",
    "Piershil",
    "Pieter",
    "Pikesyl",
    "Piksen",
    "Pingjum",
    "Pinkeveer",
    "Pitteperk",
    "Plaat",
    "Plaats",
    "Plak",
    "Plantage",
    "Plas",
    "Plat",
    "Plein",
    "Poffert",
    "Polen",
    "Polle",
    "Pollen",
    "Ponte",
    "Poonhaven",
    "Poppen",
    "Posterenk",
    "Posthoorn",
    "Pot",
    "Praets",
    "Prickart",
    "Puiflijk",
    "Punt",
    "Purmer",
    "Purmerend",
    "Puth",
    "Putse",
    "Putten",
    "Putters",
    "Pyramide",
    "Raai",
    "Raak",
    "Raam",
    "Raar",
    "Raard",
    "Raayen",
    "Raerd",
    "Rakens",
    "Rakt",
    "Rand",
    "Rande",
    "Randen",
    "Ranum",
    "Raren",
    "Rasquert",
    "Ratte",
    "Ravensgat",
    "Reahûs",
    "Rechteren",
    "Rectum",
    "Reduzum",
    "Reeth",
    "Reidswal",
    "Reitsum",
    "Remswerd",
    "Renesse",
    "Renkum",
    "Renneborg",
    "Rens",
    "Respel",
    "Ressen",
    "Reters",
    "Reth",
    "Reuth",
    "Reutje",
    "Reuzen",
    "Rewert",
    "Rhaan",
    "Rheder",
    "Rhee",
    "Rhenoy",
    "Rhoon",
    "Ridder",
    "Riel",
    "Rien",
    "Riet",
    "Rietven",
    "Rijckholt",
    "Rijen",
    "Rijke",
    "Rijkel",
    "Rijker",
    "Rijlst",
    "Rijnsater",
    "Rijsb",
    "Rijsoord",
    "Rijt",
    "Rijtjes",
    "Ril",
    "Rimpelt",
    "Rink",
    "Rips",
    "Rith",
    "Ritsuma",
    "Roeke",
    "Roekel",
    "Roelage",
    "Roels",
    "Roermond",
    "Roeven",
    "Roggel",
    "Rohel",
    "Rolaf",
    "Roligt",
    "Rollecate",
    "Rolpaal",
    "Rome",
    "Rond",
    "Ronduite",
    "Rood",
    "Roodehaan",
    "Rooden",
    "Roond",
    "Roosteren",
    "Rooth",
    "Ropta",
    "Roskam",
    "Rothem",
    "Rott",
    "Rotte",
    "Rotter",
    "Rotting",
    "Rottum",
    "Rozendaal",
    "Rucphen",
    "Ruif",
    "Ruigen",
    "Ruigezand",
    "Ruimel",
    "Ruinen",
    "Ruischer",
    "Ruiten",
    "Rukven",
    "Rullen",
    "Rumpt",
    "Rund",
    "Rusven",
    "Rut",
    "Ryptsjerk",
    "Rytseterp",
    "Saaksum",
    "Saaxum",
    "Salverd",
    "Sandebuur",
    "Santfort",
    "Santpoort",
    "Sasput",
    "Sauwerd",
    "Schaa",
    "Schaaphok",
    "Schaaps",
    "Schadron",
    "Schafelt",
    "Schaft",
    "Schagen",
    "Schager",
    "Schandelo",
    "Schans",
    "Schapers",
    "Scharen",
    "Scharne",
    "Scharster",
    "Schatkuil",
    "Schaveren",
    "Scheemder",
    "Schelf",
    "Schellach",
    "Schelm",
    "Schettens",
    "Schey",
    "Schieven",
    "Schijf",
    "Schijndel",
    "Schillers",
    "Schimmert",
    "Schin",
    "Schinnen",
    "Schippers",
    "School",
    "Schoon",
    "Schoonen",
    "Schoor",
    "Schoorl",
    "Schoot",
    "Schore",
    "Schoter",
    "Schotters",
    "Schouw",
    "Schouwen",
    "Schouwer",
    "Schraard",
    "Schrap",
    "Schuilen",
    "Schuring",
    "Schuwacht",
    "Sebalde",
    "Seerijp",
    "Sell",
    "Selmien",
    "Selwerd",
    "Seroos",
    "Seters",
    "Sibbe",
    "Siberië",
    "Siegers",
    "Simpel",
    "Sinouts",
    "Sinsel",
    "Sint",
    "Sion",
    "Sittard",
    "Sjunga",
    "Skarl",
    "Skillaerd",
    "Skou",
    "Skrins",
    "Skyldum",
    "Slee",
    "Sleen",
    "Slegge",
    "Slek",
    "Slichten",
    "Sliffert",
    "Slijkwell",
    "Slikken",
    "Sloot",
    "Sluis",
    "Smakt",
    "Smal",
    "Smalle",
    "Smeerling",
    "Smelbrêge",
    "Smele",
    "Smilde",
    "Smits",
    "Sneek",
    "Sneiders",
    "Snelle",
    "Sneps",
    "Snikzwaag",
    "Snipperij",
    "Snoden",
    "Soeter",
    "Solwerd",
    "Someren",
    "Sopsum",
    "Spaanrijt",
    "Spaanse",
    "Spaken",
    "Spannen",
    "Spannum",
    "Spears",
    "Spek",
    "Spekklef",
    "Spekt",
    "Speuld",
    "Speurgt",
    "Spier",
    "Spijk",
    "Spik",
    "Spits",
    "Spoolde",
    "Spoor",
    "Sprang",
    "Sprundel",
    "Spurkt",
    "Stad",
    "Stadterij",
    "Starten",
    "Stations",
    "Staverden",
    "Stedum",
    "Steeg",
    "Steegh",
    "Steel",
    "Steen",
    "Steenkamp",
    "Steenoven",
    "Steenpaal",
    "Steensel",
    "Steenvak",
    "Stegen",
    "Steger",
    "Stegeren",
    "Stein",
    "Sterken",
    "Sterre",
    "Steurgat",
    "Stevens",
    "Stevert",
    "Stiem",
    "Stiens",
    "Stitswerd",
    "Stobben",
    "Stokhem",
    "Stokkelen",
    "Stokkum",
    "Stokske",
    "Stokt",
    "Stolpen",
    "Stomme",
    "Stoof",
    "Stork",
    "Stouten",
    "Stox",
    "Strand",
    "Straten",
    "Strateris",
    "Streek",
    "Strepen",
    "Streukel",
    "Strij",
    "Strijen",
    "Strijp",
    "Stroet",
    "Stroo",
    "Stroopuit",
    "Strubben",
    "Strucht",
    "Strype",
    "Stuw",
    "Sumar",
    "Sumarre",
    "Surhuizum",
    "Susteren",
    "Suttum",
    "Suwâld",
    "Swaenwert",
    "Swalmen",
    "Sweik",
    "Syt",
    "Sânfurd",
    "Taarlo",
    "Teeffelen",
    "Teije",
    "Teijl",
    "Telgt",
    "Tempel",
    "Ter",
    "Terband",
    "Terblijt",
    "Terdiek",
    "Tereyken",
    "Tergêft",
    "Terhagen",
    "Terheijl",
    "Terherne",
    "Terkaple",
    "Terlet",
    "Terlinden",
    "Termaar",
    "Termoors",
    "Termunten",
    "Termunter",
    "Ternaard",
    "Teroele",
    "Terover",
    "Tersoal",
    "Tervaten",
    "Tervoorst",
    "Tervoort",
    "Terwispel",
    "Terwolde",
    "Terziet",
    "Teuge",
    "Theetuin",
    "Themaat",
    "Tholen",
    "Thull",
    "Thuserhof",
    "Tibma",
    "Tiel",
    "Tielse",
    "Tiggelt",
    "Tijnje",
    "Tike",
    "Til",
    "Timmer",
    "Tippe",
    "Tjaard",
    "Tjams",
    "Tjerkwerd",
    "Tjoene",
    "Tolbert",
    "Tolkamer",
    "Tommel",
    "Tongeren",
    "Tongerlo",
    "Tonsel",
    "Toom",
    "Toornwerd",
    "Top",
    "Toren",
    "Toterfout",
    "Toven",
    "Tragel",
    "Tranendal",
    "Trege",
    "Trent",
    "Tricht",
    "Triemen",
    "Trimpert",
    "Trintelen",
    "Tritzum",
    "Tronde",
    "Trophorne",
    "Trutjes",
    "Tuil",
    "Tull",
    "Tungelroy",
    "Turns",
    "Tusschen",
    "Tuut",
    "Tuuthees",
    "Twee",
    "Tweedeweg",
    "TweeTol",
    "Twekkelo",
    "Twello",
    "Twijzel",
    "Twijzeler",
    "Twisk",
    "Tynaarlo",
    "Tytsjerk",
    "Ubach",
    "Ubbena",
    "Ubber",
    "Uddel",
    "Uffelsen",
    "Uffelte",
    "Uit",
    "Uiter",
    "Uithoorn",
    "Uitwierde",
    "Ulfter",
    "Ulicoten",
    "Ulrum",
    "Ulsda",
    "Ulvend",
    "Unga",
    "Uppel",
    "Usquert",
    "Usselo",
    "Vaals",
    "Vaar",
    "Vaarle",
    "Vaart",
    "Vaesrade",
    "Valk",
    "Valken",
    "Valom",
    "Valsteeg",
    "Varik",
    "Varsen",
    "Varssel",
    "Vebenabos",
    "Vecht",
    "Veecaten",
    "Veele",
    "Veeler",
    "Veen",
    "Veenhof",
    "Veenhoop",
    "Veenhuis",
    "Veere",
    "Veessen",
    "Veghel",
    "Veld",
    "Veldbraak",
    "Velde",
    "Velden",
    "Veldhuis",
    "Veldzicht",
    "Velp",
    "Velsen",
    "Veluwe",
    "Vemde",
    "Ven",
    "Venbe",
    "Vene",
    "Venekoten",
    "Venlo",
    "Venne",
    "Venray",
    "Venweg",
    "Vergelt",
    "Verloren",
    "Vessem",
    "Vestjens",
    "Vet",
    "Vetterik",
    "Veulen",
    "Vianen",
    "Viel",
    "Vier",
    "Vierhuis",
    "Vijcie",
    "Vijf",
    "Vilgert",
    "Vilsteren",
    "Vilt",
    "Vink",
    "Vinkel",
    "Vinken",
    "Vinkepas",
    "Vis",
    "Visschers",
    "Vissers",
    "Vlaas",
    "Vlake",
    "Vlas",
    "Vledder",
    "Vleet",
    "Vleuten",
    "Vlie",
    "Vliegert",
    "Vlieghuis",
    "Vlijmen",
    "Vliss",
    "Vlist",
    "Vlodrop",
    "Vloei",
    "Vloet",
    "Vlootkant",
    "Vogelfort",
    "Volthe",
    "Voor",
    "Voorne",
    "Voorrijp",
    "Voorst",
    "Voorstad",
    "Voorste",
    "Voorster",
    "Voort",
    "Voortje",
    "Voorweg",
    "Vorchten",
    "Vorst",
    "Vorsten",
    "Voske",
    "Voskuil",
    "Vosse",
    "Vossebelt",
    "Vosselen",
    "Vossen",
    "Voulwames",
    "Vrachelen",
    "Vragender",
    "Vredepeel",
    "Vree",
    "Vries",
    "Vriezen",
    "Vrij",
    "Vrijhoeve",
    "Vrilk",
    "Vroe",
    "Vroelen",
    "Vuile",
    "Vuilpan",
    "Vuren",
    "Waaksens",
    "Waal",
    "Waar",
    "Waard",
    "Waarde",
    "Waarden",
    "Waarder",
    "Waatskamp",
    "Wachtum",
    "Waddinx",
    "Wadway",
    "Wadwerd",
    "Wagen",
    "Waije",
    "Walder",
    "Walik",
    "Walsert",
    "Wammert",
    "Wanneper",
    "Wanroij",
    "Wapen",
    "Wapse",
    "Wapser",
    "Warf",
    "Warffum",
    "Warfster",
    "Warmen",
    "Warmond",
    "Warnia",
    "Warstiens",
    "Warten",
    "Waspik",
    "Water",
    "Wateren",
    "Waterkant",
    "Waterop",
    "Waterval",
    "Waver",
    "Weakens",
    "Wedde",
    "Wedder",
    "Wee",
    "Weeg",
    "Weende",
    "Weerd",
    "Weerdinge",
    "Weere",
    "Weert",
    "Weerwille",
    "Wehe",
    "Wehl",
    "Weidum",
    "Weij",
    "Weijer",
    "Weijpoort",
    "Weilens",
    "Weimeren",
    "Weipoort",
    "Weite",
    "Weitemans",
    "Weiwerd",
    "Wekerom",
    "Wele",
    "Wells",
    "Welsum",
    "Wely",
    "Wenum",
    "Weper",
    "Wercheren",
    "Weren",
    "Wergea",
    "Werk",
    "Wernhouts",
    "Wesch",
    "Wessing",
    "Wessinge",
    "West",
    "Westeneng",
    "Wester",
    "Westerein",
    "Westerlee",
    "Westernie",
    "Westerse",
    "Westhim",
    "Westlaren",
    "Westmaas",
    "Westrik",
    "Wetering",
    "Wetsens",
    "Weurt",
    "Wevers",
    "Weverslo",
    "Wezel",
    "Wezep",
    "Wezup",
    "Wezuper",
    "Wielder",
    "Wieler",
    "Wielse",
    "Wiene",
    "Wierren",
    "Wierum",
    "Wiesel",
    "Wieuwens",
    "Wijchen",
    "Wijnaldum",
    "Wijnb",
    "Wijnje",
    "Wijster",
    "Wijthmen",
    "Wijzend",
    "Wilderhof",
    "Wildert",
    "Wilgen",
    "Wilp",
    "Wils",
    "Wilsum",
    "Winde",
    "Windraak",
    "Winkel",
    "Winkels",
    "Winssen",
    "Winsum",
    "Wintelre",
    "Winthagen",
    "Wirdum",
    "Wisse",
    "Wissel",
    "Wissen",
    "Witharen",
    "Withuis",
    "Witman",
    "Witmarsum",
    "Witrijt",
    "Witte",
    "Wittelte",
    "Witten",
    "Wiuwert",
    "Wjelsryp",
    "Woerd",
    "Woerdense",
    "Woezik",
    "Wognum",
    "Wolfers",
    "Wolfhaag",
    "Wolfhagen",
    "Wolfheze",
    "Wolfs",
    "Wolfshuis",
    "Wolling",
    "Wolsum",
    "Wommels",
    "Wonne",
    "Wons",
    "Woord",
    "Wopereis",
    "Wordragen",
    "Wormer",
    "Worsum",
    "Woubrugge",
    "Wouwse",
    "Wulpenbek",
    "Wyns",
    "Wytgaard",
    "Wâldsein",
    "Wânswert",
    "Yerseke",
    "Yndyk",
    "Zaamslag",
    "Zaarvlaas",
    "Zalk",
    "Zand",
    "Zande",
    "Zandfort",
    "Zandkant",
    "Zandoerle",
    "Zandplaat",
    "Zandpol",
    "Zandput",
    "Zandvoort",
    "Zee",
    "Zeegat",
    "Zeegse",
    "Zeerijp",
    "Zeesse",
    "Zegge",
    "Zeijen",
    "Zeijer",
    "Zeist",
    "Zelder",
    "Zelen",
    "Zelt",
    "Zenderen",
    "Zethuis",
    "Zeven",
    "Zevenhuis",
    "Zierikzee",
    "Zieuwent",
    "Zijder",
    "Zijdewind",
    "Zijp",
    "Zijper",
    "Zijtaart",
    "Zilven",
    "Zinkweg",
    "Zittard",
    "Zoeke",
    "Zoelen",
    "Zoelmond",
    "Zoerte",
    "Zoeter",
    "Zoggel",
    "Zomerven",
    "Zond",
    "Zorgvlied",
    "Zoutkamp",
    "Zuid",
    "Zuider",
    "Zuidhorn",
    "Zuidlaren",
    "Zuidwolde",
    "Zuidzande",
    "Zuidzijde",
    "Zuilichem",
    "Zundert",
    "Zurich",
    "Zutphen",
    "Zuuk",
    "Zwaag",
    "Zwager",
    "Zwanegat",
    "Zwart",
    "Zwarte",
    "Zweek",
    "Zwiggelte",
    "Zwijn",
    "Zwinderen",
    "Zwolle"
  ];
});

// node_modules/faker/lib/locales/nl/address/city_suffix.js
var require_city_suffix9 = __commonJS((exports, module) => {
  module["exports"] = [
    " aan de IJssel",
    " aan de Rijn",
    "ambacht",
    "beek",
    "berg",
    "bergen",
    "bosch",
    "broek",
    "brug",
    "buren",
    "burg",
    "buurt",
    "dam",
    "dijk",
    "dijke",
    "donk",
    "dorp",
    "eind",
    "enmaes",
    "gat",
    "geest",
    "heide",
    "hoek",
    "horst",
    "hout",
    "hoven",
    "huizen",
    "ingen",
    "kerk",
    "laar",
    "land",
    "meer",
    "recht",
    "schoten",
    "sluis",
    "stroom",
    "swaerd",
    "veen",
    "veld",
    "vliet",
    "weer",
    "wier",
    "wijk",
    "woud",
    "woude",
    "zijl",
    ""
  ];
});

// node_modules/faker/lib/locales/nl/address/city.js
var require_city17 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{city_prefix}#{city_suffix}",
    "#{city_prefix}"
  ];
});

// node_modules/faker/lib/locales/nl/address/country.js
var require_country10 = __commonJS((exports, module) => {
  module["exports"] = [
    "Afghanistan",
    "Akrotiri",
    "Albanië",
    "Algerije",
    "Amerikaanse Maagdeneilanden",
    "Amerikaans-Samoa",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antarctica",
    "Antigua en Barbuda",
    "Arctic Ocean",
    "Argentinië",
    "Armenië",
    "Aruba",
    "Ashmore and Cartier Islands",
    "Atlantic Ocean",
    "Australië",
    "Azerbeidzjan",
    "Bahama's",
    "Bahrein",
    "Bangladesh",
    "Barbados",
    "Belarus",
    "België",
    "Belize",
    "Benin",
    "Bermuda",
    "Bhutan",
    "Bolivië",
    "Bosnië-Herzegovina",
    "Botswana",
    "Bouvet Island",
    "Brazilië",
    "British Indian Ocean Territory",
    "Britse Maagdeneilanden",
    "Brunei",
    "Bulgarije",
    "Burkina Faso",
    "Burundi",
    "Cambodja",
    "Canada",
    "Caymaneilanden",
    "Centraal-Afrikaanse Republiek",
    "Chili",
    "China",
    "Christmas Island",
    "Clipperton Island",
    "Cocos (Keeling) Islands",
    "Colombia",
    "Comoren (Unie)",
    "Congo (Democratische Republiek)",
    "Congo (Volksrepubliek)",
    "Cook",
    "Coral Sea Islands",
    "Costa Rica",
    "Cuba",
    "Cyprus",
    "Denemarken",
    "Dhekelia",
    "Djibouti",
    "Dominica",
    "Dominicaanse Republiek",
    "Duitsland",
    "Ecuador",
    "Egypte",
    "El Salvador",
    "Equatoriaal-Guinea",
    "Eritrea",
    "Estland",
    "Ethiopië",
    "European Union",
    "Falkland",
    "Faroe Islands",
    "Fiji",
    "Filipijnen",
    "Finland",
    "Frankrijk",
    "Frans-Polynesië",
    "French Southern and Antarctic Lands",
    "Gabon",
    "Gambia",
    "Gaza Strip",
    "Georgië",
    "Ghana",
    "Gibraltar",
    "Grenada",
    "Griekenland",
    "Groenland",
    "Guam",
    "Guatemala",
    "Guernsey",
    "Guinea",
    "Guinee-Bissau",
    "Guyana",
    "Haïti",
    "Heard Island and McDonald Islands",
    "Heilige Stoel",
    "Honduras",
    "Hongarije",
    "Hongkong",
    "Ierland",
    "IJsland",
    "India",
    "Indian Ocean",
    "Indonesië",
    "Irak",
    "Iran",
    "Isle of Man",
    "Israël",
    "Italië",
    "Ivoorkust",
    "Jamaica",
    "Jan Mayen",
    "Japan",
    "Jemen",
    "Jersey",
    "Jordanië",
    "Kaapverdië",
    "Kameroen",
    "Kazachstan",
    "Kenia",
    "Kirgizstan",
    "Kiribati",
    "Koeweit",
    "Kroatië",
    "Laos",
    "Lesotho",
    "Letland",
    "Libanon",
    "Liberia",
    "Libië",
    "Liechtenstein",
    "Litouwen",
    "Luxemburg",
    "Macao",
    "Macedonië",
    "Madagaskar",
    "Malawi",
    "Maldiven",
    "Maleisië",
    "Mali",
    "Malta",
    "Marokko",
    "Marshall Islands",
    "Mauritanië",
    "Mauritius",
    "Mayotte",
    "Mexico",
    "Micronesia, Federated States of",
    "Moldavië",
    "Monaco",
    "Mongolië",
    "Montenegro",
    "Montserrat",
    "Mozambique",
    "Myanmar",
    "Namibië",
    "Nauru",
    "Navassa Island",
    "Nederland",
    "Nederlandse Antillen",
    "Nepal",
    "Ngwane",
    "Nicaragua",
    "Nieuw-Caledonië",
    "Nieuw-Zeeland",
    "Niger",
    "Nigeria",
    "Niue",
    "Noordelijke Marianen",
    "Noord-Korea",
    "Noorwegen",
    "Norfolk Island",
    "Oekraïne",
    "Oezbekistan",
    "Oman",
    "Oostenrijk",
    "Pacific Ocean",
    "Pakistan",
    "Palau",
    "Panama",
    "Papoea-Nieuw-Guinea",
    "Paracel Islands",
    "Paraguay",
    "Peru",
    "Pitcairn",
    "Polen",
    "Portugal",
    "Puerto Rico",
    "Qatar",
    "Roemenië",
    "Rusland",
    "Rwanda",
    "Saint Helena",
    "Saint Lucia",
    "Saint Vincent en de Grenadines",
    "Saint-Pierre en Miquelon",
    "Salomon",
    "Samoa",
    "San Marino",
    "São Tomé en Principe",
    "Saudi-Arabië",
    "Senegal",
    "Servië",
    "Seychellen",
    "Sierra Leone",
    "Singapore",
    "Sint-Kitts en Nevis",
    "Slovenië",
    "Slowakije",
    "Soedan",
    "Somalië",
    "South Georgia and the South Sandwich Islands",
    "Southern Ocean",
    "Spanje",
    "Spratly Islands",
    "Sri Lanka",
    "Suriname",
    "Svalbard",
    "Syrië",
    "Tadzjikistan",
    "Taiwan",
    "Tanzania",
    "Thailand",
    "Timor Leste",
    "Togo",
    "Tokelau",
    "Tonga",
    "Trinidad en Tobago",
    "Tsjaad",
    "Tsjechië",
    "Tunesië",
    "Turkije",
    "Turkmenistan",
    "Turks-en Caicoseilanden",
    "Tuvalu",
    "Uganda",
    "Uruguay",
    "Vanuatu",
    "Venezuela",
    "Verenigd Koninkrijk",
    "Verenigde Arabische Emiraten",
    "Verenigde Staten van Amerika",
    "Vietnam",
    "Wake Island",
    "Wallis en Futuna",
    "Wereld",
    "West Bank",
    "Westelijke Sahara",
    "Zambia",
    "Zimbabwe",
    "Zuid-Afrika",
    "Zuid-Korea",
    "Zweden",
    "Zwitserland"
  ];
});

// node_modules/faker/lib/locales/nl/address/building_number.js
var require_building_number15 = __commonJS((exports, module) => {
  module["exports"] = [
    "#",
    "##",
    "###",
    "###a",
    "###b",
    "###c",
    "### I",
    "### II",
    "### III"
  ];
});

// node_modules/faker/lib/locales/nl/address/street_suffix.js
var require_street_suffix12 = __commonJS((exports, module) => {
  module["exports"] = [
    "straat",
    "laan",
    "weg",
    "plantsoen",
    "park"
  ];
});

// node_modules/faker/lib/locales/nl/address/secondary_address.js
var require_secondary_address12 = __commonJS((exports, module) => {
  module["exports"] = [
    "1 hoog",
    "2 hoog",
    "3 hoog"
  ];
});

// node_modules/faker/lib/locales/nl/address/street_name.js
var require_street_name16 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Name.first_name}#{street_suffix}",
    "#{Name.last_name}#{street_suffix}"
  ];
});

// node_modules/faker/lib/locales/nl/address/street_address.js
var require_street_address13 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_name} #{building_number}"
  ];
});

// node_modules/faker/lib/locales/nl/address/postcode.js
var require_postcode23 = __commonJS((exports, module) => {
  module["exports"] = [
    "#### ??"
  ];
});

// node_modules/faker/lib/locales/nl/address/state.js
var require_state20 = __commonJS((exports, module) => {
  module["exports"] = [
    "Noord-Holland",
    "Zuid-Holland",
    "Utrecht",
    "Zeeland",
    "Overijssel",
    "Gelderland",
    "Drenthe",
    "Friesland",
    "Groningen",
    "Noord-Brabant",
    "Limburg",
    "Flevoland"
  ];
});

// node_modules/faker/lib/locales/nl/address/default_country.js
var require_default_country23 = __commonJS((exports, module) => {
  module["exports"] = [
    "Nederland"
  ];
});

// node_modules/faker/lib/locales/nl/address/index.js
var require_address26 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.city_prefix = require_city_prefix9();
  address.city_suffix = require_city_suffix9();
  address.city = require_city17();
  address.country = require_country10();
  address.building_number = require_building_number15();
  address.street_suffix = require_street_suffix12();
  address.secondary_address = require_secondary_address12();
  address.street_name = require_street_name16();
  address.street_address = require_street_address13();
  address.postcode = require_postcode23();
  address.state = require_state20();
  address.default_country = require_default_country23();
});

// node_modules/faker/lib/locales/nl/company/suffix.js
var require_suffix27 = __commonJS((exports, module) => {
  module["exports"] = [
    "BV",
    "V.O.F.",
    "Group",
    "en Zonen"
  ];
});

// node_modules/faker/lib/locales/nl/company/index.js
var require_company20 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.suffix = require_suffix27();
});

// node_modules/faker/lib/locales/nl/internet/free_email.js
var require_free_email17 = __commonJS((exports, module) => {
  module["exports"] = [
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ];
});

// node_modules/faker/lib/locales/nl/internet/domain_suffix.js
var require_domain_suffix24 = __commonJS((exports, module) => {
  module["exports"] = [
    "nl",
    "com",
    "net",
    "org"
  ];
});

// node_modules/faker/lib/locales/nl/internet/index.js
var require_internet25 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.free_email = require_free_email17();
  internet.domain_suffix = require_domain_suffix24();
});

// node_modules/faker/lib/locales/nl/lorem/words.js
var require_words8 = __commonJS((exports, module) => {
  module["exports"] = [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ];
});

// node_modules/faker/lib/locales/nl/lorem/supplemental.js
var require_supplemental5 = __commonJS((exports, module) => {
  module["exports"] = [
    "abbas",
    "abduco",
    "abeo",
    "abscido",
    "absconditus",
    "absens",
    "absorbeo",
    "absque",
    "abstergo",
    "absum",
    "abundans",
    "abutor",
    "accedo",
    "accendo",
    "acceptus",
    "accipio",
    "accommodo",
    "accusator",
    "acer",
    "acerbitas",
    "acervus",
    "acidus",
    "acies",
    "acquiro",
    "acsi",
    "adamo",
    "adaugeo",
    "addo",
    "adduco",
    "ademptio",
    "adeo",
    "adeptio",
    "adfectus",
    "adfero",
    "adficio",
    "adflicto",
    "adhaero",
    "adhuc",
    "adicio",
    "adimpleo",
    "adinventitias",
    "adipiscor",
    "adiuvo",
    "administratio",
    "admiratio",
    "admitto",
    "admoneo",
    "admoveo",
    "adnuo",
    "adopto",
    "adsidue",
    "adstringo",
    "adsuesco",
    "adsum",
    "adulatio",
    "adulescens",
    "adultus",
    "aduro",
    "advenio",
    "adversus",
    "advoco",
    "aedificium",
    "aeger",
    "aegre",
    "aegrotatio",
    "aegrus",
    "aeneus",
    "aequitas",
    "aequus",
    "aer",
    "aestas",
    "aestivus",
    "aestus",
    "aetas",
    "aeternus",
    "ager",
    "aggero",
    "aggredior",
    "agnitio",
    "agnosco",
    "ago",
    "ait",
    "aiunt",
    "alienus",
    "alii",
    "alioqui",
    "aliqua",
    "alius",
    "allatus",
    "alo",
    "alter",
    "altus",
    "alveus",
    "amaritudo",
    "ambitus",
    "ambulo",
    "amicitia",
    "amiculum",
    "amissio",
    "amita",
    "amitto",
    "amo",
    "amor",
    "amoveo",
    "amplexus",
    "amplitudo",
    "amplus",
    "ancilla",
    "angelus",
    "angulus",
    "angustus",
    "animadverto",
    "animi",
    "animus",
    "annus",
    "anser",
    "ante",
    "antea",
    "antepono",
    "antiquus",
    "aperio",
    "aperte",
    "apostolus",
    "apparatus",
    "appello",
    "appono",
    "appositus",
    "approbo",
    "apto",
    "aptus",
    "apud",
    "aqua",
    "ara",
    "aranea",
    "arbitro",
    "arbor",
    "arbustum",
    "arca",
    "arceo",
    "arcesso",
    "arcus",
    "argentum",
    "argumentum",
    "arguo",
    "arma",
    "armarium",
    "armo",
    "aro",
    "ars",
    "articulus",
    "artificiose",
    "arto",
    "arx",
    "ascisco",
    "ascit",
    "asper",
    "aspicio",
    "asporto",
    "assentator",
    "astrum",
    "atavus",
    "ater",
    "atqui",
    "atrocitas",
    "atrox",
    "attero",
    "attollo",
    "attonbitus",
    "auctor",
    "auctus",
    "audacia",
    "audax",
    "audentia",
    "audeo",
    "audio",
    "auditor",
    "aufero",
    "aureus",
    "auris",
    "aurum",
    "aut",
    "autem",
    "autus",
    "auxilium",
    "avaritia",
    "avarus",
    "aveho",
    "averto",
    "avoco",
    "baiulus",
    "balbus",
    "barba",
    "bardus",
    "basium",
    "beatus",
    "bellicus",
    "bellum",
    "bene",
    "beneficium",
    "benevolentia",
    "benigne",
    "bestia",
    "bibo",
    "bis",
    "blandior",
    "bonus",
    "bos",
    "brevis",
    "cado",
    "caecus",
    "caelestis",
    "caelum",
    "calamitas",
    "calcar",
    "calco",
    "calculus",
    "callide",
    "campana",
    "candidus",
    "canis",
    "canonicus",
    "canto",
    "capillus",
    "capio",
    "capitulus",
    "capto",
    "caput",
    "carbo",
    "carcer",
    "careo",
    "caries",
    "cariosus",
    "caritas",
    "carmen",
    "carpo",
    "carus",
    "casso",
    "caste",
    "casus",
    "catena",
    "caterva",
    "cattus",
    "cauda",
    "causa",
    "caute",
    "caveo",
    "cavus",
    "cedo",
    "celebrer",
    "celer",
    "celo",
    "cena",
    "cenaculum",
    "ceno",
    "censura",
    "centum",
    "cerno",
    "cernuus",
    "certe",
    "certo",
    "certus",
    "cervus",
    "cetera",
    "charisma",
    "chirographum",
    "cibo",
    "cibus",
    "cicuta",
    "cilicium",
    "cimentarius",
    "ciminatio",
    "cinis",
    "circumvenio",
    "cito",
    "civis",
    "civitas",
    "clam",
    "clamo",
    "claro",
    "clarus",
    "claudeo",
    "claustrum",
    "clementia",
    "clibanus",
    "coadunatio",
    "coaegresco",
    "coepi",
    "coerceo",
    "cogito",
    "cognatus",
    "cognomen",
    "cogo",
    "cohaero",
    "cohibeo",
    "cohors",
    "colligo",
    "colloco",
    "collum",
    "colo",
    "color",
    "coma",
    "combibo",
    "comburo",
    "comedo",
    "comes",
    "cometes",
    "comis",
    "comitatus",
    "commemoro",
    "comminor",
    "commodo",
    "communis",
    "comparo",
    "compello",
    "complectus",
    "compono",
    "comprehendo",
    "comptus",
    "conatus",
    "concedo",
    "concido",
    "conculco",
    "condico",
    "conduco",
    "confero",
    "confido",
    "conforto",
    "confugo",
    "congregatio",
    "conicio",
    "coniecto",
    "conitor",
    "coniuratio",
    "conor",
    "conqueror",
    "conscendo",
    "conservo",
    "considero",
    "conspergo",
    "constans",
    "consuasor",
    "contabesco",
    "contego",
    "contigo",
    "contra",
    "conturbo",
    "conventus",
    "convoco",
    "copia",
    "copiose",
    "cornu",
    "corona",
    "corpus",
    "correptius",
    "corrigo",
    "corroboro",
    "corrumpo",
    "coruscus",
    "cotidie",
    "crapula",
    "cras",
    "crastinus",
    "creator",
    "creber",
    "crebro",
    "credo",
    "creo",
    "creptio",
    "crepusculum",
    "cresco",
    "creta",
    "cribro",
    "crinis",
    "cruciamentum",
    "crudelis",
    "cruentus",
    "crur",
    "crustulum",
    "crux",
    "cubicularis",
    "cubitum",
    "cubo",
    "cui",
    "cuius",
    "culpa",
    "culpo",
    "cultellus",
    "cultura",
    "cum",
    "cunabula",
    "cunae",
    "cunctatio",
    "cupiditas",
    "cupio",
    "cuppedia",
    "cupressus",
    "cur",
    "cura",
    "curatio",
    "curia",
    "curiositas",
    "curis",
    "curo",
    "curriculum",
    "currus",
    "cursim",
    "curso",
    "cursus",
    "curto",
    "curtus",
    "curvo",
    "curvus",
    "custodia",
    "damnatio",
    "damno",
    "dapifer",
    "debeo",
    "debilito",
    "decens",
    "decerno",
    "decet",
    "decimus",
    "decipio",
    "decor",
    "decretum",
    "decumbo",
    "dedecor",
    "dedico",
    "deduco",
    "defaeco",
    "defendo",
    "defero",
    "defessus",
    "defetiscor",
    "deficio",
    "defigo",
    "defleo",
    "defluo",
    "defungo",
    "degenero",
    "degero",
    "degusto",
    "deinde",
    "delectatio",
    "delego",
    "deleo",
    "delibero",
    "delicate",
    "delinquo",
    "deludo",
    "demens",
    "demergo",
    "demitto",
    "demo",
    "demonstro",
    "demoror",
    "demulceo",
    "demum",
    "denego",
    "denique",
    "dens",
    "denuncio",
    "denuo",
    "deorsum",
    "depereo",
    "depono",
    "depopulo",
    "deporto",
    "depraedor",
    "deprecator",
    "deprimo",
    "depromo",
    "depulso",
    "deputo",
    "derelinquo",
    "derideo",
    "deripio",
    "desidero",
    "desino",
    "desipio",
    "desolo",
    "desparatus",
    "despecto",
    "despirmatio",
    "infit",
    "inflammatio",
    "paens",
    "patior",
    "patria",
    "patrocinor",
    "patruus",
    "pauci",
    "paulatim",
    "pauper",
    "pax",
    "peccatus",
    "pecco",
    "pecto",
    "pectus",
    "pecunia",
    "pecus",
    "peior",
    "pel",
    "ocer",
    "socius",
    "sodalitas",
    "sol",
    "soleo",
    "solio",
    "solitudo",
    "solium",
    "sollers",
    "sollicito",
    "solum",
    "solus",
    "solutio",
    "solvo",
    "somniculosus",
    "somnus",
    "sonitus",
    "sono",
    "sophismata",
    "sopor",
    "sordeo",
    "sortitus",
    "spargo",
    "speciosus",
    "spectaculum",
    "speculum",
    "sperno",
    "spero",
    "spes",
    "spiculum",
    "spiritus",
    "spoliatio",
    "sponte",
    "stabilis",
    "statim",
    "statua",
    "stella",
    "stillicidium",
    "stipes",
    "stips",
    "sto",
    "strenuus",
    "strues",
    "studio",
    "stultus",
    "suadeo",
    "suasoria",
    "sub",
    "subito",
    "subiungo",
    "sublime",
    "subnecto",
    "subseco",
    "substantia",
    "subvenio",
    "succedo",
    "succurro",
    "sufficio",
    "suffoco",
    "suffragium",
    "suggero",
    "sui",
    "sulum",
    "sum",
    "summa",
    "summisse",
    "summopere",
    "sumo",
    "sumptus",
    "supellex",
    "super",
    "suppellex",
    "supplanto",
    "suppono",
    "supra",
    "surculus",
    "surgo",
    "sursum",
    "suscipio",
    "suspendo",
    "sustineo",
    "suus",
    "synagoga",
    "tabella",
    "tabernus",
    "tabesco",
    "tabgo",
    "tabula",
    "taceo",
    "tactus",
    "taedium",
    "talio",
    "talis",
    "talus",
    "tam",
    "tamdiu",
    "tamen",
    "tametsi",
    "tamisium",
    "tamquam",
    "tandem",
    "tantillus",
    "tantum",
    "tardus",
    "tego",
    "temeritas",
    "temperantia",
    "templum",
    "temptatio",
    "tempus",
    "tenax",
    "tendo",
    "teneo",
    "tener",
    "tenuis",
    "tenus",
    "tepesco",
    "tepidus",
    "ter",
    "terebro",
    "teres",
    "terga",
    "tergeo",
    "tergiversatio",
    "tergo",
    "tergum",
    "termes",
    "terminatio",
    "tero",
    "terra",
    "terreo",
    "territo",
    "terror",
    "tersus",
    "tertius",
    "testimonium",
    "texo",
    "textilis",
    "textor",
    "textus",
    "thalassinus",
    "theatrum",
    "theca",
    "thema",
    "theologus",
    "thermae",
    "thesaurus",
    "thesis",
    "thorax",
    "thymbra",
    "thymum",
    "tibi",
    "timidus",
    "timor",
    "titulus",
    "tolero",
    "tollo",
    "tondeo",
    "tonsor",
    "torqueo",
    "torrens",
    "tot",
    "totidem",
    "toties",
    "totus",
    "tracto",
    "trado",
    "traho",
    "trans",
    "tredecim",
    "tremo",
    "trepide",
    "tres",
    "tribuo",
    "tricesimus",
    "triduana",
    "triginta",
    "tripudio",
    "tristis",
    "triumphus",
    "trucido",
    "truculenter",
    "tubineus",
    "tui",
    "tum",
    "tumultus",
    "tunc",
    "turba",
    "turbo",
    "turpe",
    "turpis",
    "tutamen",
    "tutis",
    "tyrannus",
    "uberrime",
    "ubi",
    "ulciscor",
    "ullus",
    "ulterius",
    "ultio",
    "ultra",
    "umbra",
    "umerus",
    "umquam",
    "una",
    "unde",
    "undique",
    "universe",
    "unus",
    "urbanus",
    "urbs",
    "uredo",
    "usitas",
    "usque",
    "ustilo",
    "ustulo",
    "usus",
    "uter",
    "uterque",
    "utilis",
    "utique",
    "utor",
    "utpote",
    "utrimque",
    "utroque",
    "utrum",
    "uxor",
    "vaco",
    "vacuus",
    "vado",
    "vae",
    "valde",
    "valens",
    "valeo",
    "valetudo",
    "validus",
    "vallum",
    "vapulus",
    "varietas",
    "varius",
    "vehemens",
    "vel",
    "velociter",
    "velum",
    "velut",
    "venia",
    "venio",
    "ventito",
    "ventosus",
    "ventus",
    "venustas",
    "ver",
    "verbera",
    "verbum",
    "vere",
    "verecundia",
    "vereor",
    "vergo",
    "veritas",
    "vero",
    "versus",
    "verto",
    "verumtamen",
    "verus",
    "vesco",
    "vesica",
    "vesper",
    "vespillo",
    "vester",
    "vestigium",
    "vestrum",
    "vetus",
    "via",
    "vicinus",
    "vicissitudo",
    "victoria",
    "victus",
    "videlicet",
    "video",
    "viduata",
    "viduo",
    "vigilo",
    "vigor",
    "vilicus",
    "vilis",
    "vilitas",
    "villa",
    "vinco",
    "vinculum",
    "vindico",
    "vinitor",
    "vinum",
    "vir",
    "virga",
    "virgo",
    "viridis",
    "viriliter",
    "virtus",
    "vis",
    "viscus",
    "vita",
    "vitiosus",
    "vitium",
    "vito",
    "vivo",
    "vix",
    "vobis",
    "vociferor",
    "voco",
    "volaticus",
    "volo",
    "volubilis",
    "voluntarius",
    "volup",
    "volutabrum",
    "volva",
    "vomer",
    "vomica",
    "vomito",
    "vorago",
    "vorax",
    "voro",
    "vos",
    "votum",
    "voveo",
    "vox",
    "vulariter",
    "vulgaris",
    "vulgivagus",
    "vulgo",
    "vulgus",
    "vulnero",
    "vulnus",
    "vulpes",
    "vulticulus",
    "vultuosus",
    "xiphias"
  ];
});

// node_modules/faker/lib/locales/nl/lorem/index.js
var require_lorem8 = __commonJS((exports, module) => {
  var lorem = {};
  module["exports"] = lorem;
  lorem.words = require_words8();
  lorem.supplemental = require_supplemental5();
});

// node_modules/faker/lib/locales/nl/name/first_name.js
var require_first_name18 = __commonJS((exports, module) => {
  module["exports"] = [
    "Amber",
    "Anna",
    "Anne",
    "Anouk",
    "Bas",
    "Bram",
    "Britt",
    "Daan",
    "Emma",
    "Eva",
    "Femke",
    "Finn",
    "Fleur",
    "Iris",
    "Isa",
    "Jan",
    "Jasper",
    "Jayden",
    "Jesse",
    "Johannes",
    "Julia",
    "Julian",
    "Kevin",
    "Lars",
    "Lieke",
    "Lisa",
    "Lotte",
    "Lucas",
    "Luuk",
    "Maud",
    "Max",
    "Mike",
    "Milan",
    "Nick",
    "Niels",
    "Noa",
    "Rick",
    "Roos",
    "Ruben",
    "Sander",
    "Sanne",
    "Sem",
    "Sophie",
    "Stijn",
    "Sven",
    "Thijs",
    "Thijs",
    "Thomas",
    "Tim",
    "Tom"
  ];
});

// node_modules/faker/lib/locales/nl/name/tussenvoegsel.js
var require_tussenvoegsel = __commonJS((exports, module) => {
  module["exports"] = [
    "van",
    "van de",
    "van den",
    "van 't",
    "van het",
    "de",
    "den"
  ];
});

// node_modules/faker/lib/locales/nl/name/last_name.js
var require_last_name18 = __commonJS((exports, module) => {
  module["exports"] = [
    "Bakker",
    "Beek",
    "Berg",
    "Boer",
    "Bos",
    "Bosch",
    "Brink",
    "Broek",
    "Brouwer",
    "Bruin",
    "Dam",
    "Dekker",
    "Dijk",
    "Dijkstra",
    "Graaf",
    "Groot",
    "Haan",
    "Hendriks",
    "Heuvel",
    "Hoek",
    "Jacobs",
    "Jansen",
    "Janssen",
    "Jong",
    "Klein",
    "Kok",
    "Koning",
    "Koster",
    "Leeuwen",
    "Linden",
    "Maas",
    "Meer",
    "Meijer",
    "Mulder",
    "Peters",
    "Ruiter",
    "Schouten",
    "Smit",
    "Smits",
    "Stichting",
    "Veen",
    "Ven",
    "Vermeulen",
    "Visser",
    "Vliet",
    "Vos",
    "Vries",
    "Wal",
    "Willems",
    "Wit"
  ];
});

// node_modules/faker/lib/locales/nl/name/prefix.js
var require_prefix19 = __commonJS((exports, module) => {
  module["exports"] = [
    "Dhr.",
    "Mevr. Dr.",
    "Bsc",
    "Msc",
    "Prof."
  ];
});

// node_modules/faker/lib/locales/nl/name/suffix.js
var require_suffix28 = __commonJS((exports, module) => {
  module["exports"] = [
    "Jr.",
    "Sr.",
    "I",
    "II",
    "III",
    "IV",
    "V"
  ];
});

// node_modules/faker/lib/locales/nl/name/name.js
var require_name54 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{last_name} #{suffix}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{tussenvoegsel} #{last_name}",
    "#{first_name} #{tussenvoegsel} #{last_name}"
  ];
});

// node_modules/faker/lib/locales/nl/name/index.js
var require_name53 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name = require_first_name18();
  name2.tussenvoegsel = require_tussenvoegsel();
  name2.last_name = require_last_name18();
  name2.prefix = require_prefix19();
  name2.suffix = require_suffix28();
  name2.name = require_name54();
});

// node_modules/faker/lib/locales/nl/phone_number/formats.js
var require_formats33 = __commonJS((exports, module) => {
  module["exports"] = [
    "(####) ######",
    "##########",
    "06########",
    "06 #### ####"
  ];
});

// node_modules/faker/lib/locales/nl/phone_number/index.js
var require_phone_number25 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats33();
});

// node_modules/faker/lib/locales/nl/index.js
var require_nl = __commonJS((exports, module) => {
  var nl = {};
  module["exports"] = nl;
  nl.title = "Dutch";
  nl.address = require_address26();
  nl.company = require_company20();
  nl.internet = require_internet25();
  nl.lorem = require_lorem8();
  nl.name = require_name53();
  nl.phone_number = require_phone_number25();
});

// node_modules/faker/lib/locales/pl/name/first_name.js
var require_first_name19 = __commonJS((exports, module) => {
  module["exports"] = [
    "Aaron",
    "Abraham",
    "Adam",
    "Adrian",
    "Atanazy",
    "Agaton",
    "Alan",
    "Albert",
    "Aleksander",
    "Aleksy",
    "Alfred",
    "Alwar",
    "Ambroży",
    "Anatol",
    "Andrzej",
    "Antoni",
    "Apollinary",
    "Apollo",
    "Arkady",
    "Arkadiusz",
    "Archibald",
    "Arystarch",
    "Arnold",
    "Arseniusz",
    "Artur",
    "August",
    "Baldwin",
    "Bazyli",
    "Benedykt",
    "Beniamin",
    "Bernard",
    "Bertrand",
    "Bertram",
    "Borys",
    "Brajan",
    "Bruno",
    "Cezary",
    "Cecyliusz",
    "Karol",
    "Krystian",
    "Krzysztof",
    "Klarencjusz",
    "Klaudiusz",
    "Klemens",
    "Konrad",
    "Konstanty",
    "Konstantyn",
    "Kornel",
    "Korneliusz",
    "Korneli",
    "Cyryl",
    "Cyrus",
    "Damian",
    "Daniel",
    "Dariusz",
    "Dawid",
    "Dionizy",
    "Demetriusz",
    "Dominik",
    "Donald",
    "Dorian",
    "Edgar",
    "Edmund",
    "Edward",
    "Edwin",
    "Efrem",
    "Efraim",
    "Eliasz",
    "Eleazar",
    "Emil",
    "Emanuel",
    "Erast",
    "Ernest",
    "Eugeniusz",
    "Eustracjusz",
    "Fabian",
    "Feliks",
    "Florian",
    "Franciszek",
    "Fryderyk",
    "Gabriel",
    "Gedeon",
    "Galfryd",
    "Jerzy",
    "Gerald",
    "Gerazym",
    "Gilbert",
    "Gonsalwy",
    "Grzegorz",
    "Gwido",
    "Harald",
    "Henryk",
    "Herbert",
    "Herman",
    "Hilary",
    "Horacy",
    "Hubert",
    "Hugo",
    "Ignacy",
    "Igor",
    "Hilarion",
    "Innocenty",
    "Hipolit",
    "Ireneusz",
    "Erwin",
    "Izaak",
    "Izajasz",
    "Izydor",
    "Jakub",
    "Jeremi",
    "Jeremiasz",
    "Hieronim",
    "Gerald",
    "Joachim",
    "Jan",
    "Janusz",
    "Jonatan",
    "Józef",
    "Jozue",
    "Julian",
    "Juliusz",
    "Justyn",
    "Kalistrat",
    "Kazimierz",
    "Wawrzyniec",
    "Laurenty",
    "Laurencjusz",
    "Łazarz",
    "Leon",
    "Leonard",
    "Leonid",
    "Leon",
    "Ludwik",
    "Łukasz",
    "Lucjan",
    "Magnus",
    "Makary",
    "Marceli",
    "Marek",
    "Marcin",
    "Mateusz",
    "Maurycy",
    "Maksym",
    "Maksymilian",
    "Michał",
    "Miron",
    "Modest",
    "Mojżesz",
    "Natan",
    "Natanael",
    "Nazariusz",
    "Nazary",
    "Nestor",
    "Mikołaj",
    "Nikodem",
    "Olaf",
    "Oleg",
    "Oliwier",
    "Onufry",
    "Orestes",
    "Oskar",
    "Ansgary",
    "Osmund",
    "Pankracy",
    "Pantaleon",
    "Patryk",
    "Patrycjusz",
    "Patrycy",
    "Paweł",
    "Piotr",
    "Filemon",
    "Filip",
    "Platon",
    "Polikarp",
    "Porfiry",
    "Porfiriusz",
    "Prokles",
    "Prokul",
    "Prokop",
    "Kwintyn",
    "Randolf",
    "Rafał",
    "Rajmund",
    "Reginald",
    "Rajnold",
    "Ryszard",
    "Robert",
    "Roderyk",
    "Roger",
    "Roland",
    "Roman",
    "Romeo",
    "Reginald",
    "Rudolf",
    "Samson",
    "Samuel",
    "Salwator",
    "Sebastian",
    "Serafin",
    "Sergiusz",
    "Seweryn",
    "Zygmunt",
    "Sylwester",
    "Szymon",
    "Salomon",
    "Spirydion",
    "Stanisław",
    "Szczepan",
    "Stefan",
    "Terencjusz",
    "Teodor",
    "Tomasz",
    "Tymoteusz",
    "Tobiasz",
    "Walenty",
    "Walentyn",
    "Walerian",
    "Walery",
    "Wiktor",
    "Wincenty",
    "Witalis",
    "Włodzimierz",
    "Władysław",
    "Błażej",
    "Walter",
    "Walgierz",
    "Wacław",
    "Wilfryd",
    "Wilhelm",
    "Ksawery",
    "Ksenofont",
    "Jerzy",
    "Zachariasz",
    "Zachary",
    "Ada",
    "Adelajda",
    "Agata",
    "Agnieszka",
    "Agrypina",
    "Aida",
    "Aleksandra",
    "Alicja",
    "Alina",
    "Amanda",
    "Anastazja",
    "Angela",
    "Andżelika",
    "Angelina",
    "Anna",
    "Hanna",
    "—",
    "Antonina",
    "Ariadna",
    "Aurora",
    "Barbara",
    "Beatrycze",
    "Berta",
    "Brygida",
    "Kamila",
    "Karolina",
    "Karolina",
    "Kornelia",
    "Katarzyna",
    "Cecylia",
    "Karolina",
    "Chloe",
    "Krystyna",
    "Klara",
    "Klaudia",
    "Klementyna",
    "Konstancja",
    "Koralia",
    "Daria",
    "Diana",
    "Dina",
    "Dorota",
    "Edyta",
    "Eleonora",
    "Eliza",
    "Elżbieta",
    "Izabela",
    "Elwira",
    "Emilia",
    "Estera",
    "Eudoksja",
    "Eudokia",
    "Eugenia",
    "Ewa",
    "Ewelina",
    "Ferdynanda",
    "Florencja",
    "Franciszka",
    "Gabriela",
    "Gertruda",
    "Gloria",
    "Gracja",
    "Jadwiga",
    "Helena",
    "Henryka",
    "Nadzieja",
    "Ida",
    "Ilona",
    "Helena",
    "Irena",
    "Irma",
    "Izabela",
    "Izolda",
    "Jakubina",
    "Joanna",
    "Janina",
    "Żaneta",
    "Joanna",
    "Ginewra",
    "Józefina",
    "Judyta",
    "Julia",
    "Julia",
    "Julita",
    "Justyna",
    "Kira",
    "Cyra",
    "Kleopatra",
    "Larysa",
    "Laura",
    "Laurencja",
    "Laurentyna",
    "Lea",
    "Leila",
    "Eleonora",
    "Liliana",
    "Lilianna",
    "Lilia",
    "Lilla",
    "Liza",
    "Eliza",
    "Laura",
    "Ludwika",
    "Luiza",
    "Łucja",
    "Lucja",
    "Lidia",
    "Amabela",
    "Magdalena",
    "Malwina",
    "Małgorzata",
    "Greta",
    "Marianna",
    "Maryna",
    "Marta",
    "Martyna",
    "Maria",
    "Matylda",
    "Maja",
    "Maja",
    "Melania",
    "Michalina",
    "Monika",
    "Nadzieja",
    "Noemi",
    "Natalia",
    "Nikola",
    "Nina",
    "Olga",
    "Olimpia",
    "Oliwia",
    "Ofelia",
    "Patrycja",
    "Paula",
    "Pelagia",
    "Penelopa",
    "Filipa",
    "Paulina",
    "Rachela",
    "Rebeka",
    "Regina",
    "Renata",
    "Rozalia",
    "Róża",
    "Roksana",
    "Rufina",
    "Ruta",
    "Sabina",
    "Sara",
    "Serafina",
    "Sybilla",
    "Sylwia",
    "Zofia",
    "Stella",
    "Stefania",
    "Zuzanna",
    "Tamara",
    "Tacjana",
    "Tekla",
    "Teodora",
    "Teresa",
    "Walentyna",
    "Waleria",
    "Wanesa",
    "Wiara",
    "Weronika",
    "Wiktoria",
    "Wirginia",
    "Bibiana",
    "Bibianna",
    "Wanda",
    "Wilhelmina",
    "Ksawera",
    "Ksenia",
    "Zoe"
  ];
});

// node_modules/faker/lib/locales/pl/name/last_name.js
var require_last_name19 = __commonJS((exports, module) => {
  module["exports"] = [
    "Adamczak",
    "Adamczyk",
    "Adamek",
    "Adamiak",
    "Adamiec",
    "Adamowicz",
    "Adamski",
    "Adamus",
    "Aleksandrowicz",
    "Andrzejczak",
    "Andrzejewski",
    "Antczak",
    "Augustyn",
    "Augustyniak",
    "Bagiński",
    "Balcerzak",
    "Banach",
    "Banasiak",
    "Banasik",
    "Banaś",
    "Baran",
    "Baranowski",
    "Barański",
    "Bartczak",
    "Bartkowiak",
    "Bartnik",
    "Bartosik",
    "Bednarczyk",
    "Bednarek",
    "Bednarski",
    "Bednarz",
    "Białas",
    "Białek",
    "Białkowski",
    "Bielak",
    "Bielawski",
    "Bielecki",
    "Bielski",
    "Bieniek",
    "Biernacki",
    "Biernat",
    "Bieńkowski",
    "Bilski",
    "Bober",
    "Bochenek",
    "Bogucki",
    "Bogusz",
    "Borek",
    "Borkowski",
    "Borowiec",
    "Borowski",
    "Bożek",
    "Broda",
    "Brzeziński",
    "Brzozowski",
    "Buczek",
    "Buczkowski",
    "Buczyński",
    "Budziński",
    "Budzyński",
    "Bujak",
    "Bukowski",
    "Burzyński",
    "Bąk",
    "Bąkowski",
    "Błaszczak",
    "Błaszczyk",
    "Cebula",
    "Chmiel",
    "Chmielewski",
    "Chmura",
    "Chojnacki",
    "Chojnowski",
    "Cholewa",
    "Chrzanowski",
    "Chudzik",
    "Cichocki",
    "Cichoń",
    "Cichy",
    "Ciesielski",
    "Cieśla",
    "Cieślak",
    "Cieślik",
    "Ciszewski",
    "Cybulski",
    "Cygan",
    "Czaja",
    "Czajka",
    "Czajkowski",
    "Czapla",
    "Czarnecki",
    "Czech",
    "Czechowski",
    "Czekaj",
    "Czerniak",
    "Czerwiński",
    "Czyż",
    "Czyżewski",
    "Dec",
    "Dobosz",
    "Dobrowolski",
    "Dobrzyński",
    "Domagała",
    "Domański",
    "Dominiak",
    "Drabik",
    "Drozd",
    "Drozdowski",
    "Drzewiecki",
    "Dróżdż",
    "Dubiel",
    "Duda",
    "Dudek",
    "Dudziak",
    "Dudzik",
    "Dudziński",
    "Duszyński",
    "Dziedzic",
    "Dziuba",
    "Dąbek",
    "Dąbkowski",
    "Dąbrowski",
    "Dębowski",
    "Dębski",
    "Długosz",
    "Falkowski",
    "Fijałkowski",
    "Filipek",
    "Filipiak",
    "Filipowicz",
    "Flak",
    "Flis",
    "Florczak",
    "Florek",
    "Frankowski",
    "Frąckowiak",
    "Frączek",
    "Frątczak",
    "Furman",
    "Gadomski",
    "Gajda",
    "Gajewski",
    "Gaweł",
    "Gawlik",
    "Gawron",
    "Gawroński",
    "Gałka",
    "Gałązka",
    "Gil",
    "Godlewski",
    "Golec",
    "Gołąb",
    "Gołębiewski",
    "Gołębiowski",
    "Grabowski",
    "Graczyk",
    "Grochowski",
    "Grudzień",
    "Gruszczyński",
    "Gruszka",
    "Grzegorczyk",
    "Grzelak",
    "Grzesiak",
    "Grzesik",
    "Grześkowiak",
    "Grzyb",
    "Grzybowski",
    "Grzywacz",
    "Gutowski",
    "Guzik",
    "Gwóźdź",
    "Góra",
    "Góral",
    "Górecki",
    "Górka",
    "Górniak",
    "Górny",
    "Górski",
    "Gąsior",
    "Gąsiorowski",
    "Głogowski",
    "Głowacki",
    "Głąb",
    "Hajduk",
    "Herman",
    "Iwański",
    "Izdebski",
    "Jabłoński",
    "Jackowski",
    "Jagielski",
    "Jagiełło",
    "Jagodziński",
    "Jakubiak",
    "Jakubowski",
    "Janas",
    "Janiak",
    "Janicki",
    "Janik",
    "Janiszewski",
    "Jankowiak",
    "Jankowski",
    "Janowski",
    "Janus",
    "Janusz",
    "Januszewski",
    "Jaros",
    "Jarosz",
    "Jarząbek",
    "Jasiński",
    "Jastrzębski",
    "Jaworski",
    "Jaśkiewicz",
    "Jezierski",
    "Jurek",
    "Jurkiewicz",
    "Jurkowski",
    "Juszczak",
    "Jóźwiak",
    "Jóźwik",
    "Jędrzejczak",
    "Jędrzejczyk",
    "Jędrzejewski",
    "Kacprzak",
    "Kaczmarczyk",
    "Kaczmarek",
    "Kaczmarski",
    "Kaczor",
    "Kaczorowski",
    "Kaczyński",
    "Kaleta",
    "Kalinowski",
    "Kalisz",
    "Kamiński",
    "Kania",
    "Kaniewski",
    "Kapusta",
    "Karaś",
    "Karczewski",
    "Karpiński",
    "Karwowski",
    "Kasperek",
    "Kasprzak",
    "Kasprzyk",
    "Kaszuba",
    "Kawa",
    "Kawecki",
    "Kałuża",
    "Kaźmierczak",
    "Kiełbasa",
    "Kisiel",
    "Kita",
    "Klimczak",
    "Klimek",
    "Kmiecik",
    "Kmieć",
    "Knapik",
    "Kobus",
    "Kogut",
    "Kolasa",
    "Komorowski",
    "Konieczna",
    "Konieczny",
    "Konopka",
    "Kopczyński",
    "Koper",
    "Kopeć",
    "Korzeniowski",
    "Kos",
    "Kosiński",
    "Kosowski",
    "Kostecki",
    "Kostrzewa",
    "Kot",
    "Kotowski",
    "Kowal",
    "Kowalczuk",
    "Kowalczyk",
    "Kowalewski",
    "Kowalik",
    "Kowalski",
    "Koza",
    "Kozak",
    "Kozieł",
    "Kozioł",
    "Kozłowski",
    "Kołakowski",
    "Kołodziej",
    "Kołodziejczyk",
    "Kołodziejski",
    "Krajewski",
    "Krakowiak",
    "Krawczyk",
    "Krawiec",
    "Kruk",
    "Krukowski",
    "Krupa",
    "Krupiński",
    "Kruszewski",
    "Krysiak",
    "Krzemiński",
    "Krzyżanowski",
    "Król",
    "Królikowski",
    "Książek",
    "Kubacki",
    "Kubiak",
    "Kubica",
    "Kubicki",
    "Kubik",
    "Kuc",
    "Kucharczyk",
    "Kucharski",
    "Kuchta",
    "Kuciński",
    "Kuczyński",
    "Kujawa",
    "Kujawski",
    "Kula",
    "Kulesza",
    "Kulig",
    "Kulik",
    "Kuliński",
    "Kurek",
    "Kurowski",
    "Kuś",
    "Kwaśniewski",
    "Kwiatkowski",
    "Kwiecień",
    "Kwieciński",
    "Kędzierski",
    "Kędziora",
    "Kępa",
    "Kłos",
    "Kłosowski",
    "Lach",
    "Laskowski",
    "Lasota",
    "Lech",
    "Lenart",
    "Lesiak",
    "Leszczyński",
    "Lewandowski",
    "Lewicki",
    "Leśniak",
    "Leśniewski",
    "Lipiński",
    "Lipka",
    "Lipski",
    "Lis",
    "Lisiecki",
    "Lisowski",
    "Maciejewski",
    "Maciąg",
    "Mackiewicz",
    "Madej",
    "Maj",
    "Majcher",
    "Majchrzak",
    "Majewski",
    "Majka",
    "Makowski",
    "Malec",
    "Malicki",
    "Malinowski",
    "Maliszewski",
    "Marchewka",
    "Marciniak",
    "Marcinkowski",
    "Marczak",
    "Marek",
    "Markiewicz",
    "Markowski",
    "Marszałek",
    "Marzec",
    "Masłowski",
    "Matusiak",
    "Matuszak",
    "Matuszewski",
    "Matysiak",
    "Mazur",
    "Mazurek",
    "Mazurkiewicz",
    "Maćkowiak",
    "Małecki",
    "Małek",
    "Maślanka",
    "Michalak",
    "Michalczyk",
    "Michalik",
    "Michalski",
    "Michałek",
    "Michałowski",
    "Mielczarek",
    "Mierzejewski",
    "Mika",
    "Mikołajczak",
    "Mikołajczyk",
    "Mikulski",
    "Milczarek",
    "Milewski",
    "Miller",
    "Misiak",
    "Misztal",
    "Miśkiewicz",
    "Modzelewski",
    "Molenda",
    "Morawski",
    "Motyka",
    "Mroczek",
    "Mroczkowski",
    "Mrozek",
    "Mróz",
    "Mucha",
    "Murawski",
    "Musiał",
    "Muszyński",
    "Młynarczyk",
    "Napierała",
    "Nawrocki",
    "Nawrot",
    "Niedziela",
    "Niedzielski",
    "Niedźwiecki",
    "Niemczyk",
    "Niemiec",
    "Niewiadomski",
    "Noga",
    "Nowacki",
    "Nowaczyk",
    "Nowak",
    "Nowakowski",
    "Nowicki",
    "Nowiński",
    "Olczak",
    "Olejniczak",
    "Olejnik",
    "Olszewski",
    "Orzechowski",
    "Orłowski",
    "Osiński",
    "Ossowski",
    "Ostrowski",
    "Owczarek",
    "Paczkowski",
    "Pająk",
    "Pakuła",
    "Paluch",
    "Panek",
    "Partyka",
    "Pasternak",
    "Paszkowski",
    "Pawelec",
    "Pawlak",
    "Pawlicki",
    "Pawlik",
    "Pawlikowski",
    "Pawłowski",
    "Pałka",
    "Piasecki",
    "Piechota",
    "Piekarski",
    "Pietras",
    "Pietruszka",
    "Pietrzak",
    "Pietrzyk",
    "Pilarski",
    "Pilch",
    "Piotrowicz",
    "Piotrowski",
    "Piwowarczyk",
    "Piórkowski",
    "Piątek",
    "Piątkowski",
    "Piłat",
    "Pluta",
    "Podgórski",
    "Polak",
    "Popławski",
    "Porębski",
    "Prokop",
    "Prus",
    "Przybylski",
    "Przybysz",
    "Przybył",
    "Przybyła",
    "Ptak",
    "Puchalski",
    "Pytel",
    "Płonka",
    "Raczyński",
    "Radecki",
    "Radomski",
    "Rak",
    "Rakowski",
    "Ratajczak",
    "Robak",
    "Rogala",
    "Rogalski",
    "Rogowski",
    "Rojek",
    "Romanowski",
    "Rosa",
    "Rosiak",
    "Rosiński",
    "Ruciński",
    "Rudnicki",
    "Rudziński",
    "Rudzki",
    "Rusin",
    "Rutkowski",
    "Rybak",
    "Rybarczyk",
    "Rybicki",
    "Rzepka",
    "Różański",
    "Różycki",
    "Sadowski",
    "Sawicki",
    "Serafin",
    "Siedlecki",
    "Sienkiewicz",
    "Sieradzki",
    "Sikora",
    "Sikorski",
    "Sitek",
    "Siwek",
    "Skalski",
    "Skiba",
    "Skibiński",
    "Skoczylas",
    "Skowron",
    "Skowronek",
    "Skowroński",
    "Skrzypczak",
    "Skrzypek",
    "Skóra",
    "Smoliński",
    "Sobczak",
    "Sobczyk",
    "Sobieraj",
    "Sobolewski",
    "Socha",
    "Sochacki",
    "Sokołowski",
    "Sokół",
    "Sosnowski",
    "Sowa",
    "Sowiński",
    "Sołtys",
    "Sołtysiak",
    "Sroka",
    "Stachowiak",
    "Stachowicz",
    "Stachura",
    "Stachurski",
    "Stanek",
    "Staniszewski",
    "Stanisławski",
    "Stankiewicz",
    "Stasiak",
    "Staszewski",
    "Stawicki",
    "Stec",
    "Stefaniak",
    "Stefański",
    "Stelmach",
    "Stolarczyk",
    "Stolarski",
    "Strzelczyk",
    "Strzelecki",
    "Stępień",
    "Stępniak",
    "Surma",
    "Suski",
    "Szafrański",
    "Szatkowski",
    "Szczepaniak",
    "Szczepanik",
    "Szczepański",
    "Szczerba",
    "Szcześniak",
    "Szczygieł",
    "Szczęsna",
    "Szczęsny",
    "Szeląg",
    "Szewczyk",
    "Szostak",
    "Szulc",
    "Szwarc",
    "Szwed",
    "Szydłowski",
    "Szymański",
    "Szymczak",
    "Szymczyk",
    "Szymkowiak",
    "Szyszka",
    "Sławiński",
    "Słowik",
    "Słowiński",
    "Tarnowski",
    "Tkaczyk",
    "Tokarski",
    "Tomala",
    "Tomaszewski",
    "Tomczak",
    "Tomczyk",
    "Tracz",
    "Trojanowski",
    "Trzciński",
    "Trzeciak",
    "Turek",
    "Twardowski",
    "Urban",
    "Urbanek",
    "Urbaniak",
    "Urbanowicz",
    "Urbańczyk",
    "Urbański",
    "Walczak",
    "Walkowiak",
    "Warchoł",
    "Wasiak",
    "Wasilewski",
    "Wawrzyniak",
    "Wesołowski",
    "Wieczorek",
    "Wierzbicki",
    "Wilczek",
    "Wilczyński",
    "Wilk",
    "Winiarski",
    "Witczak",
    "Witek",
    "Witkowski",
    "Wiącek",
    "Więcek",
    "Więckowski",
    "Wiśniewski",
    "Wnuk",
    "Wojciechowski",
    "Wojtas",
    "Wojtasik",
    "Wojtczak",
    "Wojtkowiak",
    "Wolak",
    "Woliński",
    "Wolny",
    "Wolski",
    "Woś",
    "Woźniak",
    "Wrona",
    "Wroński",
    "Wróbel",
    "Wróblewski",
    "Wypych",
    "Wysocki",
    "Wyszyński",
    "Wójcicki",
    "Wójcik",
    "Wójtowicz",
    "Wąsik",
    "Węgrzyn",
    "Włodarczyk",
    "Włodarski",
    "Zaborowski",
    "Zabłocki",
    "Zagórski",
    "Zając",
    "Zajączkowski",
    "Zakrzewski",
    "Zalewski",
    "Zaremba",
    "Zarzycki",
    "Zaręba",
    "Zawada",
    "Zawadzki",
    "Zdunek",
    "Zieliński",
    "Zielonka",
    "Ziółkowski",
    "Zięba",
    "Ziętek",
    "Zwoliński",
    "Zych",
    "Zygmunt",
    "Łapiński",
    "Łuczak",
    "Łukasiewicz",
    "Łukasik",
    "Łukaszewski",
    "Śliwa",
    "Śliwiński",
    "Ślusarczyk",
    "Świderski",
    "Świerczyński",
    "Świątek",
    "Żak",
    "Żebrowski",
    "Żmuda",
    "Żuk",
    "Żukowski",
    "Żurawski",
    "Żurek",
    "Żyła"
  ];
});

// node_modules/faker/lib/locales/pl/name/prefix.js
var require_prefix20 = __commonJS((exports, module) => {
  module["exports"] = [
    "Pan",
    "Pani"
  ];
});

// node_modules/faker/lib/locales/pl/name/title.js
var require_title7 = __commonJS((exports, module) => {
  module["exports"] = {
    descriptor: [
      "Lead",
      "Senior",
      "Direct",
      "Corporate",
      "Dynamic",
      "Future",
      "Product",
      "National",
      "Regional",
      "District",
      "Central",
      "Global",
      "Customer",
      "Investor",
      "Dynamic",
      "International",
      "Legacy",
      "Forward",
      "Internal",
      "Human",
      "Chief",
      "Principal"
    ],
    level: [
      "Solutions",
      "Program",
      "Brand",
      "Security",
      "Research",
      "Marketing",
      "Directives",
      "Implementation",
      "Integration",
      "Functionality",
      "Response",
      "Paradigm",
      "Tactics",
      "Identity",
      "Markets",
      "Group",
      "Division",
      "Applications",
      "Optimization",
      "Operations",
      "Infrastructure",
      "Intranet",
      "Communications",
      "Web",
      "Branding",
      "Quality",
      "Assurance",
      "Mobility",
      "Accounts",
      "Data",
      "Creative",
      "Configuration",
      "Accountability",
      "Interactions",
      "Factors",
      "Usability",
      "Metrics"
    ],
    job: [
      "Supervisor",
      "Associate",
      "Executive",
      "Liaison",
      "Officer",
      "Manager",
      "Engineer",
      "Specialist",
      "Director",
      "Coordinator",
      "Administrator",
      "Architect",
      "Analyst",
      "Designer",
      "Planner",
      "Orchestrator",
      "Technician",
      "Developer",
      "Producer",
      "Consultant",
      "Assistant",
      "Facilitator",
      "Agent",
      "Representative",
      "Strategist"
    ]
  };
});

// node_modules/faker/lib/locales/pl/name/name.js
var require_name57 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}"
  ];
});

// node_modules/faker/lib/locales/pl/name/index.js
var require_name56 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name = require_first_name19();
  name2.last_name = require_last_name19();
  name2.prefix = require_prefix20();
  name2.title = require_title7();
  name2.name = require_name57();
});

// node_modules/faker/lib/locales/pl/address/country.js
var require_country11 = __commonJS((exports, module) => {
  module["exports"] = [
    "Afganistan",
    "Albania",
    "Algieria",
    "Andora",
    "Angola",
    "Antigua i Barbuda",
    "Arabia Saudyjska",
    "Argentyna",
    "Armenia",
    "Australia",
    "Austria",
    "Azerbejdżan",
    "Bahamy",
    "Bahrajn",
    "Bangladesz",
    "Barbados",
    "Belgia",
    "Belize",
    "Benin",
    "Bhutan",
    "Białoruś",
    "Birma",
    "Boliwia",
    "Sucre",
    "Bośnia i Hercegowina",
    "Botswana",
    "Brazylia",
    "Brunei",
    "Bułgaria",
    "Burkina Faso",
    "Burundi",
    "Chile",
    "Chiny",
    "Chorwacja",
    "Cypr",
    "Czad",
    "Czarnogóra",
    "Czechy",
    "Dania",
    "Demokratyczna Republika Konga",
    "Dominika",
    "Dominikana",
    "Dżibuti",
    "Egipt",
    "Ekwador",
    "Erytrea",
    "Estonia",
    "Etiopia",
    "Fidżi",
    "Filipiny",
    "Finlandia",
    "Francja",
    "Gabon",
    "Gambia",
    "Ghana",
    "Grecja",
    "Grenada",
    "Gruzja",
    "Gujana",
    "Gwatemala",
    "Gwinea",
    "Gwinea Bissau",
    "Gwinea Równikowa",
    "Haiti",
    "Hiszpania",
    "Holandia",
    "Haga",
    "Honduras",
    "Indie",
    "Indonezja",
    "Irak",
    "Iran",
    "Irlandia",
    "Islandia",
    "Izrael",
    "Jamajka",
    "Japonia",
    "Jemen",
    "Jordania",
    "Kambodża",
    "Kamerun",
    "Kanada",
    "Katar",
    "Kazachstan",
    "Kenia",
    "Kirgistan",
    "Kiribati",
    "Kolumbia",
    "Komory",
    "Kongo",
    "Korea Południowa",
    "Korea Północna",
    "Kostaryka",
    "Kuba",
    "Kuwejt",
    "Laos",
    "Lesotho",
    "Liban",
    "Liberia",
    "Libia",
    "Liechtenstein",
    "Litwa",
    "Luksemburg",
    "Łotwa",
    "Macedonia",
    "Madagaskar",
    "Malawi",
    "Malediwy",
    "Malezja",
    "Mali",
    "Malta",
    "Maroko",
    "Mauretania",
    "Mauritius",
    "Meksyk",
    "Mikronezja",
    "Mołdawia",
    "Monako",
    "Mongolia",
    "Mozambik",
    "Namibia",
    "Nauru",
    "Nepal",
    "Niemcy",
    "Niger",
    "Nigeria",
    "Nikaragua",
    "Norwegia",
    "Nowa Zelandia",
    "Oman",
    "Pakistan",
    "Palau",
    "Panama",
    "Papua-Nowa Gwinea",
    "Paragwaj",
    "Peru",
    "Polska",
    "322 575",
    "Portugalia",
    "Republika Południowej Afryki",
    "Republika Środkowoafrykańska",
    "Republika Zielonego Przylądka",
    "Rosja",
    "Rumunia",
    "Rwanda",
    "Saint Kitts i Nevis",
    "Saint Lucia",
    "Saint Vincent i Grenadyny",
    "Salwador",
    "Samoa",
    "San Marino",
    "Senegal",
    "Serbia",
    "Seszele",
    "Sierra Leone",
    "Singapur",
    "Słowacja",
    "Słowenia",
    "Somalia",
    "Sri Lanka",
    "Stany Zjednoczone",
    "Suazi",
    "Sudan",
    "Sudan Południowy",
    "Surinam",
    "Syria",
    "Szwajcaria",
    "Szwecja",
    "Tadżykistan",
    "Tajlandia",
    "Tanzania",
    "Timor Wschodni",
    "Togo",
    "Tonga",
    "Trynidad i Tobago",
    "Tunezja",
    "Turcja",
    "Turkmenistan",
    "Tuvalu",
    "Funafuti",
    "Uganda",
    "Ukraina",
    "Urugwaj",
    2008,
    "Uzbekistan",
    "Vanuatu",
    "Watykan",
    "Wenezuela",
    "Węgry",
    "Wielka Brytania",
    "Wietnam",
    "Włochy",
    "Wybrzeże Kości Słoniowej",
    "Wyspy Marshalla",
    "Wyspy Salomona",
    "Wyspy Świętego Tomasza i Książęca",
    "Zambia",
    "Zimbabwe",
    "Zjednoczone Emiraty Arabskie"
  ];
});

// node_modules/faker/lib/locales/pl/address/building_number.js
var require_building_number16 = __commonJS((exports, module) => {
  module["exports"] = [
    "#####",
    "####",
    "###"
  ];
});

// node_modules/faker/lib/locales/pl/address/street_prefix.js
var require_street_prefix4 = __commonJS((exports, module) => {
  module["exports"] = [
    "ul.",
    "al."
  ];
});

// node_modules/faker/lib/locales/pl/address/secondary_address.js
var require_secondary_address13 = __commonJS((exports, module) => {
  module["exports"] = [
    "Apt. ###",
    "Suite ###"
  ];
});

// node_modules/faker/lib/locales/pl/address/postcode.js
var require_postcode24 = __commonJS((exports, module) => {
  module["exports"] = [
    "##-###"
  ];
});

// node_modules/faker/lib/locales/pl/address/state.js
var require_state21 = __commonJS((exports, module) => {
  module["exports"] = [
    "Dolnośląskie",
    "Kujawsko-pomorskie",
    "Lubelskie",
    "Lubuskie",
    "Łódzkie",
    "Małopolskie",
    "Mazowieckie",
    "Opolskie",
    "Podkarpackie",
    "Podlaskie",
    "Pomorskie",
    "Śląskie",
    "Świętokrzyskie",
    "Warmińsko-mazurskie",
    "Wielkopolskie",
    "Zachodniopomorskie"
  ];
});

// node_modules/faker/lib/locales/pl/address/state_abbr.js
var require_state_abbr15 = __commonJS((exports, module) => {
  module["exports"] = [
    "DŚ",
    "KP",
    "LB",
    "LS",
    "ŁD",
    "MP",
    "MZ",
    "OP",
    "PK",
    "PL",
    "PM",
    "ŚL",
    "ŚK",
    "WM",
    "WP",
    "ZP"
  ];
});

// node_modules/faker/lib/locales/pl/address/city_name.js
var require_city_name8 = __commonJS((exports, module) => {
  module["exports"] = [
    "Aleksandrów Kujawski",
    "Aleksandrów Łódzki",
    "Alwernia",
    "Andrychów",
    "Annopol",
    "Augustów",
    "Babimost",
    "Baborów",
    "Baranów Sandomierski",
    "Barcin",
    "Barczewo",
    "Bardo",
    "Barlinek",
    "Bartoszyce",
    "Barwice",
    "Bełchatów",
    "Bełżyce",
    "Będzin",
    "Biała",
    "Biała Piska",
    "Biała Podlaska",
    "Biała Rawska",
    "Białobrzegi",
    "Białogard",
    "Biały Bór",
    "Białystok",
    "Biecz",
    "Bielawa",
    "Bielsk Podlaski",
    "Bielsko-Biała",
    "Bieruń",
    "Bierutów",
    "Bieżuń",
    "Biłgoraj",
    "Biskupiec",
    "Bisztynek",
    "Blachownia",
    "Błaszki",
    "Błażowa",
    "Błonie",
    "Bobolice",
    "Bobowa",
    "Bochnia",
    "Bodzentyn",
    "Bogatynia",
    "Boguchwała",
    "Boguszów-Gorce",
    "Bojanowo",
    "Bolesławiec",
    "Bolków",
    "Borek Wielkopolski",
    "Borne Sulinowo",
    "Braniewo",
    "Brańsk",
    "Brodnica",
    "Brok",
    "Brusy",
    "Brwinów",
    "Brzeg",
    "Brzeg Dolny",
    "Brzesko",
    "Brzeszcze",
    "Brześć Kujawski",
    "Brzeziny",
    "Brzostek",
    "Brzozów",
    "Buk",
    "Bukowno",
    "Busko-Zdrój",
    "Bychawa",
    "Byczyna",
    "Bydgoszcz",
    "Bystrzyca Kłodzka",
    "Bytom",
    "Bytom Odrzański",
    "Bytów",
    "Cedynia",
    "Chełm",
    "Chełmek",
    "Chełmno",
    "Chełmża",
    "Chęciny",
    "Chmielnik",
    "Chocianów",
    "Chociwel",
    "Chodecz",
    "Chodzież",
    "Chojna",
    "Chojnice",
    "Chojnów",
    "Choroszcz",
    "Chorzele",
    "Chorzów",
    "Choszczno",
    "Chrzanów",
    "Ciechanowiec",
    "Ciechanów",
    "Ciechocinek",
    "Cieszanów",
    "Cieszyn",
    "Ciężkowice",
    "Cybinka",
    "Czaplinek",
    "Czarna Białostocka",
    "Czarna Woda",
    "Czarne",
    "Czarnków",
    "Czchów",
    "Czechowice-Dziedzice",
    "Czeladź",
    "Czempiń",
    "Czerniejewo",
    "Czersk",
    "Czerwieńsk",
    "Czerwionka-Leszczyny",
    "Częstochowa",
    "Człopa",
    "Człuchów",
    "Czyżew",
    "Ćmielów",
    "Daleszyce",
    "Darłowo",
    "Dąbie",
    "Dąbrowa Białostocka",
    "Dąbrowa Górnicza",
    "Dąbrowa Tarnowska",
    "Debrzno",
    "Dębica",
    "Dęblin",
    "Dębno",
    "Dobczyce",
    "Dobiegniew",
    "Dobra (powiat łobeski)",
    "Dobra (powiat turecki)",
    "Dobre Miasto",
    "Dobrodzień",
    "Dobrzany",
    "Dobrzyń nad Wisłą",
    "Dolsk",
    "Drawno",
    "Drawsko Pomorskie",
    "Drezdenko",
    "Drobin",
    "Drohiczyn",
    "Drzewica",
    "Dukla",
    "Duszniki-Zdrój",
    "Dynów",
    "Działdowo",
    "Działoszyce",
    "Działoszyn",
    "Dzierzgoń",
    "Dzierżoniów",
    "Dziwnów",
    "Elbląg",
    "Ełk",
    "Frampol",
    "Frombork",
    "Garwolin",
    "Gąbin",
    "Gdańsk",
    "Gdynia",
    "Giżycko",
    "Glinojeck",
    "Gliwice",
    "Głogów",
    "Głogów Małopolski",
    "Głogówek",
    "Głowno",
    "Głubczyce",
    "Głuchołazy",
    "Głuszyca",
    "Gniew",
    "Gniewkowo",
    "Gniezno",
    "Gogolin",
    "Golczewo",
    "Goleniów",
    "Golina",
    "Golub-Dobrzyń",
    "Gołańcz",
    "Gołdap",
    "Goniądz",
    "Gorlice",
    "Gorzów Śląski",
    "Gorzów Wielkopolski",
    "Gostynin",
    "Gostyń",
    "Gościno",
    "Gozdnica",
    "Góra",
    "Góra Kalwaria",
    "Górowo Iławeckie",
    "Górzno",
    "Grabów nad Prosną",
    "Grajewo",
    "Grodków",
    "Grodzisk Mazowiecki",
    "Grodzisk Wielkopolski",
    "Grójec",
    "Grudziądz",
    "Grybów",
    "Gryfice",
    "Gryfino",
    "Gryfów Śląski",
    "Gubin",
    "Hajnówka",
    "Halinów",
    "Hel",
    "Hrubieszów",
    "Iława",
    "Iłowa",
    "Iłża",
    "Imielin",
    "Inowrocław",
    "Ińsko",
    "Iwonicz-Zdrój",
    "Izbica Kujawska",
    "Jabłonowo Pomorskie",
    "Janikowo",
    "Janowiec Wielkopolski",
    "Janów Lubelski",
    "Jarocin",
    "Jarosław",
    "Jasień",
    "Jasło",
    "Jastarnia",
    "Jastrowie",
    "Jastrzębie-Zdrój",
    "Jawor",
    "Jaworzno",
    "Jaworzyna Śląska",
    "Jedlicze",
    "Jedlina-Zdrój",
    "Jedwabne",
    "Jelcz-Laskowice",
    "Jelenia Góra",
    "Jeziorany",
    "Jędrzejów",
    "Jordanów",
    "Józefów (powiat biłgorajski)",
    "Józefów (powiat otwocki)",
    "Jutrosin",
    "Kalety",
    "Kalisz",
    "Kalisz Pomorski",
    "Kalwaria Zebrzydowska",
    "Kałuszyn",
    "Kamienna Góra",
    "Kamień Krajeński",
    "Kamień Pomorski",
    "Kamieńsk",
    "Kańczuga",
    "Karczew",
    "Kargowa",
    "Karlino",
    "Karpacz",
    "Kartuzy",
    "Katowice",
    "Kazimierz Dolny",
    "Kazimierza Wielka",
    "Kąty Wrocławskie",
    "Kcynia",
    "Kędzierzyn-Koźle",
    "Kępice",
    "Kępno",
    "Kętrzyn",
    "Kęty",
    "Kielce",
    "Kietrz",
    "Kisielice",
    "Kleczew",
    "Kleszczele",
    "Kluczbork",
    "Kłecko",
    "Kłobuck",
    "Kłodawa",
    "Kłodzko",
    "Knurów",
    "Knyszyn",
    "Kobylin",
    "Kobyłka",
    "Kock",
    "Kolbuszowa",
    "Kolno",
    "Kolonowskie",
    "Koluszki",
    "Kołaczyce",
    "Koło",
    "Kołobrzeg",
    "Koniecpol",
    "Konin",
    "Konstancin-Jeziorna",
    "Konstantynów Łódzki",
    "Końskie",
    "Koprzywnica",
    "Korfantów",
    "Koronowo",
    "Korsze",
    "Kosów Lacki",
    "Kostrzyn",
    "Kostrzyn nad Odrą",
    "Koszalin",
    "Kościan",
    "Kościerzyna",
    "Kowal",
    "Kowalewo Pomorskie",
    "Kowary",
    "Koziegłowy",
    "Kozienice",
    "Koźmin Wielkopolski",
    "Kożuchów",
    "Kórnik",
    "Krajenka",
    "Kraków",
    "Krapkowice",
    "Krasnobród",
    "Krasnystaw",
    "Kraśnik",
    "Krobia",
    "Krosno",
    "Krosno Odrzańskie",
    "Krośniewice",
    "Krotoszyn",
    "Kruszwica",
    "Krynica Morska",
    "Krynica-Zdrój",
    "Krynki",
    "Krzanowice",
    "Krzepice",
    "Krzeszowice",
    "Krzywiń",
    "Krzyż Wielkopolski",
    "Książ Wielkopolski",
    "Kudowa-Zdrój",
    "Kunów",
    "Kutno",
    "Kuźnia Raciborska",
    "Kwidzyn",
    "Lądek-Zdrój",
    "Legionowo",
    "Legnica",
    "Lesko",
    "Leszno",
    "Leśna",
    "Leśnica",
    "Lewin Brzeski",
    "Leżajsk",
    "Lębork",
    "Lędziny",
    "Libiąż",
    "Lidzbark",
    "Lidzbark Warmiński",
    "Limanowa",
    "Lipiany",
    "Lipno",
    "Lipsk",
    "Lipsko",
    "Lubaczów",
    "Lubań",
    "Lubartów",
    "Lubawa",
    "Lubawka",
    "Lubień Kujawski",
    "Lubin",
    "Lublin",
    "Lubliniec",
    "Lubniewice",
    "Lubomierz",
    "Luboń",
    "Lubraniec",
    "Lubsko",
    "Lwówek",
    "Lwówek Śląski",
    "Łabiszyn",
    "Łańcut",
    "Łapy",
    "Łasin",
    "Łask",
    "Łaskarzew",
    "Łaszczów",
    "Łaziska Górne",
    "Łazy",
    "Łeba",
    "Łęczna",
    "Łęczyca",
    "Łęknica",
    "Łobez",
    "Łobżenica",
    "Łochów",
    "Łomianki",
    "Łomża",
    "Łosice",
    "Łowicz",
    "Łódź",
    "Łuków",
    "Maków Mazowiecki",
    "Maków Podhalański",
    "Malbork",
    "Małogoszcz",
    "Małomice",
    "Margonin",
    "Marki",
    "Maszewo",
    "Miasteczko Śląskie",
    "Miastko",
    "Michałowo",
    "Miechów",
    "Miejska Górka",
    "Mielec",
    "Mieroszów",
    "Mieszkowice",
    "Międzybórz",
    "Międzychód",
    "Międzylesie",
    "Międzyrzec Podlaski",
    "Międzyrzecz",
    "Międzyzdroje",
    "Mikołajki",
    "Mikołów",
    "Mikstat",
    "Milanówek",
    "Milicz",
    "Miłakowo",
    "Miłomłyn",
    "Miłosław",
    "Mińsk Mazowiecki",
    "Mirosławiec",
    "Mirsk",
    "Mława",
    "Młynary",
    "Mogielnica",
    "Mogilno",
    "Mońki",
    "Morąg",
    "Mordy",
    "Moryń",
    "Mosina",
    "Mrągowo",
    "Mrocza",
    "Mszana Dolna",
    "Mszczonów",
    "Murowana Goślina",
    "Muszyna",
    "Mysłowice",
    "Myszków",
    "Myszyniec",
    "Myślenice",
    "Myślibórz",
    "Nakło nad Notecią",
    "Nałęczów",
    "Namysłów",
    "Narol",
    "Nasielsk",
    "Nekla",
    "Nidzica",
    "Niemcza",
    "Niemodlin",
    "Niepołomice",
    "Nieszawa",
    "Nisko",
    "Nowa Dęba",
    "Nowa Ruda",
    "Nowa Sarzyna",
    "Nowa Sól",
    "Nowe",
    "Nowe Brzesko",
    "Nowe Miasteczko",
    "Nowe Miasto Lubawskie",
    "Nowe Miasto nad Pilicą",
    "Nowe Skalmierzyce",
    "Nowe Warpno",
    "Nowogard",
    "Nowogrodziec",
    "Nowogród",
    "Nowogród Bobrzański",
    "Nowy Dwór Gdański",
    "Nowy Dwór Mazowiecki",
    "Nowy Sącz",
    "Nowy Staw",
    "Nowy Targ",
    "Nowy Tomyśl",
    "Nowy Wiśnicz",
    "Nysa",
    "Oborniki",
    "Oborniki Śląskie",
    "Obrzycko",
    "Odolanów",
    "Ogrodzieniec",
    "Okonek",
    "Olecko",
    "Olesno",
    "Oleszyce",
    "Oleśnica",
    "Olkusz",
    "Olsztyn",
    "Olsztynek",
    "Olszyna",
    "Oława",
    "Opalenica",
    "Opatów",
    "Opoczno",
    "Opole",
    "Opole Lubelskie",
    "Orneta",
    "Orzesze",
    "Orzysz",
    "Osieczna",
    "Osiek",
    "Ostrołęka",
    "Ostroróg",
    "Ostrowiec Świętokrzyski",
    "Ostróda",
    "Ostrów Lubelski",
    "Ostrów Mazowiecka",
    "Ostrów Wielkopolski",
    "Ostrzeszów",
    "Ośno Lubuskie",
    "Oświęcim",
    "Otmuchów",
    "Otwock",
    "Ozimek",
    "Ozorków",
    "Ożarów",
    "Ożarów Mazowiecki",
    "Pabianice",
    "Paczków",
    "Pajęczno",
    "Pakość",
    "Parczew",
    "Pasłęk",
    "Pasym",
    "Pelplin",
    "Pełczyce",
    "Piaseczno",
    "Piaski",
    "Piastów",
    "Piechowice",
    "Piekary Śląskie",
    "Pieniężno",
    "Pieńsk",
    "Pieszyce",
    "Pilawa",
    "Pilica",
    "Pilzno",
    "Piła",
    "Piława Górna",
    "Pińczów",
    "Pionki",
    "Piotrków Kujawski",
    "Piotrków Trybunalski",
    "Pisz",
    "Piwniczna-Zdrój",
    "Pleszew",
    "Płock",
    "Płońsk",
    "Płoty",
    "Pniewy",
    "Pobiedziska",
    "Poddębice",
    "Podkowa Leśna",
    "Pogorzela",
    "Polanica-Zdrój",
    "Polanów",
    "Police",
    "Polkowice",
    "Połaniec",
    "Połczyn-Zdrój",
    "Poniatowa",
    "Poniec",
    "Poręba",
    "Poznań",
    "Prabuty",
    "Praszka",
    "Prochowice",
    "Proszowice",
    "Prószków",
    "Pruchnik",
    "Prudnik",
    "Prusice",
    "Pruszcz Gdański",
    "Pruszków",
    "Przasnysz",
    "Przecław",
    "Przedbórz",
    "Przedecz",
    "Przemków",
    "Przemyśl",
    "Przeworsk",
    "Przysucha",
    "Pszczyna",
    "Pszów",
    "Puck",
    "Puławy",
    "Pułtusk",
    "Puszczykowo",
    "Pyrzyce",
    "Pyskowice",
    "Pyzdry",
    "Rabka-Zdrój",
    "Raciąż",
    "Racibórz",
    "Radków",
    "Radlin",
    "Radłów",
    "Radom",
    "Radomsko",
    "Radomyśl Wielki",
    "Radymno",
    "Radziejów",
    "Radzionków",
    "Radzymin",
    "Radzyń Chełmiński",
    "Radzyń Podlaski",
    "Rajgród",
    "Rakoniewice",
    "Raszków",
    "Rawa Mazowiecka",
    "Rawicz",
    "Recz",
    "Reda",
    "Rejowiec Fabryczny",
    "Resko",
    "Reszel",
    "Rogoźno",
    "Ropczyce",
    "Różan",
    "Ruciane-Nida",
    "Ruda Śląska",
    "Rudnik nad Sanem",
    "Rumia",
    "Rybnik",
    "Rychwał",
    "Rydułtowy",
    "Rydzyna",
    "Ryglice",
    "Ryki",
    "Rymanów",
    "Ryn",
    "Rypin",
    "Rzepin",
    "Rzeszów",
    "Rzgów",
    "Sandomierz",
    "Sanok",
    "Sejny",
    "Serock",
    "Sędziszów",
    "Sędziszów Małopolski",
    "Sępopol",
    "Sępólno Krajeńskie",
    "Sianów",
    "Siechnice",
    "Siedlce",
    "Siemianowice Śląskie",
    "Siemiatycze",
    "Sieniawa",
    "Sieradz",
    "Sieraków",
    "Sierpc",
    "Siewierz",
    "Skalbmierz",
    "Skała",
    "Skarszewy",
    "Skaryszew",
    "Skarżysko-Kamienna",
    "Skawina",
    "Skępe",
    "Skierniewice",
    "Skoczów",
    "Skoki",
    "Skórcz",
    "Skwierzyna",
    "Sława",
    "Sławków",
    "Sławno",
    "Słomniki",
    "Słubice",
    "Słupca",
    "Słupsk",
    "Sobótka",
    "Sochaczew",
    "Sokołów Małopolski",
    "Sokołów Podlaski",
    "Sokółka",
    "Solec Kujawski",
    "Sompolno",
    "Sopot",
    "Sosnowiec",
    "Sośnicowice",
    "Stalowa Wola",
    "Starachowice",
    "Stargard Szczeciński",
    "Starogard Gdański",
    "Stary Sącz",
    "Staszów",
    "Stawiski",
    "Stawiszyn",
    "Stąporków",
    "Stęszew",
    "Stoczek Łukowski",
    "Stronie Śląskie",
    "Strumień",
    "Stryków",
    "Strzegom",
    "Strzelce Krajeńskie",
    "Strzelce Opolskie",
    "Strzelin",
    "Strzelno",
    "Strzyżów",
    "Sucha Beskidzka",
    "Suchań",
    "Suchedniów",
    "Suchowola",
    "Sulechów",
    "Sulejów",
    "Sulejówek",
    "Sulęcin",
    "Sulmierzyce",
    "Sułkowice",
    "Supraśl",
    "Suraż",
    "Susz",
    "Suwałki",
    "Swarzędz",
    "Syców",
    "Szadek",
    "Szamocin",
    "Szamotuły",
    "Szczawnica",
    "Szczawno-Zdrój",
    "Szczebrzeszyn",
    "Szczecin",
    "Szczecinek",
    "Szczekociny",
    "Szczucin",
    "Szczuczyn",
    "Szczyrk",
    "Szczytna",
    "Szczytno",
    "Szepietowo",
    "Szklarska Poręba",
    "Szlichtyngowa",
    "Szprotawa",
    "Sztum",
    "Szubin",
    "Szydłowiec",
    "Ścinawa",
    "Ślesin",
    "Śmigiel",
    "Śrem",
    "Środa Śląska",
    "Środa Wielkopolska",
    "Świątniki Górne",
    "Świdnica",
    "Świdnik",
    "Świdwin",
    "Świebodzice",
    "Świebodzin",
    "Świecie",
    "Świeradów-Zdrój",
    "Świerzawa",
    "Świętochłowice",
    "Świnoujście",
    "Tarczyn",
    "Tarnobrzeg",
    "Tarnogród",
    "Tarnowskie Góry",
    "Tarnów",
    "Tczew",
    "Terespol",
    "Tłuszcz",
    "Tolkmicko",
    "Tomaszów Lubelski",
    "Tomaszów Mazowiecki",
    "Toruń",
    "Torzym",
    "Toszek",
    "Trzcianka",
    "Trzciel",
    "Trzcińsko-Zdrój",
    "Trzebiatów",
    "Trzebinia",
    "Trzebnica",
    "Trzemeszno",
    "Tuchola",
    "Tuchów",
    "Tuczno",
    "Tuliszków",
    "Turek",
    "Tuszyn",
    "Twardogóra",
    "Tychowo",
    "Tychy",
    "Tyczyn",
    "Tykocin",
    "Tyszowce",
    "Ujazd",
    "Ujście",
    "Ulanów",
    "Uniejów",
    "Ustka",
    "Ustroń",
    "Ustrzyki Dolne",
    "Wadowice",
    "Wałbrzych",
    "Wałcz",
    "Warka",
    "Warszawa",
    "Warta",
    "Wasilków",
    "Wąbrzeźno",
    "Wąchock",
    "Wągrowiec",
    "Wąsosz",
    "Wejherowo",
    "Węgliniec",
    "Węgorzewo",
    "Węgorzyno",
    "Węgrów",
    "Wiązów",
    "Wieleń",
    "Wielichowo",
    "Wieliczka",
    "Wieluń",
    "Wieruszów",
    "Więcbork",
    "Wilamowice",
    "Wisła",
    "Witkowo",
    "Witnica",
    "Wleń",
    "Władysławowo",
    "Włocławek",
    "Włodawa",
    "Włoszczowa",
    "Wodzisław Śląski",
    "Wojcieszów",
    "Wojkowice",
    "Wojnicz",
    "Wolbórz",
    "Wolbrom",
    "Wolin",
    "Wolsztyn",
    "Wołczyn",
    "Wołomin",
    "Wołów",
    "Woźniki",
    "Wrocław",
    "Wronki",
    "Września",
    "Wschowa",
    "Wyrzysk",
    "Wysoka",
    "Wysokie Mazowieckie",
    "Wyszków",
    "Wyszogród",
    "Wyśmierzyce",
    "Zabłudów",
    "Zabrze",
    "Zagórów",
    "Zagórz",
    "Zakliczyn",
    "Zakopane",
    "Zakroczym",
    "Zalewo",
    "Zambrów",
    "Zamość",
    "Zator",
    "Zawadzkie",
    "Zawichost",
    "Zawidów",
    "Zawiercie",
    "Ząbki",
    "Ząbkowice Śląskie",
    "Zbąszynek",
    "Zbąszyń",
    "Zduny",
    "Zduńska Wola",
    "Zdzieszowice",
    "Zelów",
    "Zgierz",
    "Zgorzelec",
    "Zielona Góra",
    "Zielonka",
    "Ziębice",
    "Złocieniec",
    "Złoczew",
    "Złotoryja",
    "Złotów",
    "Złoty Stok",
    "Zwierzyniec",
    "Zwoleń",
    "Żabno",
    "Żagań",
    "Żarki",
    "Żarów",
    "Żary",
    "Żelechów",
    "Żerków",
    "Żmigród",
    "Żnin",
    "Żory",
    "Żukowo",
    "Żuromin",
    "Żychlin",
    "Żyrardów",
    "Żywiec"
  ];
});

// node_modules/faker/lib/locales/pl/address/city.js
var require_city18 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{city_name}"
  ];
});

// node_modules/faker/lib/locales/pl/address/street_name.js
var require_street_name17 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_prefix} #{Name.last_name}"
  ];
});

// node_modules/faker/lib/locales/pl/address/street_address.js
var require_street_address14 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_name} #{building_number}"
  ];
});

// node_modules/faker/lib/locales/pl/address/default_country.js
var require_default_country24 = __commonJS((exports, module) => {
  module["exports"] = [
    "Polska"
  ];
});

// node_modules/faker/lib/locales/pl/address/index.js
var require_address27 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.country = require_country11();
  address.building_number = require_building_number16();
  address.street_prefix = require_street_prefix4();
  address.secondary_address = require_secondary_address13();
  address.postcode = require_postcode24();
  address.state = require_state21();
  address.state_abbr = require_state_abbr15();
  address.city_name = require_city_name8();
  address.city = require_city18();
  address.street_name = require_street_name17();
  address.street_address = require_street_address14();
  address.default_country = require_default_country24();
});

// node_modules/faker/lib/locales/pl/company/suffix.js
var require_suffix29 = __commonJS((exports, module) => {
  module["exports"] = [
    "Inc",
    "and Sons",
    "LLC",
    "Group"
  ];
});

// node_modules/faker/lib/locales/pl/company/adjetive.js
var require_adjetive = __commonJS((exports, module) => {
  module["exports"] = [
    "Adaptive",
    "Advanced",
    "Ameliorated",
    "Assimilated",
    "Automated",
    "Balanced",
    "Business-focused",
    "Centralized",
    "Cloned",
    "Compatible",
    "Configurable",
    "Cross-group",
    "Cross-platform",
    "Customer-focused",
    "Customizable",
    "Decentralized",
    "De-engineered",
    "Devolved",
    "Digitized",
    "Distributed",
    "Diverse",
    "Down-sized",
    "Enhanced",
    "Enterprise-wide",
    "Ergonomic",
    "Exclusive",
    "Expanded",
    "Extended",
    "Face to face",
    "Focused",
    "Front-line",
    "Fully-configurable",
    "Function-based",
    "Fundamental",
    "Future-proofed",
    "Grass-roots",
    "Horizontal",
    "Implemented",
    "Innovative",
    "Integrated",
    "Intuitive",
    "Inverse",
    "Managed",
    "Mandatory",
    "Monitored",
    "Multi-channelled",
    "Multi-lateral",
    "Multi-layered",
    "Multi-tiered",
    "Networked",
    "Object-based",
    "Open-architected",
    "Open-source",
    "Operative",
    "Optimized",
    "Optional",
    "Organic",
    "Organized",
    "Persevering",
    "Persistent",
    "Phased",
    "Polarised",
    "Pre-emptive",
    "Proactive",
    "Profit-focused",
    "Profound",
    "Programmable",
    "Progressive",
    "Public-key",
    "Quality-focused",
    "Reactive",
    "Realigned",
    "Re-contextualized",
    "Re-engineered",
    "Reduced",
    "Reverse-engineered",
    "Right-sized",
    "Robust",
    "Seamless",
    "Secured",
    "Self-enabling",
    "Sharable",
    "Stand-alone",
    "Streamlined",
    "Switchable",
    "Synchronised",
    "Synergistic",
    "Synergized",
    "Team-oriented",
    "Total",
    "Triple-buffered",
    "Universal",
    "Up-sized",
    "Upgradable",
    "User-centric",
    "User-friendly",
    "Versatile",
    "Virtual",
    "Visionary",
    "Vision-oriented"
  ];
});

// node_modules/faker/lib/locales/pl/company/descriptor.js
var require_descriptor7 = __commonJS((exports, module) => {
  module["exports"] = [
    "24 hour",
    "24/7",
    "3rd generation",
    "4th generation",
    "5th generation",
    "6th generation",
    "actuating",
    "analyzing",
    "asymmetric",
    "asynchronous",
    "attitude-oriented",
    "background",
    "bandwidth-monitored",
    "bi-directional",
    "bifurcated",
    "bottom-line",
    "clear-thinking",
    "client-driven",
    "client-server",
    "coherent",
    "cohesive",
    "composite",
    "context-sensitive",
    "contextually-based",
    "content-based",
    "dedicated",
    "demand-driven",
    "didactic",
    "directional",
    "discrete",
    "disintermediate",
    "dynamic",
    "eco-centric",
    "empowering",
    "encompassing",
    "even-keeled",
    "executive",
    "explicit",
    "exuding",
    "fault-tolerant",
    "foreground",
    "fresh-thinking",
    "full-range",
    "global",
    "grid-enabled",
    "heuristic",
    "high-level",
    "holistic",
    "homogeneous",
    "human-resource",
    "hybrid",
    "impactful",
    "incremental",
    "intangible",
    "interactive",
    "intermediate",
    "leading edge",
    "local",
    "logistical",
    "maximized",
    "methodical",
    "mission-critical",
    "mobile",
    "modular",
    "motivating",
    "multimedia",
    "multi-state",
    "multi-tasking",
    "national",
    "needs-based",
    "neutral",
    "next generation",
    "non-volatile",
    "object-oriented",
    "optimal",
    "optimizing",
    "radical",
    "real-time",
    "reciprocal",
    "regional",
    "responsive",
    "scalable",
    "secondary",
    "solution-oriented",
    "stable",
    "static",
    "systematic",
    "systemic",
    "system-worthy",
    "tangible",
    "tertiary",
    "transitional",
    "uniform",
    "upward-trending",
    "user-facing",
    "value-added",
    "web-enabled",
    "well-modulated",
    "zero administration",
    "zero defect",
    "zero tolerance"
  ];
});

// node_modules/faker/lib/locales/pl/company/noun.js
var require_noun8 = __commonJS((exports, module) => {
  module["exports"] = [
    "ability",
    "access",
    "adapter",
    "algorithm",
    "alliance",
    "analyzer",
    "application",
    "approach",
    "architecture",
    "archive",
    "artificial intelligence",
    "array",
    "attitude",
    "benchmark",
    "budgetary management",
    "capability",
    "capacity",
    "challenge",
    "circuit",
    "collaboration",
    "complexity",
    "concept",
    "conglomeration",
    "contingency",
    "core",
    "customer loyalty",
    "database",
    "data-warehouse",
    "definition",
    "emulation",
    "encoding",
    "encryption",
    "extranet",
    "firmware",
    "flexibility",
    "focus group",
    "forecast",
    "frame",
    "framework",
    "function",
    "functionalities",
    "Graphic Interface",
    "groupware",
    "Graphical User Interface",
    "hardware",
    "help-desk",
    "hierarchy",
    "hub",
    "implementation",
    "info-mediaries",
    "infrastructure",
    "initiative",
    "installation",
    "instruction set",
    "interface",
    "internet solution",
    "intranet",
    "knowledge user",
    "knowledge base",
    "local area network",
    "leverage",
    "matrices",
    "matrix",
    "methodology",
    "middleware",
    "migration",
    "model",
    "moderator",
    "monitoring",
    "moratorium",
    "neural-net",
    "open architecture",
    "open system",
    "orchestration",
    "paradigm",
    "parallelism",
    "policy",
    "portal",
    "pricing structure",
    "process improvement",
    "product",
    "productivity",
    "project",
    "projection",
    "protocol",
    "secured line",
    "service-desk",
    "software",
    "solution",
    "standardization",
    "strategy",
    "structure",
    "success",
    "superstructure",
    "support",
    "synergy",
    "system engine",
    "task-force",
    "throughput",
    "time-frame",
    "toolset",
    "utilisation",
    "website",
    "workforce"
  ];
});

// node_modules/faker/lib/locales/pl/company/bs_verb.js
var require_bs_verb6 = __commonJS((exports, module) => {
  module["exports"] = [
    "implement",
    "utilize",
    "integrate",
    "streamline",
    "optimize",
    "evolve",
    "transform",
    "embrace",
    "enable",
    "orchestrate",
    "leverage",
    "reinvent",
    "aggregate",
    "architect",
    "enhance",
    "incentivize",
    "morph",
    "empower",
    "envisioneer",
    "monetize",
    "harness",
    "facilitate",
    "seize",
    "disintermediate",
    "synergize",
    "strategize",
    "deploy",
    "brand",
    "grow",
    "target",
    "syndicate",
    "synthesize",
    "deliver",
    "mesh",
    "incubate",
    "engage",
    "maximize",
    "benchmark",
    "expedite",
    "reintermediate",
    "whiteboard",
    "visualize",
    "repurpose",
    "innovate",
    "scale",
    "unleash",
    "drive",
    "extend",
    "engineer",
    "revolutionize",
    "generate",
    "exploit",
    "transition",
    "e-enable",
    "iterate",
    "cultivate",
    "matrix",
    "productize",
    "redefine",
    "recontextualize"
  ];
});

// node_modules/faker/lib/locales/pl/company/bs_adjective.js
var require_bs_adjective5 = __commonJS((exports, module) => {
  module["exports"] = [
    "clicks-and-mortar",
    "value-added",
    "vertical",
    "proactive",
    "robust",
    "revolutionary",
    "scalable",
    "leading-edge",
    "innovative",
    "intuitive",
    "strategic",
    "e-business",
    "mission-critical",
    "sticky",
    "one-to-one",
    "24/7",
    "end-to-end",
    "global",
    "B2B",
    "B2C",
    "granular",
    "frictionless",
    "virtual",
    "viral",
    "dynamic",
    "24/365",
    "best-of-breed",
    "killer",
    "magnetic",
    "bleeding-edge",
    "web-enabled",
    "interactive",
    "dot-com",
    "sexy",
    "back-end",
    "real-time",
    "efficient",
    "front-end",
    "distributed",
    "seamless",
    "extensible",
    "turn-key",
    "world-class",
    "open-source",
    "cross-platform",
    "cross-media",
    "synergistic",
    "bricks-and-clicks",
    "out-of-the-box",
    "enterprise",
    "integrated",
    "impactful",
    "wireless",
    "transparent",
    "next-generation",
    "cutting-edge",
    "user-centric",
    "visionary",
    "customized",
    "ubiquitous",
    "plug-and-play",
    "collaborative",
    "compelling",
    "holistic",
    "rich"
  ];
});

// node_modules/faker/lib/locales/pl/company/bs_noun.js
var require_bs_noun6 = __commonJS((exports, module) => {
  module["exports"] = [
    "synergies",
    "web-readiness",
    "paradigms",
    "markets",
    "partnerships",
    "infrastructures",
    "platforms",
    "initiatives",
    "channels",
    "eyeballs",
    "communities",
    "ROI",
    "solutions",
    "e-tailers",
    "e-services",
    "action-items",
    "portals",
    "niches",
    "technologies",
    "content",
    "vortals",
    "supply-chains",
    "convergence",
    "relationships",
    "architectures",
    "interfaces",
    "e-markets",
    "e-commerce",
    "systems",
    "bandwidth",
    "infomediaries",
    "models",
    "mindshare",
    "deliverables",
    "users",
    "schemas",
    "networks",
    "applications",
    "metrics",
    "e-business",
    "functionalities",
    "experiences",
    "web services",
    "methodologies"
  ];
});

// node_modules/faker/lib/locales/pl/company/name.js
var require_name55 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} and #{Name.last_name}"
  ];
});

// node_modules/faker/lib/locales/pl/company/index.js
var require_company21 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.suffix = require_suffix29();
  company.adjetive = require_adjetive();
  company.descriptor = require_descriptor7();
  company.noun = require_noun8();
  company.bs_verb = require_bs_verb6();
  company.bs_adjective = require_bs_adjective5();
  company.bs_noun = require_bs_noun6();
  company.name = require_name55();
});

// node_modules/faker/lib/locales/pl/internet/free_email.js
var require_free_email18 = __commonJS((exports, module) => {
  module["exports"] = [
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ];
});

// node_modules/faker/lib/locales/pl/internet/domain_suffix.js
var require_domain_suffix25 = __commonJS((exports, module) => {
  module["exports"] = [
    "com",
    "pl",
    "com.pl",
    "net",
    "org"
  ];
});

// node_modules/faker/lib/locales/pl/internet/index.js
var require_internet26 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.free_email = require_free_email18();
  internet.domain_suffix = require_domain_suffix25();
});

// node_modules/faker/lib/locales/pl/lorem/words.js
var require_words9 = __commonJS((exports, module) => {
  module["exports"] = [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ];
});

// node_modules/faker/lib/locales/pl/lorem/supplemental.js
var require_supplemental6 = __commonJS((exports, module) => {
  module["exports"] = [
    "abbas",
    "abduco",
    "abeo",
    "abscido",
    "absconditus",
    "absens",
    "absorbeo",
    "absque",
    "abstergo",
    "absum",
    "abundans",
    "abutor",
    "accedo",
    "accendo",
    "acceptus",
    "accipio",
    "accommodo",
    "accusator",
    "acer",
    "acerbitas",
    "acervus",
    "acidus",
    "acies",
    "acquiro",
    "acsi",
    "adamo",
    "adaugeo",
    "addo",
    "adduco",
    "ademptio",
    "adeo",
    "adeptio",
    "adfectus",
    "adfero",
    "adficio",
    "adflicto",
    "adhaero",
    "adhuc",
    "adicio",
    "adimpleo",
    "adinventitias",
    "adipiscor",
    "adiuvo",
    "administratio",
    "admiratio",
    "admitto",
    "admoneo",
    "admoveo",
    "adnuo",
    "adopto",
    "adsidue",
    "adstringo",
    "adsuesco",
    "adsum",
    "adulatio",
    "adulescens",
    "adultus",
    "aduro",
    "advenio",
    "adversus",
    "advoco",
    "aedificium",
    "aeger",
    "aegre",
    "aegrotatio",
    "aegrus",
    "aeneus",
    "aequitas",
    "aequus",
    "aer",
    "aestas",
    "aestivus",
    "aestus",
    "aetas",
    "aeternus",
    "ager",
    "aggero",
    "aggredior",
    "agnitio",
    "agnosco",
    "ago",
    "ait",
    "aiunt",
    "alienus",
    "alii",
    "alioqui",
    "aliqua",
    "alius",
    "allatus",
    "alo",
    "alter",
    "altus",
    "alveus",
    "amaritudo",
    "ambitus",
    "ambulo",
    "amicitia",
    "amiculum",
    "amissio",
    "amita",
    "amitto",
    "amo",
    "amor",
    "amoveo",
    "amplexus",
    "amplitudo",
    "amplus",
    "ancilla",
    "angelus",
    "angulus",
    "angustus",
    "animadverto",
    "animi",
    "animus",
    "annus",
    "anser",
    "ante",
    "antea",
    "antepono",
    "antiquus",
    "aperio",
    "aperte",
    "apostolus",
    "apparatus",
    "appello",
    "appono",
    "appositus",
    "approbo",
    "apto",
    "aptus",
    "apud",
    "aqua",
    "ara",
    "aranea",
    "arbitro",
    "arbor",
    "arbustum",
    "arca",
    "arceo",
    "arcesso",
    "arcus",
    "argentum",
    "argumentum",
    "arguo",
    "arma",
    "armarium",
    "armo",
    "aro",
    "ars",
    "articulus",
    "artificiose",
    "arto",
    "arx",
    "ascisco",
    "ascit",
    "asper",
    "aspicio",
    "asporto",
    "assentator",
    "astrum",
    "atavus",
    "ater",
    "atqui",
    "atrocitas",
    "atrox",
    "attero",
    "attollo",
    "attonbitus",
    "auctor",
    "auctus",
    "audacia",
    "audax",
    "audentia",
    "audeo",
    "audio",
    "auditor",
    "aufero",
    "aureus",
    "auris",
    "aurum",
    "aut",
    "autem",
    "autus",
    "auxilium",
    "avaritia",
    "avarus",
    "aveho",
    "averto",
    "avoco",
    "baiulus",
    "balbus",
    "barba",
    "bardus",
    "basium",
    "beatus",
    "bellicus",
    "bellum",
    "bene",
    "beneficium",
    "benevolentia",
    "benigne",
    "bestia",
    "bibo",
    "bis",
    "blandior",
    "bonus",
    "bos",
    "brevis",
    "cado",
    "caecus",
    "caelestis",
    "caelum",
    "calamitas",
    "calcar",
    "calco",
    "calculus",
    "callide",
    "campana",
    "candidus",
    "canis",
    "canonicus",
    "canto",
    "capillus",
    "capio",
    "capitulus",
    "capto",
    "caput",
    "carbo",
    "carcer",
    "careo",
    "caries",
    "cariosus",
    "caritas",
    "carmen",
    "carpo",
    "carus",
    "casso",
    "caste",
    "casus",
    "catena",
    "caterva",
    "cattus",
    "cauda",
    "causa",
    "caute",
    "caveo",
    "cavus",
    "cedo",
    "celebrer",
    "celer",
    "celo",
    "cena",
    "cenaculum",
    "ceno",
    "censura",
    "centum",
    "cerno",
    "cernuus",
    "certe",
    "certo",
    "certus",
    "cervus",
    "cetera",
    "charisma",
    "chirographum",
    "cibo",
    "cibus",
    "cicuta",
    "cilicium",
    "cimentarius",
    "ciminatio",
    "cinis",
    "circumvenio",
    "cito",
    "civis",
    "civitas",
    "clam",
    "clamo",
    "claro",
    "clarus",
    "claudeo",
    "claustrum",
    "clementia",
    "clibanus",
    "coadunatio",
    "coaegresco",
    "coepi",
    "coerceo",
    "cogito",
    "cognatus",
    "cognomen",
    "cogo",
    "cohaero",
    "cohibeo",
    "cohors",
    "colligo",
    "colloco",
    "collum",
    "colo",
    "color",
    "coma",
    "combibo",
    "comburo",
    "comedo",
    "comes",
    "cometes",
    "comis",
    "comitatus",
    "commemoro",
    "comminor",
    "commodo",
    "communis",
    "comparo",
    "compello",
    "complectus",
    "compono",
    "comprehendo",
    "comptus",
    "conatus",
    "concedo",
    "concido",
    "conculco",
    "condico",
    "conduco",
    "confero",
    "confido",
    "conforto",
    "confugo",
    "congregatio",
    "conicio",
    "coniecto",
    "conitor",
    "coniuratio",
    "conor",
    "conqueror",
    "conscendo",
    "conservo",
    "considero",
    "conspergo",
    "constans",
    "consuasor",
    "contabesco",
    "contego",
    "contigo",
    "contra",
    "conturbo",
    "conventus",
    "convoco",
    "copia",
    "copiose",
    "cornu",
    "corona",
    "corpus",
    "correptius",
    "corrigo",
    "corroboro",
    "corrumpo",
    "coruscus",
    "cotidie",
    "crapula",
    "cras",
    "crastinus",
    "creator",
    "creber",
    "crebro",
    "credo",
    "creo",
    "creptio",
    "crepusculum",
    "cresco",
    "creta",
    "cribro",
    "crinis",
    "cruciamentum",
    "crudelis",
    "cruentus",
    "crur",
    "crustulum",
    "crux",
    "cubicularis",
    "cubitum",
    "cubo",
    "cui",
    "cuius",
    "culpa",
    "culpo",
    "cultellus",
    "cultura",
    "cum",
    "cunabula",
    "cunae",
    "cunctatio",
    "cupiditas",
    "cupio",
    "cuppedia",
    "cupressus",
    "cur",
    "cura",
    "curatio",
    "curia",
    "curiositas",
    "curis",
    "curo",
    "curriculum",
    "currus",
    "cursim",
    "curso",
    "cursus",
    "curto",
    "curtus",
    "curvo",
    "curvus",
    "custodia",
    "damnatio",
    "damno",
    "dapifer",
    "debeo",
    "debilito",
    "decens",
    "decerno",
    "decet",
    "decimus",
    "decipio",
    "decor",
    "decretum",
    "decumbo",
    "dedecor",
    "dedico",
    "deduco",
    "defaeco",
    "defendo",
    "defero",
    "defessus",
    "defetiscor",
    "deficio",
    "defigo",
    "defleo",
    "defluo",
    "defungo",
    "degenero",
    "degero",
    "degusto",
    "deinde",
    "delectatio",
    "delego",
    "deleo",
    "delibero",
    "delicate",
    "delinquo",
    "deludo",
    "demens",
    "demergo",
    "demitto",
    "demo",
    "demonstro",
    "demoror",
    "demulceo",
    "demum",
    "denego",
    "denique",
    "dens",
    "denuncio",
    "denuo",
    "deorsum",
    "depereo",
    "depono",
    "depopulo",
    "deporto",
    "depraedor",
    "deprecator",
    "deprimo",
    "depromo",
    "depulso",
    "deputo",
    "derelinquo",
    "derideo",
    "deripio",
    "desidero",
    "desino",
    "desipio",
    "desolo",
    "desparatus",
    "despecto",
    "despirmatio",
    "infit",
    "inflammatio",
    "paens",
    "patior",
    "patria",
    "patrocinor",
    "patruus",
    "pauci",
    "paulatim",
    "pauper",
    "pax",
    "peccatus",
    "pecco",
    "pecto",
    "pectus",
    "pecunia",
    "pecus",
    "peior",
    "pel",
    "ocer",
    "socius",
    "sodalitas",
    "sol",
    "soleo",
    "solio",
    "solitudo",
    "solium",
    "sollers",
    "sollicito",
    "solum",
    "solus",
    "solutio",
    "solvo",
    "somniculosus",
    "somnus",
    "sonitus",
    "sono",
    "sophismata",
    "sopor",
    "sordeo",
    "sortitus",
    "spargo",
    "speciosus",
    "spectaculum",
    "speculum",
    "sperno",
    "spero",
    "spes",
    "spiculum",
    "spiritus",
    "spoliatio",
    "sponte",
    "stabilis",
    "statim",
    "statua",
    "stella",
    "stillicidium",
    "stipes",
    "stips",
    "sto",
    "strenuus",
    "strues",
    "studio",
    "stultus",
    "suadeo",
    "suasoria",
    "sub",
    "subito",
    "subiungo",
    "sublime",
    "subnecto",
    "subseco",
    "substantia",
    "subvenio",
    "succedo",
    "succurro",
    "sufficio",
    "suffoco",
    "suffragium",
    "suggero",
    "sui",
    "sulum",
    "sum",
    "summa",
    "summisse",
    "summopere",
    "sumo",
    "sumptus",
    "supellex",
    "super",
    "suppellex",
    "supplanto",
    "suppono",
    "supra",
    "surculus",
    "surgo",
    "sursum",
    "suscipio",
    "suspendo",
    "sustineo",
    "suus",
    "synagoga",
    "tabella",
    "tabernus",
    "tabesco",
    "tabgo",
    "tabula",
    "taceo",
    "tactus",
    "taedium",
    "talio",
    "talis",
    "talus",
    "tam",
    "tamdiu",
    "tamen",
    "tametsi",
    "tamisium",
    "tamquam",
    "tandem",
    "tantillus",
    "tantum",
    "tardus",
    "tego",
    "temeritas",
    "temperantia",
    "templum",
    "temptatio",
    "tempus",
    "tenax",
    "tendo",
    "teneo",
    "tener",
    "tenuis",
    "tenus",
    "tepesco",
    "tepidus",
    "ter",
    "terebro",
    "teres",
    "terga",
    "tergeo",
    "tergiversatio",
    "tergo",
    "tergum",
    "termes",
    "terminatio",
    "tero",
    "terra",
    "terreo",
    "territo",
    "terror",
    "tersus",
    "tertius",
    "testimonium",
    "texo",
    "textilis",
    "textor",
    "textus",
    "thalassinus",
    "theatrum",
    "theca",
    "thema",
    "theologus",
    "thermae",
    "thesaurus",
    "thesis",
    "thorax",
    "thymbra",
    "thymum",
    "tibi",
    "timidus",
    "timor",
    "titulus",
    "tolero",
    "tollo",
    "tondeo",
    "tonsor",
    "torqueo",
    "torrens",
    "tot",
    "totidem",
    "toties",
    "totus",
    "tracto",
    "trado",
    "traho",
    "trans",
    "tredecim",
    "tremo",
    "trepide",
    "tres",
    "tribuo",
    "tricesimus",
    "triduana",
    "triginta",
    "tripudio",
    "tristis",
    "triumphus",
    "trucido",
    "truculenter",
    "tubineus",
    "tui",
    "tum",
    "tumultus",
    "tunc",
    "turba",
    "turbo",
    "turpe",
    "turpis",
    "tutamen",
    "tutis",
    "tyrannus",
    "uberrime",
    "ubi",
    "ulciscor",
    "ullus",
    "ulterius",
    "ultio",
    "ultra",
    "umbra",
    "umerus",
    "umquam",
    "una",
    "unde",
    "undique",
    "universe",
    "unus",
    "urbanus",
    "urbs",
    "uredo",
    "usitas",
    "usque",
    "ustilo",
    "ustulo",
    "usus",
    "uter",
    "uterque",
    "utilis",
    "utique",
    "utor",
    "utpote",
    "utrimque",
    "utroque",
    "utrum",
    "uxor",
    "vaco",
    "vacuus",
    "vado",
    "vae",
    "valde",
    "valens",
    "valeo",
    "valetudo",
    "validus",
    "vallum",
    "vapulus",
    "varietas",
    "varius",
    "vehemens",
    "vel",
    "velociter",
    "velum",
    "velut",
    "venia",
    "venio",
    "ventito",
    "ventosus",
    "ventus",
    "venustas",
    "ver",
    "verbera",
    "verbum",
    "vere",
    "verecundia",
    "vereor",
    "vergo",
    "veritas",
    "vero",
    "versus",
    "verto",
    "verumtamen",
    "verus",
    "vesco",
    "vesica",
    "vesper",
    "vespillo",
    "vester",
    "vestigium",
    "vestrum",
    "vetus",
    "via",
    "vicinus",
    "vicissitudo",
    "victoria",
    "victus",
    "videlicet",
    "video",
    "viduata",
    "viduo",
    "vigilo",
    "vigor",
    "vilicus",
    "vilis",
    "vilitas",
    "villa",
    "vinco",
    "vinculum",
    "vindico",
    "vinitor",
    "vinum",
    "vir",
    "virga",
    "virgo",
    "viridis",
    "viriliter",
    "virtus",
    "vis",
    "viscus",
    "vita",
    "vitiosus",
    "vitium",
    "vito",
    "vivo",
    "vix",
    "vobis",
    "vociferor",
    "voco",
    "volaticus",
    "volo",
    "volubilis",
    "voluntarius",
    "volup",
    "volutabrum",
    "volva",
    "vomer",
    "vomica",
    "vomito",
    "vorago",
    "vorax",
    "voro",
    "vos",
    "votum",
    "voveo",
    "vox",
    "vulariter",
    "vulgaris",
    "vulgivagus",
    "vulgo",
    "vulgus",
    "vulnero",
    "vulnus",
    "vulpes",
    "vulticulus",
    "vultuosus",
    "xiphias"
  ];
});

// node_modules/faker/lib/locales/pl/lorem/index.js
var require_lorem9 = __commonJS((exports, module) => {
  var lorem = {};
  module["exports"] = lorem;
  lorem.words = require_words9();
  lorem.supplemental = require_supplemental6();
});

// node_modules/faker/lib/locales/pl/phone_number/formats.js
var require_formats35 = __commonJS((exports, module) => {
  module["exports"] = [
    "12-###-##-##",
    "13-###-##-##",
    "14-###-##-##",
    "15-###-##-##",
    "16-###-##-##",
    "17-###-##-##",
    "18-###-##-##",
    "22-###-##-##",
    "23-###-##-##",
    "24-###-##-##",
    "25-###-##-##",
    "29-###-##-##",
    "32-###-##-##",
    "33-###-##-##",
    "34-###-##-##",
    "41-###-##-##",
    "42-###-##-##",
    "43-###-##-##",
    "44-###-##-##",
    "46-###-##-##",
    "48-###-##-##",
    "52-###-##-##",
    "54-###-##-##",
    "55-###-##-##",
    "56-###-##-##",
    "58-###-##-##",
    "59-###-##-##",
    "61-###-##-##",
    "62-###-##-##",
    "63-###-##-##",
    "65-###-##-##",
    "67-###-##-##",
    "68-###-##-##",
    "71-###-##-##",
    "74-###-##-##",
    "75-###-##-##",
    "76-###-##-##",
    "77-###-##-##",
    "81-###-##-##",
    "82-###-##-##",
    "83-###-##-##",
    "84-###-##-##",
    "85-###-##-##",
    "86-###-##-##",
    "87-###-##-##",
    "89-###-##-##",
    "91-###-##-##",
    "94-###-##-##",
    "95-###-##-##"
  ];
});

// node_modules/faker/lib/locales/pl/phone_number/index.js
var require_phone_number26 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats35();
});

// node_modules/faker/lib/locales/pl/cell_phone/formats.js
var require_formats34 = __commonJS((exports, module) => {
  module["exports"] = [
    "50-###-##-##",
    "51-###-##-##",
    "53-###-##-##",
    "57-###-##-##",
    "60-###-##-##",
    "66-###-##-##",
    "69-###-##-##",
    "72-###-##-##",
    "73-###-##-##",
    "78-###-##-##",
    "79-###-##-##",
    "88-###-##-##"
  ];
});

// node_modules/faker/lib/locales/pl/cell_phone/index.js
var require_cell_phone10 = __commonJS((exports, module) => {
  var cell_phone = {};
  module["exports"] = cell_phone;
  cell_phone.formats = require_formats34();
});

// node_modules/faker/lib/locales/pl/index.js
var require_pl = __commonJS((exports, module) => {
  var pl = {};
  module["exports"] = pl;
  pl.title = "Polish";
  pl.name = require_name56();
  pl.address = require_address27();
  pl.company = require_company21();
  pl.internet = require_internet26();
  pl.lorem = require_lorem9();
  pl.phone_number = require_phone_number26();
  pl.cell_phone = require_cell_phone10();
});

// node_modules/faker/lib/locales/pt_BR/address/city_prefix.js
var require_city_prefix10 = __commonJS((exports, module) => {
  module["exports"] = [
    "Nova",
    "Velha",
    "Grande",
    "Vila",
    "Município de"
  ];
});

// node_modules/faker/lib/locales/pt_BR/address/city_suffix.js
var require_city_suffix10 = __commonJS((exports, module) => {
  module["exports"] = [
    "do Descoberto",
    "de Nossa Senhora",
    "do Norte",
    "do Sul"
  ];
});

// node_modules/faker/lib/locales/pt_BR/address/country.js
var require_country12 = __commonJS((exports, module) => {
  module["exports"] = [
    "Afeganistão",
    "Albânia",
    "Algéria",
    "Samoa",
    "Andorra",
    "Angola",
    "Anguilla",
    "Antigua and Barbada",
    "Argentina",
    "Armênia",
    "Aruba",
    "Austrália",
    "Áustria",
    "Alzerbajão",
    "Bahamas",
    "Barém",
    "Bangladesh",
    "Barbado",
    "Belgrado",
    "Bélgica",
    "Belize",
    "Benin",
    "Bermuda",
    "Bhutan",
    "Bolívia",
    "Bôsnia",
    "Botuasuna",
    "Bouvetoia",
    "Brasil",
    "Arquipélago de Chagos",
    "Ilhas Virgens",
    "Brunei",
    "Bulgária",
    "Burkina Faso",
    "Burundi",
    "Cambójia",
    "Camarões",
    "Canadá",
    "Cabo Verde",
    "Ilhas Caiman",
    "República da África Central",
    "Chad",
    "Chile",
    "China",
    "Ilhas Natal",
    "Ilhas Cocos",
    "Colômbia",
    "Comoros",
    "Congo",
    "Ilhas Cook",
    "Costa Rica",
    "Costa do Marfim",
    "Croácia",
    "Cuba",
    "Cyprus",
    "República Tcheca",
    "Dinamarca",
    "Djibouti",
    "Dominica",
    "República Dominicana",
    "Equador",
    "Egito",
    "El Salvador",
    "Guiné Equatorial",
    "Eritrea",
    "Estônia",
    "Etiópia",
    "Ilhas Faroe",
    "Malvinas",
    "Fiji",
    "Finlândia",
    "França",
    "Guiné Francesa",
    "Polinésia Francesa",
    "Gabão",
    "Gâmbia",
    "Georgia",
    "Alemanha",
    "Gana",
    "Gibraltar",
    "Grécia",
    "Groelândia",
    "Granada",
    "Guadalupe",
    "Guano",
    "Guatemala",
    "Guernsey",
    "Guiné",
    "Guiné-Bissau",
    "Guiana",
    "Haiti",
    "Heard Island and McDonald Islands",
    "Vaticano",
    "Honduras",
    "Hong Kong",
    "Hungria",
    "Iceland",
    "Índia",
    "Indonésia",
    "Irã",
    "Iraque",
    "Irlanda",
    "Ilha de Man",
    "Israel",
    "Itália",
    "Jamaica",
    "Japão",
    "Jersey",
    "Jordânia",
    "Cazaquistão",
    "Quênia",
    "Kiribati",
    "Coreia do Norte",
    "Coreia do Sul",
    "Kuwait",
    "Kyrgyz Republic",
    "República Democrática de Lao People",
    "Latvia",
    "Líbano",
    "Lesotho",
    "Libéria",
    "Libyan Arab Jamahiriya",
    "Liechtenstein",
    "Lituânia",
    "Luxemburgo",
    "Macao",
    "Macedônia",
    "Madagascar",
    "Malawi",
    "Malásia",
    "Maldives",
    "Mali",
    "Malta",
    "Ilhas Marshall",
    "Martinica",
    "Mauritânia",
    "Mauritius",
    "Mayotte",
    "México",
    "Micronésia",
    "Moldova",
    "Mônaco",
    "Mongólia",
    "Montenegro",
    "Montserrat",
    "Marrocos",
    "Moçambique",
    "Myanmar",
    "Namibia",
    "Nauru",
    "Nepal",
    "Antilhas Holandesas",
    "Holanda",
    "Nova Caledonia",
    "Nova Zelândia",
    "Nicarágua",
    "Nigéria",
    "Niue",
    "Ilha Norfolk",
    "Northern Mariana Islands",
    "Noruega",
    "Oman",
    "Paquistão",
    "Palau",
    "Território da Palestina",
    "Panamá",
    "Nova Guiné Papua",
    "Paraguai",
    "Peru",
    "Filipinas",
    "Polônia",
    "Portugal",
    "Puerto Rico",
    "Qatar",
    "Romênia",
    "Rússia",
    "Ruanda",
    "São Bartolomeu",
    "Santa Helena",
    "Santa Lúcia",
    "Saint Martin",
    "Saint Pierre and Miquelon",
    "Saint Vincent and the Grenadines",
    "Samoa",
    "San Marino",
    "Sao Tomé e Príncipe",
    "Arábia Saudita",
    "Senegal",
    "Sérvia",
    "Seychelles",
    "Serra Leoa",
    "Singapura",
    "Eslováquia",
    "Eslovênia",
    "Ilhas Salomão",
    "Somália",
    "África do Sul",
    "South Georgia and the South Sandwich Islands",
    "Spanha",
    "Sri Lanka",
    "Sudão",
    "Suriname",
    "Svalbard & Jan Mayen Islands",
    "Swaziland",
    "Suécia",
    "Suíça",
    "Síria",
    "Taiwan",
    "Tajiquistão",
    "Tanzânia",
    "Tailândia",
    "Timor-Leste",
    "Togo",
    "Tokelau",
    "Tonga",
    "Trinidá e Tobago",
    "Tunísia",
    "Turquia",
    "Turcomenistão",
    "Turks and Caicos Islands",
    "Tuvalu",
    "Uganda",
    "Ucrânia",
    "Emirados Árabes Unidos",
    "Reino Unido",
    "Estados Unidos da América",
    "Estados Unidos das Ilhas Virgens",
    "Uruguai",
    "Uzbequistão",
    "Vanuatu",
    "Venezuela",
    "Vietnã",
    "Wallis and Futuna",
    "Sahara",
    "Yemen",
    "Zâmbia",
    "Zimbábue"
  ];
});

// node_modules/faker/lib/locales/pt_BR/address/building_number.js
var require_building_number17 = __commonJS((exports, module) => {
  module["exports"] = [
    "#####",
    "####",
    "###"
  ];
});

// node_modules/faker/lib/locales/pt_BR/address/street_suffix.js
var require_street_suffix13 = __commonJS((exports, module) => {
  module["exports"] = [
    "Rua",
    "Avenida",
    "Travessa",
    "Ponte",
    "Alameda",
    "Marginal",
    "Viela",
    "Rodovia"
  ];
});

// node_modules/faker/lib/locales/pt_BR/address/secondary_address.js
var require_secondary_address14 = __commonJS((exports, module) => {
  module["exports"] = [
    "Apto. ###",
    "Sobrado ##",
    "Casa #",
    "Lote ##",
    "Quadra ##"
  ];
});

// node_modules/faker/lib/locales/pt_BR/address/postcode.js
var require_postcode25 = __commonJS((exports, module) => {
  module["exports"] = [
    "#####",
    "#####-###"
  ];
});

// node_modules/faker/lib/locales/pt_BR/address/state.js
var require_state22 = __commonJS((exports, module) => {
  module["exports"] = [
    "Acre",
    "Alagoas",
    "Amapá",
    "Amazonas",
    "Bahia",
    "Ceará",
    "Distrito Federal",
    "Espírito Santo",
    "Goiás",
    "Maranhão",
    "Mato Grosso",
    "Mato Grosso do Sul",
    "Minas Gerais",
    "Pará",
    "Paraíba",
    "Paraná",
    "Pernambuco",
    "Piauí",
    "Rio de Janeiro",
    "Rio Grande do Norte",
    "Rio Grande do Sul",
    "Rondônia",
    "Roraima",
    "Santa Catarina",
    "São Paulo",
    "Sergipe",
    "Tocantins"
  ];
});

// node_modules/faker/lib/locales/pt_BR/address/state_abbr.js
var require_state_abbr16 = __commonJS((exports, module) => {
  module["exports"] = [
    "AC",
    "AL",
    "AP",
    "AM",
    "BA",
    "CE",
    "DF",
    "ES",
    "GO",
    "MA",
    "MT",
    "MS",
    "PA",
    "PB",
    "PR",
    "PE",
    "PI",
    "RJ",
    "RN",
    "RS",
    "RO",
    "RR",
    "SC",
    "SP"
  ];
});

// node_modules/faker/lib/locales/pt_BR/address/default_country.js
var require_default_country25 = __commonJS((exports, module) => {
  module["exports"] = [
    "Brasil"
  ];
});

// node_modules/faker/lib/locales/pt_BR/address/index.js
var require_address28 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.city_prefix = require_city_prefix10();
  address.city_suffix = require_city_suffix10();
  address.country = require_country12();
  address.building_number = require_building_number17();
  address.street_suffix = require_street_suffix13();
  address.secondary_address = require_secondary_address14();
  address.postcode = require_postcode25();
  address.state = require_state22();
  address.state_abbr = require_state_abbr16();
  address.default_country = require_default_country25();
});

// node_modules/faker/lib/locales/pt_BR/company/suffix.js
var require_suffix30 = __commonJS((exports, module) => {
  module["exports"] = [
    "S.A.",
    "LTDA",
    "e Associados",
    "Comércio"
  ];
});

// node_modules/faker/lib/locales/pt_BR/company/name.js
var require_name58 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} e #{Name.last_name}"
  ];
});

// node_modules/faker/lib/locales/pt_BR/company/index.js
var require_company22 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.suffix = require_suffix30();
  company.name = require_name58();
});

// node_modules/faker/lib/locales/pt_BR/internet/free_email.js
var require_free_email19 = __commonJS((exports, module) => {
  module["exports"] = [
    "gmail.com",
    "yahoo.com",
    "hotmail.com",
    "live.com",
    "bol.com.br"
  ];
});

// node_modules/faker/lib/locales/pt_BR/internet/domain_suffix.js
var require_domain_suffix26 = __commonJS((exports, module) => {
  module["exports"] = [
    "br",
    "com",
    "biz",
    "info",
    "name",
    "net",
    "org"
  ];
});

// node_modules/faker/lib/locales/pt_BR/internet/index.js
var require_internet27 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.free_email = require_free_email19();
  internet.domain_suffix = require_domain_suffix26();
});

// node_modules/faker/lib/locales/pt_BR/lorem/words.js
var require_words10 = __commonJS((exports, module) => {
  module["exports"] = [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ];
});

// node_modules/faker/lib/locales/pt_BR/lorem/index.js
var require_lorem10 = __commonJS((exports, module) => {
  var lorem = {};
  module["exports"] = lorem;
  lorem.words = require_words10();
});

// node_modules/faker/lib/locales/pt_BR/name/first_name.js
var require_first_name20 = __commonJS((exports, module) => {
  module["exports"] = [
    "Alessandro",
    "Alessandra",
    "Alexandre",
    "Aline",
    "Antônio",
    "Breno",
    "Bruna",
    "Carlos",
    "Carla",
    "Célia",
    "Cecília",
    "César",
    "Danilo",
    "Dalila",
    "Deneval",
    "Eduardo",
    "Eduarda",
    "Esther",
    "Elísio",
    "Fábio",
    "Fabrício",
    "Fabrícia",
    "Félix",
    "Felícia",
    "Feliciano",
    "Frederico",
    "Fabiano",
    "Gustavo",
    "Guilherme",
    "Gúbio",
    "Heitor",
    "Hélio",
    "Hugo",
    "Isabel",
    "Isabela",
    "Ígor",
    "João",
    "Joana",
    "Júlio César",
    "Júlio",
    "Júlia",
    "Janaína",
    "Karla",
    "Kléber",
    "Lucas",
    "Lorena",
    "Lorraine",
    "Larissa",
    "Ladislau",
    "Marcos",
    "Meire",
    "Marcelo",
    "Marcela",
    "Margarida",
    "Mércia",
    "Márcia",
    "Marli",
    "Morgana",
    "Maria",
    "Norberto",
    "Natália",
    "Nataniel",
    "Núbia",
    "Ofélia",
    "Paulo",
    "Paula",
    "Pablo",
    "Pedro",
    "Raul",
    "Rafael",
    "Rafaela",
    "Ricardo",
    "Roberto",
    "Roberta",
    "Sílvia",
    "Sílvia",
    "Silas",
    "Suélen",
    "Sara",
    "Salvador",
    "Sirineu",
    "Talita",
    "Tertuliano",
    "Vicente",
    "Víctor",
    "Vitória",
    "Yango",
    "Yago",
    "Yuri",
    "Washington",
    "Warley"
  ];
});

// node_modules/faker/lib/locales/pt_BR/name/last_name.js
var require_last_name20 = __commonJS((exports, module) => {
  module["exports"] = [
    "Silva",
    "Souza",
    "Carvalho",
    "Santos",
    "Reis",
    "Xavier",
    "Franco",
    "Braga",
    "Macedo",
    "Batista",
    "Barros",
    "Moraes",
    "Costa",
    "Pereira",
    "Carvalho",
    "Melo",
    "Saraiva",
    "Nogueira",
    "Oliveira",
    "Martins",
    "Moreira",
    "Albuquerque"
  ];
});

// node_modules/faker/lib/locales/pt_BR/name/prefix.js
var require_prefix21 = __commonJS((exports, module) => {
  module["exports"] = [
    "Sr.",
    "Sra.",
    "Srta.",
    "Dr."
  ];
});

// node_modules/faker/lib/locales/pt_BR/name/suffix.js
var require_suffix31 = __commonJS((exports, module) => {
  module["exports"] = [
    "Jr.",
    "Neto",
    "Filho"
  ];
});

// node_modules/faker/lib/locales/pt_BR/name/index.js
var require_name59 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name = require_first_name20();
  name2.last_name = require_last_name20();
  name2.prefix = require_prefix21();
  name2.suffix = require_suffix31();
});

// node_modules/faker/lib/locales/pt_BR/phone_number/formats.js
var require_formats36 = __commonJS((exports, module) => {
  module["exports"] = [
    "(##) ####-####",
    "+55 (##) ####-####",
    "(##) #####-####"
  ];
});

// node_modules/faker/lib/locales/pt_BR/phone_number/index.js
var require_phone_number27 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats36();
});

// node_modules/faker/lib/locales/pt_BR/index.js
var require_pt_BR = __commonJS((exports, module) => {
  var pt_BR = {};
  module["exports"] = pt_BR;
  pt_BR.title = "Portuguese (Brazil)";
  pt_BR.address = require_address28();
  pt_BR.company = require_company22();
  pt_BR.internet = require_internet27();
  pt_BR.lorem = require_lorem10();
  pt_BR.name = require_name59();
  pt_BR.phone_number = require_phone_number27();
});

// node_modules/faker/lib/locales/ru/address/country.js
var require_country13 = __commonJS((exports, module) => {
  module["exports"] = [
    "Австралия",
    "Австрия",
    "Азербайджан",
    "Албания",
    "Алжир",
    "Американское Самоа (не признана)",
    "Ангилья",
    "Ангола",
    "Андорра",
    "Антарктика (не признана)",
    "Антигуа и Барбуда",
    "Антильские Острова (не признана)",
    "Аомынь (не признана)",
    "Аргентина",
    "Армения",
    "Афганистан",
    "Багамские Острова",
    "Бангладеш",
    "Барбадос",
    "Бахрейн",
    "Беларусь",
    "Белиз",
    "Бельгия",
    "Бенин",
    "Болгария",
    "Боливия",
    "Босния и Герцеговина",
    "Ботсвана",
    "Бразилия",
    "Бруней",
    "Буркина-Фасо",
    "Бурунди",
    "Бутан",
    "Вануату",
    "Ватикан",
    "Великобритания",
    "Венгрия",
    "Венесуэла",
    "Восточный Тимор",
    "Вьетнам",
    "Габон",
    "Гаити",
    "Гайана",
    "Гамбия",
    "Гана",
    "Гваделупа (не признана)",
    "Гватемала",
    "Гвиана (не признана)",
    "Гвинея",
    "Гвинея-Бисау",
    "Германия",
    "Гондурас",
    "Гренада",
    "Греция",
    "Грузия",
    "Дания",
    "Джибути",
    "Доминика",
    "Доминиканская Республика",
    "Египет",
    "Замбия",
    "Зимбабве",
    "Израиль",
    "Индия",
    "Индонезия",
    "Иордания",
    "Ирак",
    "Иран",
    "Ирландия",
    "Исландия",
    "Испания",
    "Италия",
    "Йемен",
    "Кабо-Верде",
    "Казахстан",
    "Камбоджа",
    "Камерун",
    "Канада",
    "Катар",
    "Кения",
    "Кипр",
    "Кирибати",
    "Китай",
    "Колумбия",
    "Коморские Острова",
    "Конго",
    "Демократическая Республика",
    "Корея (Северная)",
    "Корея (Южная)",
    "Косово",
    "Коста-Рика",
    "Кот-д'Ивуар",
    "Куба",
    "Кувейт",
    "Кука острова",
    "Кыргызстан",
    "Лаос",
    "Латвия",
    "Лесото",
    "Либерия",
    "Ливан",
    "Ливия",
    "Литва",
    "Лихтенштейн",
    "Люксембург",
    "Маврикий",
    "Мавритания",
    "Мадагаскар",
    "Македония",
    "Малави",
    "Малайзия",
    "Мали",
    "Мальдивы",
    "Мальта",
    "Маршалловы Острова",
    "Мексика",
    "Микронезия",
    "Мозамбик",
    "Молдова",
    "Монако",
    "Монголия",
    "Марокко",
    "Мьянма",
    "Намибия",
    "Науру",
    "Непал",
    "Нигер",
    "Нигерия",
    "Нидерланды",
    "Никарагуа",
    "Новая Зеландия",
    "Норвегия",
    "Объединенные Арабские Эмираты",
    "Оман",
    "Пакистан",
    "Палау",
    "Панама",
    "Папуа — Новая Гвинея",
    "Парагвай",
    "Перу",
    "Польша",
    "Португалия",
    "Республика Конго",
    "Россия",
    "Руанда",
    "Румыния",
    "Сальвадор",
    "Самоа",
    "Сан-Марино",
    "Сан-Томе и Принсипи",
    "Саудовская Аравия",
    "Свазиленд",
    "Сейшельские острова",
    "Сенегал",
    "Сент-Винсент и Гренадины",
    "Сент-Киттс и Невис",
    "Сент-Люсия",
    "Сербия",
    "Сингапур",
    "Сирия",
    "Словакия",
    "Словения",
    "Соединенные Штаты Америки",
    "Соломоновы Острова",
    "Сомали",
    "Судан",
    "Суринам",
    "Сьерра-Леоне",
    "Таджикистан",
    "Таиланд",
    "Тайвань (не признана)",
    "Тамил-Илам (не признана)",
    "Танзания",
    "Тёркс и Кайкос (не признана)",
    "Того",
    "Токелау (не признана)",
    "Тонга",
    "Тринидад и Тобаго",
    "Тувалу",
    "Тунис",
    "Турецкая Республика Северного Кипра (не признана)",
    "Туркменистан",
    "Турция",
    "Уганда",
    "Узбекистан",
    "Украина",
    "Уругвай",
    "Фарерские Острова (не признана)",
    "Фиджи",
    "Филиппины",
    "Финляндия",
    "Франция",
    "Французская Полинезия (не признана)",
    "Хорватия",
    "Центральноафриканская Республика",
    "Чад",
    "Черногория",
    "Чехия",
    "Чили",
    "Швейцария",
    "Швеция",
    "Шри-Ланка",
    "Эквадор",
    "Экваториальная Гвинея",
    "Эритрея",
    "Эстония",
    "Эфиопия",
    "Южно-Африканская Республика",
    "Ямайка",
    "Япония"
  ];
});

// node_modules/faker/lib/locales/ru/address/building_number.js
var require_building_number18 = __commonJS((exports, module) => {
  module["exports"] = [
    "###"
  ];
});

// node_modules/faker/lib/locales/ru/address/street_suffix.js
var require_street_suffix14 = __commonJS((exports, module) => {
  module["exports"] = [
    "ул.",
    "улица",
    "проспект",
    "пр.",
    "площадь",
    "пл."
  ];
});

// node_modules/faker/lib/locales/ru/address/secondary_address.js
var require_secondary_address15 = __commonJS((exports, module) => {
  module["exports"] = [
    "кв. ###"
  ];
});

// node_modules/faker/lib/locales/ru/address/postcode.js
var require_postcode26 = __commonJS((exports, module) => {
  module["exports"] = [
    "######"
  ];
});

// node_modules/faker/lib/locales/ru/address/state.js
var require_state23 = __commonJS((exports, module) => {
  module["exports"] = [
    "Республика Адыгея",
    "Республика Башкортостан",
    "Республика Бурятия",
    "Республика Алтай Республика Дагестан",
    "Республика Ингушетия",
    "Кабардино-Балкарская Республика",
    "Республика Калмыкия",
    "Республика Карачаево-Черкессия",
    "Республика Карелия",
    "Республика Коми",
    "Республика Марий Эл",
    "Республика Мордовия",
    "Республика Саха (Якутия)",
    "Республика Северная Осетия-Алания",
    "Республика Татарстан",
    "Республика Тыва",
    "Удмуртская Республика",
    "Республика Хакасия",
    "Чувашская Республика",
    "Алтайский край",
    "Краснодарский край",
    "Красноярский край",
    "Приморский край",
    "Ставропольский край",
    "Хабаровский край",
    "Амурская область",
    "Архангельская область",
    "Астраханская область",
    "Белгородская область",
    "Брянская область",
    "Владимирская область",
    "Волгоградская область",
    "Вологодская область",
    "Воронежская область",
    "Ивановская область",
    "Иркутская область",
    "Калиниградская область",
    "Калужская область",
    "Камчатская область",
    "Кемеровская область",
    "Кировская область",
    "Костромская область",
    "Курганская область",
    "Курская область",
    "Ленинградская область",
    "Липецкая область",
    "Магаданская область",
    "Московская область",
    "Мурманская область",
    "Нижегородская область",
    "Новгородская область",
    "Новосибирская область",
    "Омская область",
    "Оренбургская область",
    "Орловская область",
    "Пензенская область",
    "Пермская область",
    "Псковская область",
    "Ростовская область",
    "Рязанская область",
    "Самарская область",
    "Саратовская область",
    "Сахалинская область",
    "Свердловская область",
    "Смоленская область",
    "Тамбовская область",
    "Тверская область",
    "Томская область",
    "Тульская область",
    "Тюменская область",
    "Ульяновская область",
    "Челябинская область",
    "Читинская область",
    "Ярославская область",
    "Еврейская автономная область",
    "Агинский Бурятский авт. округ",
    "Коми-Пермяцкий автономный округ",
    "Корякский автономный округ",
    "Ненецкий автономный округ",
    "Таймырский (Долгано-Ненецкий) автономный округ",
    "Усть-Ордынский Бурятский автономный округ",
    "Ханты-Мансийский автономный округ",
    "Чукотский автономный округ",
    "Эвенкийский автономный округ",
    "Ямало-Ненецкий автономный округ",
    "Чеченская Республика"
  ];
});

// node_modules/faker/lib/locales/ru/address/street_title.js
var require_street_title3 = __commonJS((exports, module) => {
  module["exports"] = [
    "Советская",
    "Молодежная",
    "Центральная",
    "Школьная",
    "Новая",
    "Садовая",
    "Лесная",
    "Набережная",
    "Ленина",
    "Мира",
    "Октябрьская",
    "Зеленая",
    "Комсомольская",
    "Заречная",
    "Первомайская",
    "Гагарина",
    "Полевая",
    "Луговая",
    "Пионерская",
    "Кирова",
    "Юбилейная",
    "Северная",
    "Пролетарская",
    "Степная",
    "Пушкина",
    "Калинина",
    "Южная",
    "Колхозная",
    "Рабочая",
    "Солнечная",
    "Железнодорожная",
    "Восточная",
    "Заводская",
    "Чапаева",
    "Нагорная",
    "Строителей",
    "Береговая",
    "Победы",
    "Горького",
    "Кооперативная",
    "Красноармейская",
    "Совхозная",
    "Речная",
    "Школьный",
    "Спортивная",
    "Озерная",
    "Строительная",
    "Парковая",
    "Чкалова",
    "Мичурина",
    "речень улиц",
    "Подгорная",
    "Дружбы",
    "Почтовая",
    "Партизанская",
    "Вокзальная",
    "Лермонтова",
    "Свободы",
    "Дорожная",
    "Дачная",
    "Маяковского",
    "Западная",
    "Фрунзе",
    "Дзержинского",
    "Московская",
    "Свердлова",
    "Некрасова",
    "Гоголя",
    "Красная",
    "Трудовая",
    "Шоссейная",
    "Чехова",
    "Коммунистическая",
    "Труда",
    "Комарова",
    "Матросова",
    "Островского",
    "Сосновая",
    "Клубная",
    "Куйбышева",
    "Крупской",
    "Березовая",
    "Карла Маркса",
    "8 Марта",
    "Больничная",
    "Садовый",
    "Интернациональная",
    "Суворова",
    "Цветочная",
    "Трактовая",
    "Ломоносова",
    "Горная",
    "Космонавтов",
    "Энергетиков",
    "Шевченко",
    "Весенняя",
    "Механизаторов",
    "Коммунальная",
    "Лесной",
    "40 лет Победы",
    "Майская"
  ];
});

// node_modules/faker/lib/locales/ru/address/city_name.js
var require_city_name9 = __commonJS((exports, module) => {
  module["exports"] = [
    "Москва",
    "Владимир",
    "Санкт-Петербург",
    "Новосибирск",
    "Екатеринбург",
    "Нижний Новгород",
    "Самара",
    "Казань",
    "Омск",
    "Челябинск",
    "Ростов-на-Дону",
    "Уфа",
    "Волгоград",
    "Пермь",
    "Красноярск",
    "Воронеж",
    "Саратов",
    "Краснодар",
    "Тольятти",
    "Ижевск",
    "Барнаул",
    "Ульяновск",
    "Тюмень",
    "Иркутск",
    "Владивосток",
    "Ярославль",
    "Хабаровск",
    "Махачкала",
    "Оренбург",
    "Новокузнецк",
    "Томск",
    "Кемерово",
    "Рязань",
    "Астрахань",
    "Пенза",
    "Липецк",
    "Тула",
    "Киров",
    "Чебоксары",
    "Курск",
    "Брянскm Магнитогорск",
    "Иваново",
    "Тверь",
    "Ставрополь",
    "Белгород",
    "Сочи"
  ];
});

// node_modules/faker/lib/locales/ru/address/city.js
var require_city19 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Address.city_name}"
  ];
});

// node_modules/faker/lib/locales/ru/address/street_name.js
var require_street_name18 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_suffix} #{Address.street_title}",
    "#{Address.street_title} #{street_suffix}"
  ];
});

// node_modules/faker/lib/locales/ru/address/street_address.js
var require_street_address15 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_name}, #{building_number}"
  ];
});

// node_modules/faker/lib/locales/ru/address/default_country.js
var require_default_country26 = __commonJS((exports, module) => {
  module["exports"] = [
    "Россия"
  ];
});

// node_modules/faker/lib/locales/ru/address/index.js
var require_address29 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.country = require_country13();
  address.building_number = require_building_number18();
  address.street_suffix = require_street_suffix14();
  address.secondary_address = require_secondary_address15();
  address.postcode = require_postcode26();
  address.state = require_state23();
  address.street_title = require_street_title3();
  address.city_name = require_city_name9();
  address.city = require_city19();
  address.street_name = require_street_name18();
  address.street_address = require_street_address15();
  address.default_country = require_default_country26();
});

// node_modules/faker/lib/locales/ru/internet/free_email.js
var require_free_email20 = __commonJS((exports, module) => {
  module["exports"] = [
    "yandex.ru",
    "ya.ru",
    "mail.ru",
    "gmail.com",
    "yahoo.com",
    "hotmail.com"
  ];
});

// node_modules/faker/lib/locales/ru/internet/domain_suffix.js
var require_domain_suffix27 = __commonJS((exports, module) => {
  module["exports"] = [
    "com",
    "ru",
    "info",
    "рф",
    "net",
    "org"
  ];
});

// node_modules/faker/lib/locales/ru/internet/index.js
var require_internet28 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.free_email = require_free_email20();
  internet.domain_suffix = require_domain_suffix27();
});

// node_modules/faker/lib/locales/ru/name/male_first_name.js
var require_male_first_name4 = __commonJS((exports, module) => {
  module["exports"] = [
    "Александр",
    "Алексей",
    "Альберт",
    "Анатолий",
    "Андрей",
    "Антон",
    "Аркадий",
    "Арсений",
    "Артём",
    "Борис",
    "Вадим",
    "Валентин",
    "Валерий",
    "Василий",
    "Виктор",
    "Виталий",
    "Владимир",
    "Владислав",
    "Вячеслав",
    "Геннадий",
    "Георгий",
    "Герман",
    "Григорий",
    "Даниил",
    "Денис",
    "Дмитрий",
    "Евгений",
    "Егор",
    "Иван",
    "Игнатий",
    "Игорь",
    "Илья",
    "Константин",
    "Лаврентий",
    "Леонид",
    "Лука",
    "Макар",
    "Максим",
    "Матвей",
    "Михаил",
    "Никита",
    "Николай",
    "Олег",
    "Роман",
    "Семён",
    "Сергей",
    "Станислав",
    "Степан",
    "Фёдор",
    "Эдуард",
    "Юрий",
    "Ярослав"
  ];
});

// node_modules/faker/lib/locales/ru/name/male_middle_name.js
var require_male_middle_name = __commonJS((exports, module) => {
  module["exports"] = [
    "Александрович",
    "Алексеевич",
    "Альбертович",
    "Анатольевич",
    "Андреевич",
    "Антонович",
    "Аркадьевич",
    "Арсеньевич",
    "Артёмович",
    "Борисович",
    "Вадимович",
    "Валентинович",
    "Валерьевич",
    "Васильевич",
    "Викторович",
    "Витальевич",
    "Владимирович",
    "Владиславович",
    "Вячеславович",
    "Геннадьевич",
    "Георгиевич",
    "Германович",
    "Григорьевич",
    "Даниилович",
    "Денисович",
    "Дмитриевич",
    "Евгеньевич",
    "Егорович",
    "Иванович",
    "Игнатьевич",
    "Игоревич",
    "Ильич",
    "Константинович",
    "Лаврентьевич",
    "Леонидович",
    "Лукич",
    "Макарович",
    "Максимович",
    "Матвеевич",
    "Михайлович",
    "Никитич",
    "Николаевич",
    "Олегович",
    "Романович",
    "Семёнович",
    "Сергеевич",
    "Станиславович",
    "Степанович",
    "Фёдорович",
    "Эдуардович",
    "Юрьевич",
    "Ярославович"
  ];
});

// node_modules/faker/lib/locales/ru/name/male_last_name.js
var require_male_last_name4 = __commonJS((exports, module) => {
  module["exports"] = [
    "Смирнов",
    "Иванов",
    "Кузнецов",
    "Попов",
    "Соколов",
    "Лебедев",
    "Козлов",
    "Новиков",
    "Морозов",
    "Петров",
    "Волков",
    "Соловьев",
    "Васильев",
    "Зайцев",
    "Павлов",
    "Семенов",
    "Голубев",
    "Виноградов",
    "Богданов",
    "Воробьев",
    "Федоров",
    "Михайлов",
    "Беляев",
    "Тарасов",
    "Белов",
    "Комаров",
    "Орлов",
    "Киселев",
    "Макаров",
    "Андреев",
    "Ковалев",
    "Ильин",
    "Гусев",
    "Титов",
    "Кузьмин",
    "Кудрявцев",
    "Баранов",
    "Куликов",
    "Алексеев",
    "Степанов",
    "Яковлев",
    "Сорокин",
    "Сергеев",
    "Романов",
    "Захаров",
    "Борисов",
    "Королев",
    "Герасимов",
    "Пономарев",
    "Григорьев",
    "Лазарев",
    "Медведев",
    "Ершов",
    "Никитин",
    "Соболев",
    "Рябов",
    "Поляков",
    "Цветков",
    "Данилов",
    "Жуков",
    "Фролов",
    "Журавлев",
    "Николаев",
    "Крылов",
    "Максимов",
    "Сидоров",
    "Осипов",
    "Белоусов",
    "Федотов",
    "Дорофеев",
    "Егоров",
    "Матвеев",
    "Бобров",
    "Дмитриев",
    "Калинин",
    "Анисимов",
    "Петухов",
    "Антонов",
    "Тимофеев",
    "Никифоров",
    "Веселов",
    "Филиппов",
    "Марков",
    "Большаков",
    "Суханов",
    "Миронов",
    "Ширяев",
    "Александров",
    "Коновалов",
    "Шестаков",
    "Казаков",
    "Ефимов",
    "Денисов",
    "Громов",
    "Фомин",
    "Давыдов",
    "Мельников",
    "Щербаков",
    "Блинов",
    "Колесников",
    "Карпов",
    "Афанасьев",
    "Власов",
    "Маслов",
    "Исаков",
    "Тихонов",
    "Аксенов",
    "Гаврилов",
    "Родионов",
    "Котов",
    "Горбунов",
    "Кудряшов",
    "Быков",
    "Зуев",
    "Третьяков",
    "Савельев",
    "Панов",
    "Рыбаков",
    "Суворов",
    "Абрамов",
    "Воронов",
    "Мухин",
    "Архипов",
    "Трофимов",
    "Мартынов",
    "Емельянов",
    "Горшков",
    "Чернов",
    "Овчинников",
    "Селезнев",
    "Панфилов",
    "Копылов",
    "Михеев",
    "Галкин",
    "Назаров",
    "Лобанов",
    "Лукин",
    "Беляков",
    "Потапов",
    "Некрасов",
    "Хохлов",
    "Жданов",
    "Наумов",
    "Шилов",
    "Воронцов",
    "Ермаков",
    "Дроздов",
    "Игнатьев",
    "Савин",
    "Логинов",
    "Сафонов",
    "Капустин",
    "Кириллов",
    "Моисеев",
    "Елисеев",
    "Кошелев",
    "Костин",
    "Горбачев",
    "Орехов",
    "Ефремов",
    "Исаев",
    "Евдокимов",
    "Калашников",
    "Кабанов",
    "Носков",
    "Юдин",
    "Кулагин",
    "Лапин",
    "Прохоров",
    "Нестеров",
    "Харитонов",
    "Агафонов",
    "Муравьев",
    "Ларионов",
    "Федосеев",
    "Зимин",
    "Пахомов",
    "Шубин",
    "Игнатов",
    "Филатов",
    "Крюков",
    "Рогов",
    "Кулаков",
    "Терентьев",
    "Молчанов",
    "Владимиров",
    "Артемьев",
    "Гурьев",
    "Зиновьев",
    "Гришин",
    "Кононов",
    "Дементьев",
    "Ситников",
    "Симонов",
    "Мишин",
    "Фадеев",
    "Комиссаров",
    "Мамонтов",
    "Носов",
    "Гуляев",
    "Шаров",
    "Устинов",
    "Вишняков",
    "Евсеев",
    "Лаврентьев",
    "Брагин",
    "Константинов",
    "Корнилов",
    "Авдеев",
    "Зыков",
    "Бирюков",
    "Шарапов",
    "Никонов",
    "Щукин",
    "Дьячков",
    "Одинцов",
    "Сазонов",
    "Якушев",
    "Красильников",
    "Гордеев",
    "Самойлов",
    "Князев",
    "Беспалов",
    "Уваров",
    "Шашков",
    "Бобылев",
    "Доронин",
    "Белозеров",
    "Рожков",
    "Самсонов",
    "Мясников",
    "Лихачев",
    "Буров",
    "Сысоев",
    "Фомичев",
    "Русаков",
    "Стрелков",
    "Гущин",
    "Тетерин",
    "Колобов",
    "Субботин",
    "Фокин",
    "Блохин",
    "Селиверстов",
    "Пестов",
    "Кондратьев",
    "Силин",
    "Меркушев",
    "Лыткин",
    "Туров"
  ];
});

// node_modules/faker/lib/locales/ru/name/female_first_name.js
var require_female_first_name4 = __commonJS((exports, module) => {
  module["exports"] = [
    "Анна",
    "Алёна",
    "Алевтина",
    "Александра",
    "Алина",
    "Алла",
    "Анастасия",
    "Ангелина",
    "Анжела",
    "Анжелика",
    "Антонида",
    "Антонина",
    "Анфиса",
    "Арина",
    "Валентина",
    "Валерия",
    "Варвара",
    "Василиса",
    "Вера",
    "Вероника",
    "Виктория",
    "Галина",
    "Дарья",
    "Евгения",
    "Екатерина",
    "Елена",
    "Елизавета",
    "Жанна",
    "Зинаида",
    "Зоя",
    "Ирина",
    "Кира",
    "Клавдия",
    "Ксения",
    "Лариса",
    "Лидия",
    "Любовь",
    "Людмила",
    "Маргарита",
    "Марина",
    "Мария",
    "Надежда",
    "Наталья",
    "Нина",
    "Оксана",
    "Ольга",
    "Раиса",
    "Регина",
    "Римма",
    "Светлана",
    "София",
    "Таисия",
    "Тамара",
    "Татьяна",
    "Ульяна",
    "Юлия"
  ];
});

// node_modules/faker/lib/locales/ru/name/female_middle_name.js
var require_female_middle_name = __commonJS((exports, module) => {
  module["exports"] = [
    "Александровна",
    "Алексеевна",
    "Альбертовна",
    "Анатольевна",
    "Андреевна",
    "Антоновна",
    "Аркадьевна",
    "Арсеньевна",
    "Артёмовна",
    "Борисовна",
    "Вадимовна",
    "Валентиновна",
    "Валерьевна",
    "Васильевна",
    "Викторовна",
    "Витальевна",
    "Владимировна",
    "Владиславовна",
    "Вячеславовна",
    "Геннадьевна",
    "Георгиевна",
    "Германовна",
    "Григорьевна",
    "Данииловна",
    "Денисовна",
    "Дмитриевна",
    "Евгеньевна",
    "Егоровна",
    "Ивановна",
    "Игнатьевна",
    "Игоревна",
    "Ильинична",
    "Константиновна",
    "Лаврентьевна",
    "Леонидовна",
    "Макаровна",
    "Максимовна",
    "Матвеевна",
    "Михайловна",
    "Никитична",
    "Николаевна",
    "Олеговна",
    "Романовна",
    "Семёновна",
    "Сергеевна",
    "Станиславовна",
    "Степановна",
    "Фёдоровна",
    "Эдуардовна",
    "Юрьевна",
    "Ярославовна"
  ];
});

// node_modules/faker/lib/locales/ru/name/female_last_name.js
var require_female_last_name4 = __commonJS((exports, module) => {
  module["exports"] = [
    "Смирнова",
    "Иванова",
    "Кузнецова",
    "Попова",
    "Соколова",
    "Лебедева",
    "Козлова",
    "Новикова",
    "Морозова",
    "Петрова",
    "Волкова",
    "Соловьева",
    "Васильева",
    "Зайцева",
    "Павлова",
    "Семенова",
    "Голубева",
    "Виноградова",
    "Богданова",
    "Воробьева",
    "Федорова",
    "Михайлова",
    "Беляева",
    "Тарасова",
    "Белова",
    "Комарова",
    "Орлова",
    "Киселева",
    "Макарова",
    "Андреева",
    "Ковалева",
    "Ильина",
    "Гусева",
    "Титова",
    "Кузьмина",
    "Кудрявцева",
    "Баранова",
    "Куликова",
    "Алексеева",
    "Степанова",
    "Яковлева",
    "Сорокина",
    "Сергеева",
    "Романова",
    "Захарова",
    "Борисова",
    "Королева",
    "Герасимова",
    "Пономарева",
    "Григорьева",
    "Лазарева",
    "Медведева",
    "Ершова",
    "Никитина",
    "Соболева",
    "Рябова",
    "Полякова",
    "Цветкова",
    "Данилова",
    "Жукова",
    "Фролова",
    "Журавлева",
    "Николаева",
    "Крылова",
    "Максимова",
    "Сидорова",
    "Осипова",
    "Белоусова",
    "Федотова",
    "Дорофеева",
    "Егорова",
    "Матвеева",
    "Боброва",
    "Дмитриева",
    "Калинина",
    "Анисимова",
    "Петухова",
    "Антонова",
    "Тимофеева",
    "Никифорова",
    "Веселова",
    "Филиппова",
    "Маркова",
    "Большакова",
    "Суханова",
    "Миронова",
    "Ширяева",
    "Александрова",
    "Коновалова",
    "Шестакова",
    "Казакова",
    "Ефимова",
    "Денисова",
    "Громова",
    "Фомина",
    "Давыдова",
    "Мельникова",
    "Щербакова",
    "Блинова",
    "Колесникова",
    "Карпова",
    "Афанасьева",
    "Власова",
    "Маслова",
    "Исакова",
    "Тихонова",
    "Аксенова",
    "Гаврилова",
    "Родионова",
    "Котова",
    "Горбунова",
    "Кудряшова",
    "Быкова",
    "Зуева",
    "Третьякова",
    "Савельева",
    "Панова",
    "Рыбакова",
    "Суворова",
    "Абрамова",
    "Воронова",
    "Мухина",
    "Архипова",
    "Трофимова",
    "Мартынова",
    "Емельянова",
    "Горшкова",
    "Чернова",
    "Овчинникова",
    "Селезнева",
    "Панфилова",
    "Копылова",
    "Михеева",
    "Галкина",
    "Назарова",
    "Лобанова",
    "Лукина",
    "Белякова",
    "Потапова",
    "Некрасова",
    "Хохлова",
    "Жданова",
    "Наумова",
    "Шилова",
    "Воронцова",
    "Ермакова",
    "Дроздова",
    "Игнатьева",
    "Савина",
    "Логинова",
    "Сафонова",
    "Капустина",
    "Кириллова",
    "Моисеева",
    "Елисеева",
    "Кошелева",
    "Костина",
    "Горбачева",
    "Орехова",
    "Ефремова",
    "Исаева",
    "Евдокимова",
    "Калашникова",
    "Кабанова",
    "Носкова",
    "Юдина",
    "Кулагина",
    "Лапина",
    "Прохорова",
    "Нестерова",
    "Харитонова",
    "Агафонова",
    "Муравьева",
    "Ларионова",
    "Федосеева",
    "Зимина",
    "Пахомова",
    "Шубина",
    "Игнатова",
    "Филатова",
    "Крюкова",
    "Рогова",
    "Кулакова",
    "Терентьева",
    "Молчанова",
    "Владимирова",
    "Артемьева",
    "Гурьева",
    "Зиновьева",
    "Гришина",
    "Кононова",
    "Дементьева",
    "Ситникова",
    "Симонова",
    "Мишина",
    "Фадеева",
    "Комиссарова",
    "Мамонтова",
    "Носова",
    "Гуляева",
    "Шарова",
    "Устинова",
    "Вишнякова",
    "Евсеева",
    "Лаврентьева",
    "Брагина",
    "Константинова",
    "Корнилова",
    "Авдеева",
    "Зыкова",
    "Бирюкова",
    "Шарапова",
    "Никонова",
    "Щукина",
    "Дьячкова",
    "Одинцова",
    "Сазонова",
    "Якушева",
    "Красильникова",
    "Гордеева",
    "Самойлова",
    "Князева",
    "Беспалова",
    "Уварова",
    "Шашкова",
    "Бобылева",
    "Доронина",
    "Белозерова",
    "Рожкова",
    "Самсонова",
    "Мясникова",
    "Лихачева",
    "Бурова",
    "Сысоева",
    "Фомичева",
    "Русакова",
    "Стрелкова",
    "Гущина",
    "Тетерина",
    "Колобова",
    "Субботина",
    "Фокина",
    "Блохина",
    "Селиверстова",
    "Пестова",
    "Кондратьева",
    "Силина",
    "Меркушева",
    "Лыткина",
    "Турова"
  ];
});

// node_modules/faker/lib/locales/ru/name/prefix.js
var require_prefix23 = __commonJS((exports, module) => {
  module["exports"] = [];
});

// node_modules/faker/lib/locales/ru/name/suffix.js
var require_suffix33 = __commonJS((exports, module) => {
  module["exports"] = [];
});

// node_modules/faker/lib/locales/ru/name/name.js
var require_name62 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{male_first_name} #{male_last_name}",
    "#{male_last_name} #{male_first_name}",
    "#{male_first_name} #{male_middle_name} #{male_last_name}",
    "#{male_last_name} #{male_first_name} #{male_middle_name}",
    "#{female_first_name} #{female_last_name}",
    "#{female_last_name} #{female_first_name}",
    "#{female_first_name} #{female_middle_name} #{female_last_name}",
    "#{female_last_name} #{female_first_name} #{female_middle_name}"
  ];
});

// node_modules/faker/lib/locales/ru/name/index.js
var require_name61 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.male_first_name = require_male_first_name4();
  name2.male_middle_name = require_male_middle_name();
  name2.male_last_name = require_male_last_name4();
  name2.female_first_name = require_female_first_name4();
  name2.female_middle_name = require_female_middle_name();
  name2.female_last_name = require_female_last_name4();
  name2.prefix = require_prefix23();
  name2.suffix = require_suffix33();
  name2.name = require_name62();
});

// node_modules/faker/lib/locales/ru/phone_number/formats.js
var require_formats37 = __commonJS((exports, module) => {
  module["exports"] = [
    "(9##)###-##-##"
  ];
});

// node_modules/faker/lib/locales/ru/phone_number/index.js
var require_phone_number28 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats37();
});

// node_modules/faker/lib/locales/ru/commerce/color.js
var require_color4 = __commonJS((exports, module) => {
  module["exports"] = [
    "красный",
    "зеленый",
    "синий",
    "желтый",
    "багровый",
    "мятный",
    "зеленовато-голубой",
    "белый",
    "черный",
    "оранжевый",
    "розовый",
    "серый",
    "красно-коричневый",
    "фиолетовый",
    "бирюзовый",
    "желто-коричневый",
    "небесно голубой",
    "оранжево-розовый",
    "темно-фиолетовый",
    "орхидный",
    "оливковый",
    "пурпурный",
    "лимонный",
    "кремовый",
    "сине-фиолетовый",
    "золотой",
    "красно-пурпурный",
    "голубой",
    "лазурный",
    "лиловый",
    "серебряный"
  ];
});

// node_modules/faker/lib/locales/ru/commerce/department.js
var require_department4 = __commonJS((exports, module) => {
  module["exports"] = [
    "Книги",
    "Фильмы",
    "музыка",
    "игры",
    "Электроника",
    "компьютеры",
    "Дом",
    "садинструмент",
    "Бакалея",
    "здоровье",
    "красота",
    "Игрушки",
    "детское",
    "для малышей",
    "Одежда",
    "обувь",
    "украшения",
    "Спорт",
    "туризм",
    "Автомобильное",
    "промышленное"
  ];
});

// node_modules/faker/lib/locales/ru/commerce/product_name.js
var require_product_name4 = __commonJS((exports, module) => {
  module["exports"] = {
    adjective: [
      "Маленький",
      "Эргономичный",
      "Грубый",
      "Интеллектуальный",
      "Великолепный",
      "Невероятный",
      "Фантастический",
      "Практчиный",
      "Лоснящийся",
      "Потрясающий"
    ],
    material: [
      "Стальной",
      "Деревянный",
      "Бетонный",
      "Пластиковый",
      "Хлопковый",
      "Гранитный",
      "Резиновый"
    ],
    product: [
      "Стул",
      "Автомобиль",
      "Компьютер",
      "Берет",
      "Кулон",
      "Стол",
      "Свитер",
      "Ремень",
      "Ботинок"
    ]
  };
});

// node_modules/faker/lib/locales/ru/commerce/index.js
var require_commerce5 = __commonJS((exports, module) => {
  var commerce = {};
  module["exports"] = commerce;
  commerce.color = require_color4();
  commerce.department = require_department4();
  commerce.product_name = require_product_name4();
});

// node_modules/faker/lib/locales/ru/company/prefix.js
var require_prefix22 = __commonJS((exports, module) => {
  module["exports"] = [
    "ИП",
    "ООО",
    "ЗАО",
    "ОАО",
    "НКО",
    "ТСЖ",
    "ОП"
  ];
});

// node_modules/faker/lib/locales/ru/company/suffix.js
var require_suffix32 = __commonJS((exports, module) => {
  module["exports"] = [
    "Снаб",
    "Торг",
    "Пром",
    "Трейд",
    "Сбыт"
  ];
});

// node_modules/faker/lib/locales/ru/company/name.js
var require_name60 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{prefix} #{Name.female_first_name}",
    "#{prefix} #{Name.male_first_name}",
    "#{prefix} #{Name.male_last_name}",
    "#{prefix} #{suffix}#{suffix}",
    "#{prefix} #{suffix}#{suffix}#{suffix}",
    "#{prefix} #{Address.city_name}#{suffix}",
    "#{prefix} #{Address.city_name}#{suffix}#{suffix}",
    "#{prefix} #{Address.city_name}#{suffix}#{suffix}#{suffix}"
  ];
});

// node_modules/faker/lib/locales/ru/company/index.js
var require_company23 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.prefix = require_prefix22();
  company.suffix = require_suffix32();
  company.name = require_name60();
});

// node_modules/faker/lib/locales/ru/date/month.js
var require_month5 = __commonJS((exports, module) => {
  module["exports"] = {
    wide: [
      "январь",
      "февраль",
      "март",
      "апрель",
      "май",
      "июнь",
      "июль",
      "август",
      "сентябрь",
      "октябрь",
      "ноябрь",
      "декабрь"
    ],
    wide_context: [
      "января",
      "февраля",
      "марта",
      "апреля",
      "мая",
      "июня",
      "июля",
      "августа",
      "сентября",
      "октября",
      "ноября",
      "декабря"
    ],
    abbr: [
      "янв.",
      "февр.",
      "март",
      "апр.",
      "май",
      "июнь",
      "июль",
      "авг.",
      "сент.",
      "окт.",
      "нояб.",
      "дек."
    ],
    abbr_context: [
      "янв.",
      "февр.",
      "марта",
      "апр.",
      "мая",
      "июня",
      "июля",
      "авг.",
      "сент.",
      "окт.",
      "нояб.",
      "дек."
    ]
  };
});

// node_modules/faker/lib/locales/ru/date/weekday.js
var require_weekday5 = __commonJS((exports, module) => {
  module["exports"] = {
    wide: [
      "Воскресенье",
      "Понедельник",
      "Вторник",
      "Среда",
      "Четверг",
      "Пятница",
      "Суббота"
    ],
    wide_context: [
      "воскресенье",
      "понедельник",
      "вторник",
      "среда",
      "четверг",
      "пятница",
      "суббота"
    ],
    abbr: [
      "Вс",
      "Пн",
      "Вт",
      "Ср",
      "Чт",
      "Пт",
      "Сб"
    ],
    abbr_context: [
      "вс",
      "пн",
      "вт",
      "ср",
      "чт",
      "пт",
      "сб"
    ]
  };
});

// node_modules/faker/lib/locales/ru/date/index.js
var require_date6 = __commonJS((exports, module) => {
  var date2 = {};
  module["exports"] = date2;
  date2.month = require_month5();
  date2.weekday = require_weekday5();
});

// node_modules/faker/lib/locales/ru/index.js
var require_ru = __commonJS((exports, module) => {
  var ru = {};
  module["exports"] = ru;
  ru.title = "Russian";
  ru.separator = " и ";
  ru.address = require_address29();
  ru.internet = require_internet28();
  ru.name = require_name61();
  ru.phone_number = require_phone_number28();
  ru.commerce = require_commerce5();
  ru.company = require_company23();
  ru.date = require_date6();
});

// node_modules/faker/lib/locales/sk/address/city_prefix.js
var require_city_prefix11 = __commonJS((exports, module) => {
  module["exports"] = [
    "North",
    "East",
    "West",
    "South",
    "New",
    "Lake",
    "Port"
  ];
});

// node_modules/faker/lib/locales/sk/address/city_suffix.js
var require_city_suffix11 = __commonJS((exports, module) => {
  module["exports"] = [
    "town",
    "ton",
    "land",
    "ville",
    "berg",
    "burgh",
    "borough",
    "bury",
    "view",
    "port",
    "mouth",
    "stad",
    "furt",
    "chester",
    "mouth",
    "fort",
    "haven",
    "side",
    "shire"
  ];
});

// node_modules/faker/lib/locales/sk/address/country.js
var require_country14 = __commonJS((exports, module) => {
  module["exports"] = [
    "Afganistan",
    "Afgánsky islamský štát",
    "Albánsko",
    "Albánska republika",
    "Alžírsko",
    "Alžírska demokratická ľudová republika",
    "Andorra",
    "Andorrské kniežatsvo",
    "Angola",
    "Angolská republika",
    "Antigua a Barbuda",
    "Antigua a Barbuda",
    "Argentína",
    "Argentínska republika",
    "Arménsko",
    "Arménska republika",
    "Austrália",
    "Austrálsky zväz",
    "Azerbajdžan",
    "Azerbajdžanská republika",
    "Bahamy",
    "Bahamské spoločenstvo",
    "Bahrajn",
    "Bahrajnské kráľovstvo",
    "Bangladéš",
    "Bangladéšska ľudová republika",
    "Barbados",
    "Barbados",
    "Belgicko",
    "Belgické kráľovstvo",
    "Belize",
    "Belize",
    "Benin",
    "Beninská republika",
    "Bhután",
    "Bhutánske kráľovstvo",
    "Bielorusko",
    "Bieloruská republika",
    "Bolívia",
    "Bolívijská republika",
    "Bosna a Hercegovina",
    "Republika Bosny a Hercegoviny",
    "Botswana",
    "Botswanská republika",
    "Brazília",
    "Brazílska federatívna republika",
    "Brunej",
    "Brunejský sultanát",
    "Bulharsko",
    "Bulharská republika",
    "Burkina Faso",
    "Burkina Faso",
    "Burundi",
    "Burundská republika",
    "Cyprus",
    "Cyperská republika",
    "Čad",
    "Republika Čad",
    "Česko",
    "Česká republika",
    "Čína",
    "Čínska ľudová republika",
    "Dánsko",
    "Dánsko kráľovstvo",
    "Dominika",
    "Spoločenstvo Dominika",
    "Dominikánska republika",
    "Dominikánska republika",
    "Džibutsko",
    "Džibutská republika",
    "Egypt",
    "Egyptská arabská republika",
    "Ekvádor",
    "Ekvádorská republika",
    "Eritrea",
    "Eritrejský štát",
    "Estónsko",
    "Estónska republika",
    "Etiópia",
    "Etiópska federatívna demokratická republika",
    "Fidži",
    "Republika ostrovy Fidži",
    "Filipíny",
    "Filipínska republika",
    "Fínsko",
    "Fínska republika",
    "Francúzsko",
    "Francúzska republika",
    "Gabon",
    "Gabonská republika",
    "Gambia",
    "Gambijská republika",
    "Ghana",
    "Ghanská republika",
    "Grécko",
    "Helénska republika",
    "Grenada",
    "Grenada",
    "Gruzínsko",
    "Gruzínsko",
    "Guatemala",
    "Guatemalská republika",
    "Guinea",
    "Guinejská republika",
    "Guinea-Bissau",
    "Republika Guinea-Bissau",
    "Guayana",
    "Guayanská republika",
    "Haiti",
    "Republika Haiti",
    "Holandsko",
    "Holandské kráľovstvo",
    "Honduras",
    "Honduraská republika",
    "Chile",
    "Čílska republika",
    "Chorvátsko",
    "Chorvátska republika",
    "India",
    "Indická republika",
    "Indonézia",
    "Indonézska republika",
    "Irak",
    "Iracká republika",
    "Irán",
    "Iránska islamská republika",
    "Island",
    "Islandská republika",
    "Izrael",
    "Štát Izrael",
    "Írsko",
    "Írska republika",
    "Jamajka",
    "Jamajka",
    "Japonsko",
    "Japonsko",
    "Jemen",
    "Jemenská republika",
    "Jordánsko",
    "Jordánske hášimovské kráľovstvo",
    "Južná Afrika",
    "Juhoafrická republika",
    "Kambodža",
    "Kambodžské kráľovstvo",
    "Kamerun",
    "Kamerunská republika",
    "Kanada",
    "Kanada",
    "Kapverdy",
    "Kapverdská republika",
    "Katar",
    "Štát Katar",
    "Kazachstan",
    "Kazašská republika",
    "Keňa",
    "Kenská republika",
    "Kirgizsko",
    "Kirgizská republika",
    "Kiribati",
    "Kiribatská republika",
    "Kolumbia",
    "Kolumbijská republika",
    "Komory",
    "Komorská únia",
    "Kongo",
    "Konžská demokratická republika",
    'Kongo ("Brazzaville")',
    "Konžská republika",
    'Kórea ("Južná")',
    "Kórejská republika",
    'Kórea ("Severná")',
    "Kórejská ľudovodemokratická republika",
    "Kostarika",
    "Kostarická republika",
    "Kuba",
    "Kubánska republika",
    "Kuvajt",
    "Kuvajtský štát",
    "Laos",
    "Laoská ľudovodemokratická republika",
    "Lesotho",
    "Lesothské kráľovstvo",
    "Libanon",
    "Libanonská republika",
    "Libéria",
    "Libérijská republika",
    "Líbya",
    "Líbyjská arabská ľudová socialistická džamáhírija",
    "Lichtenštajnsko",
    "Lichtenštajnské kniežatstvo",
    "Litva",
    "Litovská republika",
    "Lotyšsko",
    "Lotyšská republika",
    "Luxembursko",
    "Luxemburské veľkovojvodstvo",
    "Macedónsko",
    "Macedónska republika",
    "Madagaskar",
    "Madagaskarská republika",
    "Maďarsko",
    "Maďarská republika",
    "Malajzia",
    "Malajzia",
    "Malawi",
    "Malawijská republika",
    "Maldivy",
    "Maldivská republika",
    "Mali",
    "Malijská republika",
    "Malta",
    "Malta",
    "Maroko",
    "Marocké kráľovstvo",
    "Marshallove ostrovy",
    "Republika Marshallových ostrovy",
    "Mauritánia",
    "Mauritánska islamská republika",
    "Maurícius",
    "Maurícijská republika",
    "Mexiko",
    "Spojené štáty mexické",
    "Mikronézia",
    "Mikronézske federatívne štáty",
    "Mjanmarsko",
    "Mjanmarský zväz",
    "Moldavsko",
    "Moldavská republika",
    "Monako",
    "Monacké kniežatstvo",
    "Mongolsko",
    "Mongolsko",
    "Mozambik",
    "Mozambická republika",
    "Namíbia",
    "Namíbijská republika",
    "Nauru",
    "Naurská republika",
    "Nemecko",
    "Nemecká spolková republika",
    "Nepál",
    "Nepálske kráľovstvo",
    "Niger",
    "Nigerská republika",
    "Nigéria",
    "Nigérijská federatívna republika",
    "Nikaragua",
    "Nikaragujská republika",
    "Nový Zéland",
    "Nový Zéland",
    "Nórsko",
    "Nórske kráľovstvo",
    "Omán",
    "Ománsky sultanát",
    "Pakistan",
    "Pakistanská islamská republika",
    "Palau",
    "Palauská republika",
    "Panama",
    "Panamská republika",
    "Papua-Nová Guinea",
    "Nezávislý štát Papua-Nová Guinea",
    "Paraguaj",
    "Paraguajská republika",
    "Peru",
    "Peruánska republika",
    "Pobrežie Slonoviny",
    "Republika Pobrežie Slonoviny",
    "Poľsko",
    "Poľská republika",
    "Portugalsko",
    "Portugalská republika",
    "Rakúsko",
    "Rakúska republika",
    "Rovníková Guinea",
    "Republika Rovníková Guinea",
    "Rumunsko",
    "Rumunsko",
    "Rusko",
    "Ruská federácia",
    "Rwanda",
    "Rwandská republika",
    "Salvádor",
    "Salvádorská republika",
    "Samoa",
    "Nezávislý štát Samoa",
    "San Maríno",
    "Sanmarínska republika",
    "Saudská Arábia",
    "Kráľovstvo Saudskej Arábie",
    "Senegal",
    "Senegalská republika",
    "Seychely",
    "Seychelská republika",
    "Sierra Leone",
    "Republika Sierra Leone",
    "Singapur",
    "Singapurska republika",
    "Slovensko",
    "Slovenská republika",
    "Slovinsko",
    "Slovinská republika",
    "Somálsko",
    "Somálska demokratická republika",
    "Spojené arabské emiráty",
    "Spojené arabské emiráty",
    "Spojené štáty americké",
    "Spojené štáty americké",
    "Srbsko a Čierna Hora",
    "Srbsko a Čierna Hora",
    "Srí Lanka",
    "Demokratická socialistická republika Srí Lanka",
    "Stredoafrická republika",
    "Stredoafrická republika",
    "Sudán",
    "Sudánska republika",
    "Surinam",
    "Surinamská republika",
    "Svazijsko",
    "Svazijské kráľovstvo",
    "Svätá Lucia",
    "Svätá Lucia",
    "Svätý Krištof a Nevis",
    "Federácia Svätý Krištof a Nevis",
    "Sv. Tomáš a Princov Ostrov",
    "Demokratická republika Svätý Tomáš a Princov Ostrov",
    "Sv. Vincent a Grenadíny",
    "Svätý Vincent a Grenadíny",
    "Sýria",
    "Sýrska arabská republika",
    "Šalamúnove ostrovy",
    "Šalamúnove ostrovy",
    "Španielsko",
    "Španielske kráľovstvo",
    "Švajčiarsko",
    "Švajčiarska konfederácia",
    "Švédsko",
    "Švédske kráľovstvo",
    "Tadžikistan",
    "Tadžická republika",
    "Taliansko",
    "Talianska republika",
    "Tanzánia",
    "Tanzánijská zjednotená republika",
    "Thajsko",
    "Thajské kráľovstvo",
    "Togo",
    "Tožská republika",
    "Tonga",
    "Tonžské kráľovstvo",
    "Trinidad a Tobago",
    "Republika Trinidad a Tobago",
    "Tunisko",
    "Tuniská republika",
    "Turecko",
    "Turecká republika",
    "Turkménsko",
    "Turkménsko",
    "Tuvalu",
    "Tuvalu",
    "Uganda",
    "Ugandská republika",
    "Ukrajina",
    "Uruguaj",
    "Uruguajská východná republika",
    "Uzbekistan",
    "Vanuatu",
    "Vanuatská republika",
    "Vatikán",
    "Svätá Stolica",
    "Veľká Británia",
    "Spojené kráľovstvo Veľkej Británie a Severného Írska",
    "Venezuela",
    "Venezuelská bolívarovská republika",
    "Vietnam",
    "Vietnamská socialistická republika",
    "Východný Timor",
    "Demokratická republika Východný Timor",
    "Zambia",
    "Zambijská republika",
    "Zimbabwe",
    "Zimbabwianska republika"
  ];
});

// node_modules/faker/lib/locales/sk/address/building_number.js
var require_building_number19 = __commonJS((exports, module) => {
  module["exports"] = [
    "#",
    "##",
    "###"
  ];
});

// node_modules/faker/lib/locales/sk/address/secondary_address.js
var require_secondary_address16 = __commonJS((exports, module) => {
  module["exports"] = [
    "Apt. ###",
    "Suite ###"
  ];
});

// node_modules/faker/lib/locales/sk/address/postcode.js
var require_postcode27 = __commonJS((exports, module) => {
  module["exports"] = [
    "#####",
    "### ##",
    "## ###"
  ];
});

// node_modules/faker/lib/locales/sk/address/state.js
var require_state24 = __commonJS((exports, module) => {
  module["exports"] = [];
});

// node_modules/faker/lib/locales/sk/address/state_abbr.js
var require_state_abbr17 = __commonJS((exports, module) => {
  module["exports"] = [];
});

// node_modules/faker/lib/locales/sk/address/time_zone.js
var require_time_zone5 = __commonJS((exports, module) => {
  module["exports"] = [
    "Pacific/Midway",
    "Pacific/Pago_Pago",
    "Pacific/Honolulu",
    "America/Juneau",
    "America/Los_Angeles",
    "America/Tijuana",
    "America/Denver",
    "America/Phoenix",
    "America/Chihuahua",
    "America/Mazatlan",
    "America/Chicago",
    "America/Regina",
    "America/Mexico_City",
    "America/Mexico_City",
    "America/Monterrey",
    "America/Guatemala",
    "America/New_York",
    "America/Indiana/Indianapolis",
    "America/Bogota",
    "America/Lima",
    "America/Lima",
    "America/Halifax",
    "America/Caracas",
    "America/La_Paz",
    "America/Santiago",
    "America/St_Johns",
    "America/Sao_Paulo",
    "America/Argentina/Buenos_Aires",
    "America/Guyana",
    "America/Godthab",
    "Atlantic/South_Georgia",
    "Atlantic/Azores",
    "Atlantic/Cape_Verde",
    "Europe/Dublin",
    "Europe/London",
    "Europe/Lisbon",
    "Europe/London",
    "Africa/Casablanca",
    "Africa/Monrovia",
    "Etc/UTC",
    "Europe/Belgrade",
    "Europe/Bratislava",
    "Europe/Budapest",
    "Europe/Ljubljana",
    "Europe/Prague",
    "Europe/Sarajevo",
    "Europe/Skopje",
    "Europe/Warsaw",
    "Europe/Zagreb",
    "Europe/Brussels",
    "Europe/Copenhagen",
    "Europe/Madrid",
    "Europe/Paris",
    "Europe/Amsterdam",
    "Europe/Berlin",
    "Europe/Berlin",
    "Europe/Rome",
    "Europe/Stockholm",
    "Europe/Vienna",
    "Africa/Algiers",
    "Europe/Bucharest",
    "Africa/Cairo",
    "Europe/Helsinki",
    "Europe/Kiev",
    "Europe/Riga",
    "Europe/Sofia",
    "Europe/Tallinn",
    "Europe/Vilnius",
    "Europe/Athens",
    "Europe/Istanbul",
    "Europe/Minsk",
    "Asia/Jerusalem",
    "Africa/Harare",
    "Africa/Johannesburg",
    "Europe/Moscow",
    "Europe/Moscow",
    "Europe/Moscow",
    "Asia/Kuwait",
    "Asia/Riyadh",
    "Africa/Nairobi",
    "Asia/Baghdad",
    "Asia/Tehran",
    "Asia/Muscat",
    "Asia/Muscat",
    "Asia/Baku",
    "Asia/Tbilisi",
    "Asia/Yerevan",
    "Asia/Kabul",
    "Asia/Yekaterinburg",
    "Asia/Karachi",
    "Asia/Karachi",
    "Asia/Tashkent",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kolkata",
    "Asia/Kathmandu",
    "Asia/Dhaka",
    "Asia/Dhaka",
    "Asia/Colombo",
    "Asia/Almaty",
    "Asia/Novosibirsk",
    "Asia/Rangoon",
    "Asia/Bangkok",
    "Asia/Bangkok",
    "Asia/Jakarta",
    "Asia/Krasnoyarsk",
    "Asia/Shanghai",
    "Asia/Chongqing",
    "Asia/Hong_Kong",
    "Asia/Urumqi",
    "Asia/Kuala_Lumpur",
    "Asia/Singapore",
    "Asia/Taipei",
    "Australia/Perth",
    "Asia/Irkutsk",
    "Asia/Ulaanbaatar",
    "Asia/Seoul",
    "Asia/Tokyo",
    "Asia/Tokyo",
    "Asia/Tokyo",
    "Asia/Yakutsk",
    "Australia/Darwin",
    "Australia/Adelaide",
    "Australia/Melbourne",
    "Australia/Melbourne",
    "Australia/Sydney",
    "Australia/Brisbane",
    "Australia/Hobart",
    "Asia/Vladivostok",
    "Pacific/Guam",
    "Pacific/Port_Moresby",
    "Asia/Magadan",
    "Asia/Magadan",
    "Pacific/Noumea",
    "Pacific/Fiji",
    "Asia/Kamchatka",
    "Pacific/Majuro",
    "Pacific/Auckland",
    "Pacific/Auckland",
    "Pacific/Tongatapu",
    "Pacific/Fakaofo",
    "Pacific/Apia"
  ];
});

// node_modules/faker/lib/locales/sk/address/city_name.js
var require_city_name10 = __commonJS((exports, module) => {
  module["exports"] = [
    "Bánovce nad Bebravou",
    "Banská Bystrica",
    "Banská Štiavnica",
    "Bardejov",
    "Bratislava I",
    "Bratislava II",
    "Bratislava III",
    "Bratislava IV",
    "Bratislava V",
    "Brezno",
    "Bytča",
    "Čadca",
    "Detva",
    "Dolný Kubín",
    "Dunajská Streda",
    "Galanta",
    "Gelnica",
    "Hlohovec",
    "Humenné",
    "Ilava",
    "Kežmarok",
    "Komárno",
    "Košice I",
    "Košice II",
    "Košice III",
    "Košice IV",
    "Košice-okolie",
    "Krupina",
    "Kysucké Nové Mesto",
    "Levice",
    "Levoča",
    "Liptovský Mikuláš",
    "Lučenec",
    "Malacky",
    "Martin",
    "Medzilaborce",
    "Michalovce",
    "Myjava",
    "Námestovo",
    "Nitra",
    "Nové Mesto n.Váhom",
    "Nové Zámky",
    "Partizánske",
    "Pezinok",
    "Piešťany",
    "Poltár",
    "Poprad",
    "Považská Bystrica",
    "Prešov",
    "Prievidza",
    "Púchov",
    "Revúca",
    "Rimavská Sobota",
    "Rožňava",
    "Ružomberok",
    "Sabinov",
    "Šaľa",
    "Senec",
    "Senica",
    "Skalica",
    "Snina",
    "Sobrance",
    "Spišská Nová Ves",
    "Stará Ľubovňa",
    "Stropkov",
    "Svidník",
    "Topoľčany",
    "Trebišov",
    "Trenčín",
    "Trnava",
    "Turčianske Teplice",
    "Tvrdošín",
    "Veľký Krtíš",
    "Vranov nad Topľou",
    "Žarnovica",
    "Žiar nad Hronom",
    "Žilina",
    "Zlaté Moravce",
    "Zvolen"
  ];
});

// node_modules/faker/lib/locales/sk/address/city.js
var require_city20 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{city_name}"
  ];
});

// node_modules/faker/lib/locales/sk/address/street.js
var require_street3 = __commonJS((exports, module) => {
  module["exports"] = [
    "Adámiho",
    "Ahoj",
    "Albína Brunovského",
    "Albrechtova",
    "Alejová",
    "Alešova",
    "Alibernetová",
    "Alžbetínska",
    "Alžbety Gwerkovej",
    "Ambroseho",
    "Ambrušova",
    "Americká",
    "Americké námestie",
    "Americké námestie",
    "Andreja Mráza",
    "Andreja Plávku",
    "Andrusovova",
    "Anenská",
    "Anenská",
    "Antolská",
    "Astronomická",
    "Astrová",
    "Azalková",
    "Azovská",
    "Babuškova",
    "Bachova",
    "Bajkalská",
    "Bajkalská",
    "Bajkalská",
    "Bajkalská",
    "Bajkalská",
    "Bajkalská",
    "Bajzova",
    "Bancíkovej",
    "Banícka",
    "Baníkova",
    "Banskobystrická",
    "Banšelova",
    "Bardejovská",
    "Bartókova",
    "Bartoňova",
    "Bartoškova",
    "Baštová",
    "Bazová",
    "Bažantia",
    "Beblavého",
    "Beckovská",
    "Bedľová",
    "Belániková",
    "Belehradská",
    "Belinského",
    "Belopotockého",
    "Beňadická",
    "Bencúrova",
    "Benediktiho",
    "Beniakova",
    "Bernolákova",
    "Beskydská",
    "Betliarska",
    "Bezručova",
    "Biela",
    "Bielkova",
    "Björnsonova",
    "Blagoevova",
    "Blatnická",
    "Blumentálska",
    "Blyskáčová",
    "Bočná",
    "Bohrova",
    "Bohúňova",
    "Bojnická",
    "Borodáčova",
    "Borská",
    "Bosákova",
    "Botanická",
    "Bottova",
    "Boženy Němcovej",
    "Bôrik",
    "Bradáčova",
    "Bradlianska",
    "Brančská",
    "Bratská",
    "Brestová",
    "Brezovská",
    "Briežky",
    "Brnianska",
    "Brodná",
    "Brodská",
    "Broskyňová",
    "Břeclavská",
    "Budatínska",
    "Budatínska",
    "Budatínska",
    "Búdkova  cesta",
    "Budovateľská",
    "Budyšínska",
    "Budyšínska",
    "Buková",
    "Bukureštská",
    "Bulharská",
    "Bulíkova",
    "Bystrého",
    "Bzovícka",
    "Cablkova",
    "Cesta na Červený most",
    "Cesta na Červený most",
    "Cesta na Senec",
    "Cikkerova",
    "Cintorínska",
    "Cintulova",
    "Cukrová",
    "Cyrilova",
    "Čajakova",
    "Čajkovského",
    "Čaklovská",
    "Čalovská",
    "Čapajevova",
    "Čapkova",
    "Čárskeho",
    "Čavojského",
    "Čečinová",
    "Čelakovského",
    "Čerešňová",
    "Černyševského",
    "Červeňova",
    "Česká",
    "Československých par",
    "Čipkárska",
    "Čmelíkova",
    "Čmeľovec",
    "Čulenova",
    "Daliborovo námestie",
    "Dankovského",
    "Dargovská",
    "Ďatelinová",
    "Daxnerovo námestie",
    "Devínska cesta",
    "Dlhé diely I.",
    "Dlhé diely II.",
    "Dlhé diely III.",
    "Dobrovičova",
    "Dobrovičova",
    "Dobrovského",
    "Dobšinského",
    "Dohnalova",
    "Dohnányho",
    "Doležalova",
    "Dolná",
    "Dolnozemská cesta",
    "Domkárska",
    "Domové role",
    "Donnerova",
    "Donovalova",
    "Dostojevského rad",
    "Dr. Vladimíra Clemen",
    "Drevená",
    "Drieňová",
    "Drieňová",
    "Drieňová",
    "Drotárska cesta",
    "Drotárska cesta",
    "Drotárska cesta",
    "Družicová",
    "Družstevná",
    "Dubnická",
    "Dubová",
    "Dúbravská cesta",
    "Dudova",
    "Dulovo námestie",
    "Dulovo námestie",
    "Dunajská",
    "Dvořákovo nábrežie",
    "Edisonova",
    "Einsteinova",
    "Elektrárenská",
    "Exnárova",
    "F. Kostku",
    "Fadruszova",
    "Fajnorovo nábrežie",
    "Fándlyho",
    "Farebná",
    "Farská",
    "Farského",
    "Fazuľová",
    "Fedinova",
    "Ferienčíkova",
    "Fialkové údolie",
    "Fibichova",
    "Filiálne nádražie",
    "Flöglova",
    "Floriánske námestie",
    "Fraňa Kráľa",
    "Francisciho",
    "Francúzskych partizá",
    "Františkánska",
    "Františkánske námest",
    "Furdekova",
    "Furdekova",
    "Gabčíkova",
    "Gagarinova",
    "Gagarinova",
    "Gagarinova",
    "Gajova",
    "Galaktická",
    "Galandova",
    "Gallova",
    "Galvaniho",
    "Gašparíkova",
    "Gaštanová",
    "Gavlovičova",
    "Gemerská",
    "Gercenova",
    "Gessayova",
    "Gettingová",
    "Godrova",
    "Gogoľova",
    "Goláňova",
    "Gondova",
    "Goralská",
    "Gorazdova",
    "Gorkého",
    "Gregorovej",
    "Grösslingova",
    "Gruzínska",
    "Gunduličova",
    "Gusevova",
    "Haanova",
    "Haburská",
    "Halašova",
    "Hálkova",
    "Hálova",
    "Hamuliakova",
    "Hanácka",
    "Handlovská",
    "Hany Meličkovej",
    "Harmanecká",
    "Hasičská",
    "Hattalova",
    "Havlíčkova",
    "Havrania",
    "Haydnova",
    "Herlianska",
    "Herlianska",
    "Heydukova",
    "Hlaváčikova",
    "Hlavatého",
    "Hlavné námestie",
    "Hlboká cesta",
    "Hlboká cesta",
    "Hlivová",
    "Hlučínska",
    "Hodálova",
    "Hodžovo námestie",
    "Holekova",
    "Holíčska",
    "Hollého",
    "Holubyho",
    "Hontianska",
    "Horárska",
    "Horné Židiny",
    "Horská",
    "Horská",
    "Hrad",
    "Hradné údolie",
    "Hrachová",
    "Hraničná",
    "Hrebendova",
    "Hríbová",
    "Hriňovská",
    "Hrobákova",
    "Hrobárska",
    "Hroboňova",
    "Hudecova",
    "Humenské námestie",
    "Hummelova",
    "Hurbanovo námestie",
    "Hurbanovo námestie",
    "Hviezdoslavovo námes",
    "Hýrošova",
    "Chalupkova",
    "Chemická",
    "Chlumeckého",
    "Chorvátska",
    "Chorvátska",
    "Iľjušinova",
    "Ilkovičova",
    "Inovecká",
    "Inovecká",
    "Iskerníková",
    "Ivana Horvátha",
    "Ivánska cesta",
    "J.C.Hronského",
    "Jabloňová",
    "Jadrová",
    "Jakabova",
    "Jakubovo námestie",
    "Jamnického",
    "Jána Stanislava",
    "Janáčkova",
    "Jančova",
    "Janíkove role",
    "Jankolova",
    "Jánošíkova",
    "Jánoškova",
    "Janotova",
    "Jánska",
    "Jantárová cesta",
    "Jarabinková",
    "Jarná",
    "Jaroslavova",
    "Jarošova",
    "Jaseňová",
    "Jasná",
    "Jasovská",
    "Jastrabia",
    "Jašíkova",
    "Javorinská",
    "Javorová",
    "Jazdecká",
    "Jedlíkova",
    "Jégého",
    "Jelačičova",
    "Jelenia",
    "Jesenná",
    "Jesenského",
    "Jiráskova",
    "Jiskrova",
    "Jozefská",
    "Junácka",
    "Jungmannova",
    "Jurigovo námestie",
    "Jurovského",
    "Jurská",
    "Justičná",
    "K lomu",
    "K Železnej studienke",
    "Kalinčiakova",
    "Kamenárska",
    "Kamenné námestie",
    "Kapicova",
    "Kapitulská",
    "Kapitulský dvor",
    "Kapucínska",
    "Kapušianska",
    "Karadžičova",
    "Karadžičova",
    "Karadžičova",
    "Karadžičova",
    "Karloveská",
    "Karloveské rameno",
    "Karpatská",
    "Kašmírska",
    "Kaštielska",
    "Kaukazská",
    "Kempelenova",
    "Kežmarské námestie",
    "Kladnianska",
    "Klariská",
    "Kláštorská",
    "Klatovská",
    "Klatovská",
    "Klemensova",
    "Klincová",
    "Klobučnícka",
    "Klokočova",
    "Kľukatá",
    "Kmeťovo námestie",
    "Koceľova",
    "Kočánkova",
    "Kohútova",
    "Kolárska",
    "Kolískova",
    "Kollárovo námestie",
    "Kollárovo námestie",
    "Kolmá",
    "Komárňanská",
    "Komárnická",
    "Komárnická",
    "Komenského námestie",
    "Kominárska",
    "Komonicová",
    "Konopná",
    "Konvalinková",
    "Konventná",
    "Kopanice",
    "Kopčianska",
    "Koperníkova",
    "Korabinského",
    "Koreničova",
    "Kostlivého",
    "Kostolná",
    "Košická",
    "Košická",
    "Košická",
    "Kováčska",
    "Kovorobotnícka",
    "Kozia",
    "Koziarka",
    "Kozmonautická",
    "Krajná",
    "Krakovská",
    "Kráľovské údolie",
    "Krasinského",
    "Kraskova",
    "Krásna",
    "Krásnohorská",
    "Krasovského",
    "Krátka",
    "Krčméryho",
    "Kremnická",
    "Kresánkova",
    "Krivá",
    "Križkova",
    "Krížna",
    "Krížna",
    "Krížna",
    "Krížna",
    "Krmanova",
    "Krompašská",
    "Krupinská",
    "Krupkova",
    "Kubániho",
    "Kubínska",
    "Kuklovská",
    "Kukučínova",
    "Kukuričná",
    "Kulíškova",
    "Kultúrna",
    "Kupeckého",
    "Kúpeľná",
    "Kutlíkova",
    "Kutuzovova",
    "Kuzmányho",
    "Kvačalova",
    "Kvetná",
    "Kýčerského",
    "Kyjevská",
    "Kysucká",
    "Laborecká",
    "Lackova",
    "Ladislava Sáru",
    "Ľadová",
    "Lachova",
    "Ľaliová",
    "Lamačská cesta",
    "Lamačská cesta",
    "Lamanského",
    "Landererova",
    "Langsfeldova",
    "Ľanová",
    "Laskomerského",
    "Laučekova",
    "Laurinská",
    "Lazaretská",
    "Lazaretská",
    "Legerského",
    "Legionárska",
    "Legionárska",
    "Lehockého",
    "Lehockého",
    "Lenardova",
    "Lermontovova",
    "Lesná",
    "Leškova",
    "Letecká",
    "Letisko M.R.Štefánik",
    "Letná",
    "Levárska",
    "Levická",
    "Levočská",
    "Lidická",
    "Lietavská",
    "Lichardova",
    "Lipová",
    "Lipovinová",
    "Liptovská",
    "Listová",
    "Líščie nivy",
    "Líščie údolie",
    "Litovská",
    "Lodná",
    "Lombardiniho",
    "Lomonosovova",
    "Lopenícka",
    "Lovinského",
    "Ľubietovská",
    "Ľubinská",
    "Ľubľanská",
    "Ľubochnianska",
    "Ľubovnianska",
    "Lúčna",
    "Ľudové námestie",
    "Ľudovíta Fullu",
    "Luhačovická",
    "Lužická",
    "Lužná",
    "Lýcejná",
    "Lykovcová",
    "M. Hella",
    "Magnetová",
    "Macharova",
    "Majakovského",
    "Majerníkova",
    "Májkova",
    "Májová",
    "Makovického",
    "Malá",
    "Malé pálenisko",
    "Malinová",
    "Malý Draždiak",
    "Malý trh",
    "Mamateyova",
    "Mamateyova",
    "Mánesovo námestie",
    "Mariánska",
    "Marie Curie-Sklodows",
    "Márie Medveďovej",
    "Markova",
    "Marótyho",
    "Martákovej",
    "Martinčekova",
    "Martinčekova",
    "Martinengova",
    "Martinská",
    "Mateja Bela",
    "Matejkova",
    "Matičná",
    "Matúšova",
    "Medená",
    "Medzierka",
    "Medzilaborecká",
    "Merlotová",
    "Mesačná",
    "Mestská",
    "Meteorová",
    "Metodova",
    "Mickiewiczova",
    "Mierová",
    "Michalská",
    "Mikovíniho",
    "Mikulášska",
    "Miletičova",
    "Miletičova",
    "Mišíkova",
    "Mišíkova",
    "Mišíkova",
    "Mliekárenská",
    "Mlynarovičova",
    "Mlynská dolina",
    "Mlynská dolina",
    "Mlynská dolina",
    "Mlynské luhy",
    "Mlynské nivy",
    "Mlynské nivy",
    "Mlynské nivy",
    "Mlynské nivy",
    "Mlynské nivy",
    "Mlyny",
    "Modranská",
    "Mojmírova",
    "Mokráň záhon",
    "Mokrohájska cesta",
    "Moldavská",
    "Molecova",
    "Moravská",
    "Moskovská",
    "Most SNP",
    "Mostová",
    "Mošovského",
    "Motýlia",
    "Moyzesova",
    "Mozartova",
    "Mraziarenská",
    "Mudroňova",
    "Mudroňova",
    "Mudroňova",
    "Muchovo námestie",
    "Murgašova",
    "Muškátová",
    "Muštová",
    "Múzejná",
    "Myjavská",
    "Mýtna",
    "Mýtna",
    "Na Baránku",
    "Na Brezinách",
    "Na Hrebienku",
    "Na Kalvárii",
    "Na Kampárke",
    "Na kopci",
    "Na križovatkách",
    "Na lánoch",
    "Na paši",
    "Na piesku",
    "Na Riviére",
    "Na Sitine",
    "Na Slavíne",
    "Na stráni",
    "Na Štyridsiatku",
    "Na úvrati",
    "Na vŕšku",
    "Na výslní",
    "Nábělkova",
    "Nábrežie arm. gen. L",
    "Nábrežná",
    "Nad Dunajom",
    "Nad lomom",
    "Nad lúčkami",
    "Nad lúčkami",
    "Nad ostrovom",
    "Nad Sihoťou",
    "Námestie 1. mája",
    "Námestie Alexandra D",
    "Námestie Biely kríž",
    "Námestie Hraničiarov",
    "Námestie Jána Pavla",
    "Námestie Ľudovíta Št",
    "Námestie Martina Ben",
    "Nám. M.R.Štefánika",
    "Námestie slobody",
    "Námestie slobody",
    "Námestie SNP",
    "Námestie SNP",
    "Námestie sv. Františ",
    "Narcisová",
    "Nedbalova",
    "Nekrasovova",
    "Neronetová",
    "Nerudova",
    "Nevädzová",
    "Nezábudková",
    "Niťová",
    "Nitrianska",
    "Nížinná",
    "Nobelova",
    "Nobelovo námestie",
    "Nová",
    "Nová Rožňavská",
    "Novackého",
    "Nové pálenisko",
    "Nové záhrady I",
    "Nové záhrady II",
    "Nové záhrady III",
    "Nové záhrady IV",
    "Nové záhrady V",
    "Nové záhrady VI",
    "Nové záhrady VII",
    "Novinárska",
    "Novobanská",
    "Novohradská",
    "Novosvetská",
    "Novosvetská",
    "Novosvetská",
    "Obežná",
    "Obchodná",
    "Očovská",
    "Odbojárov",
    "Odborárska",
    "Odborárske námestie",
    "Odborárske námestie",
    "Ohnicová",
    "Okánikova",
    "Okružná",
    "Olbrachtova",
    "Olejkárska",
    "Ondavská",
    "Ondrejovova",
    "Oravská",
    "Orechová cesta",
    "Orechový rad",
    "Oriešková",
    "Ormisova",
    "Osadná",
    "Ostravská",
    "Ostredková",
    "Osuského",
    "Osvetová",
    "Otonelská",
    "Ovručská",
    "Ovsištské námestie",
    "Pajštúnska",
    "Palackého",
    "Palárikova",
    "Palárikova",
    "Pálavská",
    "Palisády",
    "Palisády",
    "Palisády",
    "Palkovičova",
    "Panenská",
    "Pankúchova",
    "Panónska cesta",
    "Panská",
    "Papánkovo námestie",
    "Papraďová",
    "Páričkova",
    "Parková",
    "Partizánska",
    "Pasienky",
    "Paulínyho",
    "Pavlovičova",
    "Pavlovova",
    "Pavlovská",
    "Pažického",
    "Pažítková",
    "Pečnianska",
    "Pernecká",
    "Pestovateľská",
    "Peterská",
    "Petzvalova",
    "Pezinská",
    "Piesočná",
    "Piešťanská",
    "Pifflova",
    "Pilárikova",
    "Pionierska",
    "Pivoňková",
    "Planckova",
    "Planét",
    "Plátenícka",
    "Pluhová",
    "Plynárenská",
    "Plzenská",
    "Pobrežná",
    "Pod Bôrikom",
    "Pod Kalváriou",
    "Pod lesom",
    "Pod Rovnicami",
    "Pod vinicami",
    "Podhorského",
    "Podjavorinskej",
    "Podlučinského",
    "Podniková",
    "Podtatranského",
    "Pohronská",
    "Polárna",
    "Poloreckého",
    "Poľná",
    "Poľská",
    "Poludníková",
    "Porubského",
    "Poštová",
    "Považská",
    "Povraznícka",
    "Povraznícka",
    "Pražská",
    "Predstaničné námesti",
    "Prepoštská",
    "Prešernova",
    "Prešovská",
    "Prešovská",
    "Prešovská",
    "Pri Bielom kríži",
    "Pri dvore",
    "Pri Dynamitke",
    "Pri Habánskom mlyne",
    "Pri hradnej studni",
    "Pri seči",
    "Pri Starej Prachárni",
    "Pri Starom háji",
    "Pri Starom Mýte",
    "Pri strelnici",
    "Pri Suchom mlyne",
    "Pri zvonici",
    "Pribinova",
    "Pribinova",
    "Pribinova",
    "Pribišova",
    "Pribylinská",
    "Priečna",
    "Priekopy",
    "Priemyselná",
    "Priemyselná",
    "Prievozská",
    "Prievozská",
    "Prievozská",
    "Príkopova",
    "Primaciálne námestie",
    "Prístav",
    "Prístavná",
    "Prokofievova",
    "Prokopa Veľkého",
    "Prokopova",
    "Prúdová",
    "Prvosienková",
    "Púpavová",
    "Pustá",
    "Puškinova",
    "Račianska",
    "Račianska",
    "Račianske mýto",
    "Radarová",
    "Rádiová",
    "Radlinského",
    "Radničná",
    "Radničné námestie",
    "Radvanská",
    "Rajská",
    "Raketová",
    "Rákosová",
    "Rastislavova",
    "Rázusovo nábrežie",
    "Repná",
    "Rešetkova",
    "Revolučná",
    "Révová",
    "Revúcka",
    "Rezedová",
    "Riazanská",
    "Riazanská",
    "Ribayová",
    "Riečna",
    "Rigeleho",
    "Rízlingová",
    "Riznerova",
    "Robotnícka",
    "Romanova",
    "Röntgenova",
    "Rosná",
    "Rovná",
    "Rovniankova",
    "Rovníková",
    "Rozmarínová",
    "Rožňavská",
    "Rožňavská",
    "Rožňavská",
    "Rubinsteinova",
    "Rudnayovo námestie",
    "Rumančeková",
    "Rusovská cesta",
    "Ružičková",
    "Ružinovská",
    "Ružinovská",
    "Ružinovská",
    "Ružomberská",
    "Ružová dolina",
    "Ružová dolina",
    "Rybárska brána",
    "Rybné námestie",
    "Rýdziková",
    "Sabinovská",
    "Sabinovská",
    "Sad Janka Kráľa",
    "Sadová",
    "Sartorisova",
    "Sasinkova",
    "Seberíniho",
    "Sečovská",
    "Sedlárska",
    "Sedmokrásková",
    "Segnerova",
    "Sekulská",
    "Semianova",
    "Senická",
    "Senná",
    "Schillerova",
    "Schody pri starej vo",
    "Sibírska",
    "Sienkiewiczova",
    "Silvánska",
    "Sinokvetná",
    "Skalická cesta",
    "Skalná",
    "Sklenárova",
    "Sklenárska",
    "Sládkovičova",
    "Sladová",
    "Slávičie údolie",
    "Slavín",
    "Slepá",
    "Sliačska",
    "Sliezska",
    "Slivková",
    "Slnečná",
    "Slovanská",
    "Slovinská",
    "Slovnaftská",
    "Slowackého",
    "Smetanova",
    "Smikova",
    "Smolenická",
    "Smolnícka",
    "Smrečianska",
    "Soferove schody",
    "Socháňova",
    "Sokolská",
    "Solivarská",
    "Sološnická",
    "Somolického",
    "Somolického",
    "Sosnová",
    "Spišská",
    "Spojná",
    "Spoločenská",
    "Sputniková",
    "Sreznevského",
    "Srnčia",
    "Stachanovská",
    "Stálicová",
    "Staničná",
    "Stará Černicová",
    "Stará Ivánska cesta",
    "Stará Prievozská",
    "Stará Vajnorská",
    "Stará vinárska",
    "Staré Grunty",
    "Staré ihrisko",
    "Staré záhrady",
    "Starhradská",
    "Starohájska",
    "Staromestská",
    "Staroturský chodník",
    "Staviteľská",
    "Stodolova",
    "Stoklasová",
    "Strakova",
    "Strážnická",
    "Strážny dom",
    "Strečnianska",
    "Stredná",
    "Strelecká",
    "Strmá cesta",
    "Strojnícka",
    "Stropkovská",
    "Struková",
    "Studená",
    "Stuhová",
    "Súbežná",
    "Súhvezdná",
    "Suché mýto",
    "Suchohradská",
    "Súkennícka",
    "Súľovská",
    "Sumbalova",
    "Súmračná",
    "Súťažná",
    "Svätého Vincenta",
    "Svätoplukova",
    "Svätoplukova",
    "Svätovojtešská",
    "Svetlá",
    "Svíbová",
    "Svidnícka",
    "Svoradova",
    "Svrčia",
    "Syslia",
    "Šafárikovo námestie",
    "Šafárikovo námestie",
    "Šafránová",
    "Šagátova",
    "Šalviová",
    "Šancová",
    "Šancová",
    "Šancová",
    "Šancová",
    "Šándorova",
    "Šarišská",
    "Šášovská",
    "Šaštínska",
    "Ševčenkova",
    "Šintavská",
    "Šípková",
    "Škarniclova",
    "Školská",
    "Škovránčia",
    "Škultétyho",
    "Šoltésovej",
    "Špieszova",
    "Špitálska",
    "Športová",
    "Šrobárovo námestie",
    "Šťastná",
    "Štedrá",
    "Štefánikova",
    "Štefánikova",
    "Štefánikova",
    "Štefanovičova",
    "Štefunkova",
    "Štetinova",
    "Štiavnická",
    "Štúrova",
    "Štyndlova",
    "Šulekova",
    "Šulekova",
    "Šulekova",
    "Šumavská",
    "Šuňavcova",
    "Šustekova",
    "Švabinského",
    "Tabaková",
    "Tablicova",
    "Táborská",
    "Tajovského",
    "Tallerova",
    "Tehelná",
    "Technická",
    "Tekovská",
    "Telocvičná",
    "Tematínska",
    "Teplická",
    "Terchovská",
    "Teslova",
    "Tetmayerova",
    "Thurzova",
    "Tichá",
    "Tilgnerova",
    "Timravina",
    "Tobrucká",
    "Tokajícka",
    "Tolstého",
    "Tománkova",
    "Tomášikova",
    "Tomášikova",
    "Tomášikova",
    "Tomášikova",
    "Tomášikova",
    "Topoľčianska",
    "Topoľová",
    "Továrenská",
    "Trebišovská",
    "Trebišovská",
    "Trebišovská",
    "Trenčianska",
    "Treskoňova",
    "Trnavská cesta",
    "Trnavská cesta",
    "Trnavská cesta",
    "Trnavská cesta",
    "Trnavská cesta",
    "Trnavské mýto",
    "Tŕňová",
    "Trojdomy",
    "Tučkova",
    "Tupolevova",
    "Turbínova",
    "Turčianska",
    "Turnianska",
    "Tvarožkova",
    "Tylova",
    "Tyršovo nábrežie",
    "Údernícka",
    "Údolná",
    "Uhorková",
    "Ukrajinská",
    "Ulica 29. augusta",
    "Ulica 29. augusta",
    "Ulica 29. augusta",
    "Ulica 29. augusta",
    "Ulica Imricha Karvaš",
    "Ulica Jozefa Krónera",
    "Ulica Viktora Tegelh",
    "Úprkova",
    "Úradnícka",
    "Uránová",
    "Urbánkova",
    "Ursínyho",
    "Uršulínska",
    "Úzka",
    "V záhradách",
    "Vajanského nábrežie",
    "Vajnorská",
    "Vajnorská",
    "Vajnorská",
    "Vajnorská",
    "Vajnorská",
    "Vajnorská",
    "Vajnorská",
    "Vajnorská",
    "Vajnorská",
    "Valašská",
    "Valchárska",
    "Vansovej",
    "Vápenná",
    "Varínska",
    "Varšavská",
    "Varšavská",
    "Vavilovova",
    "Vavrínova",
    "Vazovova",
    "Včelárska",
    "Velehradská",
    "Veltlínska",
    "Ventúrska",
    "Veterná",
    "Veternicová",
    "Vetvová",
    "Viedenská cesta",
    "Viedenská cesta",
    "Vietnamská",
    "Vígľašská",
    "Vihorlatská",
    "Viktorínova",
    "Vilová",
    "Vincenta Hložníka",
    "Vínna",
    "Vlastenecké námestie",
    "Vlčkova",
    "Vlčkova",
    "Vlčkova",
    "Vodný vrch",
    "Votrubova",
    "Vrábeľská",
    "Vrakunská cesta",
    "Vranovská",
    "Vretenová",
    "Vrchná",
    "Vrútocká",
    "Vyhliadka",
    "Vyhnianska cesta",
    "Vysoká",
    "Vyšehradská",
    "Vyšná",
    "Wattova",
    "Wilsonova",
    "Wolkrova",
    "Za Kasárňou",
    "Za sokolovňou",
    "Za Stanicou",
    "Za tehelňou",
    "Záborského",
    "Zadunajská cesta",
    "Záhorácka",
    "Záhradnícka",
    "Záhradnícka",
    "Záhradnícka",
    "Záhradnícka",
    "Záhrebská",
    "Záhrebská",
    "Zálužická",
    "Zámocká",
    "Zámocké schody",
    "Zámočnícka",
    "Západná",
    "Západný rad",
    "Záporožská",
    "Zátišie",
    "Závodníkova",
    "Zelená",
    "Zelinárska",
    "Zimná",
    "Zlaté piesky",
    "Zlaté schody",
    "Znievska",
    "Zohorská",
    "Zochova",
    "Zrinského",
    "Zvolenská",
    "Žabí majer",
    "Žabotova",
    "Žehrianska",
    "Železná",
    "Železničiarska",
    "Žellova",
    "Žiarska",
    "Židovská",
    "Žilinská",
    "Žilinská",
    "Živnostenská",
    "Žižkova",
    "Župné námestie"
  ];
});

// node_modules/faker/lib/locales/sk/address/street_name.js
var require_street_name19 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street}"
  ];
});

// node_modules/faker/lib/locales/sk/address/street_address.js
var require_street_address16 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_name} #{building_number}"
  ];
});

// node_modules/faker/lib/locales/sk/address/default_country.js
var require_default_country27 = __commonJS((exports, module) => {
  module["exports"] = [
    "Slovensko"
  ];
});

// node_modules/faker/lib/locales/sk/address/index.js
var require_address30 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.city_prefix = require_city_prefix11();
  address.city_suffix = require_city_suffix11();
  address.country = require_country14();
  address.building_number = require_building_number19();
  address.secondary_address = require_secondary_address16();
  address.postcode = require_postcode27();
  address.state = require_state24();
  address.state_abbr = require_state_abbr17();
  address.time_zone = require_time_zone5();
  address.city_name = require_city_name10();
  address.city = require_city20();
  address.street = require_street3();
  address.street_name = require_street_name19();
  address.street_address = require_street_address16();
  address.default_country = require_default_country27();
});

// node_modules/faker/lib/locales/sk/company/suffix.js
var require_suffix34 = __commonJS((exports, module) => {
  module["exports"] = [
    "s.r.o.",
    "a.s.",
    "v.o.s."
  ];
});

// node_modules/faker/lib/locales/sk/company/adjective.js
var require_adjective8 = __commonJS((exports, module) => {
  module["exports"] = [
    "Adaptive",
    "Advanced",
    "Ameliorated",
    "Assimilated",
    "Automated",
    "Balanced",
    "Business-focused",
    "Centralized",
    "Cloned",
    "Compatible",
    "Configurable",
    "Cross-group",
    "Cross-platform",
    "Customer-focused",
    "Customizable",
    "Decentralized",
    "De-engineered",
    "Devolved",
    "Digitized",
    "Distributed",
    "Diverse",
    "Down-sized",
    "Enhanced",
    "Enterprise-wide",
    "Ergonomic",
    "Exclusive",
    "Expanded",
    "Extended",
    "Face to face",
    "Focused",
    "Front-line",
    "Fully-configurable",
    "Function-based",
    "Fundamental",
    "Future-proofed",
    "Grass-roots",
    "Horizontal",
    "Implemented",
    "Innovative",
    "Integrated",
    "Intuitive",
    "Inverse",
    "Managed",
    "Mandatory",
    "Monitored",
    "Multi-channelled",
    "Multi-lateral",
    "Multi-layered",
    "Multi-tiered",
    "Networked",
    "Object-based",
    "Open-architected",
    "Open-source",
    "Operative",
    "Optimized",
    "Optional",
    "Organic",
    "Organized",
    "Persevering",
    "Persistent",
    "Phased",
    "Polarised",
    "Pre-emptive",
    "Proactive",
    "Profit-focused",
    "Profound",
    "Programmable",
    "Progressive",
    "Public-key",
    "Quality-focused",
    "Reactive",
    "Realigned",
    "Re-contextualized",
    "Re-engineered",
    "Reduced",
    "Reverse-engineered",
    "Right-sized",
    "Robust",
    "Seamless",
    "Secured",
    "Self-enabling",
    "Sharable",
    "Stand-alone",
    "Streamlined",
    "Switchable",
    "Synchronised",
    "Synergistic",
    "Synergized",
    "Team-oriented",
    "Total",
    "Triple-buffered",
    "Universal",
    "Up-sized",
    "Upgradable",
    "User-centric",
    "User-friendly",
    "Versatile",
    "Virtual",
    "Visionary",
    "Vision-oriented"
  ];
});

// node_modules/faker/lib/locales/sk/company/descriptor.js
var require_descriptor8 = __commonJS((exports, module) => {
  module["exports"] = [
    "24 hour",
    "24/7",
    "3rd generation",
    "4th generation",
    "5th generation",
    "6th generation",
    "actuating",
    "analyzing",
    "asymmetric",
    "asynchronous",
    "attitude-oriented",
    "background",
    "bandwidth-monitored",
    "bi-directional",
    "bifurcated",
    "bottom-line",
    "clear-thinking",
    "client-driven",
    "client-server",
    "coherent",
    "cohesive",
    "composite",
    "context-sensitive",
    "contextually-based",
    "content-based",
    "dedicated",
    "demand-driven",
    "didactic",
    "directional",
    "discrete",
    "disintermediate",
    "dynamic",
    "eco-centric",
    "empowering",
    "encompassing",
    "even-keeled",
    "executive",
    "explicit",
    "exuding",
    "fault-tolerant",
    "foreground",
    "fresh-thinking",
    "full-range",
    "global",
    "grid-enabled",
    "heuristic",
    "high-level",
    "holistic",
    "homogeneous",
    "human-resource",
    "hybrid",
    "impactful",
    "incremental",
    "intangible",
    "interactive",
    "intermediate",
    "leading edge",
    "local",
    "logistical",
    "maximized",
    "methodical",
    "mission-critical",
    "mobile",
    "modular",
    "motivating",
    "multimedia",
    "multi-state",
    "multi-tasking",
    "national",
    "needs-based",
    "neutral",
    "next generation",
    "non-volatile",
    "object-oriented",
    "optimal",
    "optimizing",
    "radical",
    "real-time",
    "reciprocal",
    "regional",
    "responsive",
    "scalable",
    "secondary",
    "solution-oriented",
    "stable",
    "static",
    "systematic",
    "systemic",
    "system-worthy",
    "tangible",
    "tertiary",
    "transitional",
    "uniform",
    "upward-trending",
    "user-facing",
    "value-added",
    "web-enabled",
    "well-modulated",
    "zero administration",
    "zero defect",
    "zero tolerance"
  ];
});

// node_modules/faker/lib/locales/sk/company/noun.js
var require_noun9 = __commonJS((exports, module) => {
  module["exports"] = [
    "ability",
    "access",
    "adapter",
    "algorithm",
    "alliance",
    "analyzer",
    "application",
    "approach",
    "architecture",
    "archive",
    "artificial intelligence",
    "array",
    "attitude",
    "benchmark",
    "budgetary management",
    "capability",
    "capacity",
    "challenge",
    "circuit",
    "collaboration",
    "complexity",
    "concept",
    "conglomeration",
    "contingency",
    "core",
    "customer loyalty",
    "database",
    "data-warehouse",
    "definition",
    "emulation",
    "encoding",
    "encryption",
    "extranet",
    "firmware",
    "flexibility",
    "focus group",
    "forecast",
    "frame",
    "framework",
    "function",
    "functionalities",
    "Graphic Interface",
    "groupware",
    "Graphical User Interface",
    "hardware",
    "help-desk",
    "hierarchy",
    "hub",
    "implementation",
    "info-mediaries",
    "infrastructure",
    "initiative",
    "installation",
    "instruction set",
    "interface",
    "internet solution",
    "intranet",
    "knowledge user",
    "knowledge base",
    "local area network",
    "leverage",
    "matrices",
    "matrix",
    "methodology",
    "middleware",
    "migration",
    "model",
    "moderator",
    "monitoring",
    "moratorium",
    "neural-net",
    "open architecture",
    "open system",
    "orchestration",
    "paradigm",
    "parallelism",
    "policy",
    "portal",
    "pricing structure",
    "process improvement",
    "product",
    "productivity",
    "project",
    "projection",
    "protocol",
    "secured line",
    "service-desk",
    "software",
    "solution",
    "standardization",
    "strategy",
    "structure",
    "success",
    "superstructure",
    "support",
    "synergy",
    "system engine",
    "task-force",
    "throughput",
    "time-frame",
    "toolset",
    "utilisation",
    "website",
    "workforce"
  ];
});

// node_modules/faker/lib/locales/sk/company/bs_verb.js
var require_bs_verb7 = __commonJS((exports, module) => {
  module["exports"] = [
    "implement",
    "utilize",
    "integrate",
    "streamline",
    "optimize",
    "evolve",
    "transform",
    "embrace",
    "enable",
    "orchestrate",
    "leverage",
    "reinvent",
    "aggregate",
    "architect",
    "enhance",
    "incentivize",
    "morph",
    "empower",
    "envisioneer",
    "monetize",
    "harness",
    "facilitate",
    "seize",
    "disintermediate",
    "synergize",
    "strategize",
    "deploy",
    "brand",
    "grow",
    "target",
    "syndicate",
    "synthesize",
    "deliver",
    "mesh",
    "incubate",
    "engage",
    "maximize",
    "benchmark",
    "expedite",
    "reintermediate",
    "whiteboard",
    "visualize",
    "repurpose",
    "innovate",
    "scale",
    "unleash",
    "drive",
    "extend",
    "engineer",
    "revolutionize",
    "generate",
    "exploit",
    "transition",
    "e-enable",
    "iterate",
    "cultivate",
    "matrix",
    "productize",
    "redefine",
    "recontextualize"
  ];
});

// node_modules/faker/lib/locales/sk/company/bs_noun.js
var require_bs_noun7 = __commonJS((exports, module) => {
  module["exports"] = [
    "clicks-and-mortar",
    "value-added",
    "vertical",
    "proactive",
    "robust",
    "revolutionary",
    "scalable",
    "leading-edge",
    "innovative",
    "intuitive",
    "strategic",
    "e-business",
    "mission-critical",
    "sticky",
    "one-to-one",
    "24/7",
    "end-to-end",
    "global",
    "B2B",
    "B2C",
    "granular",
    "frictionless",
    "virtual",
    "viral",
    "dynamic",
    "24/365",
    "best-of-breed",
    "killer",
    "magnetic",
    "bleeding-edge",
    "web-enabled",
    "interactive",
    "dot-com",
    "sexy",
    "back-end",
    "real-time",
    "efficient",
    "front-end",
    "distributed",
    "seamless",
    "extensible",
    "turn-key",
    "world-class",
    "open-source",
    "cross-platform",
    "cross-media",
    "synergistic",
    "bricks-and-clicks",
    "out-of-the-box",
    "enterprise",
    "integrated",
    "impactful",
    "wireless",
    "transparent",
    "next-generation",
    "cutting-edge",
    "user-centric",
    "visionary",
    "customized",
    "ubiquitous",
    "plug-and-play",
    "collaborative",
    "compelling",
    "holistic",
    "rich",
    "synergies",
    "web-readiness",
    "paradigms",
    "markets",
    "partnerships",
    "infrastructures",
    "platforms",
    "initiatives",
    "channels",
    "eyeballs",
    "communities",
    "ROI",
    "solutions",
    "e-tailers",
    "e-services",
    "action-items",
    "portals",
    "niches",
    "technologies",
    "content",
    "vortals",
    "supply-chains",
    "convergence",
    "relationships",
    "architectures",
    "interfaces",
    "e-markets",
    "e-commerce",
    "systems",
    "bandwidth",
    "infomediaries",
    "models",
    "mindshare",
    "deliverables",
    "users",
    "schemas",
    "networks",
    "applications",
    "metrics",
    "e-business",
    "functionalities",
    "experiences",
    "web services",
    "methodologies"
  ];
});

// node_modules/faker/lib/locales/sk/company/name.js
var require_name63 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name} #{suffix}",
    "#{Name.man_last_name} a #{Name.man_last_name} #{suffix}"
  ];
});

// node_modules/faker/lib/locales/sk/company/index.js
var require_company24 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.suffix = require_suffix34();
  company.adjective = require_adjective8();
  company.descriptor = require_descriptor8();
  company.noun = require_noun9();
  company.bs_verb = require_bs_verb7();
  company.bs_noun = require_bs_noun7();
  company.name = require_name63();
});

// node_modules/faker/lib/locales/sk/internet/free_email.js
var require_free_email21 = __commonJS((exports, module) => {
  module["exports"] = [
    "gmail.com",
    "zoznam.sk",
    "azet.sk"
  ];
});

// node_modules/faker/lib/locales/sk/internet/domain_suffix.js
var require_domain_suffix28 = __commonJS((exports, module) => {
  module["exports"] = [
    "sk",
    "com",
    "net",
    "eu",
    "org"
  ];
});

// node_modules/faker/lib/locales/sk/internet/index.js
var require_internet29 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.free_email = require_free_email21();
  internet.domain_suffix = require_domain_suffix28();
});

// node_modules/faker/lib/locales/sk/lorem/words.js
var require_words11 = __commonJS((exports, module) => {
  module["exports"] = [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ];
});

// node_modules/faker/lib/locales/sk/lorem/supplemental.js
var require_supplemental7 = __commonJS((exports, module) => {
  module["exports"] = [
    "abbas",
    "abduco",
    "abeo",
    "abscido",
    "absconditus",
    "absens",
    "absorbeo",
    "absque",
    "abstergo",
    "absum",
    "abundans",
    "abutor",
    "accedo",
    "accendo",
    "acceptus",
    "accipio",
    "accommodo",
    "accusator",
    "acer",
    "acerbitas",
    "acervus",
    "acidus",
    "acies",
    "acquiro",
    "acsi",
    "adamo",
    "adaugeo",
    "addo",
    "adduco",
    "ademptio",
    "adeo",
    "adeptio",
    "adfectus",
    "adfero",
    "adficio",
    "adflicto",
    "adhaero",
    "adhuc",
    "adicio",
    "adimpleo",
    "adinventitias",
    "adipiscor",
    "adiuvo",
    "administratio",
    "admiratio",
    "admitto",
    "admoneo",
    "admoveo",
    "adnuo",
    "adopto",
    "adsidue",
    "adstringo",
    "adsuesco",
    "adsum",
    "adulatio",
    "adulescens",
    "adultus",
    "aduro",
    "advenio",
    "adversus",
    "advoco",
    "aedificium",
    "aeger",
    "aegre",
    "aegrotatio",
    "aegrus",
    "aeneus",
    "aequitas",
    "aequus",
    "aer",
    "aestas",
    "aestivus",
    "aestus",
    "aetas",
    "aeternus",
    "ager",
    "aggero",
    "aggredior",
    "agnitio",
    "agnosco",
    "ago",
    "ait",
    "aiunt",
    "alienus",
    "alii",
    "alioqui",
    "aliqua",
    "alius",
    "allatus",
    "alo",
    "alter",
    "altus",
    "alveus",
    "amaritudo",
    "ambitus",
    "ambulo",
    "amicitia",
    "amiculum",
    "amissio",
    "amita",
    "amitto",
    "amo",
    "amor",
    "amoveo",
    "amplexus",
    "amplitudo",
    "amplus",
    "ancilla",
    "angelus",
    "angulus",
    "angustus",
    "animadverto",
    "animi",
    "animus",
    "annus",
    "anser",
    "ante",
    "antea",
    "antepono",
    "antiquus",
    "aperio",
    "aperte",
    "apostolus",
    "apparatus",
    "appello",
    "appono",
    "appositus",
    "approbo",
    "apto",
    "aptus",
    "apud",
    "aqua",
    "ara",
    "aranea",
    "arbitro",
    "arbor",
    "arbustum",
    "arca",
    "arceo",
    "arcesso",
    "arcus",
    "argentum",
    "argumentum",
    "arguo",
    "arma",
    "armarium",
    "armo",
    "aro",
    "ars",
    "articulus",
    "artificiose",
    "arto",
    "arx",
    "ascisco",
    "ascit",
    "asper",
    "aspicio",
    "asporto",
    "assentator",
    "astrum",
    "atavus",
    "ater",
    "atqui",
    "atrocitas",
    "atrox",
    "attero",
    "attollo",
    "attonbitus",
    "auctor",
    "auctus",
    "audacia",
    "audax",
    "audentia",
    "audeo",
    "audio",
    "auditor",
    "aufero",
    "aureus",
    "auris",
    "aurum",
    "aut",
    "autem",
    "autus",
    "auxilium",
    "avaritia",
    "avarus",
    "aveho",
    "averto",
    "avoco",
    "baiulus",
    "balbus",
    "barba",
    "bardus",
    "basium",
    "beatus",
    "bellicus",
    "bellum",
    "bene",
    "beneficium",
    "benevolentia",
    "benigne",
    "bestia",
    "bibo",
    "bis",
    "blandior",
    "bonus",
    "bos",
    "brevis",
    "cado",
    "caecus",
    "caelestis",
    "caelum",
    "calamitas",
    "calcar",
    "calco",
    "calculus",
    "callide",
    "campana",
    "candidus",
    "canis",
    "canonicus",
    "canto",
    "capillus",
    "capio",
    "capitulus",
    "capto",
    "caput",
    "carbo",
    "carcer",
    "careo",
    "caries",
    "cariosus",
    "caritas",
    "carmen",
    "carpo",
    "carus",
    "casso",
    "caste",
    "casus",
    "catena",
    "caterva",
    "cattus",
    "cauda",
    "causa",
    "caute",
    "caveo",
    "cavus",
    "cedo",
    "celebrer",
    "celer",
    "celo",
    "cena",
    "cenaculum",
    "ceno",
    "censura",
    "centum",
    "cerno",
    "cernuus",
    "certe",
    "certo",
    "certus",
    "cervus",
    "cetera",
    "charisma",
    "chirographum",
    "cibo",
    "cibus",
    "cicuta",
    "cilicium",
    "cimentarius",
    "ciminatio",
    "cinis",
    "circumvenio",
    "cito",
    "civis",
    "civitas",
    "clam",
    "clamo",
    "claro",
    "clarus",
    "claudeo",
    "claustrum",
    "clementia",
    "clibanus",
    "coadunatio",
    "coaegresco",
    "coepi",
    "coerceo",
    "cogito",
    "cognatus",
    "cognomen",
    "cogo",
    "cohaero",
    "cohibeo",
    "cohors",
    "colligo",
    "colloco",
    "collum",
    "colo",
    "color",
    "coma",
    "combibo",
    "comburo",
    "comedo",
    "comes",
    "cometes",
    "comis",
    "comitatus",
    "commemoro",
    "comminor",
    "commodo",
    "communis",
    "comparo",
    "compello",
    "complectus",
    "compono",
    "comprehendo",
    "comptus",
    "conatus",
    "concedo",
    "concido",
    "conculco",
    "condico",
    "conduco",
    "confero",
    "confido",
    "conforto",
    "confugo",
    "congregatio",
    "conicio",
    "coniecto",
    "conitor",
    "coniuratio",
    "conor",
    "conqueror",
    "conscendo",
    "conservo",
    "considero",
    "conspergo",
    "constans",
    "consuasor",
    "contabesco",
    "contego",
    "contigo",
    "contra",
    "conturbo",
    "conventus",
    "convoco",
    "copia",
    "copiose",
    "cornu",
    "corona",
    "corpus",
    "correptius",
    "corrigo",
    "corroboro",
    "corrumpo",
    "coruscus",
    "cotidie",
    "crapula",
    "cras",
    "crastinus",
    "creator",
    "creber",
    "crebro",
    "credo",
    "creo",
    "creptio",
    "crepusculum",
    "cresco",
    "creta",
    "cribro",
    "crinis",
    "cruciamentum",
    "crudelis",
    "cruentus",
    "crur",
    "crustulum",
    "crux",
    "cubicularis",
    "cubitum",
    "cubo",
    "cui",
    "cuius",
    "culpa",
    "culpo",
    "cultellus",
    "cultura",
    "cum",
    "cunabula",
    "cunae",
    "cunctatio",
    "cupiditas",
    "cupio",
    "cuppedia",
    "cupressus",
    "cur",
    "cura",
    "curatio",
    "curia",
    "curiositas",
    "curis",
    "curo",
    "curriculum",
    "currus",
    "cursim",
    "curso",
    "cursus",
    "curto",
    "curtus",
    "curvo",
    "curvus",
    "custodia",
    "damnatio",
    "damno",
    "dapifer",
    "debeo",
    "debilito",
    "decens",
    "decerno",
    "decet",
    "decimus",
    "decipio",
    "decor",
    "decretum",
    "decumbo",
    "dedecor",
    "dedico",
    "deduco",
    "defaeco",
    "defendo",
    "defero",
    "defessus",
    "defetiscor",
    "deficio",
    "defigo",
    "defleo",
    "defluo",
    "defungo",
    "degenero",
    "degero",
    "degusto",
    "deinde",
    "delectatio",
    "delego",
    "deleo",
    "delibero",
    "delicate",
    "delinquo",
    "deludo",
    "demens",
    "demergo",
    "demitto",
    "demo",
    "demonstro",
    "demoror",
    "demulceo",
    "demum",
    "denego",
    "denique",
    "dens",
    "denuncio",
    "denuo",
    "deorsum",
    "depereo",
    "depono",
    "depopulo",
    "deporto",
    "depraedor",
    "deprecator",
    "deprimo",
    "depromo",
    "depulso",
    "deputo",
    "derelinquo",
    "derideo",
    "deripio",
    "desidero",
    "desino",
    "desipio",
    "desolo",
    "desparatus",
    "despecto",
    "despirmatio",
    "infit",
    "inflammatio",
    "paens",
    "patior",
    "patria",
    "patrocinor",
    "patruus",
    "pauci",
    "paulatim",
    "pauper",
    "pax",
    "peccatus",
    "pecco",
    "pecto",
    "pectus",
    "pecunia",
    "pecus",
    "peior",
    "pel",
    "ocer",
    "socius",
    "sodalitas",
    "sol",
    "soleo",
    "solio",
    "solitudo",
    "solium",
    "sollers",
    "sollicito",
    "solum",
    "solus",
    "solutio",
    "solvo",
    "somniculosus",
    "somnus",
    "sonitus",
    "sono",
    "sophismata",
    "sopor",
    "sordeo",
    "sortitus",
    "spargo",
    "speciosus",
    "spectaculum",
    "speculum",
    "sperno",
    "spero",
    "spes",
    "spiculum",
    "spiritus",
    "spoliatio",
    "sponte",
    "stabilis",
    "statim",
    "statua",
    "stella",
    "stillicidium",
    "stipes",
    "stips",
    "sto",
    "strenuus",
    "strues",
    "studio",
    "stultus",
    "suadeo",
    "suasoria",
    "sub",
    "subito",
    "subiungo",
    "sublime",
    "subnecto",
    "subseco",
    "substantia",
    "subvenio",
    "succedo",
    "succurro",
    "sufficio",
    "suffoco",
    "suffragium",
    "suggero",
    "sui",
    "sulum",
    "sum",
    "summa",
    "summisse",
    "summopere",
    "sumo",
    "sumptus",
    "supellex",
    "super",
    "suppellex",
    "supplanto",
    "suppono",
    "supra",
    "surculus",
    "surgo",
    "sursum",
    "suscipio",
    "suspendo",
    "sustineo",
    "suus",
    "synagoga",
    "tabella",
    "tabernus",
    "tabesco",
    "tabgo",
    "tabula",
    "taceo",
    "tactus",
    "taedium",
    "talio",
    "talis",
    "talus",
    "tam",
    "tamdiu",
    "tamen",
    "tametsi",
    "tamisium",
    "tamquam",
    "tandem",
    "tantillus",
    "tantum",
    "tardus",
    "tego",
    "temeritas",
    "temperantia",
    "templum",
    "temptatio",
    "tempus",
    "tenax",
    "tendo",
    "teneo",
    "tener",
    "tenuis",
    "tenus",
    "tepesco",
    "tepidus",
    "ter",
    "terebro",
    "teres",
    "terga",
    "tergeo",
    "tergiversatio",
    "tergo",
    "tergum",
    "termes",
    "terminatio",
    "tero",
    "terra",
    "terreo",
    "territo",
    "terror",
    "tersus",
    "tertius",
    "testimonium",
    "texo",
    "textilis",
    "textor",
    "textus",
    "thalassinus",
    "theatrum",
    "theca",
    "thema",
    "theologus",
    "thermae",
    "thesaurus",
    "thesis",
    "thorax",
    "thymbra",
    "thymum",
    "tibi",
    "timidus",
    "timor",
    "titulus",
    "tolero",
    "tollo",
    "tondeo",
    "tonsor",
    "torqueo",
    "torrens",
    "tot",
    "totidem",
    "toties",
    "totus",
    "tracto",
    "trado",
    "traho",
    "trans",
    "tredecim",
    "tremo",
    "trepide",
    "tres",
    "tribuo",
    "tricesimus",
    "triduana",
    "triginta",
    "tripudio",
    "tristis",
    "triumphus",
    "trucido",
    "truculenter",
    "tubineus",
    "tui",
    "tum",
    "tumultus",
    "tunc",
    "turba",
    "turbo",
    "turpe",
    "turpis",
    "tutamen",
    "tutis",
    "tyrannus",
    "uberrime",
    "ubi",
    "ulciscor",
    "ullus",
    "ulterius",
    "ultio",
    "ultra",
    "umbra",
    "umerus",
    "umquam",
    "una",
    "unde",
    "undique",
    "universe",
    "unus",
    "urbanus",
    "urbs",
    "uredo",
    "usitas",
    "usque",
    "ustilo",
    "ustulo",
    "usus",
    "uter",
    "uterque",
    "utilis",
    "utique",
    "utor",
    "utpote",
    "utrimque",
    "utroque",
    "utrum",
    "uxor",
    "vaco",
    "vacuus",
    "vado",
    "vae",
    "valde",
    "valens",
    "valeo",
    "valetudo",
    "validus",
    "vallum",
    "vapulus",
    "varietas",
    "varius",
    "vehemens",
    "vel",
    "velociter",
    "velum",
    "velut",
    "venia",
    "venio",
    "ventito",
    "ventosus",
    "ventus",
    "venustas",
    "ver",
    "verbera",
    "verbum",
    "vere",
    "verecundia",
    "vereor",
    "vergo",
    "veritas",
    "vero",
    "versus",
    "verto",
    "verumtamen",
    "verus",
    "vesco",
    "vesica",
    "vesper",
    "vespillo",
    "vester",
    "vestigium",
    "vestrum",
    "vetus",
    "via",
    "vicinus",
    "vicissitudo",
    "victoria",
    "victus",
    "videlicet",
    "video",
    "viduata",
    "viduo",
    "vigilo",
    "vigor",
    "vilicus",
    "vilis",
    "vilitas",
    "villa",
    "vinco",
    "vinculum",
    "vindico",
    "vinitor",
    "vinum",
    "vir",
    "virga",
    "virgo",
    "viridis",
    "viriliter",
    "virtus",
    "vis",
    "viscus",
    "vita",
    "vitiosus",
    "vitium",
    "vito",
    "vivo",
    "vix",
    "vobis",
    "vociferor",
    "voco",
    "volaticus",
    "volo",
    "volubilis",
    "voluntarius",
    "volup",
    "volutabrum",
    "volva",
    "vomer",
    "vomica",
    "vomito",
    "vorago",
    "vorax",
    "voro",
    "vos",
    "votum",
    "voveo",
    "vox",
    "vulariter",
    "vulgaris",
    "vulgivagus",
    "vulgo",
    "vulgus",
    "vulnero",
    "vulnus",
    "vulpes",
    "vulticulus",
    "vultuosus",
    "xiphias"
  ];
});

// node_modules/faker/lib/locales/sk/lorem/index.js
var require_lorem11 = __commonJS((exports, module) => {
  var lorem = {};
  module["exports"] = lorem;
  lorem.words = require_words11();
  lorem.supplemental = require_supplemental7();
});

// node_modules/faker/lib/locales/sk/name/male_first_name.js
var require_male_first_name5 = __commonJS((exports, module) => {
  module["exports"] = [
    "Drahoslav",
    "Severín",
    "Alexej",
    "Ernest",
    "Rastislav",
    "Radovan",
    "Dobroslav",
    "Dalibor",
    "Vincent",
    "Miloš",
    "Timotej",
    "Gejza",
    "Bohuš",
    "Alfonz",
    "Gašpar",
    "Emil",
    "Erik",
    "Blažej",
    "Zdenko",
    "Dezider",
    "Arpád",
    "Valentín",
    "Pravoslav",
    "Jaromír",
    "Roman",
    "Matej",
    "Frederik",
    "Viktor",
    "Alexander",
    "Radomír",
    "Albín",
    "Bohumil",
    "Kazimír",
    "Fridrich",
    "Radoslav",
    "Tomáš",
    "Alan",
    "Branislav",
    "Bruno",
    "Gregor",
    "Vlastimil",
    "Boleslav",
    "Eduard",
    "Jozef",
    "Víťazoslav",
    "Blahoslav",
    "Beňadik",
    "Adrián",
    "Gabriel",
    "Marián",
    "Emanuel",
    "Miroslav",
    "Benjamín",
    "Hugo",
    "Richard",
    "Izidor",
    "Zoltán",
    "Albert",
    "Igor",
    "Július",
    "Aleš",
    "Fedor",
    "Rudolf",
    "Valér",
    "Marcel",
    "Ervín",
    "Slavomír",
    "Vojtech",
    "Juraj",
    "Marek",
    "Jaroslav",
    "Žigmund",
    "Florián",
    "Roland",
    "Pankrác",
    "Servác",
    "Bonifác",
    "Svetozár",
    "Bernard",
    "Júlia",
    "Urban",
    "Dušan",
    "Viliam",
    "Ferdinand",
    "Norbert",
    "Róbert",
    "Medard",
    "Zlatko",
    "Anton",
    "Vasil",
    "Vít",
    "Adolf",
    "Vratislav",
    "Alfréd",
    "Alojz",
    "Ján",
    "Tadeáš",
    "Ladislav",
    "Peter",
    "Pavol",
    "Miloslav",
    "Prokop",
    "Cyril",
    "Metod",
    "Patrik",
    "Oliver",
    "Ivan",
    "Kamil",
    "Henrich",
    "Drahomír",
    "Bohuslav",
    "Iľja",
    "Daniel",
    "Vladimír",
    "Jakub",
    "Krištof",
    "Ignác",
    "Gustáv",
    "Jerguš",
    "Dominik",
    "Oskar",
    "Vavrinec",
    "Ľubomír",
    "Mojmír",
    "Leonard",
    "Tichomír",
    "Filip",
    "Bartolomej",
    "Ľudovít",
    "Samuel",
    "Augustín",
    "Belo",
    "Oleg",
    "Bystrík",
    "Ctibor",
    "Ľudomil",
    "Konštantín",
    "Ľuboslav",
    "Matúš",
    "Móric",
    "Ľuboš",
    "Ľubor",
    "Vladislav",
    "Cyprián",
    "Václav",
    "Michal",
    "Jarolím",
    "Arnold",
    "Levoslav",
    "František",
    "Dionýz",
    "Maximilián",
    "Koloman",
    "Boris",
    "Lukáš",
    "Kristián",
    "Vendelín",
    "Sergej",
    "Aurel",
    "Demeter",
    "Denis",
    "Hubert",
    "Karol",
    "Imrich",
    "René",
    "Bohumír",
    "Teodor",
    "Tibor",
    "Maroš",
    "Martin",
    "Svätopluk",
    "Stanislav",
    "Leopold",
    "Eugen",
    "Félix",
    "Klement",
    "Kornel",
    "Milan",
    "Vratko",
    "Ondrej",
    "Andrej",
    "Edmund",
    "Oldrich",
    "Oto",
    "Mikuláš",
    "Ambróz",
    "Radúz",
    "Bohdan",
    "Adam",
    "Štefan",
    "Dávid",
    "Silvester"
  ];
});

// node_modules/faker/lib/locales/sk/name/female_first_name.js
var require_female_first_name5 = __commonJS((exports, module) => {
  module["exports"] = [
    "Alexandra",
    "Karina",
    "Daniela",
    "Andrea",
    "Antónia",
    "Bohuslava",
    "Dáša",
    "Malvína",
    "Kristína",
    "Nataša",
    "Bohdana",
    "Drahomíra",
    "Sára",
    "Zora",
    "Tamara",
    "Ema",
    "Tatiana",
    "Erika",
    "Veronika",
    "Agáta",
    "Dorota",
    "Vanda",
    "Zoja",
    "Gabriela",
    "Perla",
    "Ida",
    "Liana",
    "Miloslava",
    "Vlasta",
    "Lívia",
    "Eleonóra",
    "Etela",
    "Romana",
    "Zlatica",
    "Anežka",
    "Bohumila",
    "Františka",
    "Angela",
    "Matilda",
    "Svetlana",
    "Ľubica",
    "Alena",
    "Soňa",
    "Vieroslava",
    "Zita",
    "Miroslava",
    "Irena",
    "Milena",
    "Estera",
    "Justína",
    "Dana",
    "Danica",
    "Jela",
    "Jaroslava",
    "Jarmila",
    "Lea",
    "Anastázia",
    "Galina",
    "Lesana",
    "Hermína",
    "Monika",
    "Ingrida",
    "Viktória",
    "Blažena",
    "Žofia",
    "Sofia",
    "Gizela",
    "Viola",
    "Gertrúda",
    "Zina",
    "Júlia",
    "Juliana",
    "Želmíra",
    "Ela",
    "Vanesa",
    "Iveta",
    "Vilma",
    "Petronela",
    "Žaneta",
    "Xénia",
    "Karolína",
    "Lenka",
    "Laura",
    "Stanislava",
    "Margaréta",
    "Dobroslava",
    "Blanka",
    "Valéria",
    "Paulína",
    "Sidónia",
    "Adriána",
    "Beáta",
    "Petra",
    "Melánia",
    "Diana",
    "Berta",
    "Patrícia",
    "Lujza",
    "Amália",
    "Milota",
    "Nina",
    "Margita",
    "Kamila",
    "Dušana",
    "Magdaléna",
    "Oľga",
    "Anna",
    "Hana",
    "Božena",
    "Marta",
    "Libuša",
    "Božidara",
    "Dominika",
    "Hortenzia",
    "Jozefína",
    "Štefánia",
    "Ľubomíra",
    "Zuzana",
    "Darina",
    "Marcela",
    "Milica",
    "Elena",
    "Helena",
    "Lýdia",
    "Anabela",
    "Jana",
    "Silvia",
    "Nikola",
    "Ružena",
    "Nora",
    "Drahoslava",
    "Linda",
    "Melinda",
    "Rebeka",
    "Rozália",
    "Regína",
    "Alica",
    "Marianna",
    "Miriama",
    "Martina",
    "Mária",
    "Jolana",
    "Ľudomila",
    "Ľudmila",
    "Olympia",
    "Eugénia",
    "Ľuboslava",
    "Zdenka",
    "Edita",
    "Michaela",
    "Stela",
    "Viera",
    "Natália",
    "Eliška",
    "Brigita",
    "Valentína",
    "Terézia",
    "Vladimíra",
    "Hedviga",
    "Uršuľa",
    "Alojza",
    "Kvetoslava",
    "Sabína",
    "Dobromila",
    "Klára",
    "Simona",
    "Aurélia",
    "Denisa",
    "Renáta",
    "Irma",
    "Agnesa",
    "Klaudia",
    "Alžbeta",
    "Elvíra",
    "Cecília",
    "Emília",
    "Katarína",
    "Henrieta",
    "Bibiána",
    "Barbora",
    "Marína",
    "Izabela",
    "Hilda",
    "Otília",
    "Lucia",
    "Branislava",
    "Bronislava",
    "Ivica",
    "Albína",
    "Kornélia",
    "Sláva",
    "Slávka",
    "Judita",
    "Dagmara",
    "Adela",
    "Nadežda",
    "Eva",
    "Filoména",
    "Ivana",
    "Milada"
  ];
});

// node_modules/faker/lib/locales/sk/name/male_last_name.js
var require_male_last_name5 = __commonJS((exports, module) => {
  module["exports"] = [
    "Antal",
    "Babka",
    "Bahna",
    "Bahno",
    "Baláž",
    "Baran",
    "Baranka",
    "Bartovič",
    "Bartoš",
    "Bača",
    "Bernolák",
    "Beňo",
    "Bicek",
    "Bielik",
    "Blaho",
    "Bondra",
    "Bosák",
    "Boška",
    "Brezina",
    "Bukovský",
    "Chalupka",
    "Chudík",
    "Cibula",
    "Cibulka",
    "Cibuľa",
    "Cyprich",
    "Cíger",
    "Danko",
    "Daňko",
    "Daňo",
    "Debnár",
    "Dej",
    "Dekýš",
    "Doležal",
    "Dočolomanský",
    "Droppa",
    "Dubovský",
    "Dudek",
    "Dula",
    "Dulla",
    "Dusík",
    "Dvonč",
    "Dzurjanin",
    "Dávid",
    "Fabian",
    "Fabián",
    "Fajnor",
    "Farkašovský",
    "Fico",
    "Filc",
    "Filip",
    "Finka",
    "Ftorek",
    "Gašpar",
    "Gašparovič",
    "Gocník",
    "Gregor",
    "Greguš",
    "Grznár",
    "Hablák",
    "Habšuda",
    "Halda",
    "Haluška",
    "Halák",
    "Hanko",
    "Hanzal",
    "Haščák",
    "Heretik",
    "Hečko",
    "Hlaváček",
    "Hlinka",
    "Holub",
    "Holuby",
    "Hossa",
    "Hoza",
    "Hraško",
    "Hric",
    "Hrmo",
    "Hrušovský",
    "Huba",
    "Ihnačák",
    "Janeček",
    "Janoška",
    "Jantošovič",
    "Janík",
    "Janček",
    "Jedľovský",
    "Jendek",
    "Jonata",
    "Jurina",
    "Jurkovič",
    "Jurík",
    "Jánošík",
    "Kafenda",
    "Kaliský",
    "Karul",
    "Keníž",
    "Klapka",
    "Kmeť",
    "Kolesár",
    "Kollár",
    "Kolnik",
    "Kolník",
    "Kolár",
    "Korec",
    "Kostka",
    "Kostrec",
    "Kováč",
    "Kováčik",
    "Koza",
    "Kočiš",
    "Krajíček",
    "Krajči",
    "Krajčo",
    "Krajčovič",
    "Krajčír",
    "Králik",
    "Krúpa",
    "Kubík",
    "Kyseľ",
    "Kállay",
    "Labuda",
    "Lepšík",
    "Lipták",
    "Lisický",
    "Lubina",
    "Lukáč",
    "Lupták",
    "Líška",
    "Madej",
    "Majeský",
    "Malachovský",
    "Malíšek",
    "Mamojka",
    "Marcinko",
    "Marián",
    "Masaryk",
    "Maslo",
    "Matiaško",
    "Medveď",
    "Melcer",
    "Mečiar",
    "Michalík",
    "Mihalik",
    "Mihál",
    "Mihálik",
    "Mikloško",
    "Mikulík",
    "Mikuš",
    "Mikúš",
    "Milota",
    "Mináč",
    "Mišík",
    "Mojžiš",
    "Mokroš",
    "Mora",
    "Moravčík",
    "Mydlo",
    "Nemec",
    "Nitra",
    "Novák",
    "Obšut",
    "Ondruš",
    "Otčenáš",
    "Pauko",
    "Pavlikovský",
    "Pavúk",
    "Pašek",
    "Paška",
    "Paško",
    "Pelikán",
    "Petrovický",
    "Petruška",
    "Peško",
    "Plch",
    "Plekanec",
    "Podhradský",
    "Podkonický",
    "Poliak",
    "Pupák",
    "Rak",
    "Repiský",
    "Romančík",
    "Rus",
    "Ružička",
    "Rybníček",
    "Rybár",
    "Rybárik",
    "Samson",
    "Sedliak",
    "Senko",
    "Sklenka",
    "Skokan",
    "Skutecký",
    "Slašťan",
    "Sloboda",
    "Slobodník",
    "Slota",
    "Slovák",
    "Smrek",
    "Stodola",
    "Straka",
    "Strnisko",
    "Svrbík",
    "Sámel",
    "Sýkora",
    "Tatar",
    "Tatarka",
    "Tatár",
    "Tatárka",
    "Thomka",
    "Tomeček",
    "Tomka",
    "Tomko",
    "Truben",
    "Turčok",
    "Uram",
    "Urblík",
    "Vajcík",
    "Vajda",
    "Valach",
    "Valachovič",
    "Valent",
    "Valuška",
    "Vanek",
    "Vesel",
    "Vicen",
    "Višňovský",
    "Vlach",
    "Vojtek",
    "Vydarený",
    "Zajac",
    "Zima",
    "Zimka",
    "Záborský",
    "Zúbrik",
    "Čapkovič",
    "Čaplovič",
    "Čarnogurský",
    "Čierny",
    "Čobrda",
    "Ďaďo",
    "Ďurica",
    "Ďuriš",
    "Šidlo",
    "Šimonovič",
    "Škriniar",
    "Škultéty",
    "Šmajda",
    "Šoltés",
    "Šoltýs",
    "Štefan",
    "Štefanka",
    "Šulc",
    "Šurka",
    "Švehla",
    "Šťastný"
  ];
});

// node_modules/faker/lib/locales/sk/name/female_last_name.js
var require_female_last_name5 = __commonJS((exports, module) => {
  module["exports"] = [
    "Antalová",
    "Babková",
    "Bahnová",
    "Balážová",
    "Baranová",
    "Baranková",
    "Bartovičová",
    "Bartošová",
    "Bačová",
    "Bernoláková",
    "Beňová",
    "Biceková",
    "Bieliková",
    "Blahová",
    "Bondrová",
    "Bosáková",
    "Bošková",
    "Brezinová",
    "Bukovská",
    "Chalupková",
    "Chudíková",
    "Cibulová",
    "Cibulková",
    "Cyprichová",
    "Cígerová",
    "Danková",
    "Daňková",
    "Daňová",
    "Debnárová",
    "Dejová",
    "Dekýšová",
    "Doležalová",
    "Dočolomanská",
    "Droppová",
    "Dubovská",
    "Dudeková",
    "Dulová",
    "Dullová",
    "Dusíková",
    "Dvončová",
    "Dzurjaninová",
    "Dávidová",
    "Fabianová",
    "Fabiánová",
    "Fajnorová",
    "Farkašovská",
    "Ficová",
    "Filcová",
    "Filipová",
    "Finková",
    "Ftoreková",
    "Gašparová",
    "Gašparovičová",
    "Gocníková",
    "Gregorová",
    "Gregušová",
    "Grznárová",
    "Habláková",
    "Habšudová",
    "Haldová",
    "Halušková",
    "Haláková",
    "Hanková",
    "Hanzalová",
    "Haščáková",
    "Heretiková",
    "Hečková",
    "Hlaváčeková",
    "Hlinková",
    "Holubová",
    "Holubyová",
    "Hossová",
    "Hozová",
    "Hrašková",
    "Hricová",
    "Hrmová",
    "Hrušovská",
    "Hubová",
    "Ihnačáková",
    "Janečeková",
    "Janošková",
    "Jantošovičová",
    "Janíková",
    "Jančeková",
    "Jedľovská",
    "Jendeková",
    "Jonatová",
    "Jurinová",
    "Jurkovičová",
    "Juríková",
    "Jánošíková",
    "Kafendová",
    "Kaliská",
    "Karulová",
    "Kenížová",
    "Klapková",
    "Kmeťová",
    "Kolesárová",
    "Kollárová",
    "Kolniková",
    "Kolníková",
    "Kolárová",
    "Korecová",
    "Kostkaová",
    "Kostrecová",
    "Kováčová",
    "Kováčiková",
    "Kozová",
    "Kočišová",
    "Krajíčeková",
    "Krajčová",
    "Krajčovičová",
    "Krajčírová",
    "Králiková",
    "Krúpová",
    "Kubíková",
    "Kyseľová",
    "Kállayová",
    "Labudová",
    "Lepšíková",
    "Liptáková",
    "Lisická",
    "Lubinová",
    "Lukáčová",
    "Luptáková",
    "Líšková",
    "Madejová",
    "Majeská",
    "Malachovská",
    "Malíšeková",
    "Mamojková",
    "Marcinková",
    "Mariánová",
    "Masaryková",
    "Maslová",
    "Matiašková",
    "Medveďová",
    "Melcerová",
    "Mečiarová",
    "Michalíková",
    "Mihaliková",
    "Mihálová",
    "Miháliková",
    "Miklošková",
    "Mikulíková",
    "Mikušová",
    "Mikúšová",
    "Milotová",
    "Mináčová",
    "Mišíková",
    "Mojžišová",
    "Mokrošová",
    "Morová",
    "Moravčíková",
    "Mydlová",
    "Nemcová",
    "Nováková",
    "Obšutová",
    "Ondrušová",
    "Otčenášová",
    "Pauková",
    "Pavlikovská",
    "Pavúková",
    "Pašeková",
    "Pašková",
    "Pelikánová",
    "Petrovická",
    "Petrušková",
    "Pešková",
    "Plchová",
    "Plekanecová",
    "Podhradská",
    "Podkonická",
    "Poliaková",
    "Pupáková",
    "Raková",
    "Repiská",
    "Romančíková",
    "Rusová",
    "Ružičková",
    "Rybníčeková",
    "Rybárová",
    "Rybáriková",
    "Samsonová",
    "Sedliaková",
    "Senková",
    "Sklenková",
    "Skokanová",
    "Skutecká",
    "Slašťanová",
    "Slobodová",
    "Slobodníková",
    "Slotová",
    "Slováková",
    "Smreková",
    "Stodolová",
    "Straková",
    "Strnisková",
    "Svrbíková",
    "Sámelová",
    "Sýkorová",
    "Tatarová",
    "Tatarková",
    "Tatárová",
    "Tatárkaová",
    "Thomková",
    "Tomečeková",
    "Tomková",
    "Trubenová",
    "Turčoková",
    "Uramová",
    "Urblíková",
    "Vajcíková",
    "Vajdová",
    "Valachová",
    "Valachovičová",
    "Valentová",
    "Valušková",
    "Vaneková",
    "Veselová",
    "Vicenová",
    "Višňovská",
    "Vlachová",
    "Vojteková",
    "Vydarená",
    "Zajacová",
    "Zimová",
    "Zimková",
    "Záborská",
    "Zúbriková",
    "Čapkovičová",
    "Čaplovičová",
    "Čarnogurská",
    "Čierná",
    "Čobrdová",
    "Ďaďová",
    "Ďuricová",
    "Ďurišová",
    "Šidlová",
    "Šimonovičová",
    "Škriniarová",
    "Škultétyová",
    "Šmajdová",
    "Šoltésová",
    "Šoltýsová",
    "Štefanová",
    "Štefanková",
    "Šulcová",
    "Šurková",
    "Švehlová",
    "Šťastná"
  ];
});

// node_modules/faker/lib/locales/sk/name/prefix.js
var require_prefix24 = __commonJS((exports, module) => {
  module["exports"] = [
    "Ing.",
    "Mgr.",
    "JUDr.",
    "MUDr."
  ];
});

// node_modules/faker/lib/locales/sk/name/suffix.js
var require_suffix35 = __commonJS((exports, module) => {
  module["exports"] = [
    "Phd."
  ];
});

// node_modules/faker/lib/locales/sk/name/title.js
var require_title8 = __commonJS((exports, module) => {
  module["exports"] = {
    descriptor: [
      "Lead",
      "Senior",
      "Direct",
      "Corporate",
      "Dynamic",
      "Future",
      "Product",
      "National",
      "Regional",
      "District",
      "Central",
      "Global",
      "Customer",
      "Investor",
      "Dynamic",
      "International",
      "Legacy",
      "Forward",
      "Internal",
      "Human",
      "Chief",
      "Principal"
    ],
    level: [
      "Solutions",
      "Program",
      "Brand",
      "Security",
      "Research",
      "Marketing",
      "Directives",
      "Implementation",
      "Integration",
      "Functionality",
      "Response",
      "Paradigm",
      "Tactics",
      "Identity",
      "Markets",
      "Group",
      "Division",
      "Applications",
      "Optimization",
      "Operations",
      "Infrastructure",
      "Intranet",
      "Communications",
      "Web",
      "Branding",
      "Quality",
      "Assurance",
      "Mobility",
      "Accounts",
      "Data",
      "Creative",
      "Configuration",
      "Accountability",
      "Interactions",
      "Factors",
      "Usability",
      "Metrics"
    ],
    job: [
      "Supervisor",
      "Associate",
      "Executive",
      "Liaison",
      "Officer",
      "Manager",
      "Engineer",
      "Specialist",
      "Director",
      "Coordinator",
      "Administrator",
      "Architect",
      "Analyst",
      "Designer",
      "Planner",
      "Orchestrator",
      "Technician",
      "Developer",
      "Producer",
      "Consultant",
      "Assistant",
      "Facilitator",
      "Agent",
      "Representative",
      "Strategist"
    ]
  };
});

// node_modules/faker/lib/locales/sk/name/name.js
var require_name65 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{prefix} #{man_first_name} #{man_last_name}",
    "#{prefix} #{woman_first_name} #{woman_last_name}",
    "#{man_first_name} #{man_last_name} #{suffix}",
    "#{woman_first_name} #{woman_last_name} #{suffix}",
    "#{man_first_name} #{man_last_name}",
    "#{man_first_name} #{man_last_name}",
    "#{man_first_name} #{man_last_name}",
    "#{woman_first_name} #{woman_last_name}",
    "#{woman_first_name} #{woman_last_name}",
    "#{woman_first_name} #{woman_last_name}"
  ];
});

// node_modules/faker/lib/locales/sk/name/index.js
var require_name64 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.male_first_name = require_male_first_name5();
  name2.female_first_name = require_female_first_name5();
  name2.male_last_name = require_male_last_name5();
  name2.female_last_name = require_female_last_name5();
  name2.prefix = require_prefix24();
  name2.suffix = require_suffix35();
  name2.title = require_title8();
  name2.name = require_name65();
});

// node_modules/faker/lib/locales/sk/phone_number/formats.js
var require_formats38 = __commonJS((exports, module) => {
  module["exports"] = [
    "09## ### ###",
    "0## #### ####",
    "0# #### ####",
    "+421 ### ### ###"
  ];
});

// node_modules/faker/lib/locales/sk/phone_number/index.js
var require_phone_number29 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats38();
});

// node_modules/faker/lib/locales/sk/index.js
var require_sk = __commonJS((exports, module) => {
  var sk = {};
  module["exports"] = sk;
  sk.title = "Slovakian";
  sk.address = require_address30();
  sk.company = require_company24();
  sk.internet = require_internet29();
  sk.lorem = require_lorem11();
  sk.name = require_name64();
  sk.phone_number = require_phone_number29();
});

// node_modules/faker/lib/locales/sv/address/city_prefix.js
var require_city_prefix12 = __commonJS((exports, module) => {
  module["exports"] = [
    "Söder",
    "Norr",
    "Väst",
    "Öster",
    "Aling",
    "Ar",
    "Av",
    "Bo",
    "Br",
    "Bå",
    "Ek",
    "En",
    "Esk",
    "Fal",
    "Gäv",
    "Göte",
    "Ha",
    "Helsing",
    "Karl",
    "Krist",
    "Kram",
    "Kung",
    "Kö",
    "Lyck",
    "Ny"
  ];
});

// node_modules/faker/lib/locales/sv/address/city_suffix.js
var require_city_suffix12 = __commonJS((exports, module) => {
  module["exports"] = [
    "stad",
    "land",
    "sås",
    "ås",
    "holm",
    "tuna",
    "sta",
    "berg",
    "löv",
    "borg",
    "mora",
    "hamn",
    "fors",
    "köping",
    "by",
    "hult",
    "torp",
    "fred",
    "vik"
  ];
});

// node_modules/faker/lib/locales/sv/address/country.js
var require_country15 = __commonJS((exports, module) => {
  module["exports"] = [
    "Ryssland",
    "Kanada",
    "Kina",
    "USA",
    "Brasilien",
    "Australien",
    "Indien",
    "Argentina",
    "Kazakstan",
    "Algeriet",
    "DR Kongo",
    "Danmark",
    "Färöarna",
    "Grönland",
    "Saudiarabien",
    "Mexiko",
    "Indonesien",
    "Sudan",
    "Libyen",
    "Iran",
    "Mongoliet",
    "Peru",
    "Tchad",
    "Niger",
    "Angola",
    "Mali",
    "Sydafrika",
    "Colombia",
    "Etiopien",
    "Bolivia",
    "Mauretanien",
    "Egypten",
    "Tanzania",
    "Nigeria",
    "Venezuela",
    "Namibia",
    "Pakistan",
    "Moçambique",
    "Turkiet",
    "Chile",
    "Zambia",
    "Marocko",
    "Västsahara",
    "Burma",
    "Afghanistan",
    "Somalia",
    "Centralafrikanska republiken",
    "Sydsudan",
    "Ukraina",
    "Botswana",
    "Madagaskar",
    "Kenya",
    "Frankrike",
    "Franska Guyana",
    "Jemen",
    "Thailand",
    "Spanien",
    "Turkmenistan",
    "Kamerun",
    "Papua Nya Guinea",
    "Sverige",
    "Uzbekistan",
    "Irak",
    "Paraguay",
    "Zimbabwe",
    "Japan",
    "Tyskland",
    "Kongo",
    "Finland",
    "Malaysia",
    "Vietnam",
    "Norge",
    "Svalbard",
    "Jan Mayen",
    "Elfenbenskusten",
    "Polen",
    "Italien",
    "Filippinerna",
    "Ecuador",
    "Burkina Faso",
    "Nya Zeeland",
    "Gabon",
    "Guinea",
    "Storbritannien",
    "Ghana",
    "Rumänien",
    "Laos",
    "Uganda",
    "Guyana",
    "Oman",
    "Vitryssland",
    "Kirgizistan",
    "Senegal",
    "Syrien",
    "Kambodja",
    "Uruguay",
    "Tunisien",
    "Surinam",
    "Nepal",
    "Bangladesh",
    "Tadzjikistan",
    "Grekland",
    "Nicaragua",
    "Eritrea",
    "Nordkorea",
    "Malawi",
    "Benin",
    "Honduras",
    "Liberia",
    "Bulgarien",
    "Kuba",
    "Guatemala",
    "Island",
    "Sydkorea",
    "Ungern",
    "Portugal",
    "Jordanien",
    "Serbien",
    "Azerbajdzjan",
    "Österrike",
    "Förenade Arabemiraten",
    "Tjeckien",
    "Panama",
    "Sierra Leone",
    "Irland",
    "Georgien",
    "Sri Lanka",
    "Litauen",
    "Lettland",
    "Togo",
    "Kroatien",
    "Bosnien och Hercegovina",
    "Costa Rica",
    "Slovakien",
    "Dominikanska republiken",
    "Bhutan",
    "Estland",
    "Danmark",
    "Färöarna",
    "Grönland",
    "Nederländerna",
    "Schweiz",
    "Guinea-Bissau",
    "Taiwan",
    "Moldavien",
    "Belgien",
    "Lesotho",
    "Armenien",
    "Albanien",
    "Salomonöarna",
    "Ekvatorialguinea",
    "Burundi",
    "Haiti",
    "Rwanda",
    "Makedonien",
    "Djibouti",
    "Belize",
    "Israel",
    "El Salvador",
    "Slovenien",
    "Fiji",
    "Kuwait",
    "Swaziland",
    "Timor-Leste",
    "Montenegro",
    "Bahamas",
    "Vanuatu",
    "Qatar",
    "Gambia",
    "Jamaica",
    "Kosovo",
    "Libanon",
    "Cypern",
    "Brunei",
    "Trinidad och Tobago",
    "Kap Verde",
    "Samoa",
    "Luxemburg",
    "Komorerna",
    "Mauritius",
    "São Tomé och Príncipe",
    "Kiribati",
    "Dominica",
    "Tonga",
    "Mikronesiens federerade stater",
    "Singapore",
    "Bahrain",
    "Saint Lucia",
    "Andorra",
    "Palau",
    "Seychellerna",
    "Antigua och Barbuda",
    "Barbados",
    "Saint Vincent och Grenadinerna",
    "Grenada",
    "Malta",
    "Maldiverna",
    "Saint Kitts och Nevis",
    "Marshallöarna",
    "Liechtenstein",
    "San Marino",
    "Tuvalu",
    "Nauru",
    "Monaco",
    "Vatikanstaten"
  ];
});

// node_modules/faker/lib/locales/sv/address/common_street_suffix.js
var require_common_street_suffix2 = __commonJS((exports, module) => {
  module["exports"] = [
    "s Väg",
    "s Gata"
  ];
});

// node_modules/faker/lib/locales/sv/address/street_prefix.js
var require_street_prefix5 = __commonJS((exports, module) => {
  module["exports"] = [
    "Västra",
    "Östra",
    "Norra",
    "Södra",
    "Övre",
    "Undre"
  ];
});

// node_modules/faker/lib/locales/sv/address/street_root.js
var require_street_root6 = __commonJS((exports, module) => {
  module["exports"] = [
    "Björk",
    "Järnvägs",
    "Ring",
    "Skol",
    "Skogs",
    "Ny",
    "Gran",
    "Idrotts",
    "Stor",
    "Kyrk",
    "Industri",
    "Park",
    "Strand",
    "Skol",
    "Trädgård",
    "Ängs",
    "Kyrko",
    "Villa",
    "Ek",
    "Kvarn",
    "Stations",
    "Back",
    "Furu",
    "Gen",
    "Fabriks",
    "Åker",
    "Bäck",
    "Asp"
  ];
});

// node_modules/faker/lib/locales/sv/address/street_suffix.js
var require_street_suffix15 = __commonJS((exports, module) => {
  module["exports"] = [
    "vägen",
    "gatan",
    "gränden",
    "gärdet",
    "allén"
  ];
});

// node_modules/faker/lib/locales/sv/address/state.js
var require_state25 = __commonJS((exports, module) => {
  module["exports"] = [
    "Blekinge",
    "Dalarna",
    "Gotland",
    "Gävleborg",
    "Göteborg",
    "Halland",
    "Jämtland",
    "Jönköping",
    "Kalmar",
    "Kronoberg",
    "Norrbotten",
    "Skaraborg",
    "Skåne",
    "Stockholm",
    "Södermanland",
    "Uppsala",
    "Värmland",
    "Västerbotten",
    "Västernorrland",
    "Västmanland",
    "Älvsborg",
    "Örebro",
    "Östergötland"
  ];
});

// node_modules/faker/lib/locales/sv/address/city.js
var require_city21 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{city_prefix}#{city_suffix}"
  ];
});

// node_modules/faker/lib/locales/sv/address/street_name.js
var require_street_name20 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_root}#{street_suffix}",
    "#{street_prefix} #{street_root}#{street_suffix}",
    "#{Name.first_name}#{common_street_suffix}",
    "#{Name.last_name}#{common_street_suffix}"
  ];
});

// node_modules/faker/lib/locales/sv/address/postcode.js
var require_postcode28 = __commonJS((exports, module) => {
  module["exports"] = [
    "#####"
  ];
});

// node_modules/faker/lib/locales/sv/address/building_number.js
var require_building_number20 = __commonJS((exports, module) => {
  module["exports"] = [
    "###",
    "##",
    "#"
  ];
});

// node_modules/faker/lib/locales/sv/address/secondary_address.js
var require_secondary_address17 = __commonJS((exports, module) => {
  module["exports"] = [
    "Lgh. ###",
    "Hus ###"
  ];
});

// node_modules/faker/lib/locales/sv/address/street_address.js
var require_street_address17 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_name} #{building_number}"
  ];
});

// node_modules/faker/lib/locales/sv/address/default_country.js
var require_default_country28 = __commonJS((exports, module) => {
  module["exports"] = [
    "Sverige"
  ];
});

// node_modules/faker/lib/locales/sv/address/index.js
var require_address31 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.city_prefix = require_city_prefix12();
  address.city_suffix = require_city_suffix12();
  address.country = require_country15();
  address.common_street_suffix = require_common_street_suffix2();
  address.street_prefix = require_street_prefix5();
  address.street_root = require_street_root6();
  address.street_suffix = require_street_suffix15();
  address.state = require_state25();
  address.city = require_city21();
  address.street_name = require_street_name20();
  address.postcode = require_postcode28();
  address.building_number = require_building_number20();
  address.secondary_address = require_secondary_address17();
  address.street_address = require_street_address17();
  address.default_country = require_default_country28();
});

// node_modules/faker/lib/locales/sv/company/suffix.js
var require_suffix36 = __commonJS((exports, module) => {
  module["exports"] = [
    "Gruppen",
    "AB",
    "HB",
    "Group",
    "Investment",
    "Kommanditbolag",
    "Aktiebolag"
  ];
});

// node_modules/faker/lib/locales/sv/company/name.js
var require_name66 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Name.last_name} #{suffix}",
    "#{Name.last_name}-#{Name.last_name}",
    "#{Name.last_name}, #{Name.last_name} #{suffix}"
  ];
});

// node_modules/faker/lib/locales/sv/company/index.js
var require_company25 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.suffix = require_suffix36();
  company.name = require_name66();
});

// node_modules/faker/lib/locales/sv/internet/domain_suffix.js
var require_domain_suffix29 = __commonJS((exports, module) => {
  module["exports"] = [
    "se",
    "nu",
    "info",
    "com",
    "org"
  ];
});

// node_modules/faker/lib/locales/sv/internet/index.js
var require_internet30 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.domain_suffix = require_domain_suffix29();
});

// node_modules/faker/lib/locales/sv/name/first_name_women.js
var require_first_name_women = __commonJS((exports, module) => {
  module["exports"] = [
    "Maria",
    "Anna",
    "Margareta",
    "Elisabeth",
    "Eva",
    "Birgitta",
    "Kristina",
    "Karin",
    "Elisabet",
    "Marie"
  ];
});

// node_modules/faker/lib/locales/sv/name/first_name_men.js
var require_first_name_men = __commonJS((exports, module) => {
  module["exports"] = [
    "Erik",
    "Lars",
    "Karl",
    "Anders",
    "Per",
    "Johan",
    "Nils",
    "Lennart",
    "Emil",
    "Hans"
  ];
});

// node_modules/faker/lib/locales/sv/name/last_name.js
var require_last_name21 = __commonJS((exports, module) => {
  module["exports"] = [
    "Johansson",
    "Andersson",
    "Karlsson",
    "Nilsson",
    "Eriksson",
    "Larsson",
    "Olsson",
    "Persson",
    "Svensson",
    "Gustafsson"
  ];
});

// node_modules/faker/lib/locales/sv/name/prefix.js
var require_prefix25 = __commonJS((exports, module) => {
  module["exports"] = [
    "Dr.",
    "Prof.",
    "PhD."
  ];
});

// node_modules/faker/lib/locales/sv/name/title.js
var require_title9 = __commonJS((exports, module) => {
  module["exports"] = {
    descriptor: [
      "Lead",
      "Senior",
      "Direct",
      "Corporate",
      "Dynamic",
      "Future",
      "Product",
      "National",
      "Regional",
      "District",
      "Central",
      "Global",
      "Customer",
      "Investor",
      "Dynamic",
      "International",
      "Legacy",
      "Forward",
      "Internal",
      "Human",
      "Chief",
      "Principal"
    ],
    level: [
      "Solutions",
      "Program",
      "Brand",
      "Security",
      "Research",
      "Marketing",
      "Directives",
      "Implementation",
      "Integration",
      "Functionality",
      "Response",
      "Paradigm",
      "Tactics",
      "Identity",
      "Markets",
      "Group",
      "Division",
      "Applications",
      "Optimization",
      "Operations",
      "Infrastructure",
      "Intranet",
      "Communications",
      "Web",
      "Branding",
      "Quality",
      "Assurance",
      "Mobility",
      "Accounts",
      "Data",
      "Creative",
      "Configuration",
      "Accountability",
      "Interactions",
      "Factors",
      "Usability",
      "Metrics"
    ],
    job: [
      "Supervisor",
      "Associate",
      "Executive",
      "Liaison",
      "Officer",
      "Manager",
      "Engineer",
      "Specialist",
      "Director",
      "Coordinator",
      "Administrator",
      "Architect",
      "Analyst",
      "Designer",
      "Planner",
      "Orchestrator",
      "Technician",
      "Developer",
      "Producer",
      "Consultant",
      "Assistant",
      "Facilitator",
      "Agent",
      "Representative",
      "Strategist"
    ]
  };
});

// node_modules/faker/lib/locales/sv/name/name.js
var require_name68 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{first_name_women} #{last_name}",
    "#{first_name_men} #{last_name}",
    "#{first_name_women} #{last_name}",
    "#{first_name_men} #{last_name}",
    "#{first_name_women} #{last_name}",
    "#{first_name_men} #{last_name}",
    "#{prefix} #{first_name_men} #{last_name}",
    "#{prefix} #{first_name_women} #{last_name}"
  ];
});

// node_modules/faker/lib/locales/sv/name/index.js
var require_name67 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name_women = require_first_name_women();
  name2.first_name_men = require_first_name_men();
  name2.last_name = require_last_name21();
  name2.prefix = require_prefix25();
  name2.title = require_title9();
  name2.name = require_name68();
});

// node_modules/faker/lib/locales/sv/phone_number/formats.js
var require_formats40 = __commonJS((exports, module) => {
  module["exports"] = [
    "####-#####",
    "####-######"
  ];
});

// node_modules/faker/lib/locales/sv/phone_number/index.js
var require_phone_number30 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats40();
});

// node_modules/faker/lib/locales/sv/cell_phone/common_cell_prefix.js
var require_common_cell_prefix = __commonJS((exports, module) => {
  module["exports"] = [
    56,
    62,
    59
  ];
});

// node_modules/faker/lib/locales/sv/cell_phone/formats.js
var require_formats39 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{common_cell_prefix}-###-####"
  ];
});

// node_modules/faker/lib/locales/sv/cell_phone/index.js
var require_cell_phone11 = __commonJS((exports, module) => {
  var cell_phone = {};
  module["exports"] = cell_phone;
  cell_phone.common_cell_prefix = require_common_cell_prefix();
  cell_phone.formats = require_formats39();
});

// node_modules/faker/lib/locales/sv/commerce/color.js
var require_color5 = __commonJS((exports, module) => {
  module["exports"] = [
    "vit",
    "silver",
    "grå",
    "svart",
    "röd",
    "grön",
    "blå",
    "gul",
    "lila",
    "indigo",
    "guld",
    "brun",
    "rosa",
    "purpur",
    "korall"
  ];
});

// node_modules/faker/lib/locales/sv/commerce/department.js
var require_department5 = __commonJS((exports, module) => {
  module["exports"] = [
    "Böcker",
    "Filmer",
    "Musik",
    "Spel",
    "Elektronik",
    "Datorer",
    "Hem",
    "Trädgård",
    "Verktyg",
    "Livsmedel",
    "Hälsa",
    "Skönhet",
    "Leksaker",
    "Klädsel",
    "Skor",
    "Smycken",
    "Sport"
  ];
});

// node_modules/faker/lib/locales/sv/commerce/product_name.js
var require_product_name5 = __commonJS((exports, module) => {
  module["exports"] = {
    adjective: [
      "Liten",
      "Ergonomisk",
      "Robust",
      "Intelligent",
      "Söt",
      "Otrolig",
      "Fatastisk",
      "Praktisk",
      "Slimmad",
      "Grym"
    ],
    material: [
      "Stål",
      "Metall",
      "Trä",
      "Betong",
      "Plast",
      "Bomul",
      "Grnit",
      "Gummi",
      "Latex"
    ],
    product: [
      "Stol",
      "Bil",
      "Dator",
      "Handskar",
      "Pants",
      "Shirt",
      "Table",
      "Shoes",
      "Hat"
    ]
  };
});

// node_modules/faker/lib/locales/sv/commerce/index.js
var require_commerce6 = __commonJS((exports, module) => {
  var commerce = {};
  module["exports"] = commerce;
  commerce.color = require_color5();
  commerce.department = require_department5();
  commerce.product_name = require_product_name5();
});

// node_modules/faker/lib/locales/sv/team/suffix.js
var require_suffix37 = __commonJS((exports, module) => {
  module["exports"] = [
    "IF",
    "FF",
    "BK",
    "HK",
    "AIF",
    "SK",
    "FC",
    "SK",
    "BoIS",
    "FK",
    "BIS",
    "FIF",
    "IK"
  ];
});

// node_modules/faker/lib/locales/sv/team/name.js
var require_name69 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Address.city} #{suffix}"
  ];
});

// node_modules/faker/lib/locales/sv/team/index.js
var require_team3 = __commonJS((exports, module) => {
  var team = {};
  module["exports"] = team;
  team.suffix = require_suffix37();
  team.name = require_name69();
});

// node_modules/faker/lib/locales/sv/date/month.js
var require_month6 = __commonJS((exports, module) => {
  module["exports"] = {
    wide: [
      "januari",
      "februari",
      "mars",
      "april",
      "maj",
      "juni",
      "juli",
      "augusti",
      "september",
      "oktober",
      "november",
      "december"
    ],
    abbr: [
      "jan",
      "feb",
      "mar",
      "apr",
      "maj",
      "jun",
      "jul",
      "aug",
      "sep",
      "okt",
      "nov",
      "dec"
    ]
  };
});

// node_modules/faker/lib/locales/sv/date/weekday.js
var require_weekday6 = __commonJS((exports, module) => {
  module["exports"] = {
    wide: [
      "söndag",
      "måndag",
      "tisdag",
      "onsdag",
      "torsdag",
      "fredag",
      "lördag"
    ],
    abbr: [
      "sön",
      "mån",
      "tis",
      "ons",
      "tor",
      "fre",
      "lör"
    ]
  };
});

// node_modules/faker/lib/locales/sv/date/index.js
var require_date7 = __commonJS((exports, module) => {
  var date2 = {};
  module["exports"] = date2;
  date2.month = require_month6();
  date2.weekday = require_weekday6();
});

// node_modules/faker/lib/locales/sv/index.js
var require_sv = __commonJS((exports, module) => {
  var sv = {};
  module["exports"] = sv;
  sv.title = "Swedish";
  sv.address = require_address31();
  sv.company = require_company25();
  sv.internet = require_internet30();
  sv.name = require_name67();
  sv.phone_number = require_phone_number30();
  sv.cell_phone = require_cell_phone11();
  sv.commerce = require_commerce6();
  sv.team = require_team3();
  sv.date = require_date7();
});

// node_modules/faker/lib/locales/tr/address/city.js
var require_city22 = __commonJS((exports, module) => {
  module["exports"] = [
    "Adana",
    "Adıyaman",
    "Afyon",
    "Ağrı",
    "Amasya",
    "Ankara",
    "Antalya",
    "Artvin",
    "Aydın",
    "Balıkesir",
    "Bilecik",
    "Bingöl",
    "Bitlis",
    "Bolu",
    "Burdur",
    "Bursa",
    "Çanakkale",
    "Çankırı",
    "Çorum",
    "Denizli",
    "Diyarbakır",
    "Edirne",
    "Elazığ",
    "Erzincan",
    "Erzurum",
    "Eskişehir",
    "Gaziantep",
    "Giresun",
    "Gümüşhane",
    "Hakkari",
    "Hatay",
    "Isparta",
    "İçel (Mersin)",
    "İstanbul",
    "İzmir",
    "Kars",
    "Kastamonu",
    "Kayseri",
    "Kırklareli",
    "Kırşehir",
    "Kocaeli",
    "Konya",
    "Kütahya",
    "Malatya",
    "Manisa",
    "K.maraş",
    "Mardin",
    "Muğla",
    "Muş",
    "Nevşehir",
    "Niğde",
    "Ordu",
    "Rize",
    "Sakarya",
    "Samsun",
    "Siirt",
    "Sinop",
    "Sivas",
    "Tekirdağ",
    "Tokat",
    "Trabzon",
    "Tunceli",
    "Şanlıurfa",
    "Uşak",
    "Van",
    "Yozgat",
    "Zonguldak",
    "Aksaray",
    "Bayburt",
    "Karaman",
    "Kırıkkale",
    "Batman",
    "Şırnak",
    "Bartın",
    "Ardahan",
    "Iğdır",
    "Yalova",
    "Karabük",
    "Kilis",
    "Osmaniye",
    "Düzce"
  ];
});

// node_modules/faker/lib/locales/tr/address/street_root.js
var require_street_root7 = __commonJS((exports, module) => {
  module["exports"] = [
    "Atatürk Bulvarı",
    "Alparslan Türkeş Bulvarı",
    "Ali Çetinkaya Caddesi",
    "Tevfik Fikret Caddesi",
    "Kocatepe Caddesi",
    "İsmet Paşa Caddesi",
    "30 Ağustos Caddesi",
    "İsmet Attila Caddesi",
    "Namık Kemal Caddesi",
    "Lütfi Karadirek Caddesi",
    "Sarıkaya Caddesi",
    "Yunus Emre Sokak",
    "Dar Sokak",
    "Fatih Sokak ",
    "Harman Yolu Sokak ",
    "Ergenekon Sokak  ",
    "Ülkü Sokak",
    "Sağlık Sokak",
    "Okul Sokak",
    "Harman Altı Sokak",
    "Kaldırım Sokak",
    "Mevlana Sokak",
    "Gül Sokak",
    "Sıran Söğüt Sokak",
    "Güven Yaka Sokak",
    "Saygılı Sokak",
    "Menekşe Sokak",
    "Dağınık Evler Sokak",
    "Sevgi Sokak",
    "Afyon Kaya Sokak",
    "Oğuzhan Sokak",
    "İbn-i Sina Sokak",
    "Okul Sokak",
    "Bahçe Sokak",
    "Köypınar Sokak",
    "Kekeçoğlu Sokak",
    "Barış Sokak",
    "Bayır Sokak",
    "Kerimoğlu Sokak",
    "Nalbant Sokak",
    "Bandak Sokak"
  ];
});

// node_modules/faker/lib/locales/tr/address/country.js
var require_country16 = __commonJS((exports, module) => {
  module["exports"] = [
    "Afganistan",
    "Almanya",
    "Amerika Birleşik Devletleri",
    "Amerikan Samoa",
    "Andorra",
    "Angola",
    "Anguilla, İngiltere",
    "Antigua ve Barbuda",
    "Arjantin",
    "Arnavutluk",
    "Aruba, Hollanda",
    "Avustralya",
    "Avusturya",
    "Azerbaycan",
    "Bahama Adaları",
    "Bahreyn",
    "Bangladeş",
    "Barbados",
    "Belçika",
    "Belize",
    "Benin",
    "Bermuda, İngiltere",
    "Beyaz Rusya",
    "Bhutan",
    "Birleşik Arap Emirlikleri",
    "Birmanya (Myanmar)",
    "Bolivya",
    "Bosna Hersek",
    "Botswana",
    "Brezilya",
    "Brunei",
    "Bulgaristan",
    "Burkina Faso",
    "Burundi",
    "Cape Verde",
    "Cayman Adaları, İngiltere",
    "Cebelitarık, İngiltere",
    "Cezayir",
    "Christmas Adası , Avusturalya",
    "Cibuti",
    "Çad",
    "Çek Cumhuriyeti",
    "Çin",
    "Danimarka",
    "Doğu Timor",
    "Dominik Cumhuriyeti",
    "Dominika",
    "Ekvator",
    "Ekvator Ginesi",
    "El Salvador",
    "Endonezya",
    "Eritre",
    "Ermenistan",
    "Estonya",
    "Etiyopya",
    "Fas",
    "Fiji",
    "Fildişi Sahili",
    "Filipinler",
    "Filistin",
    "Finlandiya",
    "Folkland Adaları, İngiltere",
    "Fransa",
    "Fransız Guyanası",
    "Fransız Güney Eyaletleri (Kerguelen Adaları)",
    "Fransız Polinezyası",
    "Gabon",
    "Galler",
    "Gambiya",
    "Gana",
    "Gine",
    "Gine-Bissau",
    "Grenada",
    "Grönland",
    "Guadalup, Fransa",
    "Guam, Amerika",
    "Guatemala",
    "Guyana",
    "Güney Afrika",
    "Güney Georgia ve Güney Sandviç Adaları, İngiltere",
    "Güney Kıbrıs Rum Yönetimi",
    "Güney Kore",
    "Gürcistan H",
    "Haiti",
    "Hırvatistan",
    "Hindistan",
    "Hollanda",
    "Hollanda Antilleri",
    "Honduras",
    "Irak",
    "İngiltere",
    "İran",
    "İrlanda",
    "İspanya",
    "İsrail",
    "İsveç",
    "İsviçre",
    "İtalya",
    "İzlanda",
    "Jamaika",
    "Japonya",
    "Johnston Atoll, Amerika",
    "K.K.T.C.",
    "Kamboçya",
    "Kamerun",
    "Kanada",
    "Kanarya Adaları",
    "Karadağ",
    "Katar",
    "Kazakistan",
    "Kenya",
    "Kırgızistan",
    "Kiribati",
    "Kolombiya",
    "Komorlar",
    "Kongo",
    "Kongo Demokratik Cumhuriyeti",
    "Kosova",
    "Kosta Rika",
    "Kuveyt",
    "Kuzey İrlanda",
    "Kuzey Kore",
    "Kuzey Maryana Adaları",
    "Küba",
    "Laos",
    "Lesotho",
    "Letonya",
    "Liberya",
    "Libya",
    "Liechtenstein",
    "Litvanya",
    "Lübnan",
    "Lüksemburg",
    "Macaristan",
    "Madagaskar",
    "Makau (Makao)",
    "Makedonya",
    "Malavi",
    "Maldiv Adaları",
    "Malezya",
    "Mali",
    "Malta",
    "Marşal Adaları",
    "Martinik, Fransa",
    "Mauritius",
    "Mayotte, Fransa",
    "Meksika",
    "Mısır",
    "Midway Adaları, Amerika",
    "Mikronezya",
    "Moğolistan",
    "Moldavya",
    "Monako",
    "Montserrat",
    "Moritanya",
    "Mozambik",
    "Namibia",
    "Nauru",
    "Nepal",
    "Nijer",
    "Nijerya",
    "Nikaragua",
    "Niue, Yeni Zelanda",
    "Norveç",
    "Orta Afrika Cumhuriyeti",
    "Özbekistan",
    "Pakistan",
    "Palau Adaları",
    "Palmyra Atoll, Amerika",
    "Panama",
    "Papua Yeni Gine",
    "Paraguay",
    "Peru",
    "Polonya",
    "Portekiz",
    "Porto Riko, Amerika",
    "Reunion, Fransa",
    "Romanya",
    "Ruanda",
    "Rusya Federasyonu",
    "Saint Helena, İngiltere",
    "Saint Martin, Fransa",
    "Saint Pierre ve Miquelon, Fransa",
    "Samoa",
    "San Marino",
    "Santa Kitts ve Nevis",
    "Santa Lucia",
    "Santa Vincent ve Grenadinler",
    "Sao Tome ve Principe",
    "Senegal",
    "Seyşeller",
    "Sırbistan",
    "Sierra Leone",
    "Singapur",
    "Slovakya",
    "Slovenya",
    "Solomon Adaları",
    "Somali",
    "Sri Lanka",
    "Sudan",
    "Surinam",
    "Suriye",
    "Suudi Arabistan",
    "Svalbard, Norveç",
    "Svaziland",
    "Şili",
    "Tacikistan",
    "Tanzanya",
    "Tayland",
    "Tayvan",
    "Togo",
    "Tonga",
    "Trinidad ve Tobago",
    "Tunus",
    "Turks ve Caicos Adaları, İngiltere",
    "Tuvalu",
    "Türkiye",
    "Türkmenistan",
    "Uganda",
    "Ukrayna",
    "Umman",
    "Uruguay",
    "Ürdün",
    "Vallis ve Futuna, Fransa",
    "Vanuatu",
    "Venezuela",
    "Vietnam",
    "Virgin Adaları, Amerika",
    "Virgin Adaları, İngiltere",
    "Wake Adaları, Amerika",
    "Yemen",
    "Yeni Kaledonya, Fransa",
    "Yeni Zelanda",
    "Yunanistan",
    "Zambiya",
    "Zimbabve"
  ];
});

// node_modules/faker/lib/locales/tr/address/postcode.js
var require_postcode29 = __commonJS((exports, module) => {
  module["exports"] = [
    "#####"
  ];
});

// node_modules/faker/lib/locales/tr/address/default_country.js
var require_default_country29 = __commonJS((exports, module) => {
  module["exports"] = [
    "Türkiye"
  ];
});

// node_modules/faker/lib/locales/tr/address/building_number.js
var require_building_number21 = __commonJS((exports, module) => {
  module["exports"] = [
    "###",
    "##",
    "#",
    "##a",
    "##b",
    "##c"
  ];
});

// node_modules/faker/lib/locales/tr/address/street_name.js
var require_street_name21 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_root}"
  ];
});

// node_modules/faker/lib/locales/tr/address/street_address.js
var require_street_address18 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_name} #{building_number}"
  ];
});

// node_modules/faker/lib/locales/tr/address/index.js
var require_address32 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.city = require_city22();
  address.street_root = require_street_root7();
  address.country = require_country16();
  address.postcode = require_postcode29();
  address.default_country = require_default_country29();
  address.building_number = require_building_number21();
  address.street_name = require_street_name21();
  address.street_address = require_street_address18();
});

// node_modules/faker/lib/locales/tr/internet/domain_suffix.js
var require_domain_suffix30 = __commonJS((exports, module) => {
  module["exports"] = [
    "com.tr",
    "com",
    "biz",
    "info",
    "name",
    "gov.tr"
  ];
});

// node_modules/faker/lib/locales/tr/internet/index.js
var require_internet31 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.domain_suffix = require_domain_suffix30();
});

// node_modules/faker/lib/locales/tr/lorem/words.js
var require_words12 = __commonJS((exports, module) => {
  module["exports"] = [
    "alias",
    "consequatur",
    "aut",
    "perferendis",
    "sit",
    "voluptatem",
    "accusantium",
    "doloremque",
    "aperiam",
    "eaque",
    "ipsa",
    "quae",
    "ab",
    "illo",
    "inventore",
    "veritatis",
    "et",
    "quasi",
    "architecto",
    "beatae",
    "vitae",
    "dicta",
    "sunt",
    "explicabo",
    "aspernatur",
    "aut",
    "odit",
    "aut",
    "fugit",
    "sed",
    "quia",
    "consequuntur",
    "magni",
    "dolores",
    "eos",
    "qui",
    "ratione",
    "voluptatem",
    "sequi",
    "nesciunt",
    "neque",
    "dolorem",
    "ipsum",
    "quia",
    "dolor",
    "sit",
    "amet",
    "consectetur",
    "adipisci",
    "velit",
    "sed",
    "quia",
    "non",
    "numquam",
    "eius",
    "modi",
    "tempora",
    "incidunt",
    "ut",
    "labore",
    "et",
    "dolore",
    "magnam",
    "aliquam",
    "quaerat",
    "voluptatem",
    "ut",
    "enim",
    "ad",
    "minima",
    "veniam",
    "quis",
    "nostrum",
    "exercitationem",
    "ullam",
    "corporis",
    "nemo",
    "enim",
    "ipsam",
    "voluptatem",
    "quia",
    "voluptas",
    "sit",
    "suscipit",
    "laboriosam",
    "nisi",
    "ut",
    "aliquid",
    "ex",
    "ea",
    "commodi",
    "consequatur",
    "quis",
    "autem",
    "vel",
    "eum",
    "iure",
    "reprehenderit",
    "qui",
    "in",
    "ea",
    "voluptate",
    "velit",
    "esse",
    "quam",
    "nihil",
    "molestiae",
    "et",
    "iusto",
    "odio",
    "dignissimos",
    "ducimus",
    "qui",
    "blanditiis",
    "praesentium",
    "laudantium",
    "totam",
    "rem",
    "voluptatum",
    "deleniti",
    "atque",
    "corrupti",
    "quos",
    "dolores",
    "et",
    "quas",
    "molestias",
    "excepturi",
    "sint",
    "occaecati",
    "cupiditate",
    "non",
    "provident",
    "sed",
    "ut",
    "perspiciatis",
    "unde",
    "omnis",
    "iste",
    "natus",
    "error",
    "similique",
    "sunt",
    "in",
    "culpa",
    "qui",
    "officia",
    "deserunt",
    "mollitia",
    "animi",
    "id",
    "est",
    "laborum",
    "et",
    "dolorum",
    "fuga",
    "et",
    "harum",
    "quidem",
    "rerum",
    "facilis",
    "est",
    "et",
    "expedita",
    "distinctio",
    "nam",
    "libero",
    "tempore",
    "cum",
    "soluta",
    "nobis",
    "est",
    "eligendi",
    "optio",
    "cumque",
    "nihil",
    "impedit",
    "quo",
    "porro",
    "quisquam",
    "est",
    "qui",
    "minus",
    "id",
    "quod",
    "maxime",
    "placeat",
    "facere",
    "possimus",
    "omnis",
    "voluptas",
    "assumenda",
    "est",
    "omnis",
    "dolor",
    "repellendus",
    "temporibus",
    "autem",
    "quibusdam",
    "et",
    "aut",
    "consequatur",
    "vel",
    "illum",
    "qui",
    "dolorem",
    "eum",
    "fugiat",
    "quo",
    "voluptas",
    "nulla",
    "pariatur",
    "at",
    "vero",
    "eos",
    "et",
    "accusamus",
    "officiis",
    "debitis",
    "aut",
    "rerum",
    "necessitatibus",
    "saepe",
    "eveniet",
    "ut",
    "et",
    "voluptates",
    "repudiandae",
    "sint",
    "et",
    "molestiae",
    "non",
    "recusandae",
    "itaque",
    "earum",
    "rerum",
    "hic",
    "tenetur",
    "a",
    "sapiente",
    "delectus",
    "ut",
    "aut",
    "reiciendis",
    "voluptatibus",
    "maiores",
    "doloribus",
    "asperiores",
    "repellat"
  ];
});

// node_modules/faker/lib/locales/tr/lorem/index.js
var require_lorem12 = __commonJS((exports, module) => {
  var lorem = {};
  module["exports"] = lorem;
  lorem.words = require_words12();
});

// node_modules/faker/lib/locales/tr/phone_number/area_code.js
var require_area_code2 = __commonJS((exports, module) => {
  module["exports"] = [
    "392",
    "510",
    "512",
    "522",
    "562",
    "564",
    "592",
    "594",
    "800",
    "811",
    "822",
    "850",
    "888",
    "898",
    "900",
    "322",
    "416",
    "272",
    "472",
    "382",
    "358",
    "312",
    "242",
    "478",
    "466",
    "256",
    "266",
    "378",
    "488",
    "458",
    "228",
    "426",
    "434",
    "374",
    "248",
    "224",
    "286",
    "376",
    "364",
    "258",
    "412",
    "380",
    "284",
    "424",
    "446",
    "442",
    "222",
    "342",
    "454",
    "456",
    "438",
    "326",
    "476",
    "246",
    "216",
    "212",
    "232",
    "344",
    "370",
    "338",
    "474",
    "366",
    "352",
    "318",
    "288",
    "386",
    "348",
    "262",
    "332",
    "274",
    "422",
    "236",
    "482",
    "324",
    "252",
    "436",
    "384",
    "388",
    "452",
    "328",
    "464",
    "264",
    "362",
    "484",
    "368",
    "346",
    "414",
    "486",
    "282",
    "356",
    "462",
    "428",
    "276",
    "432",
    "226",
    "354",
    "372"
  ];
});

// node_modules/faker/lib/locales/tr/phone_number/formats.js
var require_formats42 = __commonJS((exports, module) => {
  module["exports"] = [
    "+90-###-###-##-##",
    "+90-###-###-#-###"
  ];
});

// node_modules/faker/lib/locales/tr/phone_number/index.js
var require_phone_number31 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.area_code = require_area_code2();
  phone_number.formats = require_formats42();
});

// node_modules/faker/lib/locales/tr/cell_phone/formats.js
var require_formats41 = __commonJS((exports, module) => {
  module["exports"] = [
    "+90-53#-###-##-##",
    "+90-54#-###-##-##",
    "+90-55#-###-##-##",
    "+90-50#-###-##-##"
  ];
});

// node_modules/faker/lib/locales/tr/cell_phone/index.js
var require_cell_phone12 = __commonJS((exports, module) => {
  var cell_phone = {};
  module["exports"] = cell_phone;
  cell_phone.formats = require_formats41();
});

// node_modules/faker/lib/locales/tr/name/first_name.js
var require_first_name21 = __commonJS((exports, module) => {
  module["exports"] = [
    "Aba",
    "Abak",
    "Abaka",
    "Abakan",
    "Abakay",
    "Abar",
    "Abay",
    "Abı",
    "Abılay",
    "Abluç",
    "Abşar",
    "Açığ",
    "Açık",
    "Açuk",
    "Adalan",
    "Adaldı",
    "Adalmış",
    "Adar",
    "Adaş",
    "Adberilgen",
    "Adıgüzel",
    "Adık",
    "Adıkutlu",
    "Adıkutlutaş",
    "Adlı",
    "Adlıbeğ",
    "Adraman",
    "Adsız",
    "Afşar",
    "Afşın",
    "Ağabay",
    "Ağakağan",
    "Ağalak",
    "Ağlamış",
    "Ak",
    "Akaş",
    "Akata",
    "Akbaş",
    "Akbay",
    "Akboğa",
    "Akbörü",
    "Akbudak",
    "Akbuğra",
    "Akbulak",
    "Akça",
    "Akçakoca",
    "Akçora",
    "Akdemir",
    "Akdoğan",
    "Akı",
    "Akıbudak",
    "Akım",
    "Akın",
    "Akınçı",
    "Akkun",
    "Akkunlu",
    "Akkurt",
    "Akkuş",
    "Akpıra",
    "Aksungur",
    "Aktan",
    "Al",
    "Ala",
    "Alaban",
    "Alabörü",
    "Aladağ",
    "Aladoğan",
    "Alakurt",
    "Alayunt",
    "Alayuntlu",
    "Aldemir",
    "Aldıgerey",
    "Aldoğan",
    "Algu",
    "Alımga",
    "Alka",
    "Alkabölük",
    "Alkaevli",
    "Alkan",
    "Alkaşı",
    "Alkış",
    "Alp",
    "Alpagut",
    "Alpamış",
    "Alparsbeğ",
    "Alparslan",
    "Alpata",
    "Alpay",
    "Alpaya",
    "Alpaykağan",
    "Alpbamsı",
    "Alpbilge",
    "Alpdirek",
    "Alpdoğan",
    "Alper",
    "Alperen",
    "Alpertunga",
    "Alpgerey",
    "Alpış",
    "Alpilig",
    "Alpkara",
    "Alpkutlu",
    "Alpkülük",
    "Alpşalçı",
    "Alptegin",
    "Alptuğrul",
    "Alptunga",
    "Alpturan",
    "Alptutuk",
    "Alpuluğ",
    "Alpurungu",
    "Alpurungututuk",
    "Alpyörük",
    "Altan",
    "Altankağan",
    "Altankan",
    "Altay",
    "Altın",
    "Altınkağan",
    "Altınkan",
    "Altınoba",
    "Altıntamgan",
    "Altıntamgantarkan",
    "Altıntarkan",
    "Altıntay",
    "Altmışkara",
    "Altuga",
    "Amaç",
    "Amrak",
    "Amul",
    "Ançuk",
    "Andarıman",
    "Anıl",
    "Ant",
    "Apa",
    "Apak",
    "Apatarkan",
    "Aprançur",
    "Araboğa",
    "Arademir",
    "Aral",
    "Arbay",
    "Arbuz",
    "Arçuk",
    "Ardıç",
    "Argıl",
    "Argu",
    "Argun",
    "Arı",
    "Arıboğa",
    "Arık",
    "Arıkağan",
    "Arıkdoruk",
    "Arınç",
    "Arkın",
    "Arkış",
    "Armağan",
    "Arnaç",
    "Arpat",
    "Arsal",
    "Arsıl",
    "Arslan",
    "Arslanargun",
    "Arslanbörü",
    "Arslansungur",
    "Arslantegin",
    "Arslanyabgu",
    "Arşun",
    "Artıınal",
    "Artuk",
    "Artukaç",
    "Artut",
    "Aruk",
    "Asartegin",
    "Asığ",
    "Asrı",
    "Asuğ",
    "Aşan",
    "Aşanboğa",
    "Aşantuğrul",
    "Aşantudun",
    "Aşıkbulmuş",
    "Aşkın",
    "Aştaloğul",
    "Aşuk",
    "Ataç",
    "Atakağan",
    "Atakan",
    "Atalan",
    "Ataldı",
    "Atalmış",
    "Ataman",
    "Atasagun",
    "Atasu",
    "Atberilgen",
    "Atıgay",
    "Atıkutlu",
    "Atıkutlutaş",
    "Atıla",
    "Atılgan",
    "Atım",
    "Atımer",
    "Atış",
    "Atlı",
    "Atlıbeğ",
    "Atlıkağan",
    "Atmaca",
    "Atsız",
    "Atunçu",
    "Avar",
    "Avluç",
    "Avşar",
    "Ay",
    "Ayaçı",
    "Ayas",
    "Ayaş",
    "Ayaz",
    "Aybalta",
    "Ayban",
    "Aybars",
    "Aybeğ",
    "Aydarkağan",
    "Aydemir",
    "Aydın",
    "Aydınalp",
    "Aydoğan",
    "Aydoğdu",
    "Aydoğmuş",
    "Aygırak",
    "Ayıtmış",
    "Ayız",
    "Ayızdağ",
    "Aykağan",
    "Aykan",
    "Aykurt",
    "Ayluç",
    "Ayluçtarkan",
    "Ayma",
    "Ayruk",
    "Aysılığ",
    "Aytak",
    "Ayyıldız",
    "Azak",
    "Azban",
    "Azgan",
    "Azganaz",
    "Azıl",
    "Babır",
    "Babur",
    "Baçara",
    "Baççayman",
    "Baçman",
    "Badabul",
    "Badruk",
    "Badur",
    "Bağa",
    "Bağaalp",
    "Bağaışbara",
    "Bağan",
    "Bağaşatulu",
    "Bağatarkan",
    "Bağatengrikağan",
    "Bağatur",
    "Bağaturçigşi",
    "Bağaturgerey",
    "Bağaturipi",
    "Bağatursepi",
    "Bağış",
    "Bağtaş",
    "Bakağul",
    "Bakır",
    "Bakırsokum",
    "Baksı",
    "Bakşı",
    "Balaban",
    "Balaka",
    "Balakatay",
    "Balamır",
    "Balçar",
    "Baldu",
    "Balkık",
    "Balta",
    "Baltacı",
    "Baltar",
    "Baltır",
    "Baltur",
    "Bamsı",
    "Bangu",
    "Barak",
    "Baraktöre",
    "Baran",
    "Barbeğ",
    "Barboğa",
    "Barbol",
    "Barbulsun",
    "Barça",
    "Barçadoğdu",
    "Barçadoğmuş",
    "Barçadurdu",
    "Barçadurmuş",
    "Barçan",
    "Barçatoyun",
    "Bardıbay",
    "Bargan",
    "Barımtay",
    "Barın",
    "Barkan",
    "Barkdoğdu",
    "Barkdoğmuş",
    "Barkdurdu",
    "Barkdurmuş",
    "Barkın",
    "Barlas",
    "Barlıbay",
    "Barmaklak",
    "Barmaklı",
    "Barman",
    "Bars",
    "Barsbeğ",
    "Barsboğa",
    "Barsgan",
    "Barskan",
    "Barsurungu",
    "Bartu",
    "Basademir",
    "Basan",
    "Basanyalavaç",
    "Basar",
    "Basat",
    "Baskın",
    "Basmıl",
    "Bastı",
    "Bastuğrul",
    "Basu",
    "Basut",
    "Başak",
    "Başbuğ",
    "Başçı",
    "Başgan",
    "Başkırt",
    "Başkurt",
    "Baştar",
    "Batrak",
    "Batu",
    "Batuk",
    "Batur",
    "Baturalp",
    "Bay",
    "Bayançar",
    "Bayankağan",
    "Bayat",
    "Bayazıt",
    "Baybars",
    "Baybayık",
    "Baybiçen",
    "Bayboğa",
    "Baybora",
    "Baybüre",
    "Baydar",
    "Baydemir",
    "Baydur",
    "Bayık",
    "Bayınçur",
    "Bayındır",
    "Baykal",
    "Baykara",
    "Baykoca",
    "Baykuzu",
    "Baymünke",
    "Bayna",
    "Baynal",
    "Baypüre",
    "Bayrı",
    "Bayraç",
    "Bayrak",
    "Bayram",
    "Bayrın",
    "Bayruk",
    "Baysungur",
    "Baytara",
    "Baytaş",
    "Bayunçur",
    "Bayur",
    "Bayurku",
    "Bayutmuş",
    "Bayuttu",
    "Bazır",
    "Beçeapa",
    "Beçkem",
    "Beğ",
    "Beğarslan",
    "Beğbars",
    "Beğbilgeçikşin",
    "Beğboğa",
    "Beğçur",
    "Beğdemir",
    "Beğdilli",
    "Beğdurmuş",
    "Beğkulu",
    "Beğtaş",
    "Beğtegin",
    "Beğtüzün",
    "Begi",
    "Begil",
    "Begine",
    "Begitutuk",
    "Beglen",
    "Begni",
    "Bek",
    "Bekazıl",
    "Bekbekeç",
    "Bekeç",
    "Bekeçarslan",
    "Bekeçarslantegin",
    "Bekeçtegin",
    "Beker",
    "Beklemiş",
    "Bektür",
    "Belçir",
    "Belek",
    "Belgi",
    "Belgüc",
    "Beltir",
    "Bengi",
    "Bengü",
    "Benlidemir",
    "Berdibeğ",
    "Berendey",
    "Bergü",
    "Berginsenge",
    "Berk",
    "Berke",
    "Berkiş",
    "Berkyaruk",
    "Bermek",
    "Besentegin",
    "Betemir",
    "Beyizçi",
    "Beyrek",
    "Beyrem",
    "Bıçkı",
    "Bıçkıcı",
    "Bıdın",
    "Bıtaybıkı",
    "Bıtrı",
    "Biçek",
    "Bilge",
    "Bilgebayunçur",
    "Bilgebeğ",
    "Bilgeçikşin",
    "Bilgeışbara",
    "Bilgeışbaratamgan",
    "Bilgekağan",
    "Bilgekan",
    "Bilgekutluk",
    "Bilgekülüçur",
    "Bilgetaçam",
    "Bilgetamgacı",
    "Bilgetardu",
    "Bilgetegin",
    "Bilgetonyukuk",
    "Bilgez",
    "Bilgiç",
    "Bilgin",
    "Bilig",
    "Biligköngülsengün",
    "Bilik",
    "Binbeği",
    "Bindir",
    "Boğa",
    "Boğaç",
    "Boğaçuk",
    "Boldaz",
    "Bolmuş",
    "Bolsun",
    "Bolun",
    "Boncuk",
    "Bongul",
    "Bongulboğa",
    "Bora",
    "Boran",
    "Borçul",
    "Borlukçu",
    "Bornak",
    "Boyan",
    "Boyankulu",
    "Boylabağa",
    "Boylabağatarkan",
    "Boylakutlutarkan",
    "Bozan",
    "Bozbörü",
    "Bozdoğan",
    "Bozkurt",
    "Bozkuş",
    "Bozok",
    "Bögde",
    "Böge",
    "Bögü",
    "Bökde",
    "Bökde",
    "Böke",
    "Bölen",
    "Bölükbaşı",
    "Bönek",
    "Bönge",
    "Börü",
    "Börübars",
    "Börüsengün",
    "Börteçine",
    "Buçan",
    "Buçur",
    "Budağ",
    "Budak",
    "Budunlu",
    "Buğday",
    "Buğra",
    "Buğrakarakağan",
    "Bukak",
    "Bukaktutuk",
    "Bulaçapan",
    "Bulak",
    "Bulan",
    "Buldur",
    "Bulgak",
    "Bulmaz",
    "Bulmuş",
    "Buluç",
    "Buluğ",
    "Buluk",
    "Buluş",
    "Bulut",
    "Bumın",
    "Bunsuz",
    "Burçak",
    "Burguçan",
    "Burkay",
    "Burslan",
    "Burulday",
    "Burulgu",
    "Burunduk",
    "Buşulgan",
    "Butak",
    "Butuk",
    "Buyan",
    "Buyançuk",
    "Buyandemir",
    "Buyankara",
    "Buyat",
    "Buyraç",
    "Buyruç",
    "Buyruk",
    "Buzaç",
    "Buzaçtutuk",
    "Büdüs",
    "Büdüstudun",
    "Bügü",
    "Bügdüz",
    "Bügdüzemen",
    "Büge",
    "Büğübilge",
    "Bükdüz",
    "Büke",
    "Bükebuyraç",
    "Bükebuyruç",
    "Bükey",
    "Büktegin",
    "Büküşboğa",
    "Bümen",
    "Bünül",
    "Büre",
    "Bürgüt",
    "Bürkek",
    "Bürküt",
    "Bürlük",
    "Cebe",
    "Ceyhun",
    "Cılasun",
    "Çaba",
    "Çabdar",
    "Çablı",
    "Çabuş",
    "Çağan",
    "Çağatay",
    "Çağlar",
    "Çağlayan",
    "Çağrı",
    "Çağrıbeğ",
    "Çağrıtegin",
    "Çağru",
    "Çalapkulu",
    "Çankız",
    "Çemen",
    "Çemgen",
    "Çeykün",
    "Çıngır",
    "Çiçek",
    "Çiçem",
    "Çiğdem",
    "Çilenti",
    "Çimen",
    "Çobulmak",
    "Çocukbörü",
    "Çokramayul",
    "Çolman",
    "Çolpan",
    "Çölü",
    "Damla",
    "Deniz",
    "Dilek",
    "Diri",
    "Dizik",
    "Duru",
    "Dururbunsuz",
    "Duygu",
    "Ebin",
    "Ebkızı",
    "Ebren",
    "Edil",
    "Ediz",
    "Egemen",
    "Eğrim",
    "Ekeç",
    "Ekim",
    "Ekin",
    "Elkin",
    "Elti",
    "Engin",
    "Erdem",
    "Erdeni",
    "Erdeniözük",
    "Erdenikatun",
    "Erentüz",
    "Ergene",
    "Ergenekatun",
    "Erinç",
    "Erke",
    "Ermen",
    "Erten",
    "Ertenözük",
    "Esen",
    "Esenbike",
    "Eser",
    "Esin",
    "Etil",
    "Evin",
    "Eyiz",
    "Gelin",
    "Gelincik",
    "Gökbörü",
    "Gökçe",
    "Gökçegöl",
    "Gökçen",
    "Gökçiçek",
    "Gökşin",
    "Gönül",
    "Görün",
    "Gözde",
    "Gülegen",
    "Gülemen",
    "Güler",
    "Gülümser",
    "Gümüş",
    "Gün",
    "Günay",
    "Günçiçek",
    "Gündoğdu",
    "Gündoğmuş",
    "Güneş",
    "Günyaruk",
    "Gürbüz",
    "Güvercin",
    "Güzey",
    "Işığ",
    "Işık",
    "Işıl",
    "Işılay",
    "Ila",
    "Ilaçın",
    "Ilgın",
    "Inanç",
    "Irmak",
    "Isığ",
    "Isık",
    "Iyık",
    "Iyıktağ",
    "İdil",
    "İkeme",
    "İkiçitoyun",
    "İlbilge",
    "İldike",
    "İlgegü",
    "İmrem",
    "İnci",
    "İnç",
    "İrinç",
    "İrinçköl",
    "İrtiş",
    "İtil",
    "Kancı",
    "Kançı",
    "Kapgar",
    "Karaca",
    "Karaça",
    "Karak",
    "Kargılaç",
    "Karlıgaç",
    "Katun",
    "Katunkız",
    "Kayacık",
    "Kayaçık",
    "Kayça",
    "Kaynak",
    "Kazanç",
    "Kazkatun",
    "Kekik",
    "Keklik",
    "Kepez",
    "Kesme",
    "Keyken",
    "Kezlik",
    "Kımız",
    "Kımızın",
    "Kımızalma",
    "Kımızalmıla",
    "Kırçiçek",
    "Kırgavul",
    "Kırlangıç",
    "Kıvanç",
    "Kıvılcım",
    "Kızdurmuş",
    "Kızılalma"
  ];
});

// node_modules/faker/lib/locales/tr/name/last_name.js
var require_last_name22 = __commonJS((exports, module) => {
  module["exports"] = [
    "Abacı",
    "Abadan",
    "Aclan",
    "Adal",
    "Adan",
    "Adıvar",
    "Akal",
    "Akan",
    "Akar ",
    "Akay",
    "Akaydın",
    "Akbulut",
    "Akgül",
    "Akışık",
    "Akman",
    "Akyürek",
    "Akyüz",
    "Akşit",
    "Alnıaçık",
    "Alpuğan",
    "Alyanak",
    "Arıcan",
    "Arslanoğlu",
    "Atakol",
    "Atan",
    "Avan",
    "Ayaydın",
    "Aybar",
    "Aydan",
    "Aykaç",
    "Ayverdi",
    "Ağaoğlu",
    "Aşıkoğlu",
    "Babacan",
    "Babaoğlu",
    "Bademci",
    "Bakırcıoğlu",
    "Balaban",
    "Balcı",
    "Barbarosoğlu",
    "Baturalp",
    "Baykam",
    "Başoğlu",
    "Berberoğlu",
    "Beşerler",
    "Beşok",
    "Biçer",
    "Bolatlı",
    "Dalkıran",
    "Dağdaş",
    "Dağlaroğlu",
    "Demirbaş",
    "Demirel",
    "Denkel",
    "Dizdar ",
    "Doğan ",
    "Durak ",
    "Durmaz",
    "Duygulu",
    "Düşenkalkar",
    "Egeli",
    "Ekici",
    "Ekşioğlu",
    "Eliçin",
    "Elmastaşoğlu",
    "Elçiboğa",
    "Erbay",
    "Erberk",
    "Erbulak",
    "Erdoğan",
    "Erez",
    "Erginsoy",
    "Erkekli",
    "Eronat",
    "Ertepınar",
    "Ertürk",
    "Erçetin",
    "Evliyaoğlu",
    "Gönültaş",
    "Gümüşpala",
    "Günday",
    "Gürmen",
    "Hakyemez",
    "Hamzaoğlu",
    "Ilıcalı",
    "Kahveci",
    "Kaplangı",
    "Karabulut",
    "Karaböcek",
    "Karadaş",
    "Karaduman",
    "Karaer",
    "Kasapoğlu",
    "Kavaklıoğlu",
    "Kaya ",
    "Keseroğlu",
    "Keçeci",
    "Kılıççı",
    "Kıraç ",
    "Kocabıyık",
    "Korol",
    "Koyuncu",
    "Koç",
    "Koçoğlu",
    "Koçyiğit",
    "Kuday",
    "Kulaksızoğlu",
    "Kumcuoğlu",
    "Kunt",
    "Kunter",
    "Kurutluoğlu",
    "Kutlay",
    "Kuzucu",
    "Körmükçü",
    "Köybaşı",
    "Köylüoğlu",
    "Küçükler",
    "Limoncuoğlu",
    "Mayhoş",
    "Menemencioğlu",
    "Mertoğlu",
    "Nalbantoğlu",
    "Nebioğlu",
    "Numanoğlu",
    "Okumuş",
    "Okur",
    "Oraloğlu",
    "Orbay",
    "Ozansoy",
    "Paksüt",
    "Pekkan",
    "Pektemek",
    "Polat",
    "Poyrazoğlu",
    "Poçan",
    "Sadıklar",
    "Samancı",
    "Sandalcı",
    "Sarıoğlu",
    "Saygıner",
    "Sepetçi",
    "Sezek",
    "Sinanoğlu",
    "Solmaz",
    "Sözeri",
    "Süleymanoğlu",
    "Tahincioğlu",
    "Tanrıkulu",
    "Tazegül",
    "Taşlı",
    "Taşçı",
    "Tekand",
    "Tekelioğlu",
    "Tokatlıoğlu",
    "Tokgöz",
    "Topaloğlu",
    "Topçuoğlu",
    "Toraman",
    "Tunaboylu",
    "Tunçeri",
    "Tuğlu",
    "Tuğluk",
    "Türkdoğan",
    "Türkyılmaz",
    "Tütüncü",
    "Tüzün",
    "Uca",
    "Uluhan",
    "Velioğlu",
    "Yalçın",
    "Yazıcı",
    "Yetkiner",
    "Yeşilkaya",
    "Yıldırım ",
    "Yıldızoğlu",
    "Yılmazer",
    "Yorulmaz",
    "Çamdalı",
    "Çapanoğlu",
    "Çatalbaş",
    "Çağıran",
    "Çetin",
    "Çetiner",
    "Çevik",
    "Çörekçi",
    "Önür",
    "Örge",
    "Öymen",
    "Özberk",
    "Özbey",
    "Özbir",
    "Özdenak",
    "Özdoğan",
    "Özgörkey",
    "Özkara",
    "Özkök ",
    "Öztonga",
    "Öztuna"
  ];
});

// node_modules/faker/lib/locales/tr/name/prefix.js
var require_prefix26 = __commonJS((exports, module) => {
  module["exports"] = [
    "Bay",
    "Bayan",
    "Dr.",
    "Prof. Dr."
  ];
});

// node_modules/faker/lib/locales/tr/name/name.js
var require_name71 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{prefix} #{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name}"
  ];
});

// node_modules/faker/lib/locales/tr/name/index.js
var require_name70 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name = require_first_name21();
  name2.last_name = require_last_name22();
  name2.prefix = require_prefix26();
  name2.name = require_name71();
});

// node_modules/faker/lib/locales/tr/index.js
var require_tr = __commonJS((exports, module) => {
  var tr = {};
  module["exports"] = tr;
  tr.title = "Turkish";
  tr.address = require_address32();
  tr.internet = require_internet31();
  tr.lorem = require_lorem12();
  tr.phone_number = require_phone_number31();
  tr.cell_phone = require_cell_phone12();
  tr.name = require_name70();
});

// node_modules/faker/lib/locales/uk/address/country.js
var require_country17 = __commonJS((exports, module) => {
  module["exports"] = [
    "Австралія",
    "Австрія",
    "Азербайджан",
    "Албанія",
    "Алжир",
    "Ангола",
    "Андорра",
    "Антигуа і Барбуда",
    "Аргентина",
    "Афганістан",
    "Багамські Острови",
    "Бангладеш",
    "Барбадос",
    "Бахрейн",
    "Беліз",
    "Бельгія",
    "Бенін",
    "Білорусь",
    "Болгарія",
    "Болівія",
    "Боснія і Герцеговина",
    "Ботсвана",
    "Бразилія",
    "Бруней",
    "Буркіна-Фасо",
    "Бурунді",
    "Бутан",
    "В’єтнам",
    "Вануату",
    "Ватикан",
    "Велика Британія",
    "Венесуела",
    "Вірменія",
    "Габон",
    "Гаїті",
    "Гайана",
    "Гамбія",
    "Гана",
    "Гватемала",
    "Гвінея",
    "Гвінея-Бісау",
    "Гондурас",
    "Гренада",
    "Греція",
    "Грузія",
    "Данія",
    "Демократична Республіка Конго",
    "Джибуті",
    "Домініка",
    "Домініканська Республіка",
    "Еквадор",
    "Екваторіальна Гвінея",
    "Еритрея",
    "Естонія",
    "Ефіопія",
    "Єгипет",
    "Ємен",
    "Замбія",
    "Зімбабве",
    "Ізраїль",
    "Індія",
    "Індонезія",
    "Ірак",
    "Іран",
    "Ірландія",
    "Ісландія",
    "Іспанія",
    "Італія",
    "Йорданія",
    "Кабо-Верде",
    "Казахстан",
    "Камбоджа",
    "Камерун",
    "Канада",
    "Катар",
    "Кенія",
    "Киргизстан",
    "Китай",
    "Кіпр",
    "Кірибаті",
    "Колумбія",
    "Коморські Острови",
    "Конго",
    "Коста-Рика",
    "Кот-д’Івуар",
    "Куба",
    "Кувейт",
    "Лаос",
    "Латвія",
    "Лесото",
    "Литва",
    "Ліберія",
    "Ліван",
    "Лівія",
    "Ліхтенштейн",
    "Люксембург",
    "Маврикій",
    "Мавританія",
    "Мадаґаскар",
    "Македонія",
    "Малаві",
    "Малайзія",
    "Малі",
    "Мальдіви",
    "Мальта",
    "Марокко",
    "Маршаллові Острови",
    "Мексика",
    "Мозамбік",
    "Молдова",
    "Монако",
    "Монголія",
    "Намібія",
    "Науру",
    "Непал",
    "Нігер",
    "Нігерія",
    "Нідерланди",
    "Нікарагуа",
    "Німеччина",
    "Нова Зеландія",
    "Норвегія",
    "Об’єднані Арабські Емірати",
    "Оман",
    "Пакистан",
    "Палау",
    "Панама",
    "Папуа-Нова Гвінея",
    "Парагвай",
    "Перу",
    "Південна Корея",
    "Південний Судан",
    "Південно-Африканська Республіка",
    "Північна Корея",
    "Польща",
    "Португалія",
    "Російська Федерація",
    "Руанда",
    "Румунія",
    "Сальвадор",
    "Самоа",
    "Сан-Марино",
    "Сан-Томе і Принсіпі",
    "Саудівська Аравія",
    "Свазіленд",
    "Сейшельські Острови",
    "Сенеґал",
    "Сент-Вінсент і Гренадини",
    "Сент-Кітс і Невіс",
    "Сент-Люсія",
    "Сербія",
    "Сирія",
    "Сінгапур",
    "Словаччина",
    "Словенія",
    "Соломонові Острови",
    "Сомалі",
    "Судан",
    "Суринам",
    "Східний Тимор",
    "США",
    "Сьєрра-Леоне",
    "Таджикистан",
    "Таїланд",
    "Танзанія",
    "Того",
    "Тонга",
    "Тринідад і Тобаго",
    "Тувалу",
    "Туніс",
    "Туреччина",
    "Туркменістан",
    "Уганда",
    "Угорщина",
    "Узбекистан",
    "Україна",
    "Уругвай",
    "Федеративні Штати Мікронезії",
    "Фіджі",
    "Філіппіни",
    "Фінляндія",
    "Франція",
    "Хорватія",
    "Центральноафриканська Республіка",
    "Чад",
    "Чехія",
    "Чилі",
    "Чорногорія",
    "Швейцарія",
    "Швеція",
    "Шрі-Ланка",
    "Ямайка",
    "Японія"
  ];
});

// node_modules/faker/lib/locales/uk/address/building_number.js
var require_building_number22 = __commonJS((exports, module) => {
  module["exports"] = [
    "#",
    "##",
    "###"
  ];
});

// node_modules/faker/lib/locales/uk/address/street_prefix.js
var require_street_prefix6 = __commonJS((exports, module) => {
  module["exports"] = [
    "вул.",
    "вулиця",
    "пр.",
    "проспект",
    "пл.",
    "площа",
    "пров.",
    "провулок"
  ];
});

// node_modules/faker/lib/locales/uk/address/street_suffix.js
var require_street_suffix16 = __commonJS((exports, module) => {
  module["exports"] = [
    "майдан"
  ];
});

// node_modules/faker/lib/locales/uk/address/secondary_address.js
var require_secondary_address18 = __commonJS((exports, module) => {
  module["exports"] = [
    "кв. ###"
  ];
});

// node_modules/faker/lib/locales/uk/address/postcode.js
var require_postcode30 = __commonJS((exports, module) => {
  module["exports"] = [
    "#####"
  ];
});

// node_modules/faker/lib/locales/uk/address/state.js
var require_state26 = __commonJS((exports, module) => {
  module["exports"] = [
    "АР Крим",
    "Вінницька область",
    "Волинська область",
    "Дніпропетровська область",
    "Донецька область",
    "Житомирська область",
    "Закарпатська область",
    "Запорізька область",
    "Івано-Франківська область",
    "Київська область",
    "Кіровоградська область",
    "Луганська область",
    "Львівська область",
    "Миколаївська область",
    "Одеська область",
    "Полтавська область",
    "Рівненська область",
    "Сумська область",
    "Тернопільська область",
    "Харківська область",
    "Херсонська область",
    "Хмельницька область",
    "Черкаська область",
    "Чернівецька область",
    "Чернігівська область",
    "Київ",
    "Севастополь"
  ];
});

// node_modules/faker/lib/locales/uk/address/street_title.js
var require_street_title4 = __commonJS((exports, module) => {
  module["exports"] = [
    "Зелена",
    "Молодіжна",
    "Городоцька",
    "Стрийська",
    "Вузька",
    "Нижанківського",
    "Староміська",
    "Ліста",
    "Вічева",
    "Брюховичів",
    "Винників",
    "Рудного",
    "Коліївщини"
  ];
});

// node_modules/faker/lib/locales/uk/address/city_name.js
var require_city_name11 = __commonJS((exports, module) => {
  module["exports"] = [
    "Алчевськ",
    "Артемівськ",
    "Бердичів",
    "Бердянськ",
    "Біла Церква",
    "Бровари",
    "Вінниця",
    "Горлівка",
    "Дніпродзержинськ",
    "Дніпропетровськ",
    "Донецьк",
    "Євпаторія",
    "Єнакієве",
    "Житомир",
    "Запоріжжя",
    "Івано-Франківськ",
    "Ізмаїл",
    "Кам’янець-Подільський",
    "Керч",
    "Київ",
    "Кіровоград",
    "Конотоп",
    "Краматорськ",
    "Красний Луч",
    "Кременчук",
    "Кривий Ріг",
    "Лисичанськ",
    "Луганськ",
    "Луцьк",
    "Львів",
    "Макіївка",
    "Маріуполь",
    "Мелітополь",
    "Миколаїв",
    "Мукачеве",
    "Нікополь",
    "Одеса",
    "Олександрія",
    "Павлоград",
    "Полтава",
    "Рівне",
    "Севастополь",
    "Сєвєродонецьк",
    "Сімферополь",
    "Слов’янськ",
    "Суми",
    "Тернопіль",
    "Ужгород",
    "Умань",
    "Харків",
    "Херсон",
    "Хмельницький",
    "Черкаси",
    "Чернівці",
    "Чернігів",
    "Шостка",
    "Ялта"
  ];
});

// node_modules/faker/lib/locales/uk/address/city.js
var require_city23 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{city_name}",
    "#{city_prefix} #{Name.male_first_name}"
  ];
});

// node_modules/faker/lib/locales/uk/address/city_prefix.js
var require_city_prefix13 = __commonJS((exports, module) => {
  module["exports"] = [
    "Південний",
    "Північний",
    "Східний",
    "Західний"
  ];
});

// node_modules/faker/lib/locales/uk/address/city_suffix.js
var require_city_suffix13 = __commonJS((exports, module) => {
  module["exports"] = [
    "град"
  ];
});

// node_modules/faker/lib/locales/uk/address/street_name.js
var require_street_name22 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_prefix} #{Address.street_title}",
    "#{Address.street_title} #{street_suffix}"
  ];
});

// node_modules/faker/lib/locales/uk/address/street_address.js
var require_street_address19 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_name}, #{building_number}"
  ];
});

// node_modules/faker/lib/locales/uk/address/default_country.js
var require_default_country30 = __commonJS((exports, module) => {
  module["exports"] = [
    "Україна"
  ];
});

// node_modules/faker/lib/locales/uk/address/index.js
var require_address33 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.country = require_country17();
  address.building_number = require_building_number22();
  address.street_prefix = require_street_prefix6();
  address.street_suffix = require_street_suffix16();
  address.secondary_address = require_secondary_address18();
  address.postcode = require_postcode30();
  address.state = require_state26();
  address.street_title = require_street_title4();
  address.city_name = require_city_name11();
  address.city = require_city23();
  address.city_prefix = require_city_prefix13();
  address.city_suffix = require_city_suffix13();
  address.street_name = require_street_name22();
  address.street_address = require_street_address19();
  address.default_country = require_default_country30();
});

// node_modules/faker/lib/locales/uk/company/prefix.js
var require_prefix27 = __commonJS((exports, module) => {
  module["exports"] = [
    "ТОВ",
    "ПАТ",
    "ПрАТ",
    "ТДВ",
    "КТ",
    "ПТ",
    "ДП",
    "ФОП"
  ];
});

// node_modules/faker/lib/locales/uk/company/suffix.js
var require_suffix38 = __commonJS((exports, module) => {
  module["exports"] = [
    "Постач",
    "Торг",
    "Пром",
    "Трейд",
    "Збут"
  ];
});

// node_modules/faker/lib/locales/uk/company/name.js
var require_name72 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{prefix} #{Name.female_first_name}",
    "#{prefix} #{Name.male_first_name}",
    "#{prefix} #{Name.male_last_name}",
    "#{prefix} #{suffix}#{suffix}",
    "#{prefix} #{suffix}#{suffix}#{suffix}",
    "#{prefix} #{Address.city_name}#{suffix}",
    "#{prefix} #{Address.city_name}#{suffix}#{suffix}",
    "#{prefix} #{Address.city_name}#{suffix}#{suffix}#{suffix}"
  ];
});

// node_modules/faker/lib/locales/uk/company/index.js
var require_company26 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.prefix = require_prefix27();
  company.suffix = require_suffix38();
  company.name = require_name72();
});

// node_modules/faker/lib/locales/uk/internet/free_email.js
var require_free_email22 = __commonJS((exports, module) => {
  module["exports"] = [
    "ukr.net",
    "ex.ua",
    "e-mail.ua",
    "i.ua",
    "meta.ua",
    "yandex.ua",
    "gmail.com"
  ];
});

// node_modules/faker/lib/locales/uk/internet/domain_suffix.js
var require_domain_suffix31 = __commonJS((exports, module) => {
  module["exports"] = [
    "cherkassy.ua",
    "cherkasy.ua",
    "ck.ua",
    "cn.ua",
    "com.ua",
    "crimea.ua",
    "cv.ua",
    "dn.ua",
    "dnepropetrovsk.ua",
    "dnipropetrovsk.ua",
    "donetsk.ua",
    "dp.ua",
    "if.ua",
    "in.ua",
    "ivano-frankivsk.ua",
    "kh.ua",
    "kharkiv.ua",
    "kharkov.ua",
    "kherson.ua",
    "khmelnitskiy.ua",
    "kiev.ua",
    "kirovograd.ua",
    "km.ua",
    "kr.ua",
    "ks.ua",
    "lg.ua",
    "lt.ua",
    "lugansk.ua",
    "lutsk.ua",
    "lutsk.net",
    "lviv.ua",
    "mk.ua",
    "net.ua",
    "nikolaev.ua",
    "od.ua",
    "odessa.ua",
    "org.ua",
    "pl.ua",
    "pl.ua",
    "poltava.ua",
    "rovno.ua",
    "rv.ua",
    "sebastopol.ua",
    "sm.ua",
    "sumy.ua",
    "te.ua",
    "ternopil.ua",
    "ua",
    "uz.ua",
    "uzhgorod.ua",
    "vinnica.ua",
    "vn.ua",
    "volyn.net",
    "volyn.ua",
    "yalta.ua",
    "zaporizhzhe.ua",
    "zhitomir.ua",
    "zp.ua",
    "zt.ua",
    "укр"
  ];
});

// node_modules/faker/lib/locales/uk/internet/index.js
var require_internet32 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.free_email = require_free_email22();
  internet.domain_suffix = require_domain_suffix31();
});

// node_modules/faker/lib/locales/uk/name/male_first_name.js
var require_male_first_name6 = __commonJS((exports, module) => {
  module["exports"] = [
    "Августин",
    "Аврелій",
    "Адам",
    "Адріян",
    "Азарій",
    "Алевтин",
    "Альберт",
    "Анастас",
    "Анастасій",
    "Анатолій",
    "Андрій",
    "Антін",
    "Антон",
    "Антоній",
    "Аркадій",
    "Арсен",
    "Арсеній",
    "Артем",
    "Архип",
    "Аскольд",
    "Афанасій",
    "Біломир",
    "Білослав",
    "Богдан",
    "Божемир",
    "Божен",
    "Болеслав",
    "Боримир",
    "Боримисл",
    "Борис",
    "Борислав",
    "Братимир",
    "Братислав",
    "Братомил",
    "Братослав",
    "Брячислав",
    "Будимир",
    "Буйтур",
    "Буревіст",
    "В’ячеслав",
    "Вадим",
    "Валентин",
    "Валерій",
    "Василь",
    "Велемир",
    "Віктор",
    "Віталій",
    "Влад",
    "Владислав",
    "Володимир",
    "Володислав",
    "Всевлад",
    "Всеволод",
    "Всеслав",
    "Гаврило",
    "Гарнослав",
    "Геннадій",
    "Георгій",
    "Герасим",
    "Гліб",
    "Гнат",
    "Гордій",
    "Горимир",
    "Горислав",
    "Градимир",
    "Григорій",
    "Далемир",
    "Данило",
    "Дарій",
    "Даромир",
    "Денис",
    "Дмитро",
    "Добромир",
    "Добромисл",
    "Доброслав",
    "Євген",
    "Єремій",
    "Захар",
    "Захарій",
    "Зборислав",
    "Звенигор",
    "Звенимир",
    "Звенислав",
    "Земислав",
    "Зеновій",
    "Зиновій",
    "Злат",
    "Златомир",
    "Зоремир",
    "Зореслав",
    "Зорян",
    "Іван",
    "Ігор",
    "Ізяслав",
    "Ілля",
    "Кий",
    "Корнелій",
    "Корнилій",
    "Корнило",
    "Корній",
    "Костянтин",
    "Кузьма",
    "Лаврентій",
    "Лаврін",
    "Лад",
    "Ладислав",
    "Ладо",
    "Ладомир",
    "Левко",
    "Листвич",
    "Лук’ян",
    "Любодар",
    "Любозар",
    "Любомир",
    "Макар",
    "Максим",
    "Мар’ян",
    "Маркіян",
    "Марко",
    "Матвій",
    "Мечислав",
    "Микита",
    "Микола",
    "Мирон",
    "Мирослав",
    "Михайло",
    "Мстислав",
    "Мусій",
    "Назар",
    "Назарій",
    "Натан",
    "Немир",
    "Нестор",
    "Олег",
    "Олександр",
    "Олексій",
    "Олелько",
    "Олесь",
    "Омелян",
    "Орест",
    "Орхип",
    "Остап",
    "Охрім",
    "Павло",
    "Панас",
    "Пантелеймон",
    "Петро",
    "Пилип",
    "Подолян",
    "Потап",
    "Радим",
    "Радимир",
    "Ратибор",
    "Ратимир",
    "Родіон",
    "Родослав",
    "Роксолан",
    "Роман",
    "Ростислав",
    "Руслан",
    "Святополк",
    "Святослав",
    "Семибор",
    "Сергій",
    "Синьоок",
    "Славолюб",
    "Славомир",
    "Славута",
    "Сніжан",
    "Сологуб",
    "Станіслав",
    "Степан",
    "Стефаній",
    "Стожар",
    "Тарас",
    "Тиміш",
    "Тимофій",
    "Тихон",
    "Тур",
    "Устим",
    "Хвалимир",
    "Хорив",
    "Чорнота",
    "Щастислав",
    "Щек",
    "Юліан",
    "Юрій",
    "Юхим",
    "Ян",
    "Ярема",
    "Яровид",
    "Яромил",
    "Яромир",
    "Ярополк",
    "Ярослав"
  ];
});

// node_modules/faker/lib/locales/uk/name/male_middle_name.js
var require_male_middle_name2 = __commonJS((exports, module) => {
  module["exports"] = [
    "Адамович",
    "Азарович",
    "Алевтинович",
    "Альбертович",
    "Анастасович",
    "Анатолійович",
    "Андрійович",
    "Антонович",
    "Аркадійович",
    "Арсенійович",
    "Арсенович",
    "Артемович",
    "Архипович",
    "Аскольдович",
    "Афанасійович",
    "Білославович",
    "Богданович",
    "Божемирович",
    "Боженович",
    "Болеславович",
    "Боримирович",
    "Борисович",
    "Бориславович",
    "Братиславович",
    "В’ячеславович",
    "Вадимович",
    "Валентинович",
    "Валерійович",
    "Васильович",
    "Вікторович",
    "Віталійович",
    "Владиславович",
    "Володимирович",
    "Всеволодович",
    "Всеславович",
    "Гаврилович",
    "Герасимович",
    "Георгійович",
    "Гнатович",
    "Гордійович",
    "Григорійович",
    "Данилович",
    "Даромирович",
    "Денисович",
    "Дмитрович",
    "Добромирович",
    "Доброславович",
    "Євгенович",
    "Захарович",
    "Захарійович",
    "Збориславович",
    "Звенимирович",
    "Звениславович",
    "Зеновійович",
    "Зиновійович",
    "Златомирович",
    "Зореславович",
    "Іванович",
    "Ігорович",
    "Ізяславович",
    "Корнелійович",
    "Корнилович",
    "Корнійович",
    "Костянтинович",
    "Лаврентійович",
    "Любомирович",
    "Макарович",
    "Максимович",
    "Маркович",
    "Маркіянович",
    "Матвійович",
    "Мечиславович",
    "Микитович",
    "Миколайович",
    "Миронович",
    "Мирославович",
    "Михайлович",
    "Мстиславович",
    "Назарович",
    "Назарійович",
    "Натанович",
    "Немирович",
    "Несторович",
    "Олегович",
    "Олександрович",
    "Олексійович",
    "Олелькович",
    "Омелянович",
    "Орестович",
    "Орхипович",
    "Остапович",
    "Охрімович",
    "Павлович",
    "Панасович",
    "Пантелеймонович",
    "Петрович",
    "Пилипович",
    "Радимирович",
    "Радимович",
    "Родіонович",
    "Романович",
    "Ростиславович",
    "Русланович",
    "Святославович",
    "Сергійович",
    "Славутович",
    "Станіславович",
    "Степанович",
    "Стефанович",
    "Тарасович",
    "Тимофійович",
    "Тихонович",
    "Устимович",
    "Юрійович",
    "Юхимович",
    "Ярославович"
  ];
});

// node_modules/faker/lib/locales/uk/name/male_last_name.js
var require_male_last_name6 = __commonJS((exports, module) => {
  module["exports"] = [
    "Андрухович",
    "Бабух",
    "Балабан",
    "Балабух",
    "Балакун",
    "Балицький",
    "Бамбула",
    "Бандера",
    "Барановський",
    "Бачей",
    "Башук",
    "Бердник",
    "Білич",
    "Бондаренко",
    "Борецький",
    "Боровський",
    "Борочко",
    "Боярчук",
    "Брицький",
    "Бурмило",
    "Бутько",
    "Василин",
    "Василишин",
    "Васильківський",
    "Вергун",
    "Вередун",
    "Верещук",
    "Витребенько",
    "Вітряк",
    "Волощук",
    "Гайдук",
    "Гайовий",
    "Гайчук",
    "Галаєнко",
    "Галатей",
    "Галаціон",
    "Гаман",
    "Гамула",
    "Ганич",
    "Гарай",
    "Гарун",
    "Гладківський",
    "Гладух",
    "Глинський",
    "Гнатишин",
    "Гойко",
    "Головець",
    "Горбач",
    "Гордійчук",
    "Горовий",
    "Городоцький",
    "Гречко",
    "Григоришин",
    "Гриневецький",
    "Гриневський",
    "Гришко",
    "Громико",
    "Данилишин",
    "Данилко",
    "Демків",
    "Демчишин",
    "Дзюб’як",
    "Дзюба",
    "Дідух",
    "Дмитришин",
    "Дмитрук",
    "Довгалевський",
    "Дурдинець",
    "Євенко",
    "Євпак",
    "Ємець",
    "Єрмак",
    "Забіла",
    "Зварич",
    "Зінкевич",
    "Зленко",
    "Іванишин",
    "Іванів",
    "Іванців",
    "Калач",
    "Кандиба",
    "Карпух",
    "Каськів",
    "Кивач",
    "Коваленко",
    "Ковальський",
    "Коломієць",
    "Коман",
    "Компанієць",
    "Кононець",
    "Кордун",
    "Корецький",
    "Корнїйчук",
    "Коров’як",
    "Коцюбинський",
    "Кулинич",
    "Кульчицький",
    "Лагойда",
    "Лазірко",
    "Лановий",
    "Латаний",
    "Латанський",
    "Лахман",
    "Левадовський",
    "Ликович",
    "Линдик",
    "Ліхно",
    "Лобачевський",
    "Ломовий",
    "Луговий",
    "Луцький",
    "Луцьків",
    "Лученко",
    "Лучко",
    "Лютий",
    "Лящук",
    "Магера",
    "Мазайло",
    "Мазило",
    "Мазун",
    "Майборода",
    "Майстренко",
    "Маковецький",
    "Малкович",
    "Мамій",
    "Маринич",
    "Марієвський",
    "Марків",
    "Махно",
    "Миклашевський",
    "Миклухо",
    "Милославський",
    "Михайлюк",
    "Міняйло",
    "Могилевський",
    "Москаль",
    "Москалюк",
    "Мотрієнко",
    "Негода",
    "Ногачевський",
    "Опенько",
    "Осадко",
    "Павленко",
    "Павлишин",
    "Павлів",
    "Пагутяк",
    "Паламарчук",
    "Палій",
    "Паращук",
    "Пасічник",
    "Пендик",
    "Петик",
    "Петлюра",
    "Петренко",
    "Петрин",
    "Петришин",
    "Петрів",
    "Плаксій",
    "Погиба",
    "Поліщук",
    "Пономарів",
    "Поривай",
    "Поривайло",
    "Потебенько",
    "Потоцький",
    "Пригода",
    "Приймак",
    "Притула",
    "Прядун",
    "Розпутній",
    "Романишин",
    "Романів",
    "Ромей",
    "Роменець",
    "Ромочко",
    "Савицький",
    "Саєнко",
    "Свидригайло",
    "Семеночко",
    "Семещук",
    "Сердюк",
    "Силецький",
    "Сідлецький",
    "Сідляк",
    "Сірко",
    "Скиба",
    "Скоропадський",
    "Слободян",
    "Сосюра",
    "Сплюх",
    "Спотикач",
    "Стахів",
    "Степанець",
    "Стецьків",
    "Стигайло",
    "Сторожук",
    "Сторчак",
    "Стоян",
    "Сучак",
    "Сушко",
    "Тарасюк",
    "Тиндарей",
    "Ткаченко",
    "Третяк",
    "Троян",
    "Трублаєвський",
    "Трясило",
    "Трясун",
    "Уманець",
    "Унич",
    "Усич",
    "Федоришин",
    "Хитрово",
    "Цимбалістий",
    "Цушко",
    "Червоній",
    "Шамрило",
    "Шевченко",
    "Шестак",
    "Шиндарей",
    "Шиян",
    "Шкараба",
    "Шудрик",
    "Шумило",
    "Шупик",
    "Шухевич",
    "Щербак",
    "Юрчишин",
    "Юхно",
    "Ющик",
    "Ющук",
    "Яворівський",
    "Яловий",
    "Ялюк",
    "Янюк",
    "Ярмак",
    "Яцишин",
    "Яцьків",
    "Ящук"
  ];
});

// node_modules/faker/lib/locales/uk/name/female_first_name.js
var require_female_first_name6 = __commonJS((exports, module) => {
  module["exports"] = [
    "Аврелія",
    "Аврора",
    "Агапія",
    "Агата",
    "Агафія",
    "Агнеса",
    "Агнія",
    "Агрипина",
    "Ада",
    "Аделаїда",
    "Аделіна",
    "Адріана",
    "Азалія",
    "Алевтина",
    "Аліна",
    "Алла",
    "Альбіна",
    "Альвіна",
    "Анастасія",
    "Анастасія",
    "Анатолія",
    "Ангеліна",
    "Анжела",
    "Анна",
    "Антонида",
    "Антоніна",
    "Антонія",
    "Анфіса",
    "Аполлінарія",
    "Аполлонія",
    "Аркадія",
    "Артемія",
    "Афанасія",
    "Білослава",
    "Біляна",
    "Благовіста",
    "Богдана",
    "Богуслава",
    "Божена",
    "Болеслава",
    "Борислава",
    "Броніслава",
    "В’ячеслава",
    "Валентина",
    "Валерія",
    "Варвара",
    "Василина",
    "Вікторія",
    "Вілена",
    "Віленіна",
    "Віліна",
    "Віола",
    "Віолетта",
    "Віра",
    "Віргінія",
    "Віта",
    "Віталіна",
    "Влада",
    "Владислава",
    "Власта",
    "Всеслава",
    "Галина",
    "Ганна",
    "Гелена",
    "Далеслава",
    "Дана",
    "Дарина",
    "Дарислава",
    "Діана",
    "Діяна",
    "Добринка",
    "Добромила",
    "Добромира",
    "Добромисла",
    "Доброслава",
    "Долеслава",
    "Доляна",
    "Жанна",
    "Жозефіна",
    "Забава",
    "Звенислава",
    "Зінаїда",
    "Злата",
    "Зореслава",
    "Зорина",
    "Зоряна",
    "Зоя",
    "Іванна",
    "Ілона",
    "Інна",
    "Іннеса",
    "Ірина",
    "Ірма",
    "Калина",
    "Каріна",
    "Катерина",
    "Квітка",
    "Квітослава",
    "Клавдія",
    "Крентта",
    "Ксенія",
    "Купава",
    "Лада",
    "Лариса",
    "Леся",
    "Ликера",
    "Лідія",
    "Лілія",
    "Любава",
    "Любислава",
    "Любов",
    "Любомила",
    "Любомира",
    "Люборада",
    "Любослава",
    "Людмила",
    "Людомила",
    "Майя",
    "Мальва",
    "Мар’яна",
    "Марина",
    "Марічка",
    "Марія",
    "Марта",
    "Меланія",
    "Мечислава",
    "Милодара",
    "Милослава",
    "Мирослава",
    "Мілана",
    "Мокрина",
    "Мотря",
    "Мстислава",
    "Надія",
    "Наталія",
    "Неля",
    "Немира",
    "Ніна",
    "Огняна",
    "Оксана",
    "Олександра",
    "Олена",
    "Олеся",
    "Ольга",
    "Ореста",
    "Орина",
    "Орислава",
    "Орися",
    "Оріяна",
    "Павліна",
    "Палажка",
    "Пелагея",
    "Пелагія",
    "Поліна",
    "Поляна",
    "Потішана",
    "Радміла",
    "Радослава",
    "Раїна",
    "Раїса",
    "Роксолана",
    "Ромена",
    "Ростислава",
    "Руслана",
    "Світлана",
    "Святослава",
    "Слава",
    "Сміяна",
    "Сніжана",
    "Соломія",
    "Соня",
    "Софія",
    "Станислава",
    "Сюзана",
    "Таїсія",
    "Тамара",
    "Тетяна",
    "Устина",
    "Фаїна",
    "Февронія",
    "Федора",
    "Феодосія",
    "Харитина",
    "Христина",
    "Христя",
    "Юліанна",
    "Юлія",
    "Юстина",
    "Юхима",
    "Юхимія",
    "Яна",
    "Ярина",
    "Ярослава"
  ];
});

// node_modules/faker/lib/locales/uk/name/female_middle_name.js
var require_female_middle_name2 = __commonJS((exports, module) => {
  module["exports"] = [
    "Адамівна",
    "Азарівна",
    "Алевтинівна",
    "Альбертівна",
    "Анастасівна",
    "Анатоліївна",
    "Андріївна",
    "Антонівна",
    "Аркадіївна",
    "Арсенівна",
    "Арсеніївна",
    "Артемівна",
    "Архипівна",
    "Аскольдівна",
    "Афанасіївна",
    "Білославівна",
    "Богданівна",
    "Божемирівна",
    "Боженівна",
    "Болеславівна",
    "Боримирівна",
    "Борисівна",
    "Бориславівна",
    "Братиславівна",
    "В’ячеславівна",
    "Вадимівна",
    "Валентинівна",
    "Валеріївна",
    "Василівна",
    "Вікторівна",
    "Віталіївна",
    "Владиславівна",
    "Володимирівна",
    "Всеволодівна",
    "Всеславівна",
    "Гаврилівна",
    "Гарасимівна",
    "Георгіївна",
    "Гнатівна",
    "Гордіївна",
    "Григоріївна",
    "Данилівна",
    "Даромирівна",
    "Денисівна",
    "Дмитрівна",
    "Добромирівна",
    "Доброславівна",
    "Євгенівна",
    "Захарівна",
    "Захаріївна",
    "Збориславівна",
    "Звенимирівна",
    "Звениславівна",
    "Зеновіївна",
    "Зиновіївна",
    "Златомирівна",
    "Зореславівна",
    "Іванівна",
    "Ігорівна",
    "Ізяславівна",
    "Корнеліївна",
    "Корнилівна",
    "Корніївна",
    "Костянтинівна",
    "Лаврентіївна",
    "Любомирівна",
    "Макарівна",
    "Максимівна",
    "Марківна",
    "Маркіянівна",
    "Матвіївна",
    "Мечиславівна",
    "Микитівна",
    "Миколаївна",
    "Миронівна",
    "Мирославівна",
    "Михайлівна",
    "Мстиславівна",
    "Назарівна",
    "Назаріївна",
    "Натанівна",
    "Немирівна",
    "Несторівна",
    "Олегівна",
    "Олександрівна",
    "Олексіївна",
    "Олельківна",
    "Омелянівна",
    "Орестівна",
    "Орхипівна",
    "Остапівна",
    "Охрімівна",
    "Павлівна",
    "Панасівна",
    "Пантелеймонівна",
    "Петрівна",
    "Пилипівна",
    "Радимирівна",
    "Радимівна",
    "Родіонівна",
    "Романівна",
    "Ростиславівна",
    "Русланівна",
    "Святославівна",
    "Сергіївна",
    "Славутівна",
    "Станіславівна",
    "Степанівна",
    "Стефаніївна",
    "Тарасівна",
    "Тимофіївна",
    "Тихонівна",
    "Устимівна",
    "Юріївна",
    "Юхимівна",
    "Ярославівна"
  ];
});

// node_modules/faker/lib/locales/uk/name/female_last_name.js
var require_female_last_name6 = __commonJS((exports, module) => {
  module["exports"] = [
    "Андрухович",
    "Бабух",
    "Балабан",
    "Балабуха",
    "Балакун",
    "Балицька",
    "Бамбула",
    "Бандера",
    "Барановська",
    "Бачей",
    "Башук",
    "Бердник",
    "Білич",
    "Бондаренко",
    "Борецька",
    "Боровська",
    "Борочко",
    "Боярчук",
    "Брицька",
    "Бурмило",
    "Бутько",
    "Василишина",
    "Васильківська",
    "Вергун",
    "Вередун",
    "Верещук",
    "Витребенько",
    "Вітряк",
    "Волощук",
    "Гайдук",
    "Гайова",
    "Гайчук",
    "Галаєнко",
    "Галатей",
    "Галаціон",
    "Гаман",
    "Гамула",
    "Ганич",
    "Гарай",
    "Гарун",
    "Гладківська",
    "Гладух",
    "Глинська",
    "Гнатишина",
    "Гойко",
    "Головець",
    "Горбач",
    "Гордійчук",
    "Горова",
    "Городоцька",
    "Гречко",
    "Григоришина",
    "Гриневецька",
    "Гриневська",
    "Гришко",
    "Громико",
    "Данилишина",
    "Данилко",
    "Демків",
    "Демчишина",
    "Дзюб’як",
    "Дзюба",
    "Дідух",
    "Дмитришина",
    "Дмитрук",
    "Довгалевська",
    "Дурдинець",
    "Євенко",
    "Євпак",
    "Ємець",
    "Єрмак",
    "Забіла",
    "Зварич",
    "Зінкевич",
    "Зленко",
    "Іванишина",
    "Калач",
    "Кандиба",
    "Карпух",
    "Кивач",
    "Коваленко",
    "Ковальська",
    "Коломієць",
    "Коман",
    "Компанієць",
    "Кононець",
    "Кордун",
    "Корецька",
    "Корнїйчук",
    "Коров’як",
    "Коцюбинська",
    "Кулинич",
    "Кульчицька",
    "Лагойда",
    "Лазірко",
    "Ланова",
    "Латан",
    "Латанська",
    "Лахман",
    "Левадовська",
    "Ликович",
    "Линдик",
    "Ліхно",
    "Лобачевська",
    "Ломова",
    "Лугова",
    "Луцька",
    "Луцьків",
    "Лученко",
    "Лучко",
    "Люта",
    "Лящук",
    "Магера",
    "Мазайло",
    "Мазило",
    "Мазун",
    "Майборода",
    "Майстренко",
    "Маковецька",
    "Малкович",
    "Мамій",
    "Маринич",
    "Марієвська",
    "Марків",
    "Махно",
    "Миклашевська",
    "Миклухо",
    "Милославська",
    "Михайлюк",
    "Міняйло",
    "Могилевська",
    "Москаль",
    "Москалюк",
    "Мотрієнко",
    "Негода",
    "Ногачевська",
    "Опенько",
    "Осадко",
    "Павленко",
    "Павлишина",
    "Павлів",
    "Пагутяк",
    "Паламарчук",
    "Палій",
    "Паращук",
    "Пасічник",
    "Пендик",
    "Петик",
    "Петлюра",
    "Петренко",
    "Петрина",
    "Петришина",
    "Петрів",
    "Плаксій",
    "Погиба",
    "Поліщук",
    "Пономарів",
    "Поривай",
    "Поривайло",
    "Потебенько",
    "Потоцька",
    "Пригода",
    "Приймак",
    "Притула",
    "Прядун",
    "Розпутня",
    "Романишина",
    "Ромей",
    "Роменець",
    "Ромочко",
    "Савицька",
    "Саєнко",
    "Свидригайло",
    "Семеночко",
    "Семещук",
    "Сердюк",
    "Силецька",
    "Сідлецька",
    "Сідляк",
    "Сірко",
    "Скиба",
    "Скоропадська",
    "Слободян",
    "Сосюра",
    "Сплюха",
    "Спотикач",
    "Степанець",
    "Стигайло",
    "Сторожук",
    "Сторчак",
    "Стоян",
    "Сучак",
    "Сушко",
    "Тарасюк",
    "Тиндарей",
    "Ткаченко",
    "Третяк",
    "Троян",
    "Трублаєвська",
    "Трясило",
    "Трясун",
    "Уманець",
    "Унич",
    "Усич",
    "Федоришина",
    "Цушко",
    "Червоній",
    "Шамрило",
    "Шевченко",
    "Шестак",
    "Шиндарей",
    "Шиян",
    "Шкараба",
    "Шудрик",
    "Шумило",
    "Шупик",
    "Шухевич",
    "Щербак",
    "Юрчишина",
    "Юхно",
    "Ющик",
    "Ющук",
    "Яворівська",
    "Ялова",
    "Ялюк",
    "Янюк",
    "Ярмак",
    "Яцишина",
    "Яцьків",
    "Ящук"
  ];
});

// node_modules/faker/lib/locales/uk/name/prefix.js
var require_prefix28 = __commonJS((exports, module) => {
  module["exports"] = [
    "Пан",
    "Пані"
  ];
});

// node_modules/faker/lib/locales/uk/name/suffix.js
var require_suffix39 = __commonJS((exports, module) => {
  module["exports"] = [
    "проф.",
    "доц.",
    "докт. пед. наук",
    "докт. політ. наук",
    "докт. філол. наук",
    "докт. філос. наук",
    "докт. і. наук",
    "докт. юрид. наук",
    "докт. техн. наук",
    "докт. психол. наук",
    "канд. пед. наук",
    "канд. політ. наук",
    "канд. філол. наук",
    "канд. філос. наук",
    "канд. і. наук",
    "канд. юрид. наук",
    "канд. техн. наук",
    "канд. психол. наук"
  ];
});

// node_modules/faker/lib/locales/uk/name/title.js
var require_title10 = __commonJS((exports, module) => {
  module["exports"] = {
    descriptor: [
      "Головний",
      "Генеральний",
      "Провідний",
      "Національний",
      "Регіональний",
      "Обласний",
      "Районний",
      "Глобальний",
      "Міжнародний",
      "Центральний"
    ],
    level: [
      "маркетинговий",
      "оптимізаційний",
      "страховий",
      "функціональний",
      "інтеграційний",
      "логістичний"
    ],
    job: [
      "інженер",
      "агент",
      "адміністратор",
      "аналітик",
      "архітектор",
      "дизайнер",
      "керівник",
      "консультант",
      "координатор",
      "менеджер",
      "планувальник",
      "помічник",
      "розробник",
      "спеціаліст",
      "співробітник",
      "технік"
    ]
  };
});

// node_modules/faker/lib/locales/uk/name/name.js
var require_name74 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{male_first_name} #{male_last_name}",
    "#{male_last_name} #{male_first_name}",
    "#{male_first_name} #{male_middle_name} #{male_last_name}",
    "#{male_last_name} #{male_first_name} #{male_middle_name}",
    "#{female_first_name} #{female_last_name}",
    "#{female_last_name} #{female_first_name}",
    "#{female_first_name} #{female_middle_name} #{female_last_name}",
    "#{female_last_name} #{female_first_name} #{female_middle_name}"
  ];
});

// node_modules/faker/lib/locales/uk/name/index.js
var require_name73 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.male_first_name = require_male_first_name6();
  name2.male_middle_name = require_male_middle_name2();
  name2.male_last_name = require_male_last_name6();
  name2.female_first_name = require_female_first_name6();
  name2.female_middle_name = require_female_middle_name2();
  name2.female_last_name = require_female_last_name6();
  name2.prefix = require_prefix28();
  name2.suffix = require_suffix39();
  name2.title = require_title10();
  name2.name = require_name74();
});

// node_modules/faker/lib/locales/uk/phone_number/formats.js
var require_formats43 = __commonJS((exports, module) => {
  module["exports"] = [
    "(044) ###-##-##",
    "(050) ###-##-##",
    "(063) ###-##-##",
    "(066) ###-##-##",
    "(073) ###-##-##",
    "(091) ###-##-##",
    "(092) ###-##-##",
    "(093) ###-##-##",
    "(094) ###-##-##",
    "(095) ###-##-##",
    "(096) ###-##-##",
    "(097) ###-##-##",
    "(098) ###-##-##",
    "(099) ###-##-##"
  ];
});

// node_modules/faker/lib/locales/uk/phone_number/index.js
var require_phone_number32 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats43();
});

// node_modules/faker/lib/locales/uk/index.js
var require_uk = __commonJS((exports, module) => {
  var uk = {};
  module["exports"] = uk;
  uk.title = "Ukrainian";
  uk.address = require_address33();
  uk.company = require_company26();
  uk.internet = require_internet32();
  uk.name = require_name73();
  uk.phone_number = require_phone_number32();
});

// node_modules/faker/lib/locales/vi/address/city_root.js
var require_city_root2 = __commonJS((exports, module) => {
  module["exports"] = [
    "Bắc Giang",
    "Bắc Kạn",
    "Bắc Ninh",
    "Cao Bằng",
    "Điện Biên",
    "Hà Giang",
    "Hà Nam",
    "Hà Tây",
    "Hải Dương",
    "TP Hải Phòng",
    "Hòa Bình",
    "Hưng Yên",
    "Lai Châu",
    "Lào Cai",
    "Lạng Sơn",
    "Nam Định",
    "Ninh Bình",
    "Phú Thọ",
    "Quảng Ninh",
    "Sơn La",
    "Thái Bình",
    "Thái Nguyên",
    "Tuyên Quang",
    "Vĩnh Phúc",
    "Yên Bái",
    "TP Đà Nẵng",
    "Bình Định",
    "Đắk Lắk",
    "Đắk Nông",
    "Gia Lai",
    "Hà Tĩnh",
    "Khánh Hòa",
    "Kon Tum",
    "Nghệ An",
    "Phú Yên",
    "Quảng Bình",
    "Quảng Nam",
    "Quảng Ngãi",
    "Quảng Trị",
    "Thanh Hóa",
    "Thừa Thiên Huế",
    "TP TP. Hồ Chí Minh",
    "An Giang",
    "Bà Rịa Vũng Tàu",
    "Bạc Liêu",
    "Bến Tre",
    "Bình Dương",
    "Bình Phước",
    "Bình Thuận",
    "Cà Mau",
    "TP Cần Thơ",
    "Đồng Nai",
    "Đồng Tháp",
    "Hậu Giang",
    "Kiên Giang",
    "Lâm Đồng",
    "Long An",
    "Ninh Thuận",
    "Sóc Trăng",
    "Tây Ninh",
    "Tiền Giang",
    "Trà Vinh",
    "Vĩnh Long"
  ];
});

// node_modules/faker/lib/locales/vi/address/city.js
var require_city24 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{city_root}"
  ];
});

// node_modules/faker/lib/locales/vi/address/county.js
var require_county4 = __commonJS((exports, module) => {
  module["exports"] = [
    "Avon",
    "Bedfordshire",
    "Berkshire",
    "Borders",
    "Buckinghamshire",
    "Cambridgeshire",
    "Central",
    "Cheshire",
    "Cleveland",
    "Clwyd",
    "Cornwall",
    "County Antrim",
    "County Armagh",
    "County Down",
    "County Fermanagh",
    "County Londonderry",
    "County Tyrone",
    "Cumbria",
    "Derbyshire",
    "Devon",
    "Dorset",
    "Dumfries and Galloway",
    "Durham",
    "Dyfed",
    "East Sussex",
    "Essex",
    "Fife",
    "Gloucestershire",
    "Grampian",
    "Greater Manchester",
    "Gwent",
    "Gwynedd County",
    "Hampshire",
    "Herefordshire",
    "Hertfordshire",
    "Highlands and Islands",
    "Humberside",
    "Isle of Wight",
    "Kent",
    "Lancashire",
    "Leicestershire",
    "Lincolnshire",
    "Lothian",
    "Merseyside",
    "Mid Glamorgan",
    "Norfolk",
    "North Yorkshire",
    "Northamptonshire",
    "Northumberland",
    "Nottinghamshire",
    "Oxfordshire",
    "Powys",
    "Rutland",
    "Shropshire",
    "Somerset",
    "South Glamorgan",
    "South Yorkshire",
    "Staffordshire",
    "Strathclyde",
    "Suffolk",
    "Surrey",
    "Tayside",
    "Tyne and Wear",
    "Việt Nam",
    "Warwickshire",
    "West Glamorgan",
    "West Midlands",
    "West Sussex",
    "West Yorkshire",
    "Wiltshire",
    "Worcestershire"
  ];
});

// node_modules/faker/lib/locales/vi/address/default_country.js
var require_default_country31 = __commonJS((exports, module) => {
  module["exports"] = [
    "Việt Nam"
  ];
});

// node_modules/faker/lib/locales/vi/address/index.js
var require_address34 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.city_root = require_city_root2();
  address.city = require_city24();
  address.county = require_county4();
  address.default_country = require_default_country31();
});

// node_modules/faker/lib/locales/vi/internet/domain_suffix.js
var require_domain_suffix32 = __commonJS((exports, module) => {
  module["exports"] = [
    "com",
    "net",
    "info",
    "vn",
    "com.vn"
  ];
});

// node_modules/faker/lib/locales/vi/internet/index.js
var require_internet33 = __commonJS((exports, module) => {
  var internet = {};
  module["exports"] = internet;
  internet.domain_suffix = require_domain_suffix32();
});

// node_modules/faker/lib/locales/vi/phone_number/formats.js
var require_formats45 = __commonJS((exports, module) => {
  module["exports"] = [
    "01#### #####",
    "01### ######",
    "01#1 ### ####",
    "011# ### ####",
    "02# #### ####",
    "03## ### ####",
    "055 #### ####",
    "056 #### ####",
    "0800 ### ####",
    "08## ### ####",
    "09## ### ####",
    "016977 ####",
    "01### #####",
    "0500 ######",
    "0800 ######"
  ];
});

// node_modules/faker/lib/locales/vi/phone_number/index.js
var require_phone_number33 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats45();
});

// node_modules/faker/lib/locales/vi/cell_phone/formats.js
var require_formats44 = __commonJS((exports, module) => {
  module["exports"] = [
    "074## ######",
    "075## ######",
    "076## ######",
    "077## ######",
    "078## ######",
    "079## ######"
  ];
});

// node_modules/faker/lib/locales/vi/cell_phone/index.js
var require_cell_phone13 = __commonJS((exports, module) => {
  var cell_phone = {};
  module["exports"] = cell_phone;
  cell_phone.formats = require_formats44();
});

// node_modules/faker/lib/locales/vi/name/first_name.js
var require_first_name22 = __commonJS((exports, module) => {
  module["exports"] = [
    "Phạm",
    "Nguyễn",
    "Trần",
    "Lê",
    "Lý",
    "Hoàng",
    "Phan",
    "Vũ",
    "Tăng",
    "Đặng",
    "Bùi",
    "Đỗ",
    "Hồ",
    "Ngô",
    "Dương",
    "Đào",
    "Đoàn",
    "Vương",
    "Trịnh",
    "Đinh",
    "Lâm",
    "Phùng",
    "Mai",
    "Tô",
    "Trương",
    "Hà"
  ];
});

// node_modules/faker/lib/locales/vi/name/last_name.js
var require_last_name23 = __commonJS((exports, module) => {
  module["exports"] = [
    "Nam",
    "Trung",
    "Thanh",
    "Thị",
    "Văn",
    "Dương",
    "Tăng",
    "Quốc",
    "Như",
    "Phạm",
    "Nguyễn",
    "Trần",
    "Lê",
    "Lý",
    "Hoàng",
    "Phan",
    "Vũ",
    "Tăng",
    "Đặng",
    "Bùi",
    "Đỗ",
    "Hồ",
    "Ngô",
    "Dương",
    "Đào",
    "Đoàn",
    "Vương",
    "Trịnh",
    "Đinh",
    "Lâm",
    "Phùng",
    "Mai",
    "Tô",
    "Trương",
    "Hà",
    "Vinh",
    "Nhung",
    "Hòa",
    "Tiến",
    "Tâm",
    "Bửu",
    "Loan",
    "Hiền",
    "Hải",
    "Vân",
    "Kha",
    "Minh",
    "Nhân",
    "Triệu",
    "Tuân",
    "Hữu",
    "Đức",
    "Phú",
    "Khoa",
    "Thắgn",
    "Sơn",
    "Dung",
    "Tú",
    "Trinh",
    "Thảo",
    "Sa",
    "Kim",
    "Long",
    "Thi",
    "Cường",
    "Ngọc",
    "Sinh",
    "Khang",
    "Phong",
    "Thắm",
    "Thu",
    "Thủy",
    "Nhàn"
  ];
});

// node_modules/faker/lib/locales/vi/name/name.js
var require_name77 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{first_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name}",
    "#{first_name} #{last_name} #{last_name} #{last_name}"
  ];
});

// node_modules/faker/lib/locales/vi/name/index.js
var require_name76 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name = require_first_name22();
  name2.last_name = require_last_name23();
  name2.name = require_name77();
});

// node_modules/faker/lib/locales/vi/company/prefix.js
var require_prefix29 = __commonJS((exports, module) => {
  module["exports"] = [
    "Công ty",
    "Cty TNHH",
    "Cty",
    "Cửa hàng",
    "Trung tâm",
    "Chi nhánh"
  ];
});

// node_modules/faker/lib/locales/vi/company/name.js
var require_name75 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{prefix} #{Name.last_name}"
  ];
});

// node_modules/faker/lib/locales/vi/company/index.js
var require_company27 = __commonJS((exports, module) => {
  var company = {};
  module["exports"] = company;
  company.prefix = require_prefix29();
  company.name = require_name75();
});

// node_modules/faker/lib/locales/vi/lorem/words.js
var require_words13 = __commonJS((exports, module) => {
  module["exports"] = [
    "đã",
    "đang",
    "ừ",
    "ờ",
    "á",
    "không",
    "biết",
    "gì",
    "hết",
    "đâu",
    "nha",
    "thế",
    "thì",
    "là",
    "đánh",
    "đá",
    "đập",
    "phá",
    "viết",
    "vẽ",
    "tô",
    "thuê",
    "mướn",
    "mượn",
    "mua",
    "một",
    "hai",
    "ba",
    "bốn",
    "năm",
    "sáu",
    "bảy",
    "tám",
    "chín",
    "mười",
    "thôi",
    "việc",
    "nghỉ",
    "làm",
    "nhà",
    "cửa",
    "xe",
    "đạp",
    "ác",
    "độc",
    "khoảng",
    "khoan",
    "thuyền",
    "tàu",
    "bè",
    "lầu",
    "xanh",
    "đỏ",
    "tím",
    "vàng",
    "kim",
    "chỉ",
    "khâu",
    "may",
    "vá",
    "em",
    "anh",
    "yêu",
    "thương",
    "thích",
    "con",
    "cái",
    "bàn",
    "ghế",
    "tủ",
    "quần",
    "áo",
    "nón",
    "dép",
    "giày",
    "lỗi",
    "được",
    "ghét",
    "giết",
    "chết",
    "hết",
    "tôi",
    "bạn",
    "tui",
    "trời",
    "trăng",
    "mây",
    "gió",
    "máy",
    "hàng",
    "hóa",
    "leo",
    "núi",
    "bơi",
    "biển",
    "chìm",
    "xuồng",
    "nước",
    "ngọt",
    "ruộng",
    "đồng",
    "quê",
    "hương"
  ];
});

// node_modules/faker/lib/locales/vi/lorem/index.js
var require_lorem13 = __commonJS((exports, module) => {
  var lorem = {};
  module["exports"] = lorem;
  lorem.words = require_words13();
});

// node_modules/faker/lib/locales/vi/index.js
var require_vi = __commonJS((exports, module) => {
  var vi = {};
  module["exports"] = vi;
  vi.title = "Vietnamese";
  vi.address = require_address34();
  vi.internet = require_internet33();
  vi.phone_number = require_phone_number33();
  vi.cell_phone = require_cell_phone13();
  vi.name = require_name76();
  vi.company = require_company27();
  vi.lorem = require_lorem13();
});

// node_modules/faker/lib/locales/zh_CN/address/city_prefix.js
var require_city_prefix14 = __commonJS((exports, module) => {
  module["exports"] = [
    "长",
    "上",
    "南",
    "西",
    "北",
    "诸",
    "宁",
    "珠",
    "武",
    "衡",
    "成",
    "福",
    "厦",
    "贵",
    "吉",
    "海",
    "太",
    "济",
    "安",
    "吉",
    "包"
  ];
});

// node_modules/faker/lib/locales/zh_CN/address/city_suffix.js
var require_city_suffix14 = __commonJS((exports, module) => {
  module["exports"] = [
    "沙市",
    "京市",
    "宁市",
    "安市",
    "乡县",
    "海市",
    "码市",
    "汉市",
    "阳市",
    "都市",
    "州市",
    "门市",
    "阳市",
    "口市",
    "原市",
    "南市",
    "徽市",
    "林市",
    "头市"
  ];
});

// node_modules/faker/lib/locales/zh_CN/address/building_number.js
var require_building_number23 = __commonJS((exports, module) => {
  module["exports"] = [
    "#####",
    "####",
    "###",
    "##",
    "#"
  ];
});

// node_modules/faker/lib/locales/zh_CN/address/street_suffix.js
var require_street_suffix17 = __commonJS((exports, module) => {
  module["exports"] = [
    "巷",
    "街",
    "路",
    "桥",
    "侬",
    "旁",
    "中心",
    "栋"
  ];
});

// node_modules/faker/lib/locales/zh_CN/address/postcode.js
var require_postcode31 = __commonJS((exports, module) => {
  module["exports"] = [
    "######"
  ];
});

// node_modules/faker/lib/locales/zh_CN/address/state.js
var require_state27 = __commonJS((exports, module) => {
  module["exports"] = [
    "北京市",
    "上海市",
    "天津市",
    "重庆市",
    "黑龙江省",
    "吉林省",
    "辽宁省",
    "内蒙古",
    "河北省",
    "新疆",
    "甘肃省",
    "青海省",
    "陕西省",
    "宁夏",
    "河南省",
    "山东省",
    "山西省",
    "安徽省",
    "湖北省",
    "湖南省",
    "江苏省",
    "四川省",
    "贵州省",
    "云南省",
    "广西省",
    "西藏",
    "浙江省",
    "江西省",
    "广东省",
    "福建省",
    "台湾省",
    "海南省",
    "香港",
    "澳门"
  ];
});

// node_modules/faker/lib/locales/zh_CN/address/state_abbr.js
var require_state_abbr18 = __commonJS((exports, module) => {
  module["exports"] = [
    "京",
    "沪",
    "津",
    "渝",
    "黑",
    "吉",
    "辽",
    "蒙",
    "冀",
    "新",
    "甘",
    "青",
    "陕",
    "宁",
    "豫",
    "鲁",
    "晋",
    "皖",
    "鄂",
    "湘",
    "苏",
    "川",
    "黔",
    "滇",
    "桂",
    "藏",
    "浙",
    "赣",
    "粤",
    "闽",
    "台",
    "琼",
    "港",
    "澳"
  ];
});

// node_modules/faker/lib/locales/zh_CN/address/city.js
var require_city25 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{city_prefix}#{city_suffix}"
  ];
});

// node_modules/faker/lib/locales/zh_CN/address/street_name.js
var require_street_name23 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Name.last_name}#{street_suffix}"
  ];
});

// node_modules/faker/lib/locales/zh_CN/address/street_address.js
var require_street_address20 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_name}#{building_number}号"
  ];
});

// node_modules/faker/lib/locales/zh_CN/address/default_country.js
var require_default_country32 = __commonJS((exports, module) => {
  module["exports"] = [
    "中国"
  ];
});

// node_modules/faker/lib/locales/zh_CN/address/index.js
var require_address35 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.city_prefix = require_city_prefix14();
  address.city_suffix = require_city_suffix14();
  address.building_number = require_building_number23();
  address.street_suffix = require_street_suffix17();
  address.postcode = require_postcode31();
  address.state = require_state27();
  address.state_abbr = require_state_abbr18();
  address.city = require_city25();
  address.street_name = require_street_name23();
  address.street_address = require_street_address20();
  address.default_country = require_default_country32();
});

// node_modules/faker/lib/locales/zh_CN/name/first_name.js
var require_first_name23 = __commonJS((exports, module) => {
  module["exports"] = [
    "王",
    "李",
    "张",
    "刘",
    "陈",
    "杨",
    "黄",
    "吴",
    "赵",
    "周",
    "徐",
    "孙",
    "马",
    "朱",
    "胡",
    "林",
    "郭",
    "何",
    "高",
    "罗",
    "郑",
    "梁",
    "谢",
    "宋",
    "唐",
    "许",
    "邓",
    "冯",
    "韩",
    "曹",
    "曾",
    "彭",
    "萧",
    "蔡",
    "潘",
    "田",
    "董",
    "袁",
    "于",
    "余",
    "叶",
    "蒋",
    "杜",
    "苏",
    "魏",
    "程",
    "吕",
    "丁",
    "沈",
    "任",
    "姚",
    "卢",
    "傅",
    "钟",
    "姜",
    "崔",
    "谭",
    "廖",
    "范",
    "汪",
    "陆",
    "金",
    "石",
    "戴",
    "贾",
    "韦",
    "夏",
    "邱",
    "方",
    "侯",
    "邹",
    "熊",
    "孟",
    "秦",
    "白",
    "江",
    "阎",
    "薛",
    "尹",
    "段",
    "雷",
    "黎",
    "史",
    "龙",
    "陶",
    "贺",
    "顾",
    "毛",
    "郝",
    "龚",
    "邵",
    "万",
    "钱",
    "严",
    "赖",
    "覃",
    "洪",
    "武",
    "莫",
    "孔"
  ];
});

// node_modules/faker/lib/locales/zh_CN/name/last_name.js
var require_last_name24 = __commonJS((exports, module) => {
  module["exports"] = [
    "绍齐",
    "博文",
    "梓晨",
    "胤祥",
    "瑞霖",
    "明哲",
    "天翊",
    "凯瑞",
    "健雄",
    "耀杰",
    "潇然",
    "子涵",
    "越彬",
    "钰轩",
    "智辉",
    "致远",
    "俊驰",
    "雨泽",
    "烨磊",
    "晟睿",
    "文昊",
    "修洁",
    "黎昕",
    "远航",
    "旭尧",
    "鸿涛",
    "伟祺",
    "荣轩",
    "越泽",
    "浩宇",
    "瑾瑜",
    "皓轩",
    "擎苍",
    "擎宇",
    "志泽",
    "子轩",
    "睿渊",
    "弘文",
    "哲瀚",
    "雨泽",
    "楷瑞",
    "建辉",
    "晋鹏",
    "天磊",
    "绍辉",
    "泽洋",
    "鑫磊",
    "鹏煊",
    "昊强",
    "伟宸",
    "博超",
    "君浩",
    "子骞",
    "鹏涛",
    "炎彬",
    "鹤轩",
    "越彬",
    "风华",
    "靖琪",
    "明辉",
    "伟诚",
    "明轩",
    "健柏",
    "修杰",
    "志泽",
    "弘文",
    "峻熙",
    "嘉懿",
    "煜城",
    "懿轩",
    "烨伟",
    "苑博",
    "伟泽",
    "熠彤",
    "鸿煊",
    "博涛",
    "烨霖",
    "烨华",
    "煜祺",
    "智宸",
    "正豪",
    "昊然",
    "明杰",
    "立诚",
    "立轩",
    "立辉",
    "峻熙",
    "弘文",
    "熠彤",
    "鸿煊",
    "烨霖",
    "哲瀚",
    "鑫鹏",
    "昊天",
    "思聪",
    "展鹏",
    "笑愚",
    "志强",
    "炫明",
    "雪松",
    "思源",
    "智渊",
    "思淼",
    "晓啸",
    "天宇",
    "浩然",
    "文轩",
    "鹭洋",
    "振家",
    "乐驹",
    "晓博",
    "文博",
    "昊焱",
    "立果",
    "金鑫",
    "锦程",
    "嘉熙",
    "鹏飞",
    "子默",
    "思远",
    "浩轩",
    "语堂",
    "聪健",
    "明",
    "文",
    "果",
    "思",
    "鹏",
    "驰",
    "涛",
    "琪",
    "浩",
    "航",
    "彬"
  ];
});

// node_modules/faker/lib/locales/zh_CN/name/name.js
var require_name79 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{first_name}#{last_name}"
  ];
});

// node_modules/faker/lib/locales/zh_CN/name/index.js
var require_name78 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name = require_first_name23();
  name2.last_name = require_last_name24();
  name2.name = require_name79();
});

// node_modules/faker/lib/locales/zh_CN/phone_number/formats.js
var require_formats46 = __commonJS((exports, module) => {
  module["exports"] = [
    "###-########",
    "####-########",
    "###########"
  ];
});

// node_modules/faker/lib/locales/zh_CN/phone_number/index.js
var require_phone_number34 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats46();
});

// node_modules/faker/lib/locales/zh_CN/index.js
var require_zh_CN = __commonJS((exports, module) => {
  var zh_CN = {};
  module["exports"] = zh_CN;
  zh_CN.title = "Chinese";
  zh_CN.address = require_address35();
  zh_CN.name = require_name78();
  zh_CN.phone_number = require_phone_number34();
});

// node_modules/faker/lib/locales/zh_TW/address/city_prefix.js
var require_city_prefix15 = __commonJS((exports, module) => {
  module["exports"] = [
    "臺北",
    "新北",
    "桃園",
    "臺中",
    "臺南",
    "高雄",
    "基隆",
    "新竹",
    "嘉義",
    "苗栗",
    "彰化",
    "南投",
    "雲林",
    "屏東",
    "宜蘭",
    "花蓮",
    "臺東",
    "澎湖",
    "金門",
    "連江"
  ];
});

// node_modules/faker/lib/locales/zh_TW/address/city_suffix.js
var require_city_suffix15 = __commonJS((exports, module) => {
  module["exports"] = [
    "縣",
    "市"
  ];
});

// node_modules/faker/lib/locales/zh_TW/address/building_number.js
var require_building_number24 = __commonJS((exports, module) => {
  module["exports"] = [
    "####",
    "###",
    "##",
    "#"
  ];
});

// node_modules/faker/lib/locales/zh_TW/address/street_suffix.js
var require_street_suffix18 = __commonJS((exports, module) => {
  module["exports"] = [
    "街",
    "路",
    "北路",
    "南路",
    "東路",
    "西路"
  ];
});

// node_modules/faker/lib/locales/zh_TW/address/postcode.js
var require_postcode32 = __commonJS((exports, module) => {
  module["exports"] = [
    "######"
  ];
});

// node_modules/faker/lib/locales/zh_TW/address/state.js
var require_state28 = __commonJS((exports, module) => {
  module["exports"] = [
    "福建省",
    "台灣省"
  ];
});

// node_modules/faker/lib/locales/zh_TW/address/state_abbr.js
var require_state_abbr19 = __commonJS((exports, module) => {
  module["exports"] = [
    "北",
    "新北",
    "桃",
    "中",
    "南",
    "高",
    "基",
    "竹市",
    "嘉市",
    "竹縣",
    "苗",
    "彰",
    "投",
    "雲",
    "嘉縣",
    "宜",
    "花",
    "東",
    "澎",
    "金",
    "馬"
  ];
});

// node_modules/faker/lib/locales/zh_TW/address/city.js
var require_city26 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{city_prefix}#{city_suffix}"
  ];
});

// node_modules/faker/lib/locales/zh_TW/address/street_name.js
var require_street_name24 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{Name.last_name}#{street_suffix}"
  ];
});

// node_modules/faker/lib/locales/zh_TW/address/street_address.js
var require_street_address21 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{street_name}#{building_number}號"
  ];
});

// node_modules/faker/lib/locales/zh_TW/address/default_country.js
var require_default_country33 = __commonJS((exports, module) => {
  module["exports"] = [
    "Taiwan (R.O.C.)"
  ];
});

// node_modules/faker/lib/locales/zh_TW/address/index.js
var require_address36 = __commonJS((exports, module) => {
  var address = {};
  module["exports"] = address;
  address.city_prefix = require_city_prefix15();
  address.city_suffix = require_city_suffix15();
  address.building_number = require_building_number24();
  address.street_suffix = require_street_suffix18();
  address.postcode = require_postcode32();
  address.state = require_state28();
  address.state_abbr = require_state_abbr19();
  address.city = require_city26();
  address.street_name = require_street_name24();
  address.street_address = require_street_address21();
  address.default_country = require_default_country33();
});

// node_modules/faker/lib/locales/zh_TW/name/first_name.js
var require_first_name24 = __commonJS((exports, module) => {
  module["exports"] = [
    "王",
    "李",
    "張",
    "劉",
    "陳",
    "楊",
    "黃",
    "吳",
    "趙",
    "週",
    "徐",
    "孫",
    "馬",
    "朱",
    "胡",
    "林",
    "郭",
    "何",
    "高",
    "羅",
    "鄭",
    "梁",
    "謝",
    "宋",
    "唐",
    "許",
    "鄧",
    "馮",
    "韓",
    "曹",
    "曾",
    "彭",
    "蕭",
    "蔡",
    "潘",
    "田",
    "董",
    "袁",
    "於",
    "餘",
    "葉",
    "蔣",
    "杜",
    "蘇",
    "魏",
    "程",
    "呂",
    "丁",
    "沈",
    "任",
    "姚",
    "盧",
    "傅",
    "鐘",
    "姜",
    "崔",
    "譚",
    "廖",
    "範",
    "汪",
    "陸",
    "金",
    "石",
    "戴",
    "賈",
    "韋",
    "夏",
    "邱",
    "方",
    "侯",
    "鄒",
    "熊",
    "孟",
    "秦",
    "白",
    "江",
    "閻",
    "薛",
    "尹",
    "段",
    "雷",
    "黎",
    "史",
    "龍",
    "陶",
    "賀",
    "顧",
    "毛",
    "郝",
    "龔",
    "邵",
    "萬",
    "錢",
    "嚴",
    "賴",
    "覃",
    "洪",
    "武",
    "莫",
    "孔"
  ];
});

// node_modules/faker/lib/locales/zh_TW/name/last_name.js
var require_last_name25 = __commonJS((exports, module) => {
  module["exports"] = [
    "紹齊",
    "博文",
    "梓晨",
    "胤祥",
    "瑞霖",
    "明哲",
    "天翊",
    "凱瑞",
    "健雄",
    "耀傑",
    "瀟然",
    "子涵",
    "越彬",
    "鈺軒",
    "智輝",
    "致遠",
    "俊馳",
    "雨澤",
    "燁磊",
    "晟睿",
    "文昊",
    "修潔",
    "黎昕",
    "遠航",
    "旭堯",
    "鴻濤",
    "偉祺",
    "榮軒",
    "越澤",
    "浩宇",
    "瑾瑜",
    "皓軒",
    "擎蒼",
    "擎宇",
    "志澤",
    "子軒",
    "睿淵",
    "弘文",
    "哲瀚",
    "雨澤",
    "楷瑞",
    "建輝",
    "晉鵬",
    "天磊",
    "紹輝",
    "澤洋",
    "鑫磊",
    "鵬煊",
    "昊強",
    "偉宸",
    "博超",
    "君浩",
    "子騫",
    "鵬濤",
    "炎彬",
    "鶴軒",
    "越彬",
    "風華",
    "靖琪",
    "明輝",
    "偉誠",
    "明軒",
    "健柏",
    "修傑",
    "志澤",
    "弘文",
    "峻熙",
    "嘉懿",
    "煜城",
    "懿軒",
    "燁偉",
    "苑博",
    "偉澤",
    "熠彤",
    "鴻煊",
    "博濤",
    "燁霖",
    "燁華",
    "煜祺",
    "智宸",
    "正豪",
    "昊然",
    "明杰",
    "立誠",
    "立軒",
    "立輝",
    "峻熙",
    "弘文",
    "熠彤",
    "鴻煊",
    "燁霖",
    "哲瀚",
    "鑫鵬",
    "昊天",
    "思聰",
    "展鵬",
    "笑愚",
    "志強",
    "炫明",
    "雪松",
    "思源",
    "智淵",
    "思淼",
    "曉嘯",
    "天宇",
    "浩然",
    "文軒",
    "鷺洋",
    "振家",
    "樂駒",
    "曉博",
    "文博",
    "昊焱",
    "立果",
    "金鑫",
    "錦程",
    "嘉熙",
    "鵬飛",
    "子默",
    "思遠",
    "浩軒",
    "語堂",
    "聰健"
  ];
});

// node_modules/faker/lib/locales/zh_TW/name/name.js
var require_name81 = __commonJS((exports, module) => {
  module["exports"] = [
    "#{first_name}#{last_name}"
  ];
});

// node_modules/faker/lib/locales/zh_TW/name/index.js
var require_name80 = __commonJS((exports, module) => {
  var name2 = {};
  module["exports"] = name2;
  name2.first_name = require_first_name24();
  name2.last_name = require_last_name25();
  name2.name = require_name81();
});

// node_modules/faker/lib/locales/zh_TW/phone_number/formats.js
var require_formats47 = __commonJS((exports, module) => {
  module["exports"] = [
    "0#-#######",
    "02-########",
    "09##-######"
  ];
});

// node_modules/faker/lib/locales/zh_TW/phone_number/index.js
var require_phone_number35 = __commonJS((exports, module) => {
  var phone_number = {};
  module["exports"] = phone_number;
  phone_number.formats = require_formats47();
});

// node_modules/faker/lib/locales/zh_TW/index.js
var require_zh_TW = __commonJS((exports, module) => {
  var zh_TW = {};
  module["exports"] = zh_TW;
  zh_TW.title = "Chinese (Taiwan)";
  zh_TW.address = require_address36();
  zh_TW.name = require_name80();
  zh_TW.phone_number = require_phone_number35();
});

// node_modules/faker/lib/locales.js
var require_locales = __commonJS((exports) => {
  exports["az"] = require_az();
  exports["cz"] = require_cz();
  exports["de"] = require_de();
  exports["de_AT"] = require_de_AT();
  exports["de_CH"] = require_de_CH();
  exports["en"] = require_en();
  exports["en_AU"] = require_en_AU();
  exports["en_BORK"] = require_en_BORK();
  exports["en_CA"] = require_en_CA();
  exports["en_GB"] = require_en_GB();
  exports["en_IE"] = require_en_IE();
  exports["en_IND"] = require_en_IND();
  exports["en_US"] = require_en_US();
  exports["en_au_ocker"] = require_en_au_ocker();
  exports["es"] = require_es3();
  exports["es_MX"] = require_es_MX();
  exports["fa"] = require_fa();
  exports["fr"] = require_fr();
  exports["fr_CA"] = require_fr_CA();
  exports["ge"] = require_ge();
  exports["id_ID"] = require_id_ID();
  exports["it"] = require_it();
  exports["ja"] = require_ja();
  exports["ko"] = require_ko();
  exports["nb_NO"] = require_nb_NO();
  exports["nep"] = require_nep();
  exports["nl"] = require_nl();
  exports["pl"] = require_pl();
  exports["pt_BR"] = require_pt_BR();
  exports["ru"] = require_ru();
  exports["sk"] = require_sk();
  exports["sv"] = require_sv();
  exports["tr"] = require_tr();
  exports["uk"] = require_uk();
  exports["vi"] = require_vi();
  exports["zh_CN"] = require_zh_CN();
  exports["zh_TW"] = require_zh_TW();
});

// node_modules/faker/index.js
var require_faker = __commonJS((exports, module) => {
  var Faker = require_lib();
  var faker2 = new Faker({locales: require_locales()});
  module["exports"] = faker2;
});

// node_modules/firemock/dist/es/index.js
var require_es4 = __commonJS((exports) => {
  __export(exports, {
    Deployment: () => Deployment,
    Mock: () => Mock,
    MockHelper: () => MockHelper,
    Query: () => Query,
    Queue: () => Queue,
    Reference: () => Reference,
    Schema: () => Schema,
    SchemaHelper: () => SchemaHelper,
    SnapShot: () => SnapShot,
    addListener: () => addListener,
    adminAuthSdk: () => adminAuthSdk2,
    auth: () => auth6,
    authMockApi: () => authMockApi,
    clearDatabase: () => clearDatabase,
    findChildListeners: () => findChildListeners,
    findValueListeners: () => findValueListeners,
    getDb: () => getDb,
    getFakerLibrary: () => getFakerLibrary,
    getListeners: () => getListeners,
    getMockHelper: () => getMockHelper,
    groupEventsByWatcher: () => groupEventsByWatcher,
    importFakerLibrary: () => importFakerLibrary,
    listenerCount: () => listenerCount,
    listenerPaths: () => listenerPaths,
    multiPathUpdateDB: () => multiPathUpdateDB,
    notify: () => notify,
    pushDB: () => pushDB,
    removeAllListeners: () => removeAllListeners,
    removeDB: () => removeDB,
    removeListener: () => removeListener,
    reset: () => reset,
    restoreEvents: () => restoreEvents,
    setDB: () => setDB,
    shouldSendEvents: () => shouldSendEvents,
    silenceEvents: () => silenceEvents,
    updateDB: () => updateDB,
    updateDatabase: () => updateDatabase
  });
  __exportStar(exports, __toModule(require_types()));
});

// node_modules/typed-conversions/dist/esnext/index.js
const lodash11 = __toModule(require_lodash2());
function removeIdPropertyFromHash(hash, idProp = "id") {
  const output = {};
  Object.keys(hash).map((objId) => {
    const input = hash[objId];
    output[objId] = {};
    Object.keys(input).map((prop) => {
      if (prop !== idProp) {
        output[objId][prop] = input[prop];
      }
    });
  });
  return output;
}
function hashToArray(hashObj, __key__ = "id") {
  if (hashObj && typeof hashObj !== "object") {
    throw new Error("Cant convert hash-to-array because hash was not passed in: " + hashObj);
  }
  const hash = Object.assign({}, hashObj);
  const results = [];
  const isHashArray = Object.keys(hash).every((i) => hash[i] === true);
  const isHashValue = Object.keys(hash).every((i) => typeof hash[i] !== "object");
  Object.keys(hash).map((id) => {
    const obj = typeof hash[id] === "object" ? Object.assign(Object.assign({}, hash[id]), {[__key__]: id}) : isHashArray ? id : {[__key__]: id, value: hash[id]};
    results.push(obj);
  });
  return results;
}
function arrayToHash(arr, keyProperty, removeIdProperty = false) {
  if (arr.length === 0) {
    return {};
  }
  const isScalar = typeof arr[0] === "object" ? false : true;
  if (isScalar && keyProperty) {
    const e = new Error(`You can not have an array of primitive values AND set a keyProperty!`);
    e.name = "NotAllowed";
    throw e;
  }
  if (!keyProperty && !isScalar) {
    if (arr[0].hasOwnProperty("id")) {
      keyProperty = "id";
    } else {
      const e = new Error(`Tried to default to a keyProperty of "id" but that property does not appear to be in the array passed in`);
      e.name = "NotAllowed";
      throw e;
    }
  }
  if (!Array.isArray(arr)) {
    const e = new Error(`arrayToHash: input was not an array!`);
    e.name = "NotAllowed";
    throw e;
  }
  const output = arr.reduce((prev, curr) => {
    const key2 = isScalar ? curr : typeof keyProperty === "function" ? keyProperty(curr) : curr[keyProperty];
    return isScalar ? Object.assign(Object.assign({}, prev), {[key2]: true}) : Object.assign(Object.assign({}, prev), {[key2]: curr});
  }, {});
  return removeIdProperty ? removeIdPropertyFromHash(output) : output;
}

// src/decorators/model-meta/property-store.ts
function isProperty(modelKlass) {
  return (prop) => {
    return getModelProperty(modelKlass)(prop) ? true : false;
  };
}
const propertiesByModel = {};
function getModelProperty(model3) {
  const className = model3.constructor.name;
  const propsForModel = getProperties(model3);
  return (prop) => {
    return propsForModel.find((value) => {
      return value.property === prop;
    });
  };
}
function getProperties(model3) {
  const modelName = model3.constructor.name;
  const properties = hashToArray(propertiesByModel[modelName], "property") || [];
  let parent = Object.getPrototypeOf(model3.constructor);
  while (parent.name) {
    const subClass = new parent();
    const subClassName = subClass.constructor.name;
    properties.push(...hashToArray(propertiesByModel[subClassName], "property"));
    parent = Object.getPrototypeOf(subClass.constructor);
  }
  return properties;
}

// src/util.ts
const fast_deep_equal = __toModule(require_fast_deep_equal());
function firstKey2(thingy) {
  return Object.keys(thingy)[0];
}
function compareHashes(from, to, modelProps) {
  const results = {
    added: [],
    changed: [],
    removed: []
  };
  from = from ? from : {};
  to = to ? to : {};
  let keys2 = Array.from(new Set([
    ...Object.keys(from),
    ...Object.keys(to)
  ])).filter((i) => i !== "META").filter((i) => i.slice(0, 1) !== "_");
  if (modelProps) {
    keys2 = keys2.filter((i) => modelProps.includes(i));
  }
  keys2.forEach((i) => {
    if (!to[i]) {
      results.added.push(i);
    } else if (from[i] === null) {
      results.removed.push(i);
    } else if (!fast_deep_equal.default(from[i], to[i])) {
      results.changed.push(i);
    }
  });
  return results;
}
function getAllPropertiesFromClassStructure(model3) {
  const modelName = model3.constructor.name;
  const properties = hashToArray(propertiesByModel[modelName], "property") || [];
  let parent = Object.getPrototypeOf(model3.constructor);
  while (parent.name) {
    const subClass = new parent();
    const subClassName = subClass.constructor.name;
    properties.push(...hashToArray(propertiesByModel[subClassName], "property"));
    parent = Object.getPrototypeOf(subClass.constructor);
  }
  return properties.map((p) => p.property);
}
function withoutMetaOrPrivate(model3) {
  if (model3 && model3.META) {
    model3 = {...model3};
    delete model3.META;
  }
  if (model3) {
    Object.keys((key2) => {
      if (key2.slice(0, 1) === "_") {
        delete model3[key2];
      }
    });
  }
  return model3;
}
function capitalize(str) {
  return str ? str.slice(0, 1).toUpperCase() + str.slice(1) : "";
}
function lowercase(str) {
  return str ? str.slice(0, 1).toLowerCase() + str.slice(1) : "";
}

// src/decorators/reflector.ts
const get_value2 = __toModule(require_get_value());
const set_value2 = __toModule(require_set_value());
const propertyReflector = (context = {}, modelRollup) => (modelKlass, key2) => {
  const modelName = modelKlass.constructor.name;
  const reflect = Reflect.getMetadata("design:type", modelKlass, key2) || {};
  const meta2 = {
    ...Reflect.getMetadata(key2, modelKlass) || {},
    type: lowercase(reflect.name),
    ...context,
    property: key2
  };
  Reflect.defineMetadata(key2, meta2, modelKlass);
  if (modelRollup) {
    const modelAndProp = modelName + "." + key2;
    set_value2.default(modelRollup, modelAndProp, {
      ...get_value2.default(modelRollup, modelAndProp),
      ...meta2
    });
  }
};

// src/decorators/model-meta/relationship-store.ts
const relationshipsByModel = {};
function isRelationship(modelKlass) {
  return (prop) => {
    return getModelRelationship(modelKlass)(prop) ? true : false;
  };
}
function getModelRelationship(model3) {
  const relnsForModel = getRelationships(model3);
  const className = model3.constructor.name;
  return (prop) => {
    return relnsForModel.find((value) => {
      return value.property === prop;
    });
  };
}
function getRelationships(model3) {
  const modelName = model3.constructor.name;
  const properties = hashToArray(relationshipsByModel[modelName], "property") || [];
  let parent = Object.getPrototypeOf(model3.constructor);
  while (parent.name) {
    const subClass = new parent();
    const subClassName = subClass.constructor.name;
    properties.push(...hashToArray(relationshipsByModel[subClassName], "property"));
    parent = Object.getPrototypeOf(subClass.constructor);
  }
  return properties;
}

// src/errors/FireModelError.ts
class FireModelError2 extends Error {
  constructor(message, classification = "firemodel/error") {
    super(message);
    this.firemodel = true;
    const parts2 = classification.split("/");
    const [type, subType] = parts2.length === 1 ? ["firemodel", parts2[0]] : parts2;
    this.name = `${type}/${subType}`;
    this.code = subType;
  }
}

// src/errors/decorators/DecoratorProblem.ts
class DecoratorProblem2 extends FireModelError2 {
  constructor(decorator2, e, context) {
    super("", "firemodel/decorator-problem");
    const errText = typeof e === "string" ? e : e.message;
    this.message = `There was a problem in the "${decorator2}" decorator. ${errText}
${context}`;
  }
}

// src/record/relationships/modelRegistration.ts
const registeredModels = {};
function modelRegister(...models2) {
  models2.forEach((model3) => {
    if (!model3) {
      throw new FireModelError2(`An attempt was made to register a Model subclass but the passed in constructor was undefined!${models2.length > 0 ? ` [ ${models2.length} models being registed during this call ]` : ""}`, "firemodel/not-allowed");
    }
    if (typeof model3 !== "function" || !model3.constructor) {
      throw new FireModelError2(`An attempt was made to register a Model subclass but the passed in constructor was the wrong type [ ${typeof model3} ]!
model passed was: ${model3}`, "firemodel/not-allowed");
    }
    const modelName = new model3().constructor.name;
    registeredModels[modelName] = model3;
  });
}
function listRegisteredModels() {
  return Object.keys(registeredModels);
}
function modelRegistryLookup(name2) {
  const model3 = registeredModels[name2];
  if (!name2) {
    throw new FireModelError2(`Look failed because the model ${name2} was not registered!`, "firemodel/not-allowed");
  }
  return model3;
}
const modelNameLookup = (name2) => () => {
  return modelRegistryLookup(name2);
};
const modelConstructorLookup = (constructor) => () => {
  return isConstructable(constructor) ? constructor : constructor();
};
function isConstructable(fn2) {
  try {
    const f = new fn2();
    return true;
  } catch (e) {
    return false;
  }
}

// src/decorators/hasMany.ts
function hasMany(fkClass, inverse) {
  try {
    const fkConstructor = typeof fkClass === "string" ? modelNameLookup(fkClass) : modelConstructorLookup(fkClass);
    let inverseProperty;
    let directionality;
    if (Array.isArray(inverse)) {
      [inverseProperty, directionality] = inverse;
    } else {
      inverseProperty = inverse;
      directionality = inverse ? "bi-directional" : "one-way";
    }
    const payload = {
      isRelationship: true,
      isProperty: false,
      relType: "hasMany",
      directionality,
      fkConstructor
    };
    if (inverseProperty) {
      payload.inverseProperty = inverseProperty;
    }
    return propertyReflector({...payload, type: "Object"}, relationshipsByModel);
  } catch (e) {
    throw new DecoratorProblem2("hasMany", e, {inverse});
  }
}

// src/decorators/hasOne.ts
function belongsTo(fkClass, inverse) {
  try {
    const fkConstructor = typeof fkClass === "string" ? modelNameLookup(fkClass) : modelConstructorLookup(fkClass);
    let inverseProperty;
    let directionality;
    if (Array.isArray(inverse)) {
      [inverseProperty, directionality] = inverse;
    } else {
      inverseProperty = inverse;
      directionality = inverse ? "bi-directional" : "one-way";
    }
    const payload = {
      isRelationship: true,
      isProperty: false,
      relType: "hasOne",
      directionality,
      fkConstructor
    };
    if (inverseProperty) {
      payload.inverseProperty = inverseProperty;
    }
    return propertyReflector({...payload, type: "String"}, relationshipsByModel);
  } catch (e) {
    throw new DecoratorProblem2("hasOne", e, {inverse});
  }
}
const ownedBy = belongsTo;
const hasOne = belongsTo;

// node_modules/reflect-metadata/Reflect.js
var Reflect2;
(function(Reflect3) {
  (function(factory) {
    var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : Function("return this;")();
    var exporter = makeExporter(Reflect3);
    if (typeof root.Reflect === "undefined") {
      root.Reflect = Reflect3;
    } else {
      exporter = makeExporter(root.Reflect, exporter);
    }
    factory(exporter);
    function makeExporter(target, previous) {
      return function(key2, value) {
        if (typeof target[key2] !== "function") {
          Object.defineProperty(target, key2, {configurable: true, writable: true, value});
        }
        if (previous)
          previous(key2, value);
      };
    }
  })(function(exporter) {
    var hasOwn2 = Object.prototype.hasOwnProperty;
    var supportsSymbol = typeof Symbol === "function";
    var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
    var iteratorSymbol2 = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
    var supportsCreate = typeof Object.create === "function";
    var supportsProto = {__proto__: []} instanceof Array;
    var downLevel = !supportsCreate && !supportsProto;
    var HashMap = {
      create: supportsCreate ? function() {
        return MakeDictionary(Object.create(null));
      } : supportsProto ? function() {
        return MakeDictionary({__proto__: null});
      } : function() {
        return MakeDictionary({});
      },
      has: downLevel ? function(map, key2) {
        return hasOwn2.call(map, key2);
      } : function(map, key2) {
        return key2 in map;
      },
      get: downLevel ? function(map, key2) {
        return hasOwn2.call(map, key2) ? map[key2] : void 0;
      } : function(map, key2) {
        return map[key2];
      }
    };
    var functionPrototype = Object.getPrototypeOf(Function);
    var usePolyfill = typeof process === "object" && process.env && process.env["REFLECT_METADATA_USE_MAP_POLYFILL"] === "true";
    var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
    var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
    var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
    var Metadata = new _WeakMap();
    function decorate(decorators4, target, propertyKey, attributes) {
      if (!IsUndefined(propertyKey)) {
        if (!IsArray(decorators4))
          throw new TypeError();
        if (!IsObject(target))
          throw new TypeError();
        if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))
          throw new TypeError();
        if (IsNull(attributes))
          attributes = void 0;
        propertyKey = ToPropertyKey(propertyKey);
        return DecorateProperty(decorators4, target, propertyKey, attributes);
      } else {
        if (!IsArray(decorators4))
          throw new TypeError();
        if (!IsConstructor(target))
          throw new TypeError();
        return DecorateConstructor(decorators4, target);
      }
    }
    exporter("decorate", decorate);
    function metadata(metadataKey, metadataValue) {
      function decorator2(target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))
          throw new TypeError();
        OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
      }
      return decorator2;
    }
    exporter("metadata", metadata);
    function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
      if (!IsObject(target))
        throw new TypeError();
      if (!IsUndefined(propertyKey))
        propertyKey = ToPropertyKey(propertyKey);
      return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
    }
    exporter("defineMetadata", defineMetadata);
    function hasMetadata(metadataKey, target, propertyKey) {
      if (!IsObject(target))
        throw new TypeError();
      if (!IsUndefined(propertyKey))
        propertyKey = ToPropertyKey(propertyKey);
      return OrdinaryHasMetadata(metadataKey, target, propertyKey);
    }
    exporter("hasMetadata", hasMetadata);
    function hasOwnMetadata(metadataKey, target, propertyKey) {
      if (!IsObject(target))
        throw new TypeError();
      if (!IsUndefined(propertyKey))
        propertyKey = ToPropertyKey(propertyKey);
      return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
    }
    exporter("hasOwnMetadata", hasOwnMetadata);
    function getMetadata(metadataKey, target, propertyKey) {
      if (!IsObject(target))
        throw new TypeError();
      if (!IsUndefined(propertyKey))
        propertyKey = ToPropertyKey(propertyKey);
      return OrdinaryGetMetadata(metadataKey, target, propertyKey);
    }
    exporter("getMetadata", getMetadata);
    function getOwnMetadata(metadataKey, target, propertyKey) {
      if (!IsObject(target))
        throw new TypeError();
      if (!IsUndefined(propertyKey))
        propertyKey = ToPropertyKey(propertyKey);
      return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
    }
    exporter("getOwnMetadata", getOwnMetadata);
    function getMetadataKeys(target, propertyKey) {
      if (!IsObject(target))
        throw new TypeError();
      if (!IsUndefined(propertyKey))
        propertyKey = ToPropertyKey(propertyKey);
      return OrdinaryMetadataKeys(target, propertyKey);
    }
    exporter("getMetadataKeys", getMetadataKeys);
    function getOwnMetadataKeys(target, propertyKey) {
      if (!IsObject(target))
        throw new TypeError();
      if (!IsUndefined(propertyKey))
        propertyKey = ToPropertyKey(propertyKey);
      return OrdinaryOwnMetadataKeys(target, propertyKey);
    }
    exporter("getOwnMetadataKeys", getOwnMetadataKeys);
    function deleteMetadata(metadataKey, target, propertyKey) {
      if (!IsObject(target))
        throw new TypeError();
      if (!IsUndefined(propertyKey))
        propertyKey = ToPropertyKey(propertyKey);
      var metadataMap = GetOrCreateMetadataMap(target, propertyKey, false);
      if (IsUndefined(metadataMap))
        return false;
      if (!metadataMap.delete(metadataKey))
        return false;
      if (metadataMap.size > 0)
        return true;
      var targetMetadata = Metadata.get(target);
      targetMetadata.delete(propertyKey);
      if (targetMetadata.size > 0)
        return true;
      Metadata.delete(target);
      return true;
    }
    exporter("deleteMetadata", deleteMetadata);
    function DecorateConstructor(decorators4, target) {
      for (var i = decorators4.length - 1; i >= 0; --i) {
        var decorator2 = decorators4[i];
        var decorated = decorator2(target);
        if (!IsUndefined(decorated) && !IsNull(decorated)) {
          if (!IsConstructor(decorated))
            throw new TypeError();
          target = decorated;
        }
      }
      return target;
    }
    function DecorateProperty(decorators4, target, propertyKey, descriptor) {
      for (var i = decorators4.length - 1; i >= 0; --i) {
        var decorator2 = decorators4[i];
        var decorated = decorator2(target, propertyKey, descriptor);
        if (!IsUndefined(decorated) && !IsNull(decorated)) {
          if (!IsObject(decorated))
            throw new TypeError();
          descriptor = decorated;
        }
      }
      return descriptor;
    }
    function GetOrCreateMetadataMap(O, P, Create) {
      var targetMetadata = Metadata.get(O);
      if (IsUndefined(targetMetadata)) {
        if (!Create)
          return void 0;
        targetMetadata = new _Map();
        Metadata.set(O, targetMetadata);
      }
      var metadataMap = targetMetadata.get(P);
      if (IsUndefined(metadataMap)) {
        if (!Create)
          return void 0;
        metadataMap = new _Map();
        targetMetadata.set(P, metadataMap);
      }
      return metadataMap;
    }
    function OrdinaryHasMetadata(MetadataKey, O, P) {
      var hasOwn3 = OrdinaryHasOwnMetadata(MetadataKey, O, P);
      if (hasOwn3)
        return true;
      var parent = OrdinaryGetPrototypeOf(O);
      if (!IsNull(parent))
        return OrdinaryHasMetadata(MetadataKey, parent, P);
      return false;
    }
    function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
      var metadataMap = GetOrCreateMetadataMap(O, P, false);
      if (IsUndefined(metadataMap))
        return false;
      return ToBoolean(metadataMap.has(MetadataKey));
    }
    function OrdinaryGetMetadata(MetadataKey, O, P) {
      var hasOwn3 = OrdinaryHasOwnMetadata(MetadataKey, O, P);
      if (hasOwn3)
        return OrdinaryGetOwnMetadata(MetadataKey, O, P);
      var parent = OrdinaryGetPrototypeOf(O);
      if (!IsNull(parent))
        return OrdinaryGetMetadata(MetadataKey, parent, P);
      return void 0;
    }
    function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
      var metadataMap = GetOrCreateMetadataMap(O, P, false);
      if (IsUndefined(metadataMap))
        return void 0;
      return metadataMap.get(MetadataKey);
    }
    function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
      var metadataMap = GetOrCreateMetadataMap(O, P, true);
      metadataMap.set(MetadataKey, MetadataValue);
    }
    function OrdinaryMetadataKeys(O, P) {
      var ownKeys = OrdinaryOwnMetadataKeys(O, P);
      var parent = OrdinaryGetPrototypeOf(O);
      if (parent === null)
        return ownKeys;
      var parentKeys = OrdinaryMetadataKeys(parent, P);
      if (parentKeys.length <= 0)
        return ownKeys;
      if (ownKeys.length <= 0)
        return parentKeys;
      var set7 = new _Set();
      var keys2 = [];
      for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
        var key2 = ownKeys_1[_i];
        var hasKey = set7.has(key2);
        if (!hasKey) {
          set7.add(key2);
          keys2.push(key2);
        }
      }
      for (var _a2 = 0, parentKeys_1 = parentKeys; _a2 < parentKeys_1.length; _a2++) {
        var key2 = parentKeys_1[_a2];
        var hasKey = set7.has(key2);
        if (!hasKey) {
          set7.add(key2);
          keys2.push(key2);
        }
      }
      return keys2;
    }
    function OrdinaryOwnMetadataKeys(O, P) {
      var keys2 = [];
      var metadataMap = GetOrCreateMetadataMap(O, P, false);
      if (IsUndefined(metadataMap))
        return keys2;
      var keysObj = metadataMap.keys();
      var iterator = GetIterator(keysObj);
      var k = 0;
      while (true) {
        var next = IteratorStep(iterator);
        if (!next) {
          keys2.length = k;
          return keys2;
        }
        var nextValue = IteratorValue(next);
        try {
          keys2[k] = nextValue;
        } catch (e) {
          try {
            IteratorClose(iterator);
          } finally {
            throw e;
          }
        }
        k++;
      }
    }
    function Type(x) {
      if (x === null)
        return 1;
      switch (typeof x) {
        case "undefined":
          return 0;
        case "boolean":
          return 2;
        case "string":
          return 3;
        case "symbol":
          return 4;
        case "number":
          return 5;
        case "object":
          return x === null ? 1 : 6;
        default:
          return 6;
      }
    }
    function IsUndefined(x) {
      return x === void 0;
    }
    function IsNull(x) {
      return x === null;
    }
    function IsSymbol(x) {
      return typeof x === "symbol";
    }
    function IsObject(x) {
      return typeof x === "object" ? x !== null : typeof x === "function";
    }
    function ToPrimitive(input, PreferredType) {
      switch (Type(input)) {
        case 0:
          return input;
        case 1:
          return input;
        case 2:
          return input;
        case 3:
          return input;
        case 4:
          return input;
        case 5:
          return input;
      }
      var hint = PreferredType === 3 ? "string" : PreferredType === 5 ? "number" : "default";
      var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
      if (exoticToPrim !== void 0) {
        var result = exoticToPrim.call(input, hint);
        if (IsObject(result))
          throw new TypeError();
        return result;
      }
      return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
    }
    function OrdinaryToPrimitive(O, hint) {
      if (hint === "string") {
        var toString_1 = O.toString;
        if (IsCallable(toString_1)) {
          var result = toString_1.call(O);
          if (!IsObject(result))
            return result;
        }
        var valueOf = O.valueOf;
        if (IsCallable(valueOf)) {
          var result = valueOf.call(O);
          if (!IsObject(result))
            return result;
        }
      } else {
        var valueOf = O.valueOf;
        if (IsCallable(valueOf)) {
          var result = valueOf.call(O);
          if (!IsObject(result))
            return result;
        }
        var toString_2 = O.toString;
        if (IsCallable(toString_2)) {
          var result = toString_2.call(O);
          if (!IsObject(result))
            return result;
        }
      }
      throw new TypeError();
    }
    function ToBoolean(argument) {
      return !!argument;
    }
    function ToString(argument) {
      return "" + argument;
    }
    function ToPropertyKey(argument) {
      var key2 = ToPrimitive(argument, 3);
      if (IsSymbol(key2))
        return key2;
      return ToString(key2);
    }
    function IsArray(argument) {
      return Array.isArray ? Array.isArray(argument) : argument instanceof Object ? argument instanceof Array : Object.prototype.toString.call(argument) === "[object Array]";
    }
    function IsCallable(argument) {
      return typeof argument === "function";
    }
    function IsConstructor(argument) {
      return typeof argument === "function";
    }
    function IsPropertyKey(argument) {
      switch (Type(argument)) {
        case 3:
          return true;
        case 4:
          return true;
        default:
          return false;
      }
    }
    function GetMethod(V, P) {
      var func = V[P];
      if (func === void 0 || func === null)
        return void 0;
      if (!IsCallable(func))
        throw new TypeError();
      return func;
    }
    function GetIterator(obj) {
      var method = GetMethod(obj, iteratorSymbol2);
      if (!IsCallable(method))
        throw new TypeError();
      var iterator = method.call(obj);
      if (!IsObject(iterator))
        throw new TypeError();
      return iterator;
    }
    function IteratorValue(iterResult) {
      return iterResult.value;
    }
    function IteratorStep(iterator) {
      var result = iterator.next();
      return result.done ? false : result;
    }
    function IteratorClose(iterator) {
      var f = iterator["return"];
      if (f)
        f.call(iterator);
    }
    function OrdinaryGetPrototypeOf(O) {
      var proto = Object.getPrototypeOf(O);
      if (typeof O !== "function" || O === functionPrototype)
        return proto;
      if (proto !== functionPrototype)
        return proto;
      var prototype = O.prototype;
      var prototypeProto = prototype && Object.getPrototypeOf(prototype);
      if (prototypeProto == null || prototypeProto === Object.prototype)
        return proto;
      var constructor = prototypeProto.constructor;
      if (typeof constructor !== "function")
        return proto;
      if (constructor === O)
        return proto;
      return constructor;
    }
    function CreateMapPolyfill() {
      var cacheSentinel = {};
      var arraySentinel = [];
      var MapIterator = function() {
        function MapIterator2(keys2, values, selector) {
          this._index = 0;
          this._keys = keys2;
          this._values = values;
          this._selector = selector;
        }
        MapIterator2.prototype["@@iterator"] = function() {
          return this;
        };
        MapIterator2.prototype[iteratorSymbol2] = function() {
          return this;
        };
        MapIterator2.prototype.next = function() {
          var index15 = this._index;
          if (index15 >= 0 && index15 < this._keys.length) {
            var result = this._selector(this._keys[index15], this._values[index15]);
            if (index15 + 1 >= this._keys.length) {
              this._index = -1;
              this._keys = arraySentinel;
              this._values = arraySentinel;
            } else {
              this._index++;
            }
            return {value: result, done: false};
          }
          return {value: void 0, done: true};
        };
        MapIterator2.prototype.throw = function(error) {
          if (this._index >= 0) {
            this._index = -1;
            this._keys = arraySentinel;
            this._values = arraySentinel;
          }
          throw error;
        };
        MapIterator2.prototype.return = function(value) {
          if (this._index >= 0) {
            this._index = -1;
            this._keys = arraySentinel;
            this._values = arraySentinel;
          }
          return {value, done: true};
        };
        return MapIterator2;
      }();
      return function() {
        function Map2() {
          this._keys = [];
          this._values = [];
          this._cacheKey = cacheSentinel;
          this._cacheIndex = -2;
        }
        Object.defineProperty(Map2.prototype, "size", {
          get: function() {
            return this._keys.length;
          },
          enumerable: true,
          configurable: true
        });
        Map2.prototype.has = function(key2) {
          return this._find(key2, false) >= 0;
        };
        Map2.prototype.get = function(key2) {
          var index15 = this._find(key2, false);
          return index15 >= 0 ? this._values[index15] : void 0;
        };
        Map2.prototype.set = function(key2, value) {
          var index15 = this._find(key2, true);
          this._values[index15] = value;
          return this;
        };
        Map2.prototype.delete = function(key2) {
          var index15 = this._find(key2, false);
          if (index15 >= 0) {
            var size = this._keys.length;
            for (var i = index15 + 1; i < size; i++) {
              this._keys[i - 1] = this._keys[i];
              this._values[i - 1] = this._values[i];
            }
            this._keys.length--;
            this._values.length--;
            if (key2 === this._cacheKey) {
              this._cacheKey = cacheSentinel;
              this._cacheIndex = -2;
            }
            return true;
          }
          return false;
        };
        Map2.prototype.clear = function() {
          this._keys.length = 0;
          this._values.length = 0;
          this._cacheKey = cacheSentinel;
          this._cacheIndex = -2;
        };
        Map2.prototype.keys = function() {
          return new MapIterator(this._keys, this._values, getKey2);
        };
        Map2.prototype.values = function() {
          return new MapIterator(this._keys, this._values, getValue);
        };
        Map2.prototype.entries = function() {
          return new MapIterator(this._keys, this._values, getEntry);
        };
        Map2.prototype["@@iterator"] = function() {
          return this.entries();
        };
        Map2.prototype[iteratorSymbol2] = function() {
          return this.entries();
        };
        Map2.prototype._find = function(key2, insert) {
          if (this._cacheKey !== key2) {
            this._cacheIndex = this._keys.indexOf(this._cacheKey = key2);
          }
          if (this._cacheIndex < 0 && insert) {
            this._cacheIndex = this._keys.length;
            this._keys.push(key2);
            this._values.push(void 0);
          }
          return this._cacheIndex;
        };
        return Map2;
      }();
      function getKey2(key2, _27) {
        return key2;
      }
      function getValue(_27, value) {
        return value;
      }
      function getEntry(key2, value) {
        return [key2, value];
      }
    }
    function CreateSetPolyfill() {
      return function() {
        function Set2() {
          this._map = new _Map();
        }
        Object.defineProperty(Set2.prototype, "size", {
          get: function() {
            return this._map.size;
          },
          enumerable: true,
          configurable: true
        });
        Set2.prototype.has = function(value) {
          return this._map.has(value);
        };
        Set2.prototype.add = function(value) {
          return this._map.set(value, value), this;
        };
        Set2.prototype.delete = function(value) {
          return this._map.delete(value);
        };
        Set2.prototype.clear = function() {
          this._map.clear();
        };
        Set2.prototype.keys = function() {
          return this._map.keys();
        };
        Set2.prototype.values = function() {
          return this._map.values();
        };
        Set2.prototype.entries = function() {
          return this._map.entries();
        };
        Set2.prototype["@@iterator"] = function() {
          return this.keys();
        };
        Set2.prototype[iteratorSymbol2] = function() {
          return this.keys();
        };
        return Set2;
      }();
    }
    function CreateWeakMapPolyfill() {
      var UUID_SIZE = 16;
      var keys2 = HashMap.create();
      var rootKey = CreateUniqueKey();
      return function() {
        function WeakMap2() {
          this._key = CreateUniqueKey();
        }
        WeakMap2.prototype.has = function(target) {
          var table = GetOrCreateWeakMapTable(target, false);
          return table !== void 0 ? HashMap.has(table, this._key) : false;
        };
        WeakMap2.prototype.get = function(target) {
          var table = GetOrCreateWeakMapTable(target, false);
          return table !== void 0 ? HashMap.get(table, this._key) : void 0;
        };
        WeakMap2.prototype.set = function(target, value) {
          var table = GetOrCreateWeakMapTable(target, true);
          table[this._key] = value;
          return this;
        };
        WeakMap2.prototype.delete = function(target) {
          var table = GetOrCreateWeakMapTable(target, false);
          return table !== void 0 ? delete table[this._key] : false;
        };
        WeakMap2.prototype.clear = function() {
          this._key = CreateUniqueKey();
        };
        return WeakMap2;
      }();
      function CreateUniqueKey() {
        var key2;
        do
          key2 = "@@WeakMap@@" + CreateUUID();
        while (HashMap.has(keys2, key2));
        keys2[key2] = true;
        return key2;
      }
      function GetOrCreateWeakMapTable(target, create) {
        if (!hasOwn2.call(target, rootKey)) {
          if (!create)
            return void 0;
          Object.defineProperty(target, rootKey, {value: HashMap.create()});
        }
        return target[rootKey];
      }
      function FillRandomBytes(buffer, size) {
        for (var i = 0; i < size; ++i)
          buffer[i] = Math.random() * 255 | 0;
        return buffer;
      }
      function GenRandomBytes(size) {
        if (typeof Uint8Array === "function") {
          if (typeof crypto !== "undefined")
            return crypto.getRandomValues(new Uint8Array(size));
          if (typeof msCrypto !== "undefined")
            return msCrypto.getRandomValues(new Uint8Array(size));
          return FillRandomBytes(new Uint8Array(size), size);
        }
        return FillRandomBytes(new Array(size), size);
      }
      function CreateUUID() {
        var data2 = GenRandomBytes(UUID_SIZE);
        data2[6] = data2[6] & 79 | 64;
        data2[8] = data2[8] & 191 | 128;
        var result = "";
        for (var offset = 0; offset < UUID_SIZE; ++offset) {
          var byte = data2[offset];
          if (offset === 4 || offset === 6 || offset === 8)
            result += "-";
          if (byte < 16)
            result += "0";
          result += byte.toString(16).toLowerCase();
        }
        return result;
      }
    }
    function MakeDictionary(obj) {
      obj.__ = void 0;
      delete obj.__;
      return obj;
    }
  });
})(Reflect2 || (Reflect2 = {}));

// src/decorators/indexing.ts
const indexesForModel = {};
function getDbIndexes(modelKlass) {
  const modelName = modelKlass.constructor.name;
  return modelName === "Model" ? hashToArray(indexesForModel[modelName]) : (hashToArray(indexesForModel[modelName]) || []).concat(hashToArray(indexesForModel.Model));
}
const index11 = propertyReflector({
  isIndex: true,
  isUniqueIndex: false
}, indexesForModel);
const uniqueIndex = propertyReflector({
  isIndex: true,
  isUniqueIndex: true
}, indexesForModel);

// src/decorators/constraints.ts
function constrainedProperty(options = {}) {
  return propertyReflector({
    ...options,
    ...{isRelationship: false, isProperty: true}
  }, propertiesByModel);
}
function constrain(prop, value) {
  return propertyReflector({[prop]: value}, propertiesByModel);
}
function desc(value) {
  return propertyReflector({desc: value}, propertiesByModel);
}
function min3(value) {
  return propertyReflector({min: value}, propertiesByModel);
}
function max3(value) {
  return propertyReflector({max: value}, propertiesByModel);
}
function length(value) {
  return propertyReflector({length: value}, propertiesByModel);
}
const property = propertyReflector({
  isRelationship: false,
  isProperty: true
}, propertiesByModel);
const pushKey = propertyReflector({pushKey: true}, propertiesByModel);

// src/decorators/decorator.ts
const get_value = __toModule(require_get_value());
const set_value = __toModule(require_set_value());
function getPushKeys(target) {
  const props2 = getProperties(target);
  return props2.filter((p) => p.pushKey).map((p) => p.property);
}

// src/ModelMeta.ts
const meta = {};
function addModelMeta(modelName, props2) {
  meta[modelName] = props2;
}
function getModelMeta(modelKlass) {
  const localMeta = modelKlass.META;
  const modelMeta = meta[modelKlass.modelName];
  return localMeta && localMeta.properties ? localMeta : modelMeta || {};
}

// src/decorators/model.ts
function model(options = {}) {
  let isDirty = false;
  return function decorateModel(target) {
    function addMetaProperty() {
      const modelOfObject = new target();
      if (options.audit === void 0) {
        options.audit = false;
      }
      if (!(options.audit === true || options.audit === false || options.audit === "server")) {
        console.log(`You set the audit property to "${options.audit}" which is invalid. Valid properties are true, false, and "server". The audit property will be set to false for now.`);
        options.audit = false;
      }
      const meta2 = {
        ...options,
        ...{isProperty: isProperty(modelOfObject)},
        ...{property: getModelProperty(modelOfObject)},
        ...{properties: getProperties(modelOfObject)},
        ...{isRelationship: isRelationship(modelOfObject)},
        ...{relationship: getModelRelationship(modelOfObject)},
        ...{relationships: getRelationships(modelOfObject)},
        ...{dbIndexes: getDbIndexes(modelOfObject)},
        ...{pushKeys: getPushKeys(modelOfObject)},
        ...{dbOffset: options.dbOffset ? options.dbOffset : ""},
        ...{audit: options.audit ? options.audit : false},
        ...{plural: options.plural},
        ...{
          allProperties: [
            ...getProperties(modelOfObject).map((p) => p.property),
            ...getRelationships(modelOfObject).map((p) => p.property)
          ]
        },
        ...{
          localPostfix: options.localPostfix === void 0 ? "all" : options.localPostfix
        },
        ...{
          localModelName: options.localModelName === void 0 ? modelOfObject.constructor.name.slice(0, 1).toLowerCase() + modelOfObject.constructor.name.slice(1) : options.localModelName
        },
        ...{isDirty}
      };
      addModelMeta(target.constructor.name.toLowerCase(), meta2);
      Object.defineProperty(target.prototype, "META", {
        get() {
          return meta2;
        },
        set(prop) {
          if (typeof prop === "object" && prop.isDirty !== void 0) {
            isDirty = prop.isDirty;
          } else {
            throw new Error("The META properties should only be set with the @model decorator at design time!");
          }
        },
        configurable: false,
        enumerable: false
      });
      if (target) {
        modelRegister(target);
      }
      return target;
    }
    addMetaProperty.prototype = target.prototype;
    return addMetaProperty();
  };
}

// src/decorators/types.ts

// src/decorators/defaultValue.ts
function defaultValue(value) {
  return propertyReflector({defaultValue: value}, propertiesByModel);
}

// src/decorators/OneWay.ts
function OneWay(inverseProperty) {
  return [inverseProperty, "one-way"];
}

// src/decorators/mock.ts
function mock(value, ...rest) {
  return propertyReflector({mockType: value, mockParameters: rest}, propertiesByModel);
}

// src/decorators/encrypt.ts
const encrypt = propertyReflector({encrypt: true}, propertiesByModel);

// src/decorators/index.ts

// src/models/Model.ts
let Model59 = class {
};
__decorate([
  property
], Model59.prototype, "id", 2);
__decorate([
  property,
  mock("dateRecentMiliseconds"),
  index11
], Model59.prototype, "lastUpdated", 2);
__decorate([
  property,
  mock("datePastMiliseconds"),
  index11
], Model59.prototype, "createdAt", 2);
Model59 = __decorate([
  model()
], Model59);

// src/models/AuditLog.ts
let AuditLog = class extends Model59 {
};
__decorate([
  property,
  index11
], AuditLog.prototype, "modelName", 2);
__decorate([
  property,
  index11
], AuditLog.prototype, "modelId", 2);
__decorate([
  property
], AuditLog.prototype, "changes", 2);
__decorate([
  property
], AuditLog.prototype, "action", 2);
AuditLog = __decorate([
  model({dbOffset: "_auditing"})
], AuditLog);

// src/models/index.ts

// node_modules/common-types/dist/es/index.js
async function wait(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}
var HttpStatusCodes;
(function(HttpStatusCodes2) {
  HttpStatusCodes2[HttpStatusCodes2["Continue"] = 100] = "Continue";
  HttpStatusCodes2[HttpStatusCodes2["Success"] = 200] = "Success";
  HttpStatusCodes2[HttpStatusCodes2["Created"] = 201] = "Created";
  HttpStatusCodes2[HttpStatusCodes2["Accepted"] = 202] = "Accepted";
  HttpStatusCodes2[HttpStatusCodes2["NoContent"] = 204] = "NoContent";
  HttpStatusCodes2[HttpStatusCodes2["MovedPermenantly"] = 301] = "MovedPermenantly";
  HttpStatusCodes2[HttpStatusCodes2["TemporaryRedirect"] = 307] = "TemporaryRedirect";
  HttpStatusCodes2[HttpStatusCodes2["NotModified"] = 304] = "NotModified";
  HttpStatusCodes2[HttpStatusCodes2["BadRequest"] = 400] = "BadRequest";
  HttpStatusCodes2[HttpStatusCodes2["Unauthorized"] = 401] = "Unauthorized";
  HttpStatusCodes2[HttpStatusCodes2["PaymentRequired"] = 402] = "PaymentRequired";
  HttpStatusCodes2[HttpStatusCodes2["Forbidden"] = 403] = "Forbidden";
  HttpStatusCodes2[HttpStatusCodes2["NotFound"] = 404] = "NotFound";
  HttpStatusCodes2[HttpStatusCodes2["MethodNotAllowed"] = 405] = "MethodNotAllowed";
  HttpStatusCodes2[HttpStatusCodes2["RequestTimeout"] = 408] = "RequestTimeout";
  HttpStatusCodes2[HttpStatusCodes2["Conflict"] = 409] = "Conflict";
  HttpStatusCodes2[HttpStatusCodes2["Gone"] = 410] = "Gone";
  HttpStatusCodes2[HttpStatusCodes2["IAmATeapot"] = 418] = "IAmATeapot";
  HttpStatusCodes2[HttpStatusCodes2["UnprocessableEntity"] = 422] = "UnprocessableEntity";
  HttpStatusCodes2[HttpStatusCodes2["TooManyRequests"] = 429] = "TooManyRequests";
  HttpStatusCodes2[HttpStatusCodes2["InternalServerError"] = 500] = "InternalServerError";
  HttpStatusCodes2[HttpStatusCodes2["NotImplemented"] = 501] = "NotImplemented";
  HttpStatusCodes2[HttpStatusCodes2["BadGateway"] = 502] = "BadGateway";
  HttpStatusCodes2[HttpStatusCodes2["ServiceUnavailable"] = 503] = "ServiceUnavailable";
  HttpStatusCodes2[HttpStatusCodes2["GatewayTimeout"] = 504] = "GatewayTimeout";
  HttpStatusCodes2[HttpStatusCodes2["AuthenticationRequired"] = 511] = "AuthenticationRequired";
})(HttpStatusCodes || (HttpStatusCodes = {}));
class ParseStackError extends Error {
  constructor(code, message, originalString, structuredString) {
    super();
    this.originalString = originalString;
    this.structuredString = structuredString;
    this.message = `[parseStack/${code}] ` + message;
    this.code = code;
    this.name = `parseStack/${code}`;
  }
}
class PathJoinError extends Error {
  constructor(code, message) {
    super();
    this.message = `[pathJoin/${code}] ` + message;
    this.code = code;
    this.name = `pathJoin/${code}`;
  }
}
var moreThanThreePeriods = /\.{3,}/g;
if (!Array.isArray) {
  Array.isArray = function(arg) {
    return Object.prototype.toString.call(arg) === "[object Array]";
  };
}
function pathJoin(...args) {
  if (!args.every((i) => !["undefined"].includes(typeof i))) {
    args = args.filter((a) => a);
  }
  if (!args.every((i) => ["string", "number"].includes(typeof i))) {
    throw new PathJoinError("invalid-path-part", `Attempt to use pathJoin() failed because some of the path parts were of the wrong type. Path parts must be either a string or an number: ${args.map((i) => typeof i)}`);
  }
  try {
    const reducer = function(agg, pathPart) {
      let {protocol, parts: parts2} = pullOutProtocols(agg);
      parts2.push(typeof pathPart === "number" ? String(pathPart) : stripSlashesAtExtremities(pathPart));
      return protocol + parts2.filter((i) => i).join("/");
    };
    const result = removeSingleDotExceptToStart(doubleDotOnlyToStart(args.reduce(reducer, "").replace(moreThanThreePeriods, "..")));
    return result;
  } catch (e) {
    if (e.name.includes("pathJoin")) {
      throw e;
    } else {
      throw new PathJoinError(e.name || "unknown", e.message);
    }
  }
}
function pullOutProtocols(content) {
  const protocols = ["https://", "http://", "file://", "tel://"];
  let protocol = "";
  protocols.forEach((p) => {
    if (content.includes(p)) {
      protocol = p;
      content = content.replace(p, "");
    }
  });
  return {protocol, parts: content.split("/")};
}
function stripSlashesAtExtremities(pathPart) {
  const front = pathPart.slice(0, 1) === "/" ? pathPart.slice(1) : pathPart;
  const back = front.slice(-1) === "/" ? front.slice(0, front.length - 1) : front;
  return back.slice(0, 1) === "/" || back.slice(-1) === "/" ? stripSlashesAtExtremities(back) : back;
}
function doubleDotOnlyToStart(path4) {
  if (path4.slice(2).includes("..")) {
    throw new PathJoinError("not-allowed", `The path "${path4}" is not allowed because it  has ".." in it. This notation is fine at the beginning of a path but no where else.`);
  }
  return path4;
}
function removeSingleDotExceptToStart(path4) {
  let parts2 = path4.split("/");
  return parts2[0] + "/" + parts2.slice(1).filter((i) => i !== ".").join("/");
}
function dotNotation2(input) {
  return input.replace(/\//g, ".");
}
function stackTrace(trace) {
  return trace ? trace.split("\n") : [];
}
class ApiGatewayError extends Error {
}
function createError(fullName, message, priorError) {
  const messagePrefix = `[${fullName}] `;
  const e = new AppError(!priorError ? messagePrefix + message : messagePrefix + priorError.message + message);
  e.name = priorError ? priorError.code || priorError.name : fullName;
  const parts2 = fullName.split("/");
  e.code = [...parts2].pop();
  e.stack = priorError ? priorError.stack || stackTrace(e.stack).slice(2).join("\n") : stackTrace(e.stack).slice(2).join("\n");
  return e;
}
class AppError extends Error {
}

// node_modules/firebase-key/dist/esm5/key-alphabet.js
var alphabet = "-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz";

// node_modules/firebase-key/dist/esm5/text-random-string.js
function randomString(alphabet2, length2) {
  var buffer = [];
  length2 = length2 | 0;
  while (length2) {
    var r = Math.random() * alphabet2.length | 0;
    buffer.push(alphabet2.charAt(r));
    length2 -= 1;
  }
  return buffer.join("");
}

// node_modules/firebase-key/dist/esm5/key-key.js
var lastTimestamp = 0;
function key(timestamp, as) {
  if (timestamp === void 0) {
    timestamp = Date.now();
    if (timestamp <= lastTimestamp) {
      timestamp = lastTimestamp + 1;
    }
    lastTimestamp = timestamp;
  }
  if (timestamp instanceof Date) {
    timestamp = timestamp.getTime();
  }
  var result = new Array(9);
  for (var i = 7; i >= 0; --i) {
    result[i] = alphabet.charAt(timestamp % 64);
    timestamp = Math.floor(timestamp / 64);
  }
  if (timestamp !== 0) {
    throw new Error("Unexpected timestamp.");
  }
  switch (as) {
    case "max":
      result[8] = "zzzzzzzzzzzz";
      break;
    case "min":
      result[8] = "------------";
      break;
    default:
      result[8] = randomString(alphabet, 12);
  }
  return result.join("");
}

// src/FireModel.ts
const pluralize2 = require_pluralize();
const defaultDispatch = async (context) => "";
class FireModel2 {
  static get defaultDb() {
    return FireModel2._defaultDb;
  }
  static set defaultDb(db2) {
    this._defaultDb = db2;
  }
  static set dispatch(fn2) {
    if (!fn2) {
      FireModel2._dispatchActive = false;
      FireModel2._dispatch = defaultDispatch;
    } else {
      FireModel2._dispatchActive = true;
      FireModel2._dispatch = fn2;
    }
  }
  static get dispatch() {
    return FireModel2._dispatch;
  }
  get modelName() {
    const name2 = this._model.constructor.name;
    const pascal = name2.slice(0, 1).toLowerCase() + name2.slice(1);
    return pascal;
  }
  get pluralName() {
    const explicitPlural = this.META.plural;
    return explicitPlural || pluralize2(this.modelName);
  }
  get dbPath() {
    return "dbPath was not overwritten!";
  }
  get localPath() {
    return "dbPath was not overwritten!";
  }
  get META() {
    return getModelMeta(this._model);
  }
  get properties() {
    const meta2 = getModelMeta(this._model);
    return meta2.properties;
  }
  get relationships() {
    const meta2 = getModelMeta(this._model);
    return meta2.relationships;
  }
  get dispatch() {
    return FireModel2.dispatch;
  }
  static get isDefaultDispatch() {
    return FireModel2.dispatch === defaultDispatch;
  }
  get dispatchIsActive() {
    return FireModel2._dispatchActive;
  }
  get db() {
    if (!this._db) {
      this._db = FireModel2.defaultDb;
    }
    if (!this._db) {
      const e = new Error(`Can't get DB as it has not been set yet for this instance and no default database exists [ ${this.modelName} ]!`);
      e.name = "FireModel::NoDatabase";
      throw e;
    }
    return this._db;
  }
  get pushKeys() {
    return this._model.META.pushKeys;
  }
  static async connect(RTDB, options) {
    const db2 = await RTDB.connect(options);
    FireModel2.defaultDb = db2;
    return db2;
  }
  static register(model3) {
    modelRegister(model3);
  }
  static listRegisteredModels() {
    return listRegisteredModels();
  }
  static lookupModel(name2) {
    return modelRegistryLookup(name2);
  }
  static isBeingWatched(path4) {
    return false;
  }
  _getPaths(rec, deltas) {
    const added = (deltas.added || []).reduce((agg, curr) => {
      agg[pathJoin(this.dbPath, curr)] = rec.get(curr);
      return agg;
    }, {});
    const removed = (deltas.removed || []).reduce((agg, curr) => {
      agg[pathJoin(this.dbPath, curr)] = null;
      return agg;
    }, {});
    const updated = (deltas.changed || []).reduce((agg, curr) => {
      agg[pathJoin(this.dbPath, curr)] = rec.get(curr);
      return agg;
    }, {});
    return {...added, ...removed, ...updated};
  }
}
FireModel2.auditLogs = "/auditing";
FireModel2._dispatchActive = false;
FireModel2._dispatch = defaultDispatch;

// src/record/buildDeepRelationshipLinks.ts
async function buildDeepRelationshipLinks2(rec, property2) {
  const meta2 = getModelMeta(rec).property(property2);
  return meta2.relType === "hasMany" ? processHasMany3(rec, property2) : processBelongsTo(rec, property2);
}
async function processHasMany3(rec, property2) {
  const meta2 = getModelMeta(rec).property(property2);
  const fks = rec.get(property2);
  const promises = [];
  for (const key2 of Object.keys(fks)) {
    const fk6 = fks[key2];
    if (fk6 !== true) {
      const fkRecord = await Record2.add(meta2.fkConstructor(), fk6, {
        setDeepRelationships: true
      });
      await rec.addToRelationship(property2, fkRecord.compositeKeyRef);
    }
  }
  const newFks = Object.keys(rec.get(property2)).reduce((foreignKeys, curr) => {
    const fk6 = fks[curr];
    if (fk6 !== true) {
      delete foreignKeys[curr];
    }
    return foreignKeys;
  }, {});
  rec._data[property2] = newFks;
  return;
}
async function processBelongsTo(rec, property2) {
  const fk6 = rec.get(property2);
  const meta2 = getModelMeta(rec).property(property2);
  if (fk6 && typeof fk6 === "object") {
    const fkRecord = Record2.add(meta2.fkConstructor(), fk6, {
      setDeepRelationships: true
    });
  }
}

// src/state-mgmt/actions.ts
var FmEvents;
(function(FmEvents5) {
  FmEvents5["RECORD_ADDED_LOCALLY"] = "@firemodel/RECORD_ADDED_LOCALLY";
  FmEvents5["RECORD_ADDED_CONFIRMATION"] = "@firemodel/RECORD_ADDED_CONFIRMATION";
  FmEvents5["RECORD_ADDED_ROLLBACK"] = "@firemodel/RECORD_ADDED_ROLLBACK";
  FmEvents5["RECORD_ADDED"] = "@firemodel/RECORD_ADDED";
  FmEvents5["RECORD_CHANGED_LOCALLY"] = "@firemodel/RECORD_CHANGED_LOCALLY";
  FmEvents5["RECORD_CHANGED_CONFIRMATION"] = "@firemodel/RECORD_CHANGED_CONFIRMATION";
  FmEvents5["RECORD_CHANGED_ROLLBACK"] = "@firemodel/RECORD_CHANGED_ROLLBACK";
  FmEvents5["RECORD_CHANGED"] = "@firemodel/RECORD_CHANGED";
  FmEvents5["RECORD_MOVED"] = "@firemodel/RECORD_MOVED";
  FmEvents5["RECORD_REMOVED_LOCALLY"] = "@firemodel/RECORD_REMOVED_LOCALLY";
  FmEvents5["RECORD_REMOVED_CONFIRMATION"] = "@firemodel/RECORD_REMOVED_CONFIRMATION";
  FmEvents5["RECORD_REMOVED_ROLLBACK"] = "@firemodel/RECORD_REMOVED_LOCALLY";
  FmEvents5["RECORD_REMOVED"] = "@firemodel/RECORD_REMOVED";
  FmEvents5["PERMISSION_DENIED"] = "@firemodel/PERMISSION_DENIED";
  FmEvents5["RECORD_LOCAL_ROLLBACK"] = "@firemodel/RECORD_LOCAL_ROLLBACK";
  FmEvents5["SINCE_UPDATED"] = "@firemodel/SINCE_UPDATED";
  FmEvents5["WATCHER_STARTING"] = "@firemodel/WATCHER_STARTING";
  FmEvents5["WATCHER_STARTED"] = "@firemodel/WATCHER_STARTED";
  FmEvents5["WATCHER_SYNC"] = "@firemodel/WATCHER_SYNC";
  FmEvents5["WATCHER_FAILED"] = "@firemodel/WATCHER_FAILED";
  FmEvents5["WATCHER_STOPPED"] = "@firemodel/WATCHER_STOPPED";
  FmEvents5["WATCHER_STOPPED_ALL"] = "@firemodel/WATCHER_STOPPED_ALL";
  FmEvents5["RELATIONSHIP_REMOVED_LOCALLY"] = "@firemodel/RELATIONSHIP_REMOVED_LOCALLY";
  FmEvents5["RELATIONSHIP_REMOVED_CONFIRMATION"] = "@firemodel/RELATIONSHIP_REMOVED_CONFIRMATION";
  FmEvents5["RELATIONSHIP_REMOVED_ROLLBACK"] = "@firemodel/RELATIONSHIP_REMOVED_ROLLBACK";
  FmEvents5["RELATIONSHIP_ADDED_LOCALLY"] = "@firemodel/RELATIONSHIP_ADDED_LOCALLY";
  FmEvents5["RELATIONSHIP_ADDED_CONFIRMATION"] = "@firemodel/RELATIONSHIP_ADDED_CONFIRMATION";
  FmEvents5["RELATIONSHIP_ADDED_ROLLBACK"] = "@firemodel/RELATIONSHIP_ADDED_ROLLBACK";
  FmEvents5["RELATIONSHIP_SET_LOCALLY"] = "@firemodel/RELATIONSHIP_SET_LOCALLY";
  FmEvents5["RELATIONSHIP_SET_CONFIRMATION"] = "@firemodel/RELATIONSHIP_SET_CONFIRMATION";
  FmEvents5["RELATIONSHIP_SET_ROLLBACK"] = "@firemodel/RELATIONSHIP_ADDED_ROLLBACK";
  FmEvents5["RELATIONSHIP_DUPLICATE_ADD"] = "@firemodel/RELATIONSHIP_DUPLICATE_ADD";
  FmEvents5["APP_CONNECTED"] = "@firemodel/APP_CONNECTED";
  FmEvents5["APP_DISCONNECTED"] = "@firemodel/APP_DISCONNECTED";
  FmEvents5["UNEXPECTED_ERROR"] = "@firemodel/UNEXPECTED_ERROR";
})(FmEvents || (FmEvents = {}));

// src/state-mgmt/redux.ts

// src/state-mgmt/VuexWrapper.ts
function VeuxWrapper(vuexDispatch) {
  return async (reduxAction) => {
    const type = reduxAction.type;
    delete reduxAction.type;
    return vuexDispatch(type, reduxAction);
  };
}

// src/state-mgmt/events.ts

// src/state-mgmt/IWatcherEventContext.ts

// src/state-mgmt/IFmLocalEvent.ts

// src/state-mgmt/index.ts
var IFmCrudOperations;
(function(IFmCrudOperations3) {
  IFmCrudOperations3["add"] = "add";
  IFmCrudOperations3["update"] = "update";
  IFmCrudOperations3["remove"] = "remove";
})(IFmCrudOperations || (IFmCrudOperations = {}));

// src/path.ts
const moreThanThreePeriods2 = /\.{3,}/g;
if (!Array.isArray) {
  Array.isArray = (arg) => {
    return Object.prototype.toString.call(arg) === "[object Array]";
  };
}
const errorStr = (type) => {
  return `tried to join something other than undefined, a string or an array [${type}], it was ignored in pathJoin's result`;
};
function pathJoin2(...args) {
  return args.reduce((prev, val) => {
    if (typeof prev === "undefined") {
      return;
    }
    if (val === void 0) {
      return prev;
    }
    return typeof val === "string" || typeof val === "number" ? joinStringsWithSlash(prev, "" + val) : Array.isArray(val) ? joinStringsWithSlash(prev, pathJoin2.apply(null, val)) : console.error(errorStr(typeof val));
  }, "").replace(moreThanThreePeriods2, "..");
}
function joinStringsWithSlash(str1, str2) {
  const str1isEmpty = !str1.length;
  const str1EndsInSlash = str1[str1.length - 1] === "/";
  const str2StartsWithSlash = str2[0] === "/";
  const res = str1EndsInSlash && str2StartsWithSlash && str1 + str2.slice(1) || !str1EndsInSlash && !str2StartsWithSlash && !str1isEmpty && str1 + "/" + str2 || str1 + str2;
  return res;
}

// src/Audit.ts
async function writeAudit(record, action, changes, options = {}) {
  const db2 = options.db || FireModel2.defaultDb;
  await Record2.add(AuditLog, {
    modelName: capitalize(record.modelName),
    modelId: record.id,
    action,
    changes
  }, {db: db2});
}

// src/errors/DexieError.ts
class DexieError2 extends Error {
  constructor(message, classification = "firemodel/dexie") {
    super(message);
    this.firemodel = true;
    const parts2 = classification.split("/");
    const [type, subType] = parts2.length === 1 ? ["firemodel", parts2[0]] : parts2;
    this.name = `${type}/${subType}`;
    this.code = subType;
  }
}

// src/errors/FireModelProxyError.ts
class FireModelProxyError extends FireModelError2 {
  constructor(e, context = "", name2 = "") {
    super("", !name2 ? `firemodel/${e.name}` : name2);
    this.firemodel = true;
    this.originalError = e;
    this.message = context ? `${context}.

${e.message}.` : e.message;
    this.stack = e.stack;
  }
}

// src/errors/relationships/FkDoesNotExist.ts
class FkDoesNotExist extends FireModelError2 {
  constructor(pk6, property2, fkId) {
    const fkConstructor = pk6.META.relationship("property").fkConstructor();
    const fkModel = new fkConstructor();
    const message = `Attempt add a FK on of "${pk6.constructor.name}::${fkId}" failed because the model "${fkModel.constructor.name}::${fkId}" doesn't exist!`;
    super(message, "firemodel/fk-does-not-exist");
  }
}

// src/errors/relationships/DuplicateRelationship.ts
class DuplicateRelationship extends FireModelError2 {
  constructor(pk6, property2, fkId) {
    const fkConstructor = pk6.META.relationship("property").fkConstructor();
    const fkModel = new fkConstructor();
    const message = `Attempt add a FK on of "${pk6.constructor.name}::${fkId}" failed because the model "${fkModel.constructor.name}::${fkId}" already had that relationship defined! You can either set the "duplicationIsError" to "false" (the default) or treat this as an error and fix`;
    super(message, "firemodel/duplicate-relationship");
  }
}

// src/errors/relationships/MissingReciprocalInverse.ts
class MissingReciprocalInverse2 extends FireModelError2 {
  constructor(rec, property2) {
    super("", "firemodel/missing-reciprocal-inverse");
    const fkRecord = Record2.create(rec.META.relationship(property2).fkConstructor(), {db: rec.db});
    const pkInverse = rec.META.relationship(property2).inverseProperty;
    const fkInverse = (fkRecord.META.relationship(pkInverse) || {}).inverseProperty || "undefined";
    const message = `The model "${capitalize(rec.modelName)}" is trying to leverage it's relationship with the model "${capitalize(fkRecord.modelName)}" through the property "${property2}" but it appears these two models are in conflict. ${capitalize(rec.modelName)} has been defined to look for an inverse property of "${capitalize(rec.modelName)}.${rec.META.relationship(property2).inverseProperty}" but it is missing [ ${fkInverse} ]! Look at your model definitions and make sure this is addressed.`;
    this.message = message;
  }
}

// src/errors/relationships/IncorrectReciprocalInverse.ts
class IncorrectReciprocalInverse extends FireModelError2 {
  constructor(rec, property2) {
    super("", "firemodel/missing-reciprocal-inverse");
    let message;
    const fkRecord = Record2.create(rec.META.relationship(property2).fkConstructor(), {db: rec.db});
    const inverseProperty = rec.META.relationship(property2).inverseProperty;
    const fkInverse = fkRecord.META.relationship(inverseProperty);
    if (!fkInverse) {
      const e = new MissingReciprocalInverse2(rec, property2);
      throw e;
    } else {
      const recipricalInverse = fkInverse.inverseProperty;
      message = `The model ${rec.modelName} is trying to leverage it's relationship with ${fkRecord.modelName} but it appears these two models are in conflict! ${rec.modelName} has been defined to look for an inverse property of "${inverseProperty}" but on ${fkRecord.modelName} model the inverse property points back to a property of "${recipricalInverse}"! Look at your model definitions and make sure this is addressed.`;
    }
    this.message = message;
  }
}

// src/errors/relationships/NotHasManyRelationship.ts
class NotHasManyRelationship extends FireModelError2 {
  constructor(rec, property2, method) {
    super("", "firemodel/not-hasMany-reln");
    this.message = `attempt to call ${rec.modelName}::${method}() with property "${property2}" failed because ${property2} does not have a hasMany relationship`;
  }
}

// src/errors/relationships/NotHasOneRelationship.ts
class NotHasOneRelationship extends FireModelError2 {
  constructor(rec, property2, method) {
    super("", "firemodel/not-hasOne-reln");
    this.message = `attempt to call ${rec.modelName}::${method}() with property "${property2}" failed because ${property2} does not have a hasOne relationship`;
  }
}

// src/errors/relationships/UnknownRelationshipProblem.ts
class UnknownRelationshipProblem extends FireModelError2 {
  constructor(err, rec, property2, operation = "n/a", whileDoing) {
    const message = `An unexpected error occurred while working with a "${operation}" operation on ${rec.modelName}::${property2}. ${whileDoing ? `This error was encounted while working on ${whileDoing}. ` : ""}The error reported was [${err.name}]: ${err.message}`;
    super(message, "firemodel/unknown-relationship-problem");
    this.stack = err.stack;
  }
}

// src/errors/relationships/MissingInverseProperty.ts
class MissingInverseProperty extends FireModelError2 {
  constructor(rec, property2) {
    super("", "firemodel/missing-inverse-property");
    const fkRecord = Record2.create(rec.META.relationship(property2).fkConstructor(), {db: rec.db});
    this.from = capitalize(rec.modelName);
    this.to = capitalize(fkRecord.modelName);
    const pkInverse = rec.META.relationship(property2).inverseProperty;
    this.inverseProperty = pkInverse;
    const message = `Missing Inverse Property: the model "${this.from}" has defined a relationship with the "${this.to}" model where the FK property is "${property2}" and it states that the "inverse property" is "${pkInverse}" on the ${this.to} model. Unfortunately the ${this.to} model does NOT define a property called "${this.inverseProperty}".`;
    this.message = message;
  }
}

// src/errors/relationships/index.ts

// src/errors/mocks/MockError.ts
class MockError extends Error {
  constructor(message, classification = "firemodel/error") {
    super(message);
    this.firemodel = true;
    const parts2 = classification.split("/");
    const [type, subType] = parts2.length === 1 ? ["firemodel", parts2[0]] : parts2;
    this.name = `${type}/${subType}`;
    this.code = subType;
  }
}

// src/errors/decorators/index.ts

// src/errors/DynamicPropertiesNotReady.ts
class DynamicPropertiesNotReady extends FireModelError2 {
  constructor(rec, message) {
    message = message ? message : `An attempt to interact with the record ${rec.modelName} in a way that requires that the fully composite key be specified. The required parameters for this model to be ready for this are: ${rec.dynamicPathComponents.join(", ")}.`;
    super(message, "firemodel/dynamic-properties-not-ready");
  }
}

// src/errors/index.ts

// src/watchers/watcherPool.ts
let watcherPool3 = {};
function getWatcherPool() {
  return watcherPool3;
}
function getWatcherPoolList() {
  return hashToArray(getWatcherPool());
}
function addToWatcherPool(item) {
  watcherPool3[item.watcherId] = item;
}
function clearWatcherPool() {
  watcherPool3 = {};
}
function removeFromWatcherPool(code) {
  delete watcherPool3[code];
  return watcherPool3;
}

// node_modules/@forest-fire/serialized-query/dist/es/BaseSerializer.js
class BaseSerializer {
  constructor(path4 = "/") {
    this._path = slashNotation2(path4);
  }
  static async create(constructor, path4 = "/") {
    return new constructor(path4);
  }
  get db() {
    if (this._db) {
      return this._db;
    }
    throw new Error("Attempt to use SerializedQuery without setting database");
  }
  get path() {
    return this._path;
  }
  get identity() {
    return {
      endAtKey: this._endAtKey,
      endAt: this._endAt,
      equalToKey: this._equalToKey,
      equalTo: this._equalTo,
      limitToFirst: this._limitToFirst,
      limitToLast: this._limitToLast,
      orderByKey: this._orderKey,
      orderBy: this._orderBy,
      path: this._path,
      startAtKey: this._startAtKey,
      startAt: this._startAt
    };
  }
  setDB(db2) {
    this._db = db2;
    return this;
  }
  setPath(path4) {
    this._path = slashNotation2(path4);
    return this;
  }
  hashCode() {
    const identity = JSON.stringify(this.identity);
    let hash = 0;
    if (identity.length === 0) {
      return hash;
    }
    for (let i = 0; i < identity.length; i++) {
      const char = identity.charCodeAt(i);
      hash = (hash << 5) - hash + char;
      hash = hash & hash;
    }
    return hash;
  }
  limitToFirst(value) {
    this._limitToFirst = value;
    return this;
  }
  limitToLast(value) {
    this._limitToLast = value;
    return this;
  }
  orderByChild(child) {
    this._orderBy = "orderByChild";
    this._orderKey = child;
    return this;
  }
  orderByValue() {
    this._orderBy = "orderByValue";
    return this;
  }
  orderByKey() {
    this._orderBy = "orderByKey";
    return this;
  }
  startAt(value, key2) {
    this._startAt = value;
    this._startAtKey = key2;
    return this;
  }
  endAt(value, key2) {
    this._endAt = value;
    this._endAtKey = key2;
    return this;
  }
  equalTo(value, key2) {
    this._equalTo = value;
    this._equalToKey = key2;
    return this;
  }
  toJSON() {
    return this.identity;
  }
  toString() {
    return JSON.stringify(this.identity, null, 2);
  }
}
function slashNotation2(path4) {
  return path4.replace(/\./g, "/");
}

// node_modules/@forest-fire/serialized-query/dist/es/SerializedFirestoreQuery.js
class SerializedFirestoreQuery extends BaseSerializer {
  constructor() {
    super(...arguments);
    this._orderBy = "orderBy";
  }
  static path(path4 = "/") {
    return new SerializedFirestoreQuery(path4);
  }
  get db() {
    if (this._db) {
      return this._db;
    }
    throw new Error("Attempt to use SerializedFirestoreQuery without setting database");
  }
  orderBy(child) {
    this._orderBy = "orderBy";
    this._orderKey = child;
    return this;
  }
  set db(value) {
    this._db = value;
  }
  deserialize(db2) {
    const database2 = db2 || this.db;
    let q = database2.ref(this.path);
    switch (this.identity.orderBy) {
      case "orderByKey":
        console.warn(`DEPRECATION: orderByKey sort is not supported in Firestore [${this.path}]`);
        break;
      case "orderByValue":
        console.warn(`DEPRECATION: orderByValue sort is not supported in Firestore [${this.path}]`);
        break;
      case "orderByChild":
      case "orderBy":
        q = q.orderBy(this.identity.orderByKey);
        break;
    }
    if (this.identity.limitToFirst) {
      q.limit(this.identity.limitToFirst);
    }
    if (this.identity.limitToLast) {
      q = q.limitToLast(this.identity.limitToLast);
    }
    if (this.identity.startAt) {
      q = q.where(this.path, ">", this.identity.startAt);
    }
    if (this.identity.endAt) {
      q = q.where(this.path, "<", this.identity.endAt);
    }
    if (this.identity.equalTo) {
      q = q.where(this.path, "==", this.identity.equalTo);
    }
    return q;
  }
  async execute(db2) {
    const database2 = db2 || this.db;
    const snapshot = await this.deserialize(database2).get();
    return snapshot;
  }
  where(operation, value, key2) {
    switch (operation) {
      case "=":
        return this.equalTo(value, key2);
      case ">":
        return this.startAt(value, key2);
      case "<":
        return this.endAt(value, key2);
      default:
        const err = new Error(`Unknown comparison operator: ${operation}`);
        err.code = "invalid-operator";
        throw err;
    }
  }
}

// node_modules/@forest-fire/serialized-query/dist/es/SerializedRealTimeQuery.js
class SerializedRealTimeQuery extends BaseSerializer {
  constructor() {
    super(...arguments);
    this._orderBy = "orderByKey";
  }
  static path(path4 = "/") {
    return new SerializedRealTimeQuery(path4);
  }
  startAt(value, key2) {
    this.validateKey("startAt", key2, [
      RealQueryOrderType.orderByChild,
      RealQueryOrderType.orderByValue
    ]);
    super.startAt(value, key2);
    return this;
  }
  endAt(value, key2) {
    this.validateKey("endAt", key2, [
      RealQueryOrderType.orderByChild,
      RealQueryOrderType.orderByValue
    ]);
    super.endAt(value, key2);
    return this;
  }
  equalTo(value, key2) {
    super.equalTo(value, key2);
    this.validateKey("equalTo", key2, [
      RealQueryOrderType.orderByChild,
      RealQueryOrderType.orderByValue
    ]);
    return this;
  }
  deserialize(db2) {
    const database2 = db2 || this.db;
    let q = database2.ref(this.path);
    switch (this._orderBy) {
      case "orderByKey":
        q = q.orderByKey();
        break;
      case "orderByValue":
        q = q.orderByValue();
        break;
      case "orderByChild":
        q = q.orderByChild(this.identity.orderByKey);
        break;
    }
    if (this.identity.limitToFirst) {
      q = q.limitToFirst(this.identity.limitToFirst);
    }
    if (this.identity.limitToLast) {
      q = q.limitToLast(this.identity.limitToLast);
    }
    if (this.identity.startAt) {
      q = q.startAt(this.identity.startAt, this.identity.startAtKey);
    }
    if (this.identity.endAt) {
      q = q.endAt(this.identity.endAt, this.identity.endAtKey);
    }
    if (this.identity.equalTo) {
      q = this.identity.equalToKey ? q.equalTo(this.identity.equalTo, this.identity.equalToKey) : q.equalTo(this.identity.equalTo);
    }
    return q;
  }
  async execute(db2) {
    const database2 = db2 || this.db;
    const snapshot = await this.deserialize(database2).once("value");
    return snapshot;
  }
  where(operation, value, key2) {
    switch (operation) {
      case "=":
        return this.equalTo(value, key2);
      case ">":
        return this.startAt(value, key2);
      case "<":
        return this.endAt(value, key2);
      default:
        const err = new Error(`Unknown comparison operator: ${operation}`);
        err.code = "invalid-operator";
        throw err;
    }
  }
  validateKey(caller, key2, allowed) {
    const isNotAllowed = allowed.includes(this._orderBy) === false;
    if (key2 && isNotAllowed) {
      throw new Error(`You can not use the "key" parameter with ${caller}() when using a "${this._orderBy}" sort. Valid ordering strategies are: ${allowed.join(", ")}`);
    }
  }
}

// node_modules/@forest-fire/serialized-query/dist/es/@types/serialized-types.js
var RealQueryOrderType;
(function(RealQueryOrderType2) {
  RealQueryOrderType2["orderByChild"] = "orderByChild";
  RealQueryOrderType2["orderByKey"] = "orderByKey";
  RealQueryOrderType2["orderByValue"] = "orderByValue";
})(RealQueryOrderType || (RealQueryOrderType = {}));

// node_modules/firemock/dist/es/@types/query-types.js
var SortOrder;
(function(SortOrder2) {
  SortOrder2[SortOrder2["asc"] = 0] = "asc";
  SortOrder2[SortOrder2["desc"] = 1] = "desc";
})(SortOrder || (SortOrder = {}));

// node_modules/firemock/dist/es/shared/atRandom.js
function atRandom2(things, excluding = []) {
  things = things.filter((i) => !excluding.includes(i));
  const random = Math.floor(Math.random() * things.length);
  return things[random];
}

// node_modules/firemock/dist/es/shared/dotify.js
const dotify = (path4) => {
  const dotPath = path4.replace(/[\\\/]/g, ".");
  return removeDotsAtExtremes(dotPath.slice(0, 1) === "." ? dotPath.slice(1) : dotPath);
};
function dotifyKeys(obj) {
  const result = {};
  Object.keys(obj).forEach((key2) => {
    result[dotify(key2)] = obj[key2];
  });
  return result;
}
function removeDotsAtExtremes(path4) {
  const front = path4.slice(0, 1) === "." ? path4.slice(1) : path4;
  return front.slice(-1) === "." ? front.slice(0, front.length - 1) : front;
}

// node_modules/firemock/dist/es/shared/limitFilters.js
function limitToFirst(query) {
  const value = query.identity.limitToFirst;
  return (list) => {
    if (value === void 0) {
      return list;
    }
    return list.slice(0, value);
  };
}
function limitToLast(query) {
  const value = query.identity.limitToLast;
  return (list) => {
    if (value === void 0) {
      return list;
    }
    return list.slice(-1 * value);
  };
}

// node_modules/firemock/dist/es/shared/pluralize.js
const exceptions2 = {
  child: "children",
  man: "men",
  woman: "women",
  tooth: "teeth",
  foot: "feet",
  mouse: "mice",
  person: "people",
  company: "companies"
};
function pluralize(singular) {
  const rules = [
    {find: /(.*)(ch|sh|ax|ss)$/, replace: "$1$2es"},
    {find: /(.*)(fe|f)$/, replace: "$1ves"},
    {find: /(.*)us$/, replace: "$1i"}
  ];
  for (const r of rules) {
    if (r.find.test(singular)) {
      return singular.replace(r.find, r.replace);
    }
  }
  return exceptions2[singular] ? exceptions2[singular] : `${singular}s`;
}
const addException = (singular, plural) => {
  exceptions2[singular] = plural;
};

// node_modules/firemock/dist/es/shared/queryFilters.js
function startAt(query) {
  const key2 = query.identity.startAtKey || query.identity.orderByKey;
  const value = query.identity.startAt;
  return (record) => {
    if (value === void 0) {
      return true;
    }
    return key2 ? record[key2] >= value : record >= value;
  };
}
function endAt(query) {
  const key2 = query.identity.endAtKey || query.identity.orderByKey;
  const value = query.identity.endAt;
  return (record) => {
    if (value === void 0) {
      return true;
    }
    return key2 ? record[key2] <= value : record <= value;
  };
}
function equalTo(query) {
  const key2 = query.identity.equalToKey || query.identity.orderByKey;
  const value = query.identity.equalTo;
  return (record) => {
    if (value === void 0) {
      return true;
    }
    return key2 ? record[key2] === value : record === value;
  };
}

// node_modules/firemock/dist/es/shared/sortFns.js
const sortFns_exports = {};
__export(sortFns_exports, {
  isOrderByChild: () => isOrderByChild,
  orderByChild: () => orderByChild,
  orderByKey: () => orderByKey2,
  orderByValue: () => orderByValue2
});
const orderByChild = (child) => {
  return (a, b) => {
    return a[child] > b[child] ? -1 : a[child] === b[child] ? 0 : 1;
  };
};
const orderByKey2 = (a, b) => {
  return a.id > b.id ? -1 : a.id === b.id ? 0 : 1;
};
const orderByValue2 = (a, b) => {
  return a.value > b.value ? -1 : a.value === b.value ? 0 : 1;
};
function isOrderByChild(query, fn2) {
  return query.identity.orderBy === RealQueryOrderType.orderByChild;
}

// node_modules/firemock/dist/es/shared/runQuery.js
const orderByKey = (list) => {
  const keys2 = Object.keys(list).sort();
  let hash = {};
  keys2.forEach((k) => {
    hash[k] = list[k];
  });
  return hash;
};
const orderByValue = (list, direction = SortOrder.asc) => {
  const A = direction === SortOrder.asc ? 1 : -1;
  const B = A * -1;
  const values = hashToArray(list).sort((a, b) => a.value > b.value ? 1 : -1);
  return values.reduce((agg, curr) => {
    agg[curr.id] = curr.value;
    return agg;
  }, {});
};
const sortFn = (query) => query.identity.orderBy === RealQueryOrderType.orderByChild ? orderByChild(query.identity.orderByKey) : sortFns_exports[query.identity.orderBy];
function runQuery(query, data2) {
  const isListOfObjects = typeof data2 === "object" && Object.keys(data2).every((i) => typeof data2[i] === "object");
  const dataIsAScalar = ["string", "boolean", "number"].includes(typeof data2);
  if (dataIsAScalar) {
    return data2;
  }
  const anArrayOfScalar = Array.isArray(data2) && data2.every((i) => typeof i !== "object");
  const dataIsAnObject = !Array.isArray(data2) && typeof data2 === "object";
  if (dataIsAnObject && !isListOfObjects) {
    data2 = query.identity.orderBy === "orderByKey" ? orderByKey(data2) : orderByValue(data2);
    const limitToKeys = query.identity.limitToFirst ? Object.keys(data2).slice(0, query.identity.limitToFirst) : query.identity.limitToLast ? Object.keys(data2).slice(-1 * query.identity.limitToLast) : false;
    if (limitToKeys) {
      Object.keys(data2).forEach((k) => {
        if (!limitToKeys.includes(k)) {
          delete data2[k];
        }
      });
    }
    return data2;
  }
  const dataList = isListOfObjects || dataIsAnObject ? hashToArray(data2) : data2;
  if (!dataList) {
    return void 0;
  }
  const limitFilter = _limitFilter(query);
  const queryFilter = _queryFilter(query);
  const list = limitFilter(queryFilter(dataList.sort(sortFn(query))));
  return isListOfObjects ? arrayToHash(list) : dataIsAnObject ? list.reduce((agg, curr) => {
    if (curr.id && curr.value) {
      agg[curr.id] = curr.value;
    } else if (curr.id) {
      const hash = {...curr};
      delete hash.id;
      agg[curr.id] = hash;
    } else {
      console.log({
        message: `Unsure what to do with part of a data structure resulting from the the query: ${query.identity}.

The item in question was: "${curr}".`,
        severity: 0
      });
    }
    return agg;
  }, {}) : list;
}
function _limitFilter(query) {
  const first4 = limitToFirst(query);
  const last2 = limitToLast(query);
  return (list) => {
    return first4(last2(list));
  };
}
function _queryFilter(query) {
  return (list) => {
    return list.filter(equalTo(query)).filter(startAt(query)).filter(endAt(query));
  };
}

// node_modules/firemock/dist/es/shared/util.js
const lodash9 = __toModule(require_lodash());
const lodash10 = __toModule(require_lodash3());
function normalizeRef(r) {
  r = r.replace("/", ".");
  r = r.slice(0, 1) === "." ? r.slice(1) : r;
  return r;
}
function parts(r) {
  return normalizeRef(r).split(".");
}
function leafNode(r) {
  return parts(r).pop();
}
function getRandomInt(min4, max4) {
  return Math.floor(Math.random() * (max4 - min4 + 1)) + min4;
}
function join(...paths) {
  return paths.map((p) => {
    return p.replace(/[\/\\]/gm, ".");
  }).map((p) => p.slice(-1) === "." ? p.slice(0, p.length - 1) : p).map((p) => p.slice(0, 1) === "." ? p.slice(1) : p).join(".");
}
function keyAndParent(dotPath) {
  const sections = dotPath.split(".");
  const changeKey = sections.pop();
  const parent = sections.join(".");
  return {parent, key: changeKey};
}
function dotNotation3(path4) {
  path4 = path4.slice(0, 1) === "/" ? path4.slice(1) : path4;
  return path4 ? path4.replace(/\//g, ".") : void 0;
}
function slashNotation3(path4) {
  return path4.replace(/\./g, "/");
}
function getParent(dotPath) {
  return keyAndParent(dotPath).parent;
}
function getKey(dotPath) {
  return keyAndParent(dotPath).key;
}
var Delays;
(function(Delays2) {
  Delays2["random"] = "random";
  Delays2["weak"] = "weak-mobile";
  Delays2["mobile"] = "mobile";
  Delays2["WiFi"] = "WIFI";
})(Delays || (Delays = {}));
let _delay = 5;
function setNetworkDelay(value) {
  _delay = value;
}
async function networkDelay(returnValue) {
  await wait(calcDelay());
  return returnValue;
}
function calcDelay() {
  const delay = _delay;
  if (typeof delay === "number") {
    return delay;
  }
  if (Array.isArray(delay)) {
    const [min4, max4] = delay;
    return getRandomInt(min4, max4);
  }
  if (typeof delay === "object" && !Array.isArray(delay)) {
    const {min: min4, max: max4} = delay;
    return getRandomInt(min4, max4);
  }
  if (delay === "random") {
    return getRandomInt(10, 300);
  }
  if (delay === "mobile") {
    return getRandomInt(300, 500);
  }
  if (delay === "WIFI") {
    return getRandomInt(10, 100);
  }
  throw new Error("Delay property is of unknown format: " + delay);
}
function stripLeadingDot(str) {
  return str.slice(0, 1) === "." ? str.slice(1) : str;
}
function removeDots(str) {
  return str ? str.replace(/\./g, "") : void 0;
}

// node_modules/firemock/dist/es/rtdb/Query.js
class Query {
  constructor(path4, delay = 5) {
    this.path = typeof path4 === "string" ? path4 : SerializedRealTimeQuery.path;
    this._delay = delay;
    this._query = typeof path4 === "string" ? SerializedRealTimeQuery.path(path4) : path4;
  }
  get ref() {
    return this;
  }
  limitToLast(num) {
    this._query.limitToLast(num);
    return this;
  }
  limitToFirst(num) {
    this._query.limitToFirst(num);
    return this;
  }
  equalTo(value, key2) {
    if (key2 && this._query.identity.orderBy === RealQueryOrderType.orderByKey) {
      throw new Error(`You can not use "equalTo(val, key)" with a "key" property defined when using a key sort!`);
    }
    this._query.equalTo(value, key2);
    return this;
  }
  startAt(value, key2) {
    this._query.startAt(value, key2);
    return this;
  }
  endAt(value, key2) {
    this._query.endAt(value, key2);
    return this;
  }
  on(eventType, callback, cancelCallbackOrContext, context) {
    this.addListener(this._query, eventType, callback, cancelCallbackOrContext, context);
    return null;
  }
  async once(eventType) {
    await networkDelay();
    return this.getQuerySnapShot();
  }
  off() {
    console.log("off() not implemented yet on Firemock");
  }
  isEqual(other) {
    return this._query.hashCode() === other._query.hashCode();
  }
  orderByChild(prop) {
    this._query.orderByChild(prop);
    return this;
  }
  orderByValue() {
    this._query.orderByValue();
    return this;
  }
  orderByKey() {
    this._query.orderByKey();
    return this;
  }
  orderByPriority() {
    return this;
  }
  toJSON() {
    return {
      identity: this.toString(),
      query: this._query.identity
    };
  }
  toString() {
    return `FireMock::Query@${process.env.FIREBASE_DATA_ROOT_URL}/${this.path}`;
  }
  getKey() {
    return null;
  }
  getParent() {
    return null;
  }
  getRoot() {
    return null;
  }
  getQuerySnapShot() {
    const path4 = this._query.path || this.path;
    const data2 = getDb(path4);
    const results = runQuery(this._query, data2);
    return new SnapShot(leafNode(this._query.path), results ? results : null);
  }
}

// node_modules/firemock/dist/es/auth/client-sdk/UserObject/notImplemented.js
const notImplemented3 = {
  async delete() {
    throw new Error("the Mock Auth feature for delete() is not yet implemented");
  },
  async linkAndRetrieveDataWithCredential(credential2) {
    throw new Error(`linkAndRetrieveDataWithCredential() is not implemented yet in the client-sdk's mock auth`);
  },
  async linkWithCredential(credential2) {
    throw new Error(`linkWithCredential() is not implemented yet in the client-sdk's mock auth`);
  },
  async linkWithPhoneNumber(phoneNUmber, applicationVerificer) {
    return fakeApplicationVerifier;
  },
  async linkWithPopup(provider) {
    throw new Error(`linkWithPopup() is not implemented yet in the client-sdk's mock auth`);
  },
  async linkWithRedirect(provider) {
    return;
  },
  async reauthenticateAndRetrieveDataWithCredential(credential2) {
    throw new Error(`reauthenticateAndRetrieveDataWithCredential() is not implemented yet in the client-sdk's mock auth`);
  },
  async reauthenticateWithCredential(credential2) {
    throw new Error(`reauthenticateWithCredential() is not implemented yet in the client-sdk's mock auth`);
  },
  async reauthenticateWithPhoneNumber(phoneNumber, applicationVerifier) {
    return fakeApplicationVerifier;
  },
  async reauthenticateWithPopup(provider) {
    throw new Error(`reauthenticateWithPopup() is not implemented yet in the client-sdk's mock auth`);
  },
  async reauthenticateWithRedirect(provider) {
    throw new Error(`reauthenticateWithRedirect() is not implemented yet in the client-sdk's mock auth`);
  },
  async reload() {
    return;
  },
  async sendEmailVerification(actionCodeSettings) {
    throw new Error(`sendEmailVerification() is not implemented yet in the client-sdk's mock auth`);
  },
  toJSON() {
    return {};
  },
  async unlink(provider) {
    throw new Error(`unlink() is not implemented yet in the client-sdk's mock auth`);
  },
  async updatePhoneNumber(phoneCredential) {
    throw new Error(`updatePhoneNumber() is not implemented yet in the client-sdk's mock auth`);
  }
};

// node_modules/firemock/dist/es/errors/FireMockError.js
class FireMockError2 extends Error {
  constructor(message, classification = "firemock/error") {
    super(message);
    this.firemodel = true;
    const [cat, subcat] = classification.split("/");
    this.code = subcat || "error";
    this.name = classification;
  }
}

// node_modules/firemock/dist/es/auth/state-mgmt/store.js
let _users = [];
let _currentUser;
let _currentUserCredential;
let _authObservers = [];
let _providers = [];
function getAuthObservers() {
  return _authObservers;
}
function addAuthObserver(ob) {
  _authObservers.push(ob);
}
function initializeAuth(config) {
  const baseUser = () => ({
    emailVerified: false,
    uid: getRandomMockUid(),
    providerData: []
  });
  _users = (config.users || []).map((u) => ({...baseUser(), ...u})) || [];
  _providers = config.providers || [];
}
function isUser(user) {
  return user.uid !== void 0 ? true : false;
}
function setCurrentUser(user) {
  if (isUser(user)) {
    _currentUser = user.uid;
    _currentUserCredential = {
      user,
      additionalUserInfo: {
        isNewUser: false,
        profile: {},
        providerId: "mock",
        username: user.email
      },
      credential: {
        signInMethod: "mock",
        providerId: "mock",
        toJSON: () => user
      }
    };
  } else {
    _currentUser = user.user.uid;
    _currentUserCredential = user;
  }
  getAuthObservers().map((o) => o(_currentUserCredential.user));
}
function currentUser() {
  return _currentUser ? _users.find((u) => u.uid === _currentUser) : void 0;
}
function clearCurrentUser() {
  _currentUser = void 0;
  _currentUserCredential = void 0;
  getAuthObservers().map((o) => o(void 0));
}
function clearAuthUsers() {
  _users = [];
}
let _defaultAnonymousUid;
function getAnonymousUid() {
  return _defaultAnonymousUid ? _defaultAnonymousUid : getRandomMockUid();
}
function addUser(user) {
  const defaultUser = {
    uid: getRandomMockUid(),
    disabled: false,
    emailVerified: false
  };
  const fullUser = {...defaultUser, ...user};
  if (_users.find((u) => u.uid === fullUser.uid)) {
    throw new FireMockError2(`Attempt to add user with UID of "${fullUser.uid}" failed as the user already exists!`);
  }
  _users = _users.concat(fullUser);
}
function getUserById(uid) {
  return _users.find((u) => u.uid === uid);
}
function getUserByEmail(email) {
  return _users.find((u) => u.email === email);
}
function updateUser(uid, update) {
  const existing = _users.find((u) => u.uid === uid);
  if (!existing) {
    throw new FireMockError2(`Attempt to update the user with UID of "${uid}" failed because this user is not defined in the mock Auth instance!`);
  }
  _users = _users.map((u) => u.uid === uid ? {...u, ...update} : u);
}
function allUsers() {
  return _users;
}
function removeUser(uid) {
  if (!_users.find((u) => u.uid === uid)) {
    throw new FireMockError2(`Attempt to remove the user with UID of "${uid}" failed because this user was NOT in the mock Auth instance!`);
  }
  _users = _users.filter((u) => u.uid !== uid);
}
function authProviders() {
  return _providers;
}
function getRandomMockUid() {
  return `mock-uid-${Math.random().toString(36).substr(2, 10)}`;
}

// node_modules/firemock/dist/es/auth/client-sdk/UserObject/updateEmail.js
async function updateEmail2(newEmail, forceLogin) {
  if (forceLogin) {
    throw new FireMockError2("updating a user's email address requires that the user have recently logged in; use 'reauthenticateWithCredential' to address this error.", "auth/requires-recent-login");
  }
  await networkDelay();
  updateUser(currentUser().uid, {email: newEmail});
}

// node_modules/firemock/dist/es/auth/client-sdk/UserObject/updatePassword.js
async function updatePassword2(newPassword, notRecentLogin) {
  if (notRecentLogin) {
    throw new FireMockError2("updating a user's password requires that the user have recently logged in; use 'reauthenticateWithCredential' to address this error.", "auth/required-recent-login");
  }
  updateUser(currentUser().uid, {
    password: newPassword
  });
}

// node_modules/firemock/dist/es/auth/client-sdk/UserObject/updateProfile.js
async function updateProfile2(profile) {
  updateUser(currentUser().uid, profile);
}

// node_modules/firemock/dist/es/auth/client-sdk/UserObject/userProperties.js
const userProperties2 = () => ({
  displayName: "",
  email: "",
  isAnonymous: true,
  metadata: {},
  phoneNumber: "",
  photoURL: "",
  providerData: [],
  providerId: "",
  refreshToken: "",
  uid: getAnonymousUid()
});

// node_modules/firemock/dist/es/auth/client-sdk/UserObject/getIdToken.js
async function getIdToken() {
  const user = currentUser();
  const userConfig = allUsers().find((i) => i.email === user.email);
  if (!user) {
    throw new Error("not logged in");
  }
  if (userConfig.tokenIds) {
    return atRandom2(userConfig.tokenIds);
  } else {
    return Math.random().toString(36).substr(2, 10);
  }
}

// node_modules/firemock/dist/es/auth/client-sdk/UserObject/getIdTokenResult.js
async function getIdTokenResult(forceRefresh) {
  return {
    authTime: "",
    claims: {},
    expirationTime: "",
    issuedAtTime: "",
    signInProvider: "",
    signInSecondFactor: "",
    token: await getIdToken()
  };
}

// node_modules/firemock/dist/es/auth/client-sdk/UserObject/index.js
const clientApiUser = {
  ...notImplemented3,
  ...userProperties2(),
  getIdToken,
  getIdTokenResult,
  updateEmail: updateEmail2,
  updatePassword: updatePassword2,
  updateProfile: updateProfile2
};

// node_modules/firemock/dist/es/auth/client-sdk/completeUserCredential.js
const deepmerge = __toModule(require_cjs());
function completeUserCredential2(partial) {
  const fakeUserCredential = {
    user: {
      ...clientApiUser,
      displayName: "",
      email: "",
      isAnonymous: true,
      metadata: {},
      phoneNumber: "",
      photoURL: "",
      providerData: [],
      providerId: "",
      refreshToken: "",
      uid: getRandomMockUid()
    },
    additionalUserInfo: {
      isNewUser: false,
      profile: "",
      providerId: "",
      username: "fake"
    },
    operationType: "",
    credential: {
      signInMethod: "fake",
      providerId: "fake",
      toJSON: () => ""
    }
  };
  return deepmerge.default(fakeUserCredential, partial);
}
const fakeApplicationVerifier = {
  async confirm(verificationCode) {
    return completeUserCredential2({});
  },
  verificationId: "verification"
};

// node_modules/firemock/dist/es/auth/client-sdk/authMockHelpers.js
const email_validator = __toModule(require_email_validator());
function emailExistsAsUserInAuth(email) {
  const emails = allUsers().map((i) => i.email);
  return emails.includes(email);
}
function emailIsValidFormat(email) {
  return email_validator.validate(email);
}
function emailHasCorrectPassword(email, password) {
  const config = allUsers().find((i) => i.email === email);
  return config ? config.password === password : false;
}
function userUid(email) {
  const config = allUsers().find((i) => i.email === email);
  return config ? config.uid || getRandomMockUid() : getRandomMockUid();
}
function emailValidationAllowed() {
  return authProviders().includes("emailPassword");
}

// node_modules/firemock/dist/es/auth/client-sdk/implemented.js
const implemented2 = {
  app: {
    name: "mocked-app",
    options: {},
    async delete() {
      return;
    },
    automaticDataCollectionEnabled: false
  },
  onAuthStateChanged(observer) {
    addAuthObserver(observer);
  },
  async setPersistence() {
    console.warn(`currently firemock accepts calls to setPersistence() but it doesn't support it.`);
  },
  signInAnonymously: async () => {
    await networkDelay();
    if (authProviders().includes("anonymous")) {
      const user = {
        ...clientApiUser,
        isAnonymous: true,
        uid: getAnonymousUid()
      };
      const credential2 = {
        signInMethod: "anonymous",
        providerId: "anonymous",
        toJSON: () => ""
      };
      const credentials = {
        user,
        credential: credential2
      };
      const userCredential = completeUserCredential2(credentials);
      addUser(userCredential.user);
      setCurrentUser(userCredential);
      return userCredential;
    } else {
      throw new FireMockError2("you must enable anonymous auth in the Firebase Console", "auth/operation-not-allowed");
    }
  },
  async signInWithEmailAndPassword(email, password) {
    await networkDelay();
    if (!emailValidationAllowed()) {
      throw new FireMockError2("email authentication not allowed", "auth/operation-not-allowed");
    }
    if (!emailIsValidFormat(email)) {
      throw new FireMockError2(`invalid email: ${email}`, "auth/invalid-email");
    }
    const found = allUsers().find((i) => i.email === email);
    if (!found) {
      throw new FireMockError2(`The email "${email}" was not found`, `auth/user-not-found`);
    }
    if (!emailHasCorrectPassword(email, password)) {
      throw new FireMockError2(`Invalid password for ${email}`, "auth/wrong-password");
    }
    const partial = {
      user: {
        email: found.email,
        isAnonymous: false,
        emailVerified: found.emailVerified,
        uid: userUid(email),
        displayName: found.displayName
      },
      credential: {
        signInMethod: "signInWithEmailAndPassword",
        providerId: ""
      },
      additionalUserInfo: {
        username: email
      }
    };
    const u = completeUserCredential2(partial);
    setCurrentUser(u);
    return u;
  },
  async createUserWithEmailAndPassword(email, password) {
    await networkDelay();
    if (!emailValidationAllowed()) {
      throw new FireMockError2("email authentication not allowed", "auth/operation-not-allowed");
    }
    if (emailExistsAsUserInAuth(email)) {
      throw new FireMockError2(`"${email}" user already exists`, "auth/email-already-in-use");
    }
    if (!emailIsValidFormat(email)) {
      throw new FireMockError2(`"${email}" is not a valid email format`, "auth/invalid-email");
    }
    const partial = {
      user: {
        email,
        isAnonymous: false,
        emailVerified: false,
        uid: userUid(email)
      },
      credential: {
        signInMethod: "signInWithEmailAndPassword",
        providerId: ""
      },
      additionalUserInfo: {
        username: email
      }
    };
    const u = completeUserCredential2(partial);
    addUser({uid: partial.user.uid, email, password});
    setCurrentUser(u);
    return u;
  },
  async confirmPasswordReset(code, newPassword) {
    return;
  },
  async sendPasswordResetEmail(email, actionCodeSetting) {
    return;
  },
  async signOut() {
    clearCurrentUser();
  },
  get currentUser() {
    return completeUserCredential2({}).user;
  },
  languageCode: "",
  async updateCurrentUser() {
    return;
  },
  settings: {
    appVerificationDisabledForTesting: false
  }
};

// node_modules/firemock/dist/es/auth.js
let hasConnectedToAuthService = false;
const auth3 = async () => {
  if (hasConnectedToAuthService) {
    return authApi;
  }
  await networkDelay();
  hasConnectedToAuthService = true;
  return authApi;
};
const authApi = {
  ...implemented2
};

// node_modules/firemock/dist/es/rtdb/store.js
const lodash7 = __toModule(require_lodash4());
const lodash8 = __toModule(require_lodash2());
const fast_equals = __toModule(require_fast_equals());
const fast_copy = __toModule(require_fast_copy2());
const deepmerge2 = __toModule(require_cjs());
let db = {};
let _silenceEvents = false;
function silenceEvents() {
  _silenceEvents = true;
}
function restoreEvents() {
  _silenceEvents = false;
}
function shouldSendEvents() {
  return !_silenceEvents;
}
function clearDatabase() {
  const keys2 = Object.keys(db);
  keys2.forEach((key2) => delete db[key2]);
}
function updateDatabase(updatedState) {
  db = deepmerge2.default(db, updatedState);
}
async function auth6() {
  return auth3();
}
function getDb(path4) {
  return path4 ? lodash8.default(db, dotify(path4)) : db;
}
function setDB(path4, value, silent = false) {
  const dotPath = join(path4);
  const oldRef = lodash8.default(db, dotPath);
  const oldValue = typeof oldRef === "object" ? {...oldRef, ...{}} : oldRef;
  const isReference = ["object", "array"].includes(typeof value);
  const dbSnapshot = fast_copy.default({...db});
  if (isReference && fast_equals.deepEqual(oldValue, value) || !isReference && oldValue === value) {
    return;
  }
  if (value === null) {
    const parentValue = lodash8.default(db, getParent(dotPath));
    if (typeof parentValue === "object") {
      delete parentValue[getKey(dotPath)];
      lodash7.default(db, getParent(dotPath), parentValue);
    } else {
      lodash7.default(db, dotPath, void 0);
    }
  } else {
    lodash7.default(db, dotPath, value);
  }
  if (!silent) {
    notify({[dotPath]: value}, dbSnapshot);
  }
}
function updateDB(path4, value) {
  const dotPath = join(path4);
  const oldValue = lodash8.default(db, dotPath);
  let changed = true;
  if (typeof value === "object" && Object.keys(value).every((k) => (oldValue ? oldValue[k] : null) === value[k])) {
    changed = false;
  }
  if (typeof value !== "object" && value === oldValue) {
    changed = false;
  }
  if (!changed) {
    return;
  }
  const newValue = typeof oldValue === "object" ? {...oldValue, ...value} : value;
  setDB(dotPath, newValue);
}
function multiPathUpdateDB(data2) {
  const snapshot = fast_copy.default(db);
  Object.keys(data2).map((key2) => {
    const value = data2[key2];
    const path4 = key2;
    if (lodash8.default(db, path4) !== value) {
      setDB(path4, value, true);
    }
  });
  notify(data2, snapshot);
}
const slashify = (path4) => {
  const slashPath = path4.replace(/\./g, "/");
  return slashPath.slice(0, 1) === "/" ? slashPath.slice(1) : slashPath;
};
function groupEventsByWatcher(data2, dbSnapshot) {
  data2 = dotifyKeys(data2);
  const getFromSnapshot = (path4) => lodash8.default(dbSnapshot, dotify(path4));
  const eventPaths = Object.keys(data2).map((i) => dotify(i));
  const response = [];
  const relativePath = (full, partial) => {
    return full.replace(partial, "");
  };
  const justKey = (obj) => obj ? Object.keys(obj)[0] : null;
  const justValue = (obj) => justKey(obj) ? obj[justKey(obj)] : null;
  getListeners().forEach((listener) => {
    const eventPathsUnderListener = eventPaths.filter((path4) => path4.includes(dotify(listener.query.path)));
    if (eventPathsUnderListener.length === 0) {
      return;
    }
    const paths = [];
    const listenerPath = dotify(listener.query.path);
    const changeObject = eventPathsUnderListener.reduce((changes, path4) => {
      paths.push(path4);
      if (dotify(listener.query.path) === path4) {
        changes = data2[path4];
      } else {
        lodash7.default(changes, dotify(relativePath(path4, listenerPath)), data2[path4]);
      }
      return changes;
    }, {});
    const key2 = listener.eventType === "value" ? changeObject ? justKey(changeObject) : listener.query.path.split(".").pop() : dotify(pathJoin(slashify(listener.query.path), justKey(changeObject)));
    const newResponse = {
      listenerId: listener.id,
      listenerPath,
      listenerEvent: listener.eventType,
      callback: listener.callback,
      eventPaths: paths,
      key: key2,
      changes: justValue(changeObject),
      value: listener.eventType === "value" ? getDb(listener.query.path) : getDb(key2),
      priorValue: listener.eventType === "value" ? lodash8.default(dbSnapshot, listener.query.path) : justValue(lodash8.default(dbSnapshot, listener.query.path))
    };
    response.push(newResponse);
  });
  return response;
}
function removeDB(path4) {
  if (!getDb(path4)) {
    return;
  }
  setDB(path4, null);
}
function pushDB(path4, value) {
  const pushId = key();
  const fullPath = join(path4, pushId);
  const valuePlusId = typeof value === "object" ? {...value, id: pushId} : value;
  setDB(fullPath, valuePlusId);
  return pushId;
}
function reset() {
  removeAllListeners();
  clearDatabase();
}

// node_modules/firemock/dist/es/rtdb/Reference.js
function isMultiPath(data2) {
  Object.keys(data2).map((d) => {
    if (!d) {
      data2[d] = "/";
    }
  });
  const indexesAreStrings = Object.keys(data2).every((i) => typeof i === "string");
  const indexesLookLikeAPath = Object.keys(data2).every((i) => i.indexOf("/") !== -1);
  return indexesAreStrings && indexesLookLikeAPath ? true : false;
}
class Reference extends Query {
  static createQuery(query, delay = 5) {
    if (typeof query === "string") {
      query = new SerializedRealTimeQuery(query);
    }
    const obj = new Reference(query.path, delay);
    obj._query = query;
    return obj;
  }
  static create(path4) {
    return new Reference(path4);
  }
  constructor(path4, _delay2 = 5) {
    super(path4, _delay2);
  }
  get key() {
    return this.path.split(".").pop();
  }
  get parent() {
    const r = parts(this.path).slice(-1).join(".");
    return new Reference(r, getDb(r));
  }
  child(path4) {
    const r = parts(this.path).concat([path4]).join(".");
    return new Reference(r, getDb(r));
  }
  get root() {
    return new Reference("/", getDb("/"));
  }
  push(value, onComplete) {
    const id = pushDB(this.path, value);
    this.path = join(this.path, id);
    if (onComplete) {
      onComplete(null);
    }
    const ref = networkDelay(this);
    return ref;
  }
  remove(onComplete) {
    removeDB(this.path);
    if (onComplete) {
      onComplete(null);
    }
    return networkDelay();
  }
  set(value, onComplete) {
    setDB(this.path, value);
    if (onComplete) {
      onComplete(null);
    }
    return networkDelay();
  }
  update(values, onComplete) {
    if (isMultiPath(values)) {
      multiPathUpdateDB(values);
    } else {
      updateDB(this.path, values);
    }
    if (onComplete) {
      onComplete(null);
    }
    return networkDelay();
  }
  setPriority(priority, onComplete) {
    return networkDelay();
  }
  setWithPriority(newVal, newPriority, onComplete) {
    return networkDelay();
  }
  transaction(transactionUpdate, onComplete, applyLocally) {
    return Promise.resolve({
      committed: true,
      snapshot: null,
      toJSON() {
        return {};
      }
    });
  }
  onDisconnect() {
    return {};
  }
  toString() {
    return this.path ? slashNotation3(join("FireMock::Reference@", this.path, this.key)) : "FireMock::Reference@uninitialized (aka, no path) mock Reference object";
  }
  getSnapshot(key2, value) {
    return new SnapShot(key2, value);
  }
  addListener(pathOrQuery, eventType, callback, cancelCallbackOrContext, context) {
    return addListener(pathOrQuery, eventType, callback, cancelCallbackOrContext, context);
  }
}

// node_modules/firemock/dist/es/rtdb/SnapShot.js
const lodash5 = __toModule(require_lodash2());
class SnapShot {
  constructor(_key, _value) {
    this._key = _key;
    this._value = _value;
  }
  get key() {
    return getKey(join(this._key));
  }
  get ref() {
    return new Reference(this._key);
  }
  val() {
    return Array.isArray(this._value) ? arrayToHash(this._value) : this._value;
  }
  toJSON() {
    return JSON.stringify(this._value);
  }
  child(path4) {
    const value = lodash5.default(this._value, path4, null);
    return value ? new SnapShot(path4, value) : null;
  }
  hasChild(path4) {
    if (typeof this._value === "object") {
      return Object.keys(this._value).indexOf(path4) !== -1;
    }
    return false;
  }
  hasChildren() {
    if (typeof this._value === "object") {
      return Object.keys(this._value).length > 0;
    }
    return false;
  }
  numChildren() {
    if (typeof this._value === "object") {
      return Object.keys(this._value).length;
    }
    return 0;
  }
  exists() {
    return this._value !== null;
  }
  forEach(actionCb) {
    const cloned = this._value.slice(0);
    const sorted = cloned.sort(this._sortingFunction);
    sorted.map((item) => {
      const noId = {...{}, ...item};
      delete noId.id;
      const halt = actionCb(new SnapShot(item.id, noId));
      if (halt) {
        return true;
      }
    });
    return false;
  }
  exportVal() {
    return this.val();
  }
  getPriority() {
    return null;
  }
  sortingFunction(fn2) {
    this._sortingFunction = fn2;
    return this;
  }
}

// node_modules/firemock/dist/es/rtdb/listeners.js
const lodash6 = __toModule(require_lodash2());
let _listeners = [];
async function addListener(pathOrQuery, eventType, callback, cancelCallbackOrContext, context) {
  const query = typeof pathOrQuery === "string" ? new SerializedRealTimeQuery(join(pathOrQuery)) : pathOrQuery;
  pathOrQuery = typeof pathOrQuery === "string" ? join(pathOrQuery) : query.path;
  _listeners.push({
    id: Math.random().toString(36).substr(2, 10),
    query,
    eventType,
    callback,
    cancelCallbackOrContext,
    context
  });
  function ref(dbPath) {
    return new Reference(dbPath);
  }
  const snapshot = await query.deserialize({ref}).once(eventType === "value" ? "value" : "child_added");
  if (eventType === "value") {
    callback(snapshot);
  } else {
    const list = hashToArray(snapshot.val());
    if (eventType === "child_added") {
      list.forEach((i) => callback(new SnapShot(join(query.path, i.id), i)));
    }
  }
  return snapshot;
}
function removeListener(eventType, callback, context) {
  if (!eventType) {
    return removeAllListeners();
  }
  if (!callback) {
    const removed = _listeners.filter((l) => l.eventType === eventType);
    _listeners = _listeners.filter((l) => l.eventType !== eventType);
    return cancelCallback(removed);
  }
  if (!context) {
    const removed = _listeners.filter((l) => l.callback === callback).filter((l) => l.eventType === eventType);
    _listeners = _listeners.filter((l) => l.eventType !== eventType || l.callback !== callback);
    return cancelCallback(removed);
  } else {
    const removed = _listeners.filter((l) => l.callback === callback).filter((l) => l.eventType === eventType).filter((l) => l.context === context);
    _listeners = _listeners.filter((l) => l.context !== context || l.callback !== callback || l.eventType !== eventType);
    return cancelCallback(removed);
  }
}
function cancelCallback(removed) {
  let count = 0;
  removed.forEach((l) => {
    if (typeof l.cancelCallbackOrContext === "function") {
      l.cancelCallbackOrContext();
      count++;
    }
  });
  return count;
}
function removeAllListeners() {
  const howMany = cancelCallback(_listeners);
  _listeners = [];
  return howMany;
}
function listenerCount(type) {
  return type ? _listeners.filter((l) => l.eventType === type).length : _listeners.length;
}
function listenerPaths(lookFor) {
  if (lookFor && !Array.isArray(lookFor)) {
    lookFor = lookFor === "child" ? ["child_added", "child_changed", "child_removed", "child_moved"] : [lookFor];
  }
  return lookFor ? _listeners.filter((l) => lookFor.includes(l.eventType)).map((l) => l.query.path) : _listeners.map((l) => l.query.path);
}
function getListeners(lookFor) {
  const childEvents = [
    "child_added",
    "child_changed",
    "child_removed",
    "child_moved"
  ];
  const allEvents = childEvents.concat(["value"]);
  const events5 = !lookFor ? allEvents : lookFor === "child" ? childEvents : lookFor;
  return _listeners.filter((l) => events5.includes(l.eventType));
}
function keyDidNotPreviouslyExist(e, dbSnapshot) {
  return lodash6.default(dbSnapshot, e.key) === void 0 ? true : false;
}
function notify(data2, dbSnapshot) {
  if (!shouldSendEvents()) {
    return;
  }
  const events5 = groupEventsByWatcher(data2, dbSnapshot);
  events5.forEach((evt) => {
    const isDeleteEvent = evt.value === null || evt.value === void 0;
    switch (evt.listenerEvent) {
      case "child_removed":
        if (isDeleteEvent) {
          evt.callback(new SnapShot(evt.key, evt.priorValue));
        }
        return;
      case "child_added":
        if (!isDeleteEvent && keyDidNotPreviouslyExist(evt, dbSnapshot)) {
          evt.callback(new SnapShot(evt.key, evt.value));
        }
        return;
      case "child_changed":
        if (!isDeleteEvent) {
          evt.callback(new SnapShot(evt.key, evt.value));
        }
        return;
      case "child_moved":
        if (!isDeleteEvent && keyDidNotPreviouslyExist(evt, dbSnapshot)) {
          evt.callback(new SnapShot(evt.key, evt.value));
        }
        return;
      case "value":
        const snapKey = new SnapShot(evt.listenerPath, evt.value).key;
        if (snapKey === evt.key) {
          evt.callback(new SnapShot(evt.listenerPath, evt.value === null || evt.value === void 0 ? void 0 : {[evt.key]: evt.value}));
        } else {
          const value = evt.value === null ? getDb(evt.listenerPath) : evt.value;
          evt.callback(new SnapShot(evt.listenerPath, value));
        }
    }
  });
}
function findChildListeners(changePath, ...eventTypes) {
  changePath = stripLeadingDot(changePath.replace(/\//g, "."));
  eventTypes = eventTypes.length !== 0 ? eventTypes : ["child_added", "child_changed", "child_moved", "child_removed"];
  const decendants = _listeners.filter((l) => eventTypes.includes(l.eventType)).filter((l) => changePath.startsWith(dotify(l.query.path))).reduce((acc, listener) => {
    const id = removeDots(changePath.replace(listener.query.path, "").split(".").filter((i) => i)[0]);
    const remainingPath = stripLeadingDot(changePath.replace(stripLeadingDot(listener.query.path), ""));
    const changeIsAtRoot = id === remainingPath;
    acc.push({...listener, ...{id, changeIsAtRoot}});
    return acc;
  }, []);
  return decendants;
}
function findValueListeners(path4) {
  return _listeners.filter((l) => join(path4).indexOf(join(l.query.path)) !== -1 && l.eventType === "value");
}

// node_modules/firemock/dist/es/mocking/schema-helper.js
class SchemaHelper {
  constructor(context, faker2) {
    this.context = context;
    if (faker2) {
      this._faker = faker2;
    }
  }
  static async create(context, faker2) {
    const obj = new SchemaHelper(context, faker2);
  }
  get faker() {
    return this._faker;
  }
}

// node_modules/firemock/dist/es/mocking/fakerInitialiation.js
let faker;
async function importFakerLibrary() {
  if (!faker) {
    faker = await Promise.resolve().then(() => __toModule(require_faker()));
  }
  return faker;
}
function getFakerLibrary() {
  if (!faker) {
    throw new FireMockError2(`The faker library has not been loaded yet! Use the importFakerLibrary() directly to ensure this happens first;or altnernatively you can use Mock.prepare().`, "not-ready");
  }
  return faker;
}
async function getMockHelper(db2) {
  faker = await importFakerLibrary();
  const obj = new MockHelper();
  return obj;
}

// node_modules/firemock/dist/es/mocking/MockHelper.js
class MockHelper {
  constructor(context) {
    this.context = context;
  }
  get faker() {
    const faker2 = getFakerLibrary();
    if (!faker2) {
      throw createError(`firemock/not-ready`, `The mock helper can not provide the MockHelper object until after the faker library has been imported with a 'await importFakerLibrary()' call.`);
    }
    return faker2;
  }
}

// node_modules/firemock/dist/es/auth/client-sdk/AuthProviders/Auth.js
class Auth {
  constructor() {
    throw new Error("You should not call this constructor directly! Instead use the auth() accessor to get to this API.");
  }
}

// node_modules/firemock/dist/es/auth/client-sdk/AuthProviders/EmailAuthProvider.js
const data = {
  providerId: "mock-provider-id-for-EmailAuthProvider",
  signInMethod: "email-and-password"
};
class EmailAuthProvider {
  constructor() {
    this.providerId = data.providerId;
  }
  static credential(email, password) {
    return {
      ...data,
      toJSON() {
        return JSON.stringify(data);
      }
    };
  }
  static credentialWithLink(email, emailLink) {
    return {
      ...data,
      toJSON() {
        return JSON.stringify(data);
      }
    };
  }
}

// node_modules/firemock/dist/es/auth/client-sdk/AuthProviders/FacebookAuthProvider.js
class FacebookAuthProvider {
  static credential(token) {
    throw new Error("FacebookAuthProvider not implemented yet");
  }
  addScope(scope) {
    throw new Error("not implemented");
  }
  setCustomParameters(params) {
    throw new Error("not implemented");
  }
}

// node_modules/firemock/dist/es/auth/client-sdk/AuthProviders/GithubAuthProvider.js
class GithubAuthProvider {
  static credential(idToken, accessToken) {
    throw new Error("not implemented");
  }
  addScope(scope) {
    throw new Error("not implemented");
  }
  setCustomParameters(params) {
    throw new Error("not implemented");
  }
}

// node_modules/firemock/dist/es/auth/client-sdk/AuthProviders/GoogleAuthProvider.js
class GoogleAuthProvider {
  static credential(idToken, accessToken) {
    throw new Error("not implemented");
  }
  addScope(scope) {
    throw new Error("not implemented");
  }
  setCustomParameters(params) {
    throw new Error("not implemented");
  }
}

// node_modules/firemock/dist/es/auth/client-sdk/AuthProviders/TwitterAuthProvider.js
class TwitterAuthProvider {
  static credential(idToken, accessToken) {
    throw new Error("not implemented");
  }
  addScope(scope) {
    throw new Error("not implemented");
  }
  setCustomParameters(params) {
    throw new Error("not implemented");
  }
}

// node_modules/firemock/dist/es/auth/client-sdk/AuthProviders/SAMLAuthProvider.js
class SAMLAuthProvider {
}

// node_modules/firemock/dist/es/auth/client-sdk/AuthProviders/OAuthProvider.js
class OAuthProvider {
  constructor(providerId) {
  }
  addScope(scope) {
    throw new Error("not implemented");
  }
  credential(idToken, accessToken) {
    throw new Error("not implemented");
  }
  setCustomParameters(customOAuthParameters) {
    throw new Error("not implemented");
  }
}

// node_modules/firemock/dist/es/auth/client-sdk/AuthProviders/PhoneAuthProvider.js
class PhoneAuthProvider {
  static credential(verificationId, verificationCode) {
    throw new Error("not implemented");
  }
  async verifyPhoneNumber(phoneNumber, applicationVerifier) {
    throw new Error("not-implemented");
  }
}

// node_modules/firemock/dist/es/auth/client-sdk/AuthProviders/RecaptchaVerifier.js
class RecaptchaVerifier {
  clear() {
  }
  async render() {
    throw new Error("not-implemented");
  }
  async verify() {
    throw new Error("not-implemented");
  }
}

// node_modules/firemock/dist/es/auth/client-sdk/AuthProviders/index.js
const api = {
  Auth,
  EmailAuthProvider,
  FacebookAuthProvider,
  GithubAuthProvider,
  GoogleAuthProvider,
  TwitterAuthProvider,
  SAMLAuthProvider,
  OAuthProvider,
  PhoneAuthProvider,
  RecaptchaVerifier
};
const fn = () => {
  throw new Error("not allowed");
};
const AuthProviders_default = api || fn;

// node_modules/firemock/dist/es/auth/admin-sdk/implemented/users.js
const users = {
  async createUser(properties) {
    addUser({
      password: Math.random().toString(36).substr(2, 10),
      multiFactor: null,
      ...properties
    });
    return {
      ...properties,
      metadata: {
        lastSignInTime: null,
        creationTime: String(new Date()),
        toJSON() {
          return {};
        }
      },
      multiFactor: null,
      toJSON: () => null,
      providerData: null
    };
  },
  async updateUser(uid, properties) {
    updateUser(uid, properties);
    return getUserById(uid);
  },
  async deleteUser(uid) {
    await networkDelay();
    removeUser(uid);
  },
  async getUserByEmail(email) {
    await networkDelay();
    return getUserByEmail(email);
  },
  async getUserByPhoneNumber(phoneNumber) {
    return;
  },
  async listUsers(maxResults, pageToken) {
    await networkDelay();
    return {users: maxResults ? allUsers().slice(0, maxResults) : allUsers()};
  }
};

// node_modules/firemock/dist/es/auth/admin-sdk/implemented/claims.js
const claims = {
  async setCustomUserClaims(uid, customUserClaims) {
    updateUser(uid, {customClaims: customUserClaims});
  }
};

// node_modules/firemock/dist/es/auth/admin-sdk/implemented/tokens.js
const tokens = {
  async verifyIdToken(idToken, checkRevoked) {
    return;
  }
};

// node_modules/firemock/dist/es/auth/admin-sdk/implemented.js
const implemented4 = {
  ...users,
  ...claims,
  ...tokens
};

// node_modules/firemock/dist/es/auth/admin-sdk/not-implemented.js
const notImplemented = {};

// node_modules/firemock/dist/es/auth/admin-sdk/index.js
const adminAuthSdk2 = {
  ...implemented4,
  ...notImplemented
};

// node_modules/firemock/dist/es/mocking/Mock.js
class Mock {
  constructor(dataOrMock, authConfig = {
    providers: ["anonymous"],
    users: []
  }) {
    this._schemas = new Queue("schemas").clear();
    this._relationships = new Queue("relationships").clear();
    this._queues = new Queue("queues").clear();
    Queue.clearAll();
    clearDatabase();
    clearAuthUsers();
    if (dataOrMock && typeof dataOrMock === "object") {
      this.updateDB(dataOrMock);
    }
    if (dataOrMock && typeof dataOrMock === "function") {
      this._mockInitializer = dataOrMock(this);
    }
    initializeAuth(authConfig);
  }
  static async prepare(options = {}) {
    const defaultDbConfig = {};
    await importFakerLibrary();
    const obj = new Mock(options.db ? typeof options.db === "function" ? {} : options.db || defaultDbConfig : defaultDbConfig, options.auth);
    if (typeof options.db === "function") {
      obj.updateDB(await options.db(obj));
    }
    return obj;
  }
  get db() {
    return getDb();
  }
  get deploy() {
    return new Deployment();
  }
  updateDB(stateUpdate, clearFirst) {
    if (clearFirst) {
      clearDatabase();
    }
    updateDatabase(stateUpdate);
  }
  silenceEvents() {
    silenceEvents();
  }
  restoreEvents() {
    restoreEvents();
  }
  async auth() {
    return auth3();
  }
  async adminSdk() {
    return adminAuthSdk2;
  }
  get authProviders() {
    return AuthProviders_default;
  }
  get faker() {
    return getFakerLibrary();
  }
  addSchema(schema, mock3) {
    return new Schema(schema, mock3);
  }
  setDelay(d) {
    setNetworkDelay(d);
  }
  queueSchema(schemaId, quantity = 1, overrides = {}) {
    const d = new Deployment();
    d.queueSchema(schemaId, quantity, overrides);
    return d;
  }
  generate() {
    const faker2 = getFakerLibrary();
    if (!faker2 && !faker2.address) {
      throw new FireMockError2(`The Faker library must be loaded before you can generate mocked data can be returned`, "firemock/faker-not-ready");
    }
    return new Deployment().generate();
  }
  ref(dbPath) {
    return new Reference(dbPath);
  }
}

// node_modules/firemock/dist/es/mocking/Deployment.js
const lodash = __toModule(require_lodash4());
const lodash2 = __toModule(require_lodash2());
const lodash3 = __toModule(require_lodash());
class Deployment {
  constructor() {
    this._queue = new Queue("queue");
    this._schemas = new Queue("schemas");
    this._relationships = new Queue("relationships");
  }
  queueSchema(schemaId, quantity = 1, overrides = {}) {
    this.schemaId = schemaId;
    this.queueId = key();
    const schema = this._schemas.find(schemaId);
    if (!schema) {
      console.log(`Schema "${schema}" does not exist; will SKIP.`);
    } else {
      const newQueueItem = {
        id: this.queueId,
        schema: schemaId,
        prefix: schema.prefix,
        quantity,
        overrides
      };
      this._queue.enqueue(newQueueItem);
    }
    return this;
  }
  quantifyHasMany(targetSchema, quantity) {
    const hasMany3 = this._relationships.filter((r) => r.type === "hasMany" && r.source === this.schemaId);
    const targetted = hasMany3.filter((r) => r.target === targetSchema);
    if (hasMany3.length === 0) {
      console.log(`Attempt to quantify "hasMany" relationships with schema "${this.schemaId}" is not possible; no such relationships exist`);
    } else if (targetted.length === 0) {
      console.log(`The "${targetSchema}" schema does not have a "hasMany" relationship with the "${this.schemaId}" model`);
    } else {
      const queue = this._queue.find(this.queueId);
      this._queue.update(this.queueId, {
        hasMany: {
          ...queue.hasMany,
          ...{[pluralize(targetSchema)]: quantity}
        }
      });
    }
    return this;
  }
  fulfillBelongsTo(targetSchema) {
    const schema = this._schemas.find(this.schemaId);
    const relationship = lodash3.default(this._relationships.filter((r) => r.source === this.schemaId).filter((r) => r.target === targetSchema));
    const sourceProperty = schema.path();
    const queue = this._queue.find(this.queueId);
    this._queue.update(this.queueId, {
      belongsTo: {
        ...queue.belongsTo,
        ...{[`${targetSchema}Id`]: true}
      }
    });
    return this;
  }
  generate() {
    this._queue.map((q) => {
      for (let i = q.quantity; i > 0; i--) {
        this.insertMockIntoDB(q.schema, q.overrides);
      }
    });
    this._queue.map((q) => {
      for (let i = q.quantity; i > 0; i--) {
        this.insertRelationshipLinks(q);
      }
    });
    this._queue.clear();
  }
  insertMockIntoDB(schemaId, overrides) {
    const schema = this._schemas.find(schemaId);
    const mock3 = schema.fn();
    const path4 = schema.path();
    const key2 = overrides.id || key();
    const dbPath = dotNotation3(path4) + `.${key2}`;
    const payload = typeof mock3 === "object" ? {...mock3, ...overrides} : overrides && typeof overrides !== "object" ? overrides : mock3;
    setDB(dbPath, payload);
    return key2;
  }
  insertRelationshipLinks(queue) {
    const relationships = this._relationships.filter((r) => r.source === queue.schema);
    const belongsTo2 = relationships.filter((r) => r.type === "belongsTo");
    const hasMany3 = relationships.filter((r) => r.type === "hasMany");
    const db2 = getDb();
    belongsTo2.forEach((r) => {
      const fulfill = Object.keys(queue.belongsTo || {}).filter((v) => queue.belongsTo[v] === true).indexOf(r.sourceProperty) !== -1;
      const source = this._schemas.find(r.source);
      const target = this._schemas.find(r.target);
      let getID;
      if (fulfill) {
        const mockAvailable = this._schemas.find(r.target) ? true : false;
        const available = Object.keys(db2[pluralize(r.target)] || {});
        const generatedAvailable = available.length > 0;
        const numChoices = (db2[r.target] || []).length;
        const choice = () => generatedAvailable ? available[getRandomInt(0, available.length - 1)] : this.insertMockIntoDB(r.target, {});
        getID = () => mockAvailable ? generatedAvailable ? choice() : this.insertMockIntoDB(r.target, {}) : key();
      } else {
        getID = () => "";
      }
      const property2 = r.sourceProperty;
      const path4 = source.path();
      const recordList = lodash2.default(db2, dotNotation3(source.path()), {});
      Object.keys(recordList).forEach((key2) => {
        lodash.default(db2, `${dotNotation3(source.path())}.${key2}.${property2}`, getID());
      });
    });
    hasMany3.forEach((r) => {
      const fulfill = Object.keys(queue.hasMany || {}).indexOf(r.sourceProperty) !== -1;
      const howMany = fulfill ? queue.hasMany[r.sourceProperty] : 0;
      const source = this._schemas.find(r.source);
      const target = this._schemas.find(r.target);
      let getID;
      if (fulfill) {
        const mockAvailable = this._schemas.find(r.target) ? true : false;
        const available = Object.keys(db2[pluralize(r.target)] || {});
        const used = [];
        const generatedAvailable = available.length > 0;
        const numChoices = (db2[pluralize(r.target)] || []).length;
        const choice = (pool) => {
          if (pool.length > 0) {
            const chosen = pool[getRandomInt(0, pool.length - 1)];
            used.push(chosen);
            return chosen;
          }
          return this.insertMockIntoDB(r.target, {});
        };
        getID = () => mockAvailable ? choice(available.filter((a) => used.indexOf(a) === -1)) : key();
      } else {
        getID = () => void 0;
      }
      const property2 = r.sourceProperty;
      const path4 = source.path();
      const sourceRecords = lodash2.default(db2, dotNotation3(source.path()), {});
      Object.keys(sourceRecords).forEach((key2) => {
        for (let i = 1; i <= howMany; i++) {
          lodash.default(db2, `${dotNotation3(source.path())}.${key2}.${property2}.${getID()}`, true);
        }
      });
    });
  }
}

// node_modules/firemock/dist/es/mocking/Schema.js
class Schema {
  constructor(schemaId, mockFn) {
    this.schemaId = schemaId;
    this._schemas = new Queue("schemas");
    this._relationships = new Queue("relationships");
    if (mockFn) {
      this.mock(mockFn);
    }
  }
  mock(cb) {
    this._schemas.enqueue({
      id: this.schemaId,
      fn: cb(new SchemaHelper({}, getFakerLibrary())),
      path: () => {
        const schema = this._schemas.find(this.schemaId);
        return [
          schema.prefix,
          schema.modelName ? pluralize(schema.modelName) : pluralize(this.schemaId)
        ].join("/");
      }
    });
    return this;
  }
  modelName(value) {
    this._schemas.update(this.schemaId, {modelName: value});
    return this;
  }
  pathPrefix(prefix) {
    prefix = prefix.replace(/\./g, "/");
    prefix = prefix.slice(-1) === "/" ? prefix.slice(0, prefix.length - 1) : prefix;
    this._schemas.update(this.schemaId, {prefix});
    return this;
  }
  pluralName(plural) {
    const model3 = this._schemas.find(this.schemaId).modelName ? this._schemas.find(this.schemaId).modelName : this.schemaId;
    addException(model3, plural);
    return this;
  }
  belongsTo(target, sourceProperty) {
    this._relationships.push({
      type: "belongsTo",
      source: this.schemaId,
      target,
      sourceProperty: sourceProperty ? sourceProperty : `${target}Id`
    });
    return this;
  }
  hasMany(target, sourceProperty) {
    this._relationships.push({
      type: "hasMany",
      source: this.schemaId,
      target,
      sourceProperty: sourceProperty ? sourceProperty : pluralize(target)
    });
    return this;
  }
  addSchema(schema, mock3) {
    const s = new Schema(schema);
    if (mock3) {
      s.mock(mock3);
    }
    return new Schema(schema);
  }
}

// node_modules/firemock/dist/es/mocking/Queue.js
const lodash4 = __toModule(require_lodash());
let Queue = (() => {
  class Queue2 {
    constructor(_name) {
      this._name = _name;
      this.pkProperty = "id";
      if (!_name) {
        throw new Error("A queue MUST have a named passed in to be managed");
      }
      if (!Queue2._queues[_name]) {
        Queue2._queues[_name] = [];
      }
    }
    static clearAll() {
      Queue2._queues = {};
    }
    get name() {
      return this._name;
    }
    enqueue(queueItem) {
      Queue2._queues[this._name].push(queueItem);
      return this;
    }
    push(queueItem) {
      const id = key();
      if (typeof queueItem !== "object") {
        throw new Error("Using push() requires that the payload is an object");
      }
      queueItem[this.pkProperty] = id;
      this.enqueue(queueItem);
      return id;
    }
    dequeue(key2) {
      const queue = Queue2._queues[this._name];
      if (queue.length === 0) {
        throw new Error(`Queue ${this._name} is empty. Can not dequeue ${key2}.`);
      }
      Queue2._queues[this._name] = typeof lodash4.default(queue) === "object" ? queue.filter((item) => item[this.pkProperty] !== key2) : queue.filter((item) => item !== key2);
      return this;
    }
    fromArray(payload) {
      Queue2._queues[this._name] = payload;
      return this;
    }
    clear() {
      Queue2._queues[this._name] = [];
      return this;
    }
    find(key2) {
      const [obj, index15] = this._find(key2);
      return obj;
    }
    indexOf(key2) {
      const [obj, index15] = this._find(key2);
      return index15;
    }
    includes(key2) {
      return this.find(key2) ? true : false;
    }
    replace(key2, value) {
      value[this.pkProperty] = key2;
      this.dequeue(key2).enqueue(value);
      return this;
    }
    update(key2, value) {
      const currently = this.find(key2);
      if (currently) {
        this.dequeue(key2);
      }
      if (typeof currently === "object" && typeof value === "object") {
        value[this.pkProperty] = key2;
        const updated = {...currently, ...value};
        this.enqueue(updated);
      } else {
        throw new Error(`Current and updated values must be objects!`);
      }
      return this;
    }
    get length() {
      return Queue2._queues[this._name].length;
    }
    toArray() {
      return Queue2._queues && Queue2._queues[this._name] ? Queue2._queues[this._name] : [];
    }
    toHash() {
      const queue = Queue2._queues[this._name];
      if (!queue || queue.length === 0) {
        return new Object();
      }
      return typeof lodash4.default(queue) === "object" ? queue.reduce((obj, item) => {
        const pk6 = item[this.pkProperty];
        const o = Object.assign({}, item);
        delete o[this.pkProperty];
        return {...obj, ...{[pk6]: o}};
      }, new Object()) : queue.reduce((obj, item) => obj = {...obj, ...{[item]: true}}, new Object());
    }
    map(fn2) {
      const queuedSchemas = Queue2._queues[this._name];
      return queuedSchemas ? queuedSchemas.map(fn2) : [];
    }
    filter(fn2) {
      const queue = Queue2._queues[this._name];
      return queue ? queue.filter(fn2) : [];
    }
    toJSON() {
      return JSON.stringify(Queue2._queues);
    }
    toObject() {
      return Queue2._queues;
    }
    _find(key2) {
      const queue = Queue2._queues[this._name];
      const objectPayload = typeof lodash4.default(queue) === "object";
      let index15 = 0;
      let result = [null, -1];
      for (const item of queue) {
        const condition = objectPayload ? item[this.pkProperty] === key2 : item === key2;
        if (condition) {
          result = [item, index15];
          break;
        }
        index15++;
      }
      return result;
    }
  }
  Queue2._queues = {};
  return Queue2;
})();

// node_modules/firemock/dist/es/auth/client-sdk/notImplemented.js
const notImplemented5 = {
  async applyActionCode(code) {
    return;
  },
  async checkActionCode(code) {
    return {
      data: {},
      operation: ""
    };
  },
  async fetchSignInMethodsForEmail() {
    throw createError("auth/not-implemented", "This feature is not implemented yet in FireMock auth module");
  },
  async getRedirectResult() {
    throw createError("auth/not-implemented", "This feature is not implemented yet in FireMock auth module");
  },
  isSignInWithEmailLink() {
    throw createError("auth/not-implemented", "This feature is not implemented yet in FireMock auth module");
  },
  onIdTokenChanged() {
    throw createError("auth/not-implemented", "This feature is not implemented yet in FireMock auth module");
  },
  async sendSignInLinkToEmail() {
    throw createError("auth/not-implemented", "This feature is not implemented yet in FireMock auth module");
  },
  async signInAndRetrieveDataWithCredential() {
    throw createError("auth/not-implemented", "This feature is not implemented yet in FireMock auth module");
  },
  async signInWithCredential() {
    throw createError("auth/not-implemented", "This feature is not implemented yet in FireMock auth module");
  },
  async signInWithCustomToken() {
    throw createError("auth/not-implemented", "This feature is not implemented yet in FireMock auth module");
  },
  async signInWithEmailLink() {
    throw createError("auth/not-implemented", "This feature is not implemented yet in FireMock auth module");
  },
  async signInWithPhoneNumber() {
    throw createError("auth/not-implemented", "This feature is not implemented yet in FireMock auth module");
  },
  async signInWithPopup() {
    throw createError("auth/not-implemented", "This feature is not implemented yet in FireMock auth module");
  },
  async signInWithRedirect() {
    throw createError("auth/not-implemented", "This feature is not implemented yet in FireMock auth module");
  },
  async useDeviceLanguage() {
    throw createError("auth/not-implemented", "This feature is not implemented yet in FireMock auth module");
  },
  async verifyPasswordResetCode(code) {
    throw createError("auth/not-implemented", "This feature is not implemented yet in FireMock auth module");
  }
};

// node_modules/firemock/dist/es/auth/client-sdk/index.js
const authMockApi = {
  ...notImplemented5,
  ...implemented2
};

// node_modules/@forest-fire/serializer-factory/dist/es/SerializedQuery.js
class SerializedQuery {
  static create(db2, path4 = "/") {
    if (["RealTimeClient", "RealTimeAdmin", "RealTimeDb"].includes(db2.sdk)) {
      return SerializedRealTimeQuery.path(path4);
    } else {
      return SerializedFirestoreQuery.path(path4);
    }
  }
}

// src/List.ts
const DEFAULT_IF_NOT_FOUND = "__DO_NOT_USE__";
function addTimestamps(obj) {
  const datetime2 = new Date().getTime();
  const output = {};
  Object.keys(obj).forEach((i) => {
    output[i] = {
      ...obj[i],
      createdAt: datetime2,
      lastUpdated: datetime2
    };
  });
  return output;
}
class List extends FireModel2 {
  constructor(model3, options = {}) {
    super();
    this._data = [];
    this._modelConstructor = model3;
    this._model = new model3();
    if (options.db) {
      this._db = options.db;
      if (!FireModel2.defaultDb) {
        FireModel2.defaultDb = options.db;
      }
    }
    if (options.offsets) {
      this._offsets = options.offsets;
    }
  }
  static set defaultDb(db2) {
    FireModel2.defaultDb = db2;
  }
  static get defaultDb() {
    return FireModel2.defaultDb;
  }
  static async set(model3, payload, options = {}) {
    try {
      const m = Record2.create(model3, options);
      if (m.META.audit) {
        const existing = await List.all(model3, options);
        if (existing.length > 0) {
        } else {
        }
      } else {
        const datetime2 = new Date().getTime();
        await FireModel2.defaultDb.set(`${m.META.dbOffset}/${m.pluralName}`, addTimestamps(payload));
      }
      const current = await List.all(model3, options);
      return current;
    } catch (e) {
      const err = new Error(`Problem adding new Record: ${e.message}`);
      err.name = e.name !== "Error" ? e.name : "FireModel";
      throw e;
    }
  }
  static set dispatch(fn2) {
    FireModel2.dispatch = fn2;
  }
  static create(model3, options) {
    return new List(model3, options);
  }
  static async fromQuery(model3, query, options = {}) {
    const list = List.create(model3, options);
    const path4 = options && options.offsets ? List.dbPath(model3, options.offsets) : List.dbPath(model3);
    query.setPath(path4);
    list._query = query;
    await list.load(query);
    return list;
  }
  static async all(model3, options = {}) {
    const query = SerializedQuery.create(this.defaultDb).orderByChild("lastUpdated");
    const list = await List.fromQuery(model3, query, options);
    return list;
  }
  static async first(model3, howMany, options = {}) {
    const query = SerializedQuery.create(this.defaultDb).orderByChild("createdAt").limitToLast(howMany);
    const list = await List.fromQuery(model3, query, options);
    return list;
  }
  static async recent(model3, howMany, offset = 0, options = {}) {
    const query = SerializedQuery.create(this.defaultDb).orderByChild("lastUpdated").limitToFirst(howMany);
    const list = await List.fromQuery(model3, query, options);
    return list;
  }
  static async since(model3, since, options = {}) {
    if (typeof since !== "number") {
      const e = new Error(`Invalid "since" parameter; value must be number instead got a(n) ${typeof since} [ ${since} ]`);
      e.name = "NotAllowed";
      throw e;
    }
    const query = SerializedQuery.create(this.defaultDb).orderByChild("lastUpdated").startAt(since);
    const list = await List.fromQuery(model3, query, options);
    return list;
  }
  static async inactive(model3, howMany, options = {}) {
    const query = SerializedQuery.create(this.defaultDb).orderByChild("lastUpdated").limitToLast(howMany);
    const list = await List.fromQuery(model3, query, options);
    return list;
  }
  static async last(model3, howMany, options = {}) {
    const query = SerializedQuery.create(this.defaultDb).orderByChild("createdAt").limitToFirst(howMany);
    const list = await List.fromQuery(model3, query, options);
    return list;
  }
  static async find(model3, property2, value, options = {}) {
    const results = await List.where(model3, property2, value, options);
    return results.length > 0 ? results.data[0] : void 0;
  }
  static async bulkPut(model3, records, options = {}) {
    if (!FireModel2.defaultDb.isAdminApi) {
      throw new FireModelError2(`You must use the Admin SDK/API to use the bulkPut feature. This may change in the future but in part because the dispatch functionality is not yet set it is restricted to the Admin API for now.`);
    }
    if (Array.isArray(records)) {
      records = arrayToHash(records);
    }
    const dbPath = List.dbPath(model3, options.offsets);
    await FireModel2.defaultDb.update(dbPath, records);
  }
  static async where(model3, property2, value, options = {}) {
    let operation = "=";
    let val = value;
    if (Array.isArray(value)) {
      val = value[1];
      operation = value[0];
    }
    const query = SerializedQuery.create(this.defaultDb).orderByChild(property2).where(operation, val);
    const list = await List.fromQuery(model3, query, options);
    return list;
  }
  static async ids(model3, ...fks) {
    const promises = [];
    const results = [];
    fks.forEach((fk6) => {
      promises.push(Record2.get(model3, fk6).then((p) => results.push(p.data)));
    });
    await Promise.all(promises);
    const obj = new List(model3);
    obj._data = results;
    return obj;
  }
  static dbPath(model3, offsets) {
    const obj = offsets ? List.create(model3, {offsets}) : List.create(model3);
    return obj.dbPath;
  }
  get query() {
    return this._query;
  }
  get length() {
    return this._data.length;
  }
  get dbPath() {
    const dbOffset = getModelMeta(this._model).dbOffset;
    return [this._injectDynamicDbOffsets(dbOffset), this.pluralName].join("/");
  }
  get localPath() {
    const meta2 = this._model.META || getModelMeta(this._model);
    return pathJoin2(meta2.localPrefix, meta2.localModelName !== this.modelName ? meta2.localModelName : this.pluralName);
  }
  get localPostfix() {
    const meta2 = this._model.META || getModelMeta(this._model);
    return meta2.localPostfix;
  }
  filter(f) {
    const list = List.create(this._modelConstructor);
    list._data = this._data.filter(f);
    return list;
  }
  find(f, defaultIfNotFound = DEFAULT_IF_NOT_FOUND) {
    const filtered = this._data.filter(f);
    const r = Record2.create(this._modelConstructor);
    if (filtered.length > 0) {
      return Record2.createWith(this._modelConstructor, filtered[0]);
    } else {
      if (defaultIfNotFound !== DEFAULT_IF_NOT_FOUND) {
        return defaultIfNotFound;
      } else {
        const e = new Error(`find(fn) did not find a value in the List [ length: ${this.data.length} ]`);
        e.name = "NotFound";
        throw e;
      }
    }
  }
  filterWhere(prop, value) {
    const whereFilter = (item) => item[prop] === value;
    const list = new List(this._modelConstructor);
    list._data = this.data.filter(whereFilter);
    return list;
  }
  filterContains(prop, value) {
    return this.filter((item) => Object.keys(item[prop]).includes(value));
  }
  findWhere(prop, value, defaultIfNotFound = DEFAULT_IF_NOT_FOUND) {
    const list = this.META.isProperty(prop) || this.META.isRelationship(prop) && this.META.relationship(prop).relType === "hasOne" ? this.filterWhere(prop, value) : this.filterContains(prop, value);
    if (list.length > 0) {
      return Record2.createWith(this._modelConstructor, list._data[0]);
    } else {
      if (defaultIfNotFound !== DEFAULT_IF_NOT_FOUND) {
        return defaultIfNotFound;
      } else {
        const valid = this.META.isProperty(prop) || this.META.isRelationship(prop) && this.META.relationship(prop).relType === "hasOne" ? this.map((i) => i[prop]) : this.map((i) => Object.keys(i[prop]));
        const e = new Error(`List<${this.modelName}>.findWhere(${prop}, ${value}) was not found in the List [ length: ${this.data.length} ]. 

Valid values include: 

${valid.join("	")}`);
        e.name = "NotFound";
        throw e;
      }
    }
  }
  map(f) {
    return this.data.map(f);
  }
  forEach(f) {
    this.data.forEach(f);
  }
  reduce(f, initialValue = {}) {
    return this.data.reduce(f, initialValue);
  }
  get data() {
    return this._data;
  }
  findById(id, defaultIfNotFound = DEFAULT_IF_NOT_FOUND) {
    const find = this.filter((f) => f.id === id);
    if (find.length === 0) {
      if (defaultIfNotFound !== DEFAULT_IF_NOT_FOUND) {
        return defaultIfNotFound;
      }
      const e = new Error(`Could not find "${id}" in list of ${this.pluralName}`);
      e.name = "NotFound";
      throw e;
    }
    return Record2.createWith(this._modelConstructor, find.data[0]);
  }
  async removeById(id, ignoreOnNotFound = false) {
    const rec = this.findById(id, null);
    if (!rec) {
      if (!ignoreOnNotFound) {
        throw new FireModelError2(`Could not remove "${id}" in list of ${this.pluralName} as the ID was not found!`, `firemodel/not-allowed`);
      } else {
        return;
      }
    }
    const removed = await Record2.remove(this._modelConstructor, id, rec);
    this._data = this.filter((f) => f.id !== id).data;
  }
  async add(payload) {
    const newRecord = await Record2.add(this._modelConstructor, payload);
    this._data.push(newRecord.data);
    return newRecord;
  }
  getData(id, defaultIfNotFound = DEFAULT_IF_NOT_FOUND) {
    let record;
    try {
      record = this.findById(id, defaultIfNotFound);
      return record === defaultIfNotFound ? defaultIfNotFound : record.data;
    } catch (e) {
      if (e.name === "NotFound" && defaultIfNotFound !== DEFAULT_IF_NOT_FOUND) {
        return defaultIfNotFound;
      } else {
        throw e;
      }
    }
  }
  async load(pathOrQuery) {
    if (!this.db) {
      const e = new Error(`The attempt to load data into a List requires that the DB property be initialized first!`);
      e.name = "NoDatabase";
      throw e;
    }
    this._data = await this.db.getList(pathOrQuery);
    return this;
  }
  _injectDynamicDbOffsets(dbOffset) {
    if (dbOffset.indexOf(":") === -1) {
      return dbOffset;
    }
    const dynamicPathProps = Record2.dynamicPathProperties(this._modelConstructor);
    Object.keys(this._offsets || {}).forEach((prop) => {
      if (dynamicPathProps.includes(prop)) {
        const value = this._offsets[prop];
        if (!["string", "number"].includes(typeof value)) {
          throw new FireModelError2(`The dynamic dbOffset is using the property "${prop}" on ${this.modelName} as a part of the route path but that property must be either a string or a number and instead was a ${typeof value}`, "record/not-allowed");
        }
        dbOffset = dbOffset.replace(`:${prop}`, String(value));
      }
    });
    if (dbOffset.includes(":")) {
      throw new FireModelError2(`Attempt to get the dbPath of a List where the underlying model [ ${capitalize(this.modelName)} ] has dynamic path segments which were NOT supplied! The offsets provided were "${JSON.stringify(Object.keys(this._offsets || {}))}" but this leaves the following uncompleted dbOffset: ${dbOffset}`);
    }
    return dbOffset;
  }
}

// src/watchers/watchInitialization.ts
const _hasInitialized = {};
const hasInitialized = (watcherId, value = true) => {
  if (watcherId) {
    _hasInitialized[watcherId] = value;
  }
  return _hasInitialized;
};
async function waitForInitialization(watcher, timeout = 750) {
  setTimeout(() => {
    if (!ready(watcher)) {
      console.info(`A watcher [ ${watcher.watcherId} ] has not returned an event in the timeout window  [ ${timeout}ms ]. This might represent an issue but can also happen when a watcher starts listening to a path [ ${watcher.watcherPaths.join(", ")} ] which has no data yet.`);
    }
    hasInitialized(watcher.watcherId, "timed-out");
  }, timeout);
  while (!ready(watcher)) {
    await wait(50);
  }
}
function ready(watcher) {
  return hasInitialized()[watcher.watcherId] ? true : false;
}

// src/watchers/WatchDispatcher.ts
const WatchDispatcher2 = (coreDispatchFn) => (watcherContext) => {
  if (typeof coreDispatchFn !== "function") {
    throw new FireModelError2(`A watcher is being setup but the dispatch function is not a valid function!`, "firemodel/not-allowed");
  }
  return async (event) => {
    const typeLookup = {
      child_added: FmEvents.RECORD_ADDED,
      child_removed: FmEvents.RECORD_REMOVED,
      child_changed: FmEvents.RECORD_CHANGED,
      child_moved: FmEvents.RECORD_MOVED,
      value: FmEvents.RECORD_CHANGED
    };
    let eventContext;
    let errorMessage;
    if (event.kind === "relationship") {
      eventContext = {
        type: event.type,
        dbPath: "not-relevant, use toLocal and fromLocal"
      };
    } else if (event.kind === "watcher") {
    } else {
      if (watcherContext.watcherPaths) {
        const fullPath = watcherContext.watcherPaths.find((i) => i.includes(event.key));
        const compositeKey = Record2.getCompositeKeyFromPath(watcherContext.modelConstructor, fullPath);
        event.value = {...event.value || {}, ...compositeKey};
      }
      const recordProps = typeof event.value === "object" ? {id: event.key, ...event.value} : {id: event.key};
      const rec = Record2.createWith(watcherContext.modelConstructor, recordProps);
      let type;
      switch (event.kind) {
        case "record":
          type = event.type;
          break;
        case "server-event":
          type = event.value === null ? FmEvents.RECORD_REMOVED : typeLookup[event.eventType];
          break;
        default:
          type = FmEvents.UNEXPECTED_ERROR;
          errorMessage = `The "kind" of event was not recognized [ ${event.kind} ]`;
      }
      eventContext = {
        type,
        dbPath: rec.dbPath
      };
    }
    const reduxAction = {
      ...watcherContext,
      ...event,
      ...eventContext
    };
    const results = await coreDispatchFn(reduxAction);
    hasInitialized(watcherContext.watcherId);
    return results;
  };
};

// src/watchers/WatchBase.ts
class WatchBase {
  constructor() {
    this._underlyingRecordWatchers = [];
  }
  async start(options = {}) {
    const isListOfRecords = this._watcherSource === "list-of-records";
    const watchIdPrefix = isListOfRecords ? "wlr" : "w";
    let watchHashCode;
    try {
      watchHashCode = isListOfRecords ? String(this._underlyingRecordWatchers[0]._query.hashCode()) : String(this._query.hashCode());
    } catch (e) {
      throw new FireModelProxyError(e, `An error occured trying to start a watcher. The source was "${this._watcherSource}" and had a query of: ${this._query}

The underlying error was: ${e.message}`, "watcher/not-allowed");
    }
    const watcherId = watchIdPrefix + "-" + watchHashCode;
    this._watcherName = options.name || `${watcherId}`;
    const watcherName = options.name || this._watcherName || `${watcherId}`;
    const watcherItem = this.buildWatcherItem(watcherName);
    const dispatch = WatchDispatcher2(watcherItem.dispatch)(watcherItem);
    if (!this.db) {
      throw new FireModelError2(`Attempt to start a watcher before the database connection has been established!`);
    }
    try {
      if (this._eventType === "value") {
        if (this._watcherSource === "list-of-records") {
          this._underlyingRecordWatchers.forEach((r) => {
            this.db.watch(r._query, ["value"], dispatch);
          });
        } else {
          this.db.watch(this._query, ["value"], dispatch);
        }
      } else {
        if (options.largePayload) {
          const payload = await List.fromQuery(this._modelConstructor, this._query, {offsets: this._options.offsets || {}});
          await dispatch({
            type: FmEvents.WATCHER_SYNC,
            kind: "watcher",
            modelConstructor: this._modelConstructor,
            key: this._query.path.split("/").pop(),
            value: payload.data,
            offsets: this._options.offsets || {}
          });
        }
        this.db.watch(this._query, ["child_added", "child_changed", "child_moved", "child_removed"], dispatch);
      }
    } catch (e) {
      console.log(`Problem starting watcher [${watcherId}]: `, e);
      (this._dispatcher || FireModel2.dispatch)({
        type: FmEvents.WATCHER_FAILED,
        errorMessage: e.message,
        errorCode: e.code || e.name || "firemodel/watcher-failed"
      });
      throw e;
    }
    try {
      addToWatcherPool(watcherItem);
      (this._dispatcher || FireModel2.dispatch)({
        type: FmEvents.WATCHER_STARTING,
        ...watcherItem
      });
      await waitForInitialization(watcherItem);
      await (this._dispatcher || FireModel2.dispatch)({
        type: FmEvents.WATCHER_STARTED,
        ...watcherItem
      });
      return watcherItem;
    } catch (e) {
      throw new FireModelError2(`The watcher "${watcherId}" failed to initialize`, "firemodel/watcher-initialization");
    }
  }
  dispatch(d) {
    this._dispatcher = d;
    return this;
  }
  toString() {
    return `Watching path "${this._query.path}" for "${this._eventType}" event(s) [ hashcode: ${String(this._query.hashCode())} ]`;
  }
  buildWatcherItem(name2) {
    const dispatch = this.getCoreDispatch();
    const isListOfRecords = this._watcherSource === "list-of-records";
    const watchIdPrefix = isListOfRecords ? "wlr" : "w";
    const watchHashCode = isListOfRecords ? String(this._underlyingRecordWatchers[0]._query.hashCode()) : String(this._query.hashCode());
    const watcherId = watchIdPrefix + "-" + watchHashCode;
    const watcherName = name2 || `${watcherId}`;
    const eventFamily = this._watcherSource === "list" ? "child" : "value";
    const watcherPaths = this._watcherSource === "list-of-records" ? this._underlyingRecordWatchers.map((i) => i._query.path) : [this._query.path];
    const query = this._watcherSource === "list-of-records" ? this._underlyingRecordWatchers.map((i) => i._query) : this._query;
    const watchContext = {
      watcherId,
      watcherName,
      eventFamily,
      dispatch,
      modelConstructor: this._modelConstructor,
      query,
      dynamicPathProperties: this._dynamicProperties,
      compositeKey: this._compositeKey,
      localPath: this._localPath,
      localPostfix: this._localPostfix,
      modelName: this._modelName,
      localModelName: this._localModelName || "not-relevant",
      pluralName: this._pluralName,
      watcherPaths,
      watcherSource: this._watcherSource,
      createdAt: new Date().getTime()
    };
    return watchContext;
  }
  getCoreDispatch() {
    const coreDispatch = this._dispatcher || FireModel2.dispatch;
    if (coreDispatch.name === "defaultDispatch") {
      throw new FireModelError2(`Attempt to start a ${this._watcherSource} watcher on "${this._query.path}" but no dispatcher has been assigned. Make sure to explicitly set the dispatch function or use "FireModel.dispatch = xxx" to setup a default dispatch function.`, `firemodel/invalid-dispatch`);
    }
    return coreDispatch;
  }
  get db() {
    if (!this._db) {
      if (FireModel2.defaultDb) {
        this._db = FireModel2.defaultDb;
      }
    }
    return this._db;
  }
}

// src/watchers/WatchList.ts
class WatchList2 extends WatchBase {
  constructor() {
    super(...arguments);
    this._offsets = {};
    this._options = {};
  }
  static list(modelConstructor, options = {}) {
    const obj = new WatchList2();
    obj.list(modelConstructor, options);
    return obj;
  }
  list(modelConstructor, options = {}) {
    this._watcherSource = "list";
    this._eventType = "child";
    this._options = options;
    if (options.offsets) {
      this._offsets = options.offsets;
    }
    const lst = List.create(modelConstructor, options);
    this._modelConstructor = modelConstructor;
    this._classProperties = getAllPropertiesFromClassStructure(new this._modelConstructor());
    this._dynamicProperties = Record2.dynamicPathProperties(modelConstructor);
    this.setPathDependantProperties();
    return this;
  }
  offsets(offsetDict) {
    this._offsets = offsetDict;
    const lst = List.create(this._modelConstructor, this._options);
    this.setPathDependantProperties();
    return this;
  }
  ids(...ids) {
    if (ids.length === 0) {
      throw new FireModelError2(`You attempted to setup a watcher list on a given set of ID's of "${this._modelName}" but the list of ID's was empty!`, "firemodel/not-ready");
    }
    for (const id of ids) {
      this._underlyingRecordWatchers.push(this._options.offsets ? Watch.record(this._modelConstructor, {
        ...typeof id === "string" ? {id} : id,
        ...this._options.offsets
      }) : Watch.record(this._modelConstructor, id));
    }
    this._watcherSource = "list-of-records";
    this._eventType = "value";
    return this;
  }
  since(when, limit) {
    this._query = this._query.orderByChild("lastUpdated").startAt(when);
    if (limit) {
      this._query = this._query.limitToFirst(limit);
    }
    return this;
  }
  dormantSince(when, limit) {
    this._query = this._query.orderByChild("lastUpdated").endAt(when);
    if (limit) {
      this._query = this._query.limitToFirst(limit);
    }
    return this;
  }
  after(when, limit) {
    this._query = this._query.orderByChild("createdAt").startAt(when);
    if (limit) {
      this._query = this._query.limitToFirst(limit);
    }
    return this;
  }
  before(when, limit) {
    this._query = this._query.orderByChild("createdAt").endAt(when);
    if (limit) {
      this._query = this._query.limitToFirst(limit);
    }
    return this;
  }
  first(howMany, startAt2) {
    this._query = this._query.orderByChild("createdAt").limitToFirst(howMany);
    if (startAt2) {
      this._query = this._query.startAt(startAt2);
    }
    return this;
  }
  last(howMany, startAt2) {
    this._query = this._query.orderByChild("createdAt").limitToLast(howMany);
    if (startAt2) {
      this._query = this._query.endAt(startAt2);
    }
    return this;
  }
  recent(howMany, startAt2) {
    this._query = this._query.orderByChild("lastUpdated").limitToFirst(howMany);
    if (startAt2) {
      this._query = this._query.startAt(startAt2);
    }
    return this;
  }
  inactive(howMany, startAt2) {
    this._query = this._query.orderByChild("lastUpdated").limitToLast(howMany);
    if (startAt2) {
      this._query = this._query.endAt(startAt2);
    }
    return this;
  }
  fromQuery(inputQuery) {
    this._query = inputQuery;
    return this;
  }
  all(limit) {
    if (limit) {
      this._query = this._query.limitToLast(limit);
    }
    return this;
  }
  where(property2, value) {
    let operation = "=";
    let val;
    if (Array.isArray(value)) {
      val = value[1];
      operation = value[0];
    } else {
      val = value;
    }
    this._query = SerializedQuery.create(this.db, this._query.path).orderByChild(property2).where(operation, val);
    return this;
  }
  setPathDependantProperties() {
    if (this._dynamicProperties.length === 0 || Object.keys(this._offsets).length > 0) {
      const lst = List.create(this._modelConstructor, {
        ...this._options,
        offsets: this._offsets
      });
      this._query = SerializedQuery.create(this.db, lst.dbPath);
      this._modelName = lst.modelName;
      this._pluralName = lst.pluralName;
      this._localPath = lst.localPath;
      this._localPostfix = lst.localPostfix;
    }
  }
}

// src/watchers/WatchRecord.ts
class WatchRecord2 extends WatchBase {
  static record(modelConstructor, pk6, options = {}) {
    if (!pk6) {
      throw new FireModelError2(`Attempt made to watch a RECORD but no primary key was provided!`, "firemodel/no-pk");
    }
    const o = new WatchRecord2();
    if (o.db) {
      o._db = options.db;
    }
    o._eventType = "value";
    o._watcherSource = "record";
    const r = Record2.createWith(modelConstructor, pk6, options.db ? {db: options.db} : {});
    o._query = SerializedQuery.create(options.db || FireModel2.defaultDb, `${r.dbPath}`);
    o._modelConstructor = modelConstructor;
    o._modelName = r.modelName;
    o._localModelName = r.META.localModelName;
    o._pluralName = r.pluralName;
    o._localPath = r.localPath;
    o._localPostfix = r.META.localPostfix;
    o._dynamicProperties = r.dynamicPathComponents;
    o._compositeKey = r.compositeKey;
    return o;
  }
}

// src/Watch.ts
class Watch {
  static set defaultDb(db2) {
    FireModel2.defaultDb = db2;
  }
  static set dispatch(d) {
    FireModel2.dispatch = d;
  }
  static get inventory() {
    return getWatcherPool();
  }
  static toJSON() {
    return Watch.inventory;
  }
  static lookup(hashCode) {
    const codes = new Set(Object.keys(getWatcherPool()));
    if (!codes.has(hashCode)) {
      const e = new Error(`You looked up an invalid watcher hashcode [${hashCode}].`);
      e.name = "FireModel::InvalidHashcode";
      throw e;
    }
    return getWatcherPool()[hashCode];
  }
  static get watchCount() {
    return Object.keys(getWatcherPool()).length;
  }
  static reset() {
    clearWatcherPool();
  }
  static findByName(name2) {
    const pool = getWatcherPool();
    return Object.keys(pool).find((i) => pool[i].watcherName === name2);
  }
  static stop(hashCode, oneOffDB) {
    const codes = new Set(Object.keys(getWatcherPool()));
    const db2 = oneOffDB || FireModel2.defaultDb;
    if (!db2) {
      throw new FireModelError2(`There is no established way to connect to the database; either set the default DB or pass the DB in as the second parameter to Watch.stop()!`, `firemodel/no-database`);
    }
    if (hashCode && !codes.has(hashCode)) {
      const e = new FireModelError2(`The hashcode passed into the stop() method [ ${hashCode} ] is not actively being watched!`);
      e.name = "firemodel/missing-hashcode";
      throw e;
    }
    if (!hashCode) {
      const pool = getWatcherPool();
      if (Object.keys(pool).length > 0) {
        const keysAndPaths = Object.keys(pool).reduce((agg, key2) => ({...agg, [key2]: pool[key2].watcherPaths}), {});
        const dispatch = pool[firstKey2(pool)].dispatch;
        db2.unWatch();
        clearWatcherPool();
        dispatch({
          type: FmEvents.WATCHER_STOPPED_ALL,
          stopped: keysAndPaths
        });
      }
    } else {
      const registry = getWatcherPool()[hashCode];
      const events5 = registry.eventFamily === "child" ? "value" : ["child_added", "child_changed", "child_moved", "child_removed"];
      db2.unWatch(events5, registry.dispatch);
      registry.dispatch({
        type: FmEvents.WATCHER_STOPPED,
        watcherId: hashCode,
        remaining: getWatcherPoolList().map((i) => ({
          id: i.watcherId,
          name: i.watcherName
        }))
      });
      removeFromWatcherPool(hashCode);
    }
  }
  static record(modelConstructor, pk6, options = {}) {
    return WatchRecord2.record(modelConstructor, pk6, options);
  }
  static list(modelConstructor, offsets) {
    return WatchList2.list(modelConstructor, {offsets});
  }
}

// src/watchers/findWatchers.ts
function findWatchers2(dbPath) {
  const inspectListofRecords = (watcher) => {
    const paths = watcher.watcherPaths;
    let found = false;
    paths.forEach((p) => {
      if (dbPath.includes(p)) {
        found = true;
      }
    });
    return found;
  };
  return hashToArray(Watch.inventory).filter((i) => i.watcherSource === "list-of-records" ? inspectListofRecords(i) : dbPath.includes(i.query.path));
}

// src/verifications/isHasManyRelationship.ts
function isHasManyRelationship2(rec, property2) {
  return rec.META.relationship(property2).relType === "hasMany" ? true : false;
}

// src/record/createCompositeKeyString.ts
function createCompositeKeyRefFromRecord(rec) {
  const cKey = createCompositeKey(rec);
  return rec.hasDynamicPath ? createCompositeRef(cKey) : rec.id;
}
function createCompositeRef(cKey) {
  return Object.keys(cKey).length > 1 ? cKey.id + Object.keys(cKey).filter((k) => k !== "id").map((k) => `::${k}:${cKey[k]}`) : cKey.id;
}

// src/record/relationships/buildRelationshipPaths.ts
function buildRelationshipPaths2(rec, property2, fkRef, options = {}) {
  try {
    const meta2 = getModelMeta(rec);
    const now = options.now || new Date().getTime();
    const operation = options.operation || "add";
    const altHasManyValue = options.altHasManyValue || true;
    const fkModelConstructor = meta2.relationship(property2).fkConstructor();
    const inverseProperty = meta2.relationship(property2).inverseProperty;
    const fkRecord = Record2.createWith(fkModelConstructor, fkRef, {db: rec.db});
    const results = [];
    const fkCompositeKey = typeof fkRef === "object" ? fkRef : fkRecord.compositeKey;
    const fkId = createCompositeKeyRefFromRecord(fkRecord);
    const hasManyReln = meta2.isRelationship(property2) && meta2.relationship(property2).relType === "hasMany";
    const pathToRecordsFkReln = pathJoin(rec.dbPath, property2, hasManyReln ? fkId : "");
    results.push({
      path: pathToRecordsFkReln,
      value: operation === "remove" ? null : hasManyReln ? altHasManyValue : fkId
    });
    results.push({path: pathJoin(rec.dbPath, "lastUpdated"), value: now});
    if (inverseProperty) {
      const fkMeta = getModelMeta(fkRecord);
      const inverseReln = fkMeta.relationship(inverseProperty);
      if (!inverseReln) {
        throw new MissingInverseProperty(rec, property2);
      }
      if (!inverseReln.inverseProperty && inverseReln.directionality === "bi-directional") {
        throw new MissingReciprocalInverse2(rec, property2);
      }
      if (inverseReln.inverseProperty !== property2 && inverseReln.directionality === "bi-directional") {
        throw new IncorrectReciprocalInverse(rec, property2);
      }
      const fkInverseIsHasManyReln = inverseProperty ? fkMeta.relationship(inverseProperty).relType === "hasMany" : false;
      const pathToInverseFkReln = fkInverseIsHasManyReln ? pathJoin(fkRecord.dbPath, inverseProperty, rec.compositeKeyRef) : pathJoin(fkRecord.dbPath, inverseProperty);
      results.push({
        path: pathToInverseFkReln,
        value: operation === "remove" ? null : fkInverseIsHasManyReln ? altHasManyValue : rec.compositeKeyRef
      });
      results.push({
        path: pathJoin(fkRecord.dbPath, "lastUpdated"),
        value: now
      });
    }
    return results;
  } catch (e) {
    if (e.firemodel) {
      console.log(e);
      throw e;
    }
    throw new UnknownRelationshipProblem(e, rec, property2);
  }
}

// src/record/locallyUpdateFkOnRecord.ts
function locallyUpdateFkOnRecord(rec, fkId, event) {
  const relnType = rec.META.relationship(event.property).relType;
  rec.set("lastUpdated", new Date().getTime(), true);
  switch (event.operation) {
    case "set":
    case "add":
      rec._data[event.property] = relnType === "hasMany" ? {...rec.data[event.property], ...{[fkId]: true}} : fkId;
      return;
    case "remove":
      if (relnType === "hasMany") {
        delete rec._data[event.property][fkId];
      } else {
        rec._data[event.property] = "";
      }
      return;
  }
}

// src/record/relationshipOperation.ts
async function relationshipOperation2(rec, operation, property2, fkRefs, paths, options = {}) {
  const fks = fkRefs.map((fk6) => {
    return typeof fk6 === "object" ? createCompositeRef(fk6) : fk6;
  });
  const dispatchEvents = {
    set: [
      FmEvents.RELATIONSHIP_SET_LOCALLY,
      FmEvents.RELATIONSHIP_SET_CONFIRMATION,
      FmEvents.RELATIONSHIP_SET_ROLLBACK
    ],
    clear: [
      FmEvents.RELATIONSHIP_REMOVED_LOCALLY,
      FmEvents.RELATIONSHIP_REMOVED_CONFIRMATION,
      FmEvents.RELATIONSHIP_REMOVED_ROLLBACK
    ],
    add: [
      FmEvents.RELATIONSHIP_ADDED_LOCALLY,
      FmEvents.RELATIONSHIP_ADDED_CONFIRMATION,
      FmEvents.RELATIONSHIP_ADDED_ROLLBACK
    ],
    remove: [
      FmEvents.RELATIONSHIP_REMOVED_LOCALLY,
      FmEvents.RELATIONSHIP_REMOVED_CONFIRMATION,
      FmEvents.RELATIONSHIP_REMOVED_ROLLBACK
    ]
  };
  try {
    const [localEvent, confirmEvent, rollbackEvent] = dispatchEvents[operation];
    const fkConstructor = rec.META.relationship(property2).fkConstructor;
    const fkRecord = new Record2(fkConstructor());
    const fkMeta = getModelMeta(fkRecord.data);
    const transactionId = "t-reln-" + Math.random().toString(36).substr(2, 5) + "-" + Math.random().toString(36).substr(2, 5);
    const event = {
      key: rec.compositeKeyRef,
      operation,
      property: property2,
      kind: "relationship",
      eventType: "local",
      transactionId,
      fks,
      paths,
      from: capitalize(rec.modelName),
      to: capitalize(fkRecord.modelName),
      fromLocal: rec.localPath,
      toLocal: fkRecord.localPath,
      fromConstructor: rec.modelConstructor,
      toConstructor: fkRecord.modelConstructor
    };
    const inverseProperty = rec.META.relationship(property2).inverseProperty;
    if (inverseProperty) {
      event.inverseProperty = inverseProperty;
    }
    try {
      await localRelnOp(rec, event, localEvent);
      await relnConfirmation(rec, event, confirmEvent);
    } catch (e) {
      await relnRollback(rec, event, rollbackEvent);
      throw new FireModelProxyError(e, `Encountered an error executing a relationship operation between the "${event.from}" model and "${event.to}". The paths that were being modified were: ${event.paths.map((i) => i.path).join("- \n")}
 A dispatch for a rollback event has been issued.`);
    }
  } catch (e) {
    if (e.firemodel) {
      throw e;
    } else {
      throw new UnknownRelationshipProblem(e, rec, property2, operation);
    }
  }
}
async function localRelnOp(rec, event, type) {
  try {
    event.fks.map((fk6) => {
      locallyUpdateFkOnRecord(rec, fk6, {...event, type});
    });
    rec.dispatch({...event, type});
    const ref = rec.db.ref("/");
    await ref.update(event.paths.reduce((acc, curr) => {
      acc[curr.path] = curr.value;
      return acc;
    }, {}));
  } catch (e) {
    throw new FireModelProxyError(e, `While operating doing a local relationship operation ran into an error. Note that the "paths" passed in were:
${JSON.stringify(event.paths)}.

The underlying error message was:`);
  }
}
async function relnConfirmation(rec, event, type) {
  rec.dispatch({...event, type});
}
async function relnRollback(rec, event, type) {
  rec.dispatch({...event, type});
}

// src/record/createCompositeKeyFromFkString.ts
function createCompositeKeyFromFkString2(fkCompositeRef, modelConstructor) {
  const [id, ...paramsHash] = fkCompositeRef.split("::");
  const model3 = modelConstructor ? new modelConstructor() : void 0;
  return paramsHash.map((i) => i.split(":")).reduce((acc, curr) => {
    const [prop, value] = curr;
    acc[prop] = model3 ? setWithType(prop, value, model3) : value;
    return acc;
  }, {id});
}
function setWithType(prop, value, model3) {
  if (!model3.META.property(prop)) {
    throw new FireModelError2(`When building a "typed" composite key based on the model ${capitalize(model3.constructor.name)}, the property "${prop}" was presented but this property doesn't exist on this model!`, "firemodel/property-does-not-exist");
  }
  const type = model3.META.property(prop).type;
  switch (type) {
    case "number":
      return Number(value);
    case "boolean":
      return Boolean(value);
    default:
      return value;
  }
}

// src/errors/record/DatabaseCrudFailure.ts
class RecordCrudFailure extends FireModelError2 {
  constructor(rec, crudAction, transactionId, e) {
    super("", e.name !== "Error" ? e.name : `firemodel/record-${crudAction}-failure`);
    const message = `Attempt to "${crudAction}" "${capitalize(rec.modelName)}::${rec.id}" failed [ ${transactionId} ] ${e ? e.message : "for unknown reasons"}`;
    this.message = message;
    this.stack = e.stack;
  }
}

// src/state-mgmt/UnwatchedLocalEvent.ts
function UnwatchedLocalEvent2(rec, event) {
  const meta2 = {
    dynamicPathProperties: rec.dynamicPathComponents,
    compositeKey: rec.compositeKey,
    modelConstructor: rec.modelConstructor,
    modelName: rec.modelName,
    pluralName: rec.pluralName,
    localModelName: rec.META.localModelName,
    localPath: rec.localPath,
    localPostfix: rec.META.localPostfix
  };
  return {...event, ...meta2, dbPath: rec.dbPath, watcherSource: "unknown"};
}

// src/Record.ts
const fast_copy2 = __toModule(require_fast_copy());
class Record2 extends FireModel2 {
  constructor(model3, options = {}) {
    super();
    this.options = options;
    this._existsOnDB = false;
    this._writeOperations = [];
    this._data = {};
    if (!model3) {
      throw new FireModelError2(`You are trying to instantiate a Record but the "model constructor" passed in is empty!`, `firemodel/not-allowed`);
    }
    if (!model3.constructor) {
      console.log(`The "model" property passed into the Record constructor is NOT a Model constructor! It is of type "${typeof model3}": `, model3);
      if (typeof model3 === "string") {
        model3 = FireModel2.lookupModel(model3);
        if (!model3) {
          throw new FireModelError2(`Attempted to lookup the model in the registry but it was not found!`);
        }
      } else {
        throw new FireModelError2(`Can not instantiate a Record without a valid Model constructor`);
      }
    }
    this._modelConstructor = model3;
    this._model = new model3();
    this._data = new model3();
  }
  static set defaultDb(db2) {
    FireModel2.defaultDb = db2;
  }
  static get defaultDb() {
    return FireModel2.defaultDb;
  }
  static set dispatch(fn2) {
    FireModel2.dispatch = fn2;
  }
  static dynamicPathProperties(model3) {
    return Record2.create(model3).dynamicPathComponents;
  }
  static create(model3, options = {}) {
    const r = new Record2(model3, options);
    if (options.silent && !r.db.isMockDb) {
      throw new FireModelError2(`You can only add new records to the DB silently when using a Mock database!`, "forbidden");
    }
    return r;
  }
  static local(model3, values, options = {}) {
    const rec = Record2.create(model3, options);
    if (!options.ignoreEmptyValues && (!values || Object.keys(values).length === 0)) {
      throw new FireModelError2("You used the static Record.local() method but passed nothing into the 'values' property! If you just want to skip this error then you can set the options to { ignoreEmptyValues: true } or just use the Record.create() method.", `firemodel/record::local`);
    }
    if (values) {
      const defaultValues = rec.META.properties.filter((i) => i.defaultValue !== void 0);
      defaultValues.forEach((i) => {
        if (rec.get(i.property) === void 0) {
          rec.set(i.property, i.defaultValue, true);
        }
      });
    }
    return rec;
  }
  static async add(model3, payload, options = {}) {
    let r;
    if (typeof model3 === "string") {
      model3 = FireModel2.lookupModel(model3);
    }
    try {
      if (!model3) {
        throw new FireModelError2(`The model passed into the Record.add() static initializer was not defined! This is often the result of a circular dependency. Note that the "payload" sent into Record.add() was:

${JSON.stringify(payload, null, 2)}`);
      }
      r = Record2.createWith(model3, payload, options);
      if (!payload.id) {
        const path4 = List.dbPath(model3, payload);
        payload.id = await r.db.getPushKey(path4);
      }
      await r._initialize(payload, options);
      const defaultValues = r.META.properties.filter((i) => i.defaultValue !== void 0);
      defaultValues.forEach((i) => {
        if (r.get(i.property) === void 0) {
          r.set(i.property, i.defaultValue, true);
        }
      });
      await r._adding(options);
    } catch (e) {
      if (e.code === "permission-denied") {
        const rec = Record2.createWith(model3, payload);
        throw new FireModelError2(`Permission error while trying to add the ${capitalize(rec.modelName)} to the database path ${rec.dbPath}`, "firemodel/permission-denied");
      }
      if (e.name.includes("firemodel")) {
        throw e;
      }
      throw new FireModelProxyError(e, "Failed to add new record ");
    }
    return r;
  }
  static async update(model3, id, updates, options = {}) {
    let r;
    try {
      r = await Record2.get(model3, id, options);
      await r.update(updates);
    } catch (e) {
      const err = new Error(`Problem adding new Record: ${e.message}`);
      err.name = e.name !== "Error" ? e.name : "FireModel";
      throw e;
    }
    return r;
  }
  static async pushKey(model3, id, property2, payload, options = {}) {
    const obj = await Record2.get(model3, id, options);
    return obj.pushKey(property2, payload);
  }
  static createWith(model3, payload, options = {}) {
    const rec = Record2.create(model3, options);
    if (options.setDeepRelationships === true) {
      throw new FireModelError2(`Trying to create a ${capitalize(rec.modelName)} with the "setDeepRelationships" property set. This is NOT allowed; consider the 'Record.add()' method instead.`, "not-allowed");
    }
    const properties = typeof payload === "string" ? createCompositeKeyFromFkString2(payload, rec.modelConstructor) : payload;
    rec._initialize(properties, options);
    return rec;
  }
  static async get(model3, id, options = {}) {
    const record = Record2.create(model3, options);
    await record._getFromDB(id);
    return record;
  }
  static async remove(model3, id, currentState) {
    const record = currentState ? currentState : await Record2.get(model3, id);
    await record.remove();
    return record;
  }
  static async associate(model3, id, property2, refs) {
    const obj = await Record2.get(model3, id);
    await obj.associate(property2, refs);
    return obj;
  }
  static getCompositeKeyFromPath(model3, path4) {
    if (!path4) {
      return {};
    }
    const r = Record2.create(model3);
    const pathParts = dotNotation2(path4).split(".");
    const compositeKey = {};
    const segments = dotNotation2(r.dbOffset).split(".");
    if (segments.length > pathParts.length || pathParts.length - 2 > segments.length) {
      throw new FireModelError2(`Attempt to get the composite key from a path failed due to the diparity of segments in the path [ ${pathParts.length} ] versus the dynamic path [ ${segments.length} ]`, "firemodel/not-allowed");
    }
    segments.forEach((segment, idx) => {
      if (segment.slice(0, 1) === ":") {
        const name2 = segment.slice(1);
        const value = pathParts[idx];
        compositeKey[name2] = value;
      } else {
        if (segment !== pathParts[idx]) {
          throw new FireModelError2(`The attempt to build a composite key for the model ${capitalize(r.modelName)} failed because the static parts of the path did not match up. Specifically where the "dbOffset" states the segment "${segment}" the path passed in had "${pathParts[idx]}" instead.`);
        }
      }
      if (pathParts.length - 1 === segments.length) {
        compositeKey.id = pathParts.slice(-1);
      }
    });
    return compositeKey;
  }
  static compositeKey(model3, obj) {
    const dynamicSegments = Record2.dynamicPathProperties(model3).concat("id");
    return dynamicSegments.reduce((agg, prop) => {
      if (obj[prop] === void 0) {
        throw new FireModelError2(`You used attempted to generate a composite key of the model ${Record2.modelName(model3)} but the property "${prop}" is part of they dynamic path and the data passed in did not have a value for this property.`, "firemodel/not-ready");
      }
      agg[prop] = obj[prop];
      return agg;
    }, {});
  }
  static compositeKeyRef(model3, object) {
    if (Record2.dynamicPathProperties(model3).length === 0) {
      return typeof object === "string" ? object : object.id;
    }
    if (typeof object === "string") {
      if (object.includes(":")) {
        return object;
      } else {
        throw new FireModelError2(`Attempt to get a compositeKeyRef() but passed in a string/id value instead of a composite key for a model [ ${Record2.modelName(model3)}, "${object}" ] which HAS dynamic properties! Required props are: ${Record2.dynamicPathProperties(model3).join(", ")}`, "not-allowed");
      }
    }
    const compositeKey = Record2.compositeKey(model3, object);
    const nonIdKeys = Object.keys(compositeKey).reduce((agg, prop) => prop === "id" ? agg : agg.concat({prop, value: compositeKey[prop]}), []);
    return `${compositeKey.id}::${nonIdKeys.map((tuple) => `${tuple.prop}:${tuple.value}`).join("::")}`;
  }
  static modelName(model3) {
    const r = Record2.create(model3);
    return capitalize(r.modelName);
  }
  get data() {
    return this._data;
  }
  get isDirty() {
    return this.META.isDirty ? true : false;
  }
  set isDirty(value) {
    if (!this._data.META) {
      this._data.META = {isDirty: value};
    }
    this._data.META.isDirty = value;
  }
  get dbPath() {
    if (this.data.id ? false : true) {
      throw new FireModelError2(`you can not ask for the dbPath before setting an "id" property [ ${this.modelName} ]`, "record/not-ready");
    }
    return [
      this._injectDynamicPathProperties(this.dbOffset),
      this.pluralName,
      this.data.id
    ].join("/");
  }
  get hasDynamicPath() {
    return this.META.dbOffset.includes(":");
  }
  get dynamicPathComponents() {
    return this._findDynamicComponents(this.META.dbOffset);
  }
  get localDynamicComponents() {
    return this._findDynamicComponents(this.META.localPrefix);
  }
  get compositeKey() {
    return createCompositeKey(this);
  }
  get compositeKeyRef() {
    return createCompositeKeyRefFromRecord(this);
  }
  get id() {
    return this.data.id;
  }
  set id(val) {
    if (this.data.id) {
      throw new FireModelError2(`You may not re-set the ID of a record [ ${this.modelName}.id ${this.data.id} => ${val} ].`, "firemodel/not-allowed");
    }
    this._data.id = val;
  }
  get dbOffset() {
    return getModelMeta(this).dbOffset;
  }
  get localPath() {
    let prefix = this.localPrefix;
    this.localDynamicComponents.forEach((prop) => {
      prefix = prefix.replace(`:${prop}`, this.get(prop));
    });
    return pathJoin2(prefix, this.META.localModelName !== this.modelName ? this.META.localModelName : this.options.pluralizeLocalPath ? this.pluralName : this.modelName);
  }
  get localPrefix() {
    return getModelMeta(this).localPrefix;
  }
  get existsOnDB() {
    return this.data && this.data.id ? true : false;
  }
  get isBeingWatched() {
    return FireModel2.isBeingWatched(this.dbPath);
  }
  get modelConstructor() {
    return this._modelConstructor;
  }
  async reload() {
    const reloaded = await Record2.get(this._modelConstructor, this.compositeKeyRef);
    return reloaded;
  }
  async addAnother(payload, options = {}) {
    const newRecord = await Record2.add(this._modelConstructor, payload, options);
    return newRecord;
  }
  isSameModelAs(model3) {
    return this._modelConstructor === model3;
  }
  async pushKey(property2, value) {
    if (this.META.pushKeys.indexOf(property2) === -1) {
      throw new FireModelError2(`Invalid Operation: you can not push to property "${property2}" as it has not been declared a pushKey property in the schema`, "invalid-operation/not-pushkey");
    }
    if (!this.existsOnDB) {
      throw new FireModelError2(`Invalid Operation: you can not push to property "${property2}" before saving the record to the database`, "invalid-operation/not-on-db");
    }
    const key2 = this.db.isMockDb ? key() : await this.db.getPushKey(pathJoin2(this.dbPath, property2));
    await this.db.update(pathJoin2(this.dbPath, property2), {
      [pathJoin2(this.dbPath, property2, key2)]: value,
      [pathJoin2(this.dbPath, "lastUpdated")]: new Date().getTime()
    });
    const currentState = this.get(property2) || {};
    const newState = {...currentState, [key2]: value};
    await this.set(property2, newState);
    return key2;
  }
  async update(props2) {
    const meta2 = getModelMeta(this);
    if (!meta2.property) {
      throw new FireModelError2(`There is a problem with this record's META information [ model: ${capitalize(this.modelName)}, id: ${this.id} ]. The property() method -- used to dig into properties on any given model appears to be missing!`, "firemodel/meta-missing");
    }
    if (Object.keys(props2).some((key2) => {
      const root = key2.split(".")[0];
      const rootProperties = meta2.property(root);
      if (!rootProperties) {
        throw new FireModelError2(`While this record [ model: ${capitalize(this.modelName)}, id: ${this.id} ] does return a "META.property" function, looking up the property "${root}" has resulted in an invalid response [${typeof rootProperties}]`);
      }
      return rootProperties.isRelationship;
    })) {
      const relProps = Object.keys(props2).filter((p) => meta2.property(p).isRelationship);
      throw new FireModelError2(`You called update on a hash which has relationships included in it. Please only use "update" for updating properties. The relationships you were attempting to update were: ${relProps.join(", ")}.`, `firemodel/not-allowed`);
    }
    const lastUpdated = new Date().getTime();
    const changed = {
      ...props2,
      lastUpdated
    };
    const rollback = fast_copy2.default(this.data);
    this._data = {...this.data, ...changed};
    await this._localCrudOperation(IFmCrudOperations.update, rollback);
    return;
  }
  async remove() {
    this.isDirty = true;
    await this._localCrudOperation(IFmCrudOperations.remove, fast_copy2.default(this.data));
    this.isDirty = false;
  }
  async set(prop, value, silent = false) {
    const rollback = fast_copy2.default(this.data);
    const meta2 = this.META.property(prop);
    if (!meta2) {
      throw new FireModelError2(`There was a problem getting the meta data for the model ${capitalize(this.modelName)} while attempting to set the "${prop}" property to: ${value}`);
    }
    if (meta2.isRelationship) {
      throw new FireModelError2(`You can not "set" the property "${prop}" because it is configured as a relationship!`, "firemodel/not-allowed");
    }
    const lastUpdated = new Date().getTime();
    const changed = {
      [prop]: value,
      lastUpdated
    };
    this.META.isDirty = true;
    this._data = {...this._data, ...changed};
    if (!silent) {
      await this._localCrudOperation(IFmCrudOperations.update, rollback, {
        silent
      });
      this.META.isDirty = false;
    }
    return;
  }
  async associate(property2, refs, options = {}) {
    const meta2 = getModelMeta(this);
    if (!meta2.relationship(property2)) {
      throw new FireModelError2(`Attempt to associate the property "${property2}" can not be done on model ${capitalize(this.modelName)} because the property is not defined!`, `firemodel/not-allowed`);
    }
    if (!meta2.relationship(property2).relType) {
      throw new FireModelError2(`For some reason the property "${property2}" on the model ${capitalize(this.modelName)} doesn't have cardinality assigned to the "relType" (aka, hasMany, hasOne).

The META for relationships on the model are: ${JSON.stringify(meta2.relationships, null, 2)}`, `firemodel/unknown`);
    }
    const relType = meta2.relationship(property2).relType;
    if (relType === "hasMany") {
      await this.addToRelationship(property2, refs, options);
    } else {
      if (Array.isArray(refs)) {
        if (refs.length === 1) {
          refs = refs.pop();
        } else {
          throw new FireModelError2(`Attempt to use "associate()" with a "hasOne" relationship [ ${property2}] on the model ${capitalize(this.modelName)}.`, "firemodel/invalid-cardinality");
        }
      }
      await this.setRelationship(property2, refs, options);
    }
  }
  async disassociate(property2, refs, options = {}) {
    const relType = this.META.relationship(property2).relType;
    if (relType === "hasMany") {
      await this.removeFromRelationship(property2, refs, options);
    } else {
      await this.clearRelationship(property2, options);
    }
  }
  async addToRelationship(property2, fkRefs, options = {}) {
    const altHasManyValue = options.altHasManyValue || true;
    if (!isHasManyRelationship2(this, property2)) {
      throw new NotHasManyRelationship(this, property2, "addToRelationship");
    }
    fkRefs = Array.isArray(fkRefs) ? fkRefs : [fkRefs];
    let paths = [];
    const now = new Date().getTime();
    fkRefs.map((ref) => {
      paths = [
        ...buildRelationshipPaths2(this, property2, ref, {
          now,
          altHasManyValue
        }),
        ...paths
      ];
    });
    await relationshipOperation2(this, "add", property2, fkRefs, paths, options);
  }
  async removeFromRelationship(property2, fkRefs, options = {}) {
    if (!isHasManyRelationship2(this, property2)) {
      throw new NotHasManyRelationship(this, property2, "removeFromRelationship");
    }
    fkRefs = Array.isArray(fkRefs) ? fkRefs : [fkRefs];
    let paths = [];
    const now = new Date().getTime();
    fkRefs.map((ref) => {
      paths = [
        ...buildRelationshipPaths2(this, property2, ref, {
          now,
          operation: "remove"
        }),
        ...paths
      ];
    });
    await relationshipOperation2(this, "remove", property2, fkRefs, paths, options);
  }
  async clearRelationship(property2, options = {}) {
    const relType = this.META.relationship(property2).relType;
    const fkRefs = relType === "hasMany" ? this._data[property2] ? Object.keys(this.get(property2)) : [] : this._data[property2] ? [this.get(property2)] : [];
    let paths = [];
    const now = new Date().getTime();
    fkRefs.map((ref) => {
      paths = [
        ...buildRelationshipPaths2(this, property2, ref, {
          now,
          operation: "remove"
        }),
        ...paths
      ];
    });
    await relationshipOperation2(this, "clear", property2, fkRefs, paths, options);
  }
  async setRelationship(property2, fkId, options = {}) {
    if (!fkId) {
      throw new FireModelError2(`Failed to set the relationship ${this.modelName}.${property2} because no FK was passed in!`, "firemodel/not-allowed");
    }
    if (isHasManyRelationship2(this, property2)) {
      throw new NotHasOneRelationship(this, property2, "setRelationship");
    }
    const paths = buildRelationshipPaths2(this, property2, fkId);
    await relationshipOperation2(this, "set", property2, [fkId], paths, options);
  }
  get(prop) {
    return this.data[prop];
  }
  toString() {
    return `Record::${this.modelName}@${this.id || "undefined"}`;
  }
  toJSON() {
    return {
      dbPath: this.dbPath,
      modelName: this.modelName,
      pluralName: this.pluralName,
      key: this.id,
      compositeKey: this.compositeKey,
      localPath: this.localPath,
      data: this.data.toString()
    };
  }
  async _initialize(data2, options = {}) {
    if (data2) {
      Object.keys(data2).map((key2) => {
        this._data[key2] = data2[key2];
      });
    }
    const relationships = getModelMeta(this).relationships;
    const hasOneRels = (relationships || []).filter((r) => r.relType === "hasOne").map((r) => r.property);
    const hasManyRels = (relationships || []).filter((r) => r.relType === "hasMany").map((r) => r.property);
    const promises = [];
    for (const oneToManyProp of hasManyRels) {
      if (!this._data[oneToManyProp]) {
        this._data[oneToManyProp] = {};
      }
      if (options.setDeepRelationships) {
        if (this._data[oneToManyProp]) {
          promises.push(buildDeepRelationshipLinks2(this, oneToManyProp));
        }
      }
    }
    await Promise.all(promises);
    const now = new Date().getTime();
    if (!this._data.lastUpdated) {
      this._data.lastUpdated = now;
    }
    if (!this._data.createdAt) {
      this._data.createdAt = now;
    }
  }
  async _writeAudit(action, currentValue, priorValue) {
    currentValue = currentValue ? currentValue : {};
    priorValue = priorValue ? priorValue : {};
    try {
      if (this.META.audit) {
        const deltas = compareHashes(currentValue, priorValue);
        const auditLogEntries = [];
        const added = deltas.added.forEach((a) => auditLogEntries.push({
          action: "added",
          property: a,
          before: null,
          after: currentValue[a]
        }));
        deltas.changed.forEach((c) => auditLogEntries.push({
          action: "updated",
          property: c,
          before: priorValue[c],
          after: currentValue[c]
        }));
        const removed = deltas.removed.forEach((r) => auditLogEntries.push({
          action: "removed",
          property: r,
          before: priorValue[r],
          after: null
        }));
        const pastTense = {
          add: "added",
          update: "updated",
          remove: "removed"
        };
        await writeAudit(this, pastTense[action], auditLogEntries, {db: this.db});
      }
    } catch (e) {
      throw new FireModelProxyError(e);
    }
  }
  async _localCrudOperation(crudAction, priorValue, options = {}) {
    options = {
      ...{silent: false, silentAcceptance: false},
      ...options
    };
    const transactionId = "t-" + Math.random().toString(36).substr(2, 5) + "-" + Math.random().toString(36).substr(2, 5);
    const lookup = {
      add: [
        FmEvents.RECORD_ADDED_LOCALLY,
        FmEvents.RECORD_ADDED_CONFIRMATION,
        FmEvents.RECORD_ADDED_ROLLBACK
      ],
      update: [
        FmEvents.RECORD_CHANGED_LOCALLY,
        FmEvents.RECORD_CHANGED_CONFIRMATION,
        FmEvents.RECORD_CHANGED_ROLLBACK
      ],
      remove: [
        FmEvents.RECORD_REMOVED_LOCALLY,
        FmEvents.RECORD_REMOVED_CONFIRMATION,
        FmEvents.RECORD_REMOVED_ROLLBACK
      ]
    };
    const [actionTypeStart, actionTypeEnd, actionTypeFailure] = lookup[crudAction];
    this.isDirty = true;
    const {changed, added, removed} = compareHashes(withoutMetaOrPrivate(this.data), withoutMetaOrPrivate(priorValue));
    const watchers = findWatchers2(this.dbPath);
    const event = {
      transactionId,
      modelConstructor: this.modelConstructor,
      kind: "record",
      operation: crudAction,
      eventType: "local",
      key: this.id,
      value: withoutMetaOrPrivate(this.data),
      priorValue
    };
    if (crudAction === "update") {
      event.priorValue = priorValue;
      event.added = added;
      event.changed = changed;
      event.removed = removed;
    }
    if (watchers.length === 0) {
      if (!options.silent) {
        await this.dispatch(UnwatchedLocalEvent2(this, {
          type: actionTypeStart,
          ...event,
          value: withoutMetaOrPrivate(this.data)
        }));
      }
    } else {
      const dispatch = WatchDispatcher2(this.dispatch);
      for (const watcher of watchers) {
        if (!options.silent) {
          await dispatch(watcher)({type: actionTypeStart, ...event});
        }
      }
    }
    try {
      if (this.db.isMockDb && this.db.mock && options.silent) {
        this.db.mock.silenceEvents();
      }
      this._data.lastUpdated = new Date().getTime();
      const path4 = this.dbPath;
      switch (crudAction) {
        case "remove":
          try {
            const test = this.dbPath;
          } catch (e) {
            throw new FireModelProxyError(e, `The attempt to "remove" the ${capitalize(this.modelName)} with ID of "${this.id}" has been aborted. This is often because you don't have the right properties set for the dynamic path. This model requires the following dynamic properties to uniquely define (and remove) it: ${this.dynamicPathComponents.join(", ")}`);
          }
          for (const rel of this.relationships) {
            const relProperty = this.get(rel.property);
            try {
              if (rel.relType === "hasOne" && relProperty) {
                await this.disassociate(rel.property, this.get(rel.property));
              } else if (rel.relType === "hasMany" && relProperty) {
                for (const relFk of Object.keys(relProperty)) {
                  await this.disassociate(rel.property, relFk);
                }
              }
            } catch (e) {
              throw new FireModelProxyError(e, `While trying to remove ${capitalize(this.modelName)}.${this.id} from the database, problems were encountered removing the relationship defined by the "${rel.property} property (which relates to the model ${rel.fkModelName}). This relationship has a cardinality of "${rel.relType}" and the value(s) were: ${rel.relType === "hasOne" ? Object.keys(this.get(rel.property)) : this.get(rel.property)}`);
            }
          }
          await this.db.remove(this.dbPath);
          break;
        case "add":
          try {
            await this.db.set(path4, this.data);
          } catch (e) {
            throw new FireModelProxyError(e, `Problem setting the "${path4}" database path. Data passed in was of type ${typeof this.data}. Error message encountered was: ${e.message}`, `firemodel/${e.code = "permission-denied"}`);
          }
          break;
        case "update":
          const paths = this._getPaths(this, {changed, added, removed});
          this.db.update("/", paths);
          break;
      }
      this.isDirty = false;
      this._writeAudit(crudAction, this.data, priorValue);
      if (!options.silent && !options.silentAcceptance) {
        if (watchers.length === 0) {
          await this.dispatch(UnwatchedLocalEvent2(this, {
            type: actionTypeEnd,
            ...event,
            transactionId,
            value: withoutMetaOrPrivate(this.data)
          }));
        } else {
          const dispatch = WatchDispatcher2(this.dispatch);
          for (const watcher of watchers) {
            if (!options.silent) {
              await dispatch(watcher)({type: actionTypeEnd, ...event});
            }
          }
        }
      }
      if (this.db.isMockDb && this.db.mock && options.silent) {
        this.db.mock.restoreEvents();
      }
    } catch (e) {
      await this.dispatch(UnwatchedLocalEvent2(this, {
        type: actionTypeFailure,
        ...event,
        transactionId,
        value: withoutMetaOrPrivate(this.data)
      }));
      throw new RecordCrudFailure(this, crudAction, transactionId, e);
    }
  }
  _findDynamicComponents(path4 = "") {
    if (!path4.includes(":")) {
      return [];
    }
    const results = [];
    let remaining = path4;
    let index15 = remaining.indexOf(":");
    while (index15 !== -1) {
      remaining = remaining.slice(index15);
      const prop = remaining.replace(/\:(\w+).*/, "$1");
      results.push(prop);
      remaining = remaining.replace(`:${prop}`, "");
      index15 = remaining.indexOf(":");
    }
    return results;
  }
  _injectDynamicPathProperties(path4, forProp = "dbOffset") {
    this.dynamicPathComponents.forEach((prop) => {
      const value = this.data[prop];
      if (value ? false : true) {
        throw new FireModelError2(`You can not ask for the ${forProp} on a model like "${this.modelName}" which has a dynamic property of "${prop}" before setting that property [ data: ${JSON.stringify(this.data)} ].`, "record/not-ready");
      }
      if (!["string", "number"].includes(typeof value)) {
        throw new FireModelError2(`The path is using the property "${prop}" on ${this.modelName} as a part of the route path but that property must be either a string or a number and instead was a ${typeof prop}`, "record/not-allowed");
      }
      path4 = path4.replace(`:${prop}`, String(this.get(prop)));
    });
    return path4;
  }
  async _getFromDB(id) {
    const keys2 = typeof id === "string" ? createCompositeKeyFromFkString2(id, this.modelConstructor) : id;
    Object.keys(keys2).map((key2) => {
      this._data[key2] = keys2[key2];
    });
    const data2 = await this.db.getRecord(this.dbPath);
    if (data2 && data2.id) {
      await this._initialize(data2);
    } else {
      throw new FireModelError2(`Failed to load the Record "${this.modelName}::${this.id}" with composite key of:
 ${JSON.stringify(keys2, null, 2)}`, "firebase/invalid-composite-key");
    }
    return this;
  }
  async _adding(options) {
    if (!this.id) {
      this.id = key();
    }
    const now = new Date().getTime();
    if (!this.get("createdAt")) {
      this._data.createdAt = now;
    }
    this._data.lastUpdated = now;
    if (!this.db) {
      throw new FireModelError2(`An attempt to add a ${capitalize(this.modelName)} record failed as the Database has not been connected yet. Try setting FireModel's defaultDb first.`, "firemodel/db-not-ready");
    }
    await this._localCrudOperation(IFmCrudOperations.add, void 0, options);
    const relationshipsTouched = this.relationships.reduce((agg, rel) => {
      if (rel.relType === "hasMany" && Object.keys(this.data[rel.property]).length > 0) {
        return agg.concat(rel.property);
      } else if (rel.relType === "hasOne" && this.data[rel.property]) {
        return agg.concat(rel.property);
      } else {
        return agg;
      }
    }, []).filter((prop) => this.META.relationship(prop).inverseProperty);
    const promises = [];
    try {
      for (const prop of relationshipsTouched) {
        const meta2 = this.META.relationship(prop);
        if (meta2.relType === "hasOne") {
          promises.push(this.associate(prop, this.get(prop)));
        }
        if (meta2.relType === "hasMany") {
          Object.keys(this.get(prop)).forEach((fkRef) => promises.push(this.associate(prop, fkRef)));
        }
      }
      await Promise.all(promises);
    } catch (e) {
      throw new FireModelProxyError(e, `An ${capitalize(this.modelName)} [${this.id}] model was being added but when attempting to add in the relationships which were inferred by the record payload it ran into problems. The relationship(s) which had properties defined -- and which had a bi-lateral FK relationship (e.g., both models will track the relationship versus just the ${capitalize(this.modelName)} [${this.id} model) --  were: ${relationshipsTouched.join(", ")}`);
    }
    return this;
  }
}

// src/Mock/NamedFakes.ts
const NamedFakes = {
  id: true,
  fbKey: true,
  String: true,
  number: true,
  Number: true,
  price: true,
  Boolean: true,
  Object: true,
  name: true,
  firstName: true,
  lastName: true,
  company: true,
  companyName: true,
  address: true,
  streetAddress: true,
  fullAddress: true,
  city: true,
  state: true,
  zipCode: true,
  stateAbbr: true,
  country: true,
  countryCode: true,
  latitude: true,
  longitude: true,
  coordinate: true,
  gender: true,
  age: true,
  ageChild: true,
  ageAdult: true,
  ageOlder: true,
  jobTitle: true,
  date: true,
  dateRecent: true,
  dateRecentString: true,
  dateMiliseconds: true,
  dateRecentMiliseconds: true,
  datePast: true,
  datePastString: true,
  datePastMiliseconds: true,
  dateFuture: true,
  dateFutureString: true,
  dateFutureMiliseconds: true,
  dateSoon: true,
  dateSoonString: true,
  dateSoonMiliseconds: true,
  imageAvatar: true,
  imageAnimal: true,
  imageNature: true,
  imagePeople: true,
  imageTransport: true,
  phoneNumber: true,
  email: true,
  word: true,
  words: true,
  sentence: true,
  paragraph: true,
  paragraphs: true,
  slug: true,
  url: true,
  uuid: true,
  random: true,
  sequence: true,
  distribution: true,
  placeImage: true,
  placeHolder: true
};

// src/Mock/PropertyNamePatterns.ts
const PropertyNamePatterns = {
  id: "id",
  name: "name",
  age: "age",
  fullname: "name",
  firstName: "firstName",
  lastName: "lastName",
  address: "address",
  city: "city",
  state: "stateAbbr",
  country: "countryCode",
  street: "streetAddress",
  streetAddress: "streetAddress",
  lat: "latitude",
  latitude: "latitude",
  lon: "longitude",
  longitude: "longitude",
  avatar: "imageAvatar",
  phone: "phoneNumber",
  phoneNumber: "phoneNumber"
};

// src/Mock/processHasMany.ts
async function processHasMany2(record, rel, config, db2) {
  const fkMockMeta = (await Mock2(rel.fkConstructor(), db2).generate(1)).pop();
  const prop = rel.property;
  await record.addToRelationship(prop, fkMockMeta.compositeKey);
  if (config.relationshipBehavior === "link") {
    await db2.remove(fkMockMeta.dbPath);
    return;
  }
  return fkMockMeta;
}

// src/Mock/processHasOne.ts
async function processHasOne2(source, rel, config, db2) {
  const fkMock = Mock2(rel.fkConstructor(), db2);
  const fkMockMeta = (await fkMock.generate(1)).pop();
  const prop = rel.property;
  source.setRelationship(prop, fkMockMeta.compositeKey);
  if (config.relationshipBehavior === "link") {
    const predecessors = fkMockMeta.dbPath.replace(fkMockMeta.id, "").split("/").filter((i) => i);
    await db2.remove(fkMockMeta.dbPath);
  }
  return fkMockMeta;
}

// src/Mock/addRelationships.ts
function addRelationships(db2, config, exceptions3 = {}) {
  return async (record) => {
    const relns = record.META.relationships;
    const relnResults = [];
    if (config.relationshipBehavior !== "ignore") {
      for (const rel of relns) {
        if (!config.cardinality || Object.keys(config.cardinality).includes(rel.property)) {
          if (rel.relType === "hasOne") {
            const fkRec = await processHasOne2(record, rel, config, db2);
            if (config.relationshipBehavior === "follow") {
              relnResults.push(fkRec);
            }
          } else {
            const cardinality = config.cardinality ? typeof config.cardinality[rel.property] === "number" ? config.cardinality[rel.property] : NumberBetween(config.cardinality[rel.property]) : 2;
            for (const i of Array(cardinality)) {
              const fkRec = await processHasMany2(record, rel, config, db2);
              if (config.relationshipBehavior === "follow") {
                relnResults.push(fkRec);
              }
            }
          }
        }
      }
    }
    return [
      {
        id: record.id,
        compositeKey: record.compositeKey,
        modelName: record.modelName,
        pluralName: record.pluralName,
        dbPath: record.dbPath,
        localPath: record.localPath
      },
      ...relnResults
    ];
  };
}
function NumberBetween(startEnd) {
  return Math.floor(Math.random() * (startEnd[1] - startEnd[0] + 1)) + startEnd[0];
}

// node_modules/date-fns/esm/_lib/toInteger/index.js
function toInteger2(dirtyNumber) {
  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {
    return NaN;
  }
  var number = Number(dirtyNumber);
  if (isNaN(number)) {
    return number;
  }
  return number < 0 ? Math.ceil(number) : Math.floor(number);
}

// node_modules/date-fns/esm/_lib/requiredArgs/index.js
function requiredArgs2(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}

// node_modules/date-fns/esm/toDate/index.js
function toDate2(argument) {
  requiredArgs2(1, arguments);
  var argStr = Object.prototype.toString.call(argument);
  if (argument instanceof Date || typeof argument === "object" && argStr === "[object Date]") {
    return new Date(argument.getTime());
  } else if (typeof argument === "number" || argStr === "[object Number]") {
    return new Date(argument);
  } else {
    if ((typeof argument === "string" || argStr === "[object String]") && typeof console !== "undefined") {
      console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule");
      console.warn(new Error().stack);
    }
    return new Date(NaN);
  }
}

// node_modules/date-fns/esm/addMilliseconds/index.js
function addMilliseconds2(dirtyDate, dirtyAmount) {
  requiredArgs2(2, arguments);
  var timestamp = toDate2(dirtyDate).getTime();
  var amount = toInteger2(dirtyAmount);
  return new Date(timestamp + amount);
}

// node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
var MILLISECONDS_IN_MINUTE = 6e4;
function getDateMillisecondsPart(date2) {
  return date2.getTime() % MILLISECONDS_IN_MINUTE;
}
function getTimezoneOffsetInMilliseconds(dirtyDate) {
  var date2 = new Date(dirtyDate.getTime());
  var baseTimezoneOffset = Math.ceil(date2.getTimezoneOffset());
  date2.setSeconds(0, 0);
  var hasNegativeUTCOffset = baseTimezoneOffset > 0;
  var millisecondsPartOfTimezoneOffset = hasNegativeUTCOffset ? (MILLISECONDS_IN_MINUTE + getDateMillisecondsPart(date2)) % MILLISECONDS_IN_MINUTE : getDateMillisecondsPart(date2);
  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;
}

// node_modules/date-fns/esm/isValid/index.js
function isValid2(dirtyDate) {
  requiredArgs2(1, arguments);
  var date2 = toDate2(dirtyDate);
  return !isNaN(date2);
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
function formatDistance4(token, count, options) {
  options = options || {};
  var result;
  if (typeof formatDistanceLocale[token] === "string") {
    result = formatDistanceLocale[token];
  } else if (count === 1) {
    result = formatDistanceLocale[token].one;
  } else {
    result = formatDistanceLocale[token].other.replace("{{count}}", count);
  }
  if (options.addSuffix) {
    if (options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
}

// node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function buildFormatLongFn(args) {
  return function(dirtyOptions) {
    var options = dirtyOptions || {};
    var width = options.width ? String(options.width) : args.defaultWidth;
    var format4 = args.formats[width] || args.formats[args.defaultWidth];
    return format4;
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};
const formatLong_default = formatLong;

// node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
function formatRelative3(token, _date, _baseDate, _options) {
  return formatRelativeLocale[token];
}

// node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function buildLocalizeFn(args) {
  return function(dirtyIndex, dirtyOptions) {
    var options = dirtyOptions || {};
    var context = options.context ? String(options.context) : "standalone";
    var valuesArray;
    if (context === "formatting" && args.formattingValues) {
      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      var width = options.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      var _defaultWidth = args.defaultWidth;
      var _width = options.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[_width] || args.values[_defaultWidth];
    }
    var index15 = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;
    return valuesArray[index15];
  };
}

// node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
  wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
function ordinalNumber(dirtyNumber, _dirtyOptions) {
  var number = Number(dirtyNumber);
  var rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
}
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: function(quarter) {
      return Number(quarter) - 1;
    }
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};
const localize_default = localize;

// node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function buildMatchPatternFn(args) {
  return function(dirtyString, dirtyOptions) {
    var string = String(dirtyString);
    var options = dirtyOptions || {};
    var matchResult = string.match(args.matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parseResult = string.match(args.parsePattern);
    if (!parseResult) {
      return null;
    }
    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    return {
      value,
      rest: string.slice(matchedString.length)
    };
  };
}

// node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function buildMatchFn(args) {
  return function(dirtyString, dirtyOptions) {
    var string = String(dirtyString);
    var options = dirtyOptions || {};
    var width = options.width;
    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    var matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    var matchedString = matchResult[0];
    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    var value;
    if (Object.prototype.toString.call(parsePatterns) === "[object Array]") {
      value = findIndex(parsePatterns, function(pattern) {
        return pattern.test(matchedString);
      });
    } else {
      value = findKey(parsePatterns, function(pattern) {
        return pattern.test(matchedString);
      });
    }
    value = args.valueCallback ? args.valueCallback(value) : value;
    value = options.valueCallback ? options.valueCallback(value) : value;
    return {
      value,
      rest: string.slice(matchedString.length)
    };
  };
}
function findKey(object, predicate) {
  for (var key2 in object) {
    if (object.hasOwnProperty(key2) && predicate(object[key2])) {
      return key2;
    }
  }
}
function findIndex(array, predicate) {
  for (var key2 = 0; key2 < array.length; key2++) {
    if (predicate(array[key2])) {
      return key2;
    }
  }
}

// node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],
  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: function(value) {
      return parseInt(value, 10);
    }
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: function(index15) {
      return index15 + 1;
    }
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};
const match_default = match;

// node_modules/date-fns/esm/locale/en-US/index.js
var locale = {
  code: "en-US",
  formatDistance: formatDistance4,
  formatLong: formatLong_default,
  formatRelative: formatRelative3,
  localize: localize_default,
  match: match_default,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};
const en_US_default = locale;

// node_modules/date-fns/esm/subMilliseconds/index.js
function subMilliseconds2(dirtyDate, dirtyAmount) {
  requiredArgs2(2, arguments);
  var amount = toInteger2(dirtyAmount);
  return addMilliseconds2(dirtyDate, -amount);
}

// node_modules/date-fns/esm/_lib/addLeadingZeros/index.js
function addLeadingZeros(number, targetLength) {
  var sign = number < 0 ? "-" : "";
  var output = Math.abs(number).toString();
  while (output.length < targetLength) {
    output = "0" + output;
  }
  return sign + output;
}

// node_modules/date-fns/esm/_lib/format/lightFormatters/index.js
var formatters2 = {
  y: function(date2, token) {
    var signedYear = date2.getUTCFullYear();
    var year = signedYear > 0 ? signedYear : 1 - signedYear;
    return addLeadingZeros(token === "yy" ? year % 100 : year, token.length);
  },
  M: function(date2, token) {
    var month = date2.getUTCMonth();
    return token === "M" ? String(month + 1) : addLeadingZeros(month + 1, 2);
  },
  d: function(date2, token) {
    return addLeadingZeros(date2.getUTCDate(), token.length);
  },
  a: function(date2, token) {
    var dayPeriodEnumValue = date2.getUTCHours() / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
      case "aaa":
        return dayPeriodEnumValue.toUpperCase();
      case "aaaaa":
        return dayPeriodEnumValue[0];
      case "aaaa":
      default:
        return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
    }
  },
  h: function(date2, token) {
    return addLeadingZeros(date2.getUTCHours() % 12 || 12, token.length);
  },
  H: function(date2, token) {
    return addLeadingZeros(date2.getUTCHours(), token.length);
  },
  m: function(date2, token) {
    return addLeadingZeros(date2.getUTCMinutes(), token.length);
  },
  s: function(date2, token) {
    return addLeadingZeros(date2.getUTCSeconds(), token.length);
  },
  S: function(date2, token) {
    var numberOfDigits = token.length;
    var milliseconds2 = date2.getUTCMilliseconds();
    var fractionalSeconds = Math.floor(milliseconds2 * Math.pow(10, numberOfDigits - 3));
    return addLeadingZeros(fractionalSeconds, token.length);
  }
};
const lightFormatters_default = formatters2;

// node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js
var MILLISECONDS_IN_DAY = 864e5;
function getUTCDayOfYear2(dirtyDate) {
  requiredArgs2(1, arguments);
  var date2 = toDate2(dirtyDate);
  var timestamp = date2.getTime();
  date2.setUTCMonth(0, 1);
  date2.setUTCHours(0, 0, 0, 0);
  var startOfYearTimestamp = date2.getTime();
  var difference = timestamp - startOfYearTimestamp;
  return Math.floor(difference / MILLISECONDS_IN_DAY) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
function startOfUTCISOWeek2(dirtyDate) {
  requiredArgs2(1, arguments);
  var weekStartsOn = 1;
  var date2 = toDate2(dirtyDate);
  var day = date2.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date2.setUTCDate(date2.getUTCDate() - diff);
  date2.setUTCHours(0, 0, 0, 0);
  return date2;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
function getUTCISOWeekYear2(dirtyDate) {
  requiredArgs2(1, arguments);
  var date2 = toDate2(dirtyDate);
  var year = date2.getUTCFullYear();
  var fourthOfJanuaryOfNextYear = new Date(0);
  fourthOfJanuaryOfNextYear.setUTCFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCISOWeek2(fourthOfJanuaryOfNextYear);
  var fourthOfJanuaryOfThisYear = new Date(0);
  fourthOfJanuaryOfThisYear.setUTCFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCISOWeek2(fourthOfJanuaryOfThisYear);
  if (date2.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date2.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
function startOfUTCISOWeekYear2(dirtyDate) {
  requiredArgs2(1, arguments);
  var year = getUTCISOWeekYear2(dirtyDate);
  var fourthOfJanuary = new Date(0);
  fourthOfJanuary.setUTCFullYear(year, 0, 4);
  fourthOfJanuary.setUTCHours(0, 0, 0, 0);
  var date2 = startOfUTCISOWeek2(fourthOfJanuary);
  return date2;
}

// node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
var MILLISECONDS_IN_WEEK = 6048e5;
function getUTCISOWeek2(dirtyDate) {
  requiredArgs2(1, arguments);
  var date2 = toDate2(dirtyDate);
  var diff = startOfUTCISOWeek2(date2).getTime() - startOfUTCISOWeekYear2(date2).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK) + 1;
}

// node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
function startOfUTCWeek2(dirtyDate, dirtyOptions) {
  requiredArgs2(1, arguments);
  var options = dirtyOptions || {};
  var locale2 = options.locale;
  var localeWeekStartsOn = locale2 && locale2.options && locale2.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger2(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger2(options.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  var date2 = toDate2(dirtyDate);
  var day = date2.getUTCDay();
  var diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  date2.setUTCDate(date2.getUTCDate() - diff);
  date2.setUTCHours(0, 0, 0, 0);
  return date2;
}

// node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
function getUTCWeekYear2(dirtyDate, dirtyOptions) {
  requiredArgs2(1, arguments);
  var date2 = toDate2(dirtyDate, dirtyOptions);
  var year = date2.getUTCFullYear();
  var options = dirtyOptions || {};
  var locale2 = options.locale;
  var localeFirstWeekContainsDate = locale2 && locale2.options && locale2.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger2(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger2(options.firstWeekContainsDate);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var firstWeekOfNextYear = new Date(0);
  firstWeekOfNextYear.setUTCFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setUTCHours(0, 0, 0, 0);
  var startOfNextYear = startOfUTCWeek2(firstWeekOfNextYear, dirtyOptions);
  var firstWeekOfThisYear = new Date(0);
  firstWeekOfThisYear.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setUTCHours(0, 0, 0, 0);
  var startOfThisYear = startOfUTCWeek2(firstWeekOfThisYear, dirtyOptions);
  if (date2.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (date2.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
function startOfUTCWeekYear2(dirtyDate, dirtyOptions) {
  requiredArgs2(1, arguments);
  var options = dirtyOptions || {};
  var locale2 = options.locale;
  var localeFirstWeekContainsDate = locale2 && locale2.options && locale2.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger2(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger2(options.firstWeekContainsDate);
  var year = getUTCWeekYear2(dirtyDate, dirtyOptions);
  var firstWeek = new Date(0);
  firstWeek.setUTCFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setUTCHours(0, 0, 0, 0);
  var date2 = startOfUTCWeek2(firstWeek, dirtyOptions);
  return date2;
}

// node_modules/date-fns/esm/_lib/getUTCWeek/index.js
var MILLISECONDS_IN_WEEK2 = 6048e5;
function getUTCWeek2(dirtyDate, options) {
  requiredArgs2(1, arguments);
  var date2 = toDate2(dirtyDate);
  var diff = startOfUTCWeek2(date2, options).getTime() - startOfUTCWeekYear2(date2, options).getTime();
  return Math.round(diff / MILLISECONDS_IN_WEEK2) + 1;
}

// node_modules/date-fns/esm/_lib/format/formatters/index.js
var dayPeriodEnum = {
  am: "am",
  pm: "pm",
  midnight: "midnight",
  noon: "noon",
  morning: "morning",
  afternoon: "afternoon",
  evening: "evening",
  night: "night"
};
var formatters = {
  G: function(date2, token, localize3) {
    var era = date2.getUTCFullYear() > 0 ? 1 : 0;
    switch (token) {
      case "G":
      case "GG":
      case "GGG":
        return localize3.era(era, {
          width: "abbreviated"
        });
      case "GGGGG":
        return localize3.era(era, {
          width: "narrow"
        });
      case "GGGG":
      default:
        return localize3.era(era, {
          width: "wide"
        });
    }
  },
  y: function(date2, token, localize3) {
    if (token === "yo") {
      var signedYear = date2.getUTCFullYear();
      var year = signedYear > 0 ? signedYear : 1 - signedYear;
      return localize3.ordinalNumber(year, {
        unit: "year"
      });
    }
    return lightFormatters_default.y(date2, token);
  },
  Y: function(date2, token, localize3, options) {
    var signedWeekYear = getUTCWeekYear2(date2, options);
    var weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
    if (token === "YY") {
      var twoDigitYear = weekYear % 100;
      return addLeadingZeros(twoDigitYear, 2);
    }
    if (token === "Yo") {
      return localize3.ordinalNumber(weekYear, {
        unit: "year"
      });
    }
    return addLeadingZeros(weekYear, token.length);
  },
  R: function(date2, token) {
    var isoWeekYear = getUTCISOWeekYear2(date2);
    return addLeadingZeros(isoWeekYear, token.length);
  },
  u: function(date2, token) {
    var year = date2.getUTCFullYear();
    return addLeadingZeros(year, token.length);
  },
  Q: function(date2, token, localize3) {
    var quarter = Math.ceil((date2.getUTCMonth() + 1) / 3);
    switch (token) {
      case "Q":
        return String(quarter);
      case "QQ":
        return addLeadingZeros(quarter, 2);
      case "Qo":
        return localize3.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "QQQ":
        return localize3.quarter(quarter, {
          width: "abbreviated",
          context: "formatting"
        });
      case "QQQQQ":
        return localize3.quarter(quarter, {
          width: "narrow",
          context: "formatting"
        });
      case "QQQQ":
      default:
        return localize3.quarter(quarter, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  q: function(date2, token, localize3) {
    var quarter = Math.ceil((date2.getUTCMonth() + 1) / 3);
    switch (token) {
      case "q":
        return String(quarter);
      case "qq":
        return addLeadingZeros(quarter, 2);
      case "qo":
        return localize3.ordinalNumber(quarter, {
          unit: "quarter"
        });
      case "qqq":
        return localize3.quarter(quarter, {
          width: "abbreviated",
          context: "standalone"
        });
      case "qqqqq":
        return localize3.quarter(quarter, {
          width: "narrow",
          context: "standalone"
        });
      case "qqqq":
      default:
        return localize3.quarter(quarter, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  M: function(date2, token, localize3) {
    var month = date2.getUTCMonth();
    switch (token) {
      case "M":
      case "MM":
        return lightFormatters_default.M(date2, token);
      case "Mo":
        return localize3.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "MMM":
        return localize3.month(month, {
          width: "abbreviated",
          context: "formatting"
        });
      case "MMMMM":
        return localize3.month(month, {
          width: "narrow",
          context: "formatting"
        });
      case "MMMM":
      default:
        return localize3.month(month, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  L: function(date2, token, localize3) {
    var month = date2.getUTCMonth();
    switch (token) {
      case "L":
        return String(month + 1);
      case "LL":
        return addLeadingZeros(month + 1, 2);
      case "Lo":
        return localize3.ordinalNumber(month + 1, {
          unit: "month"
        });
      case "LLL":
        return localize3.month(month, {
          width: "abbreviated",
          context: "standalone"
        });
      case "LLLLL":
        return localize3.month(month, {
          width: "narrow",
          context: "standalone"
        });
      case "LLLL":
      default:
        return localize3.month(month, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  w: function(date2, token, localize3, options) {
    var week = getUTCWeek2(date2, options);
    if (token === "wo") {
      return localize3.ordinalNumber(week, {
        unit: "week"
      });
    }
    return addLeadingZeros(week, token.length);
  },
  I: function(date2, token, localize3) {
    var isoWeek = getUTCISOWeek2(date2);
    if (token === "Io") {
      return localize3.ordinalNumber(isoWeek, {
        unit: "week"
      });
    }
    return addLeadingZeros(isoWeek, token.length);
  },
  d: function(date2, token, localize3) {
    if (token === "do") {
      return localize3.ordinalNumber(date2.getUTCDate(), {
        unit: "date"
      });
    }
    return lightFormatters_default.d(date2, token);
  },
  D: function(date2, token, localize3) {
    var dayOfYear = getUTCDayOfYear2(date2);
    if (token === "Do") {
      return localize3.ordinalNumber(dayOfYear, {
        unit: "dayOfYear"
      });
    }
    return addLeadingZeros(dayOfYear, token.length);
  },
  E: function(date2, token, localize3) {
    var dayOfWeek = date2.getUTCDay();
    switch (token) {
      case "E":
      case "EE":
      case "EEE":
        return localize3.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "EEEEE":
        return localize3.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "EEEEEE":
        return localize3.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "EEEE":
      default:
        return localize3.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  e: function(date2, token, localize3, options) {
    var dayOfWeek = date2.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "e":
        return String(localDayOfWeek);
      case "ee":
        return addLeadingZeros(localDayOfWeek, 2);
      case "eo":
        return localize3.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "eee":
        return localize3.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "eeeee":
        return localize3.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "eeeeee":
        return localize3.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "eeee":
      default:
        return localize3.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  c: function(date2, token, localize3, options) {
    var dayOfWeek = date2.getUTCDay();
    var localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
    switch (token) {
      case "c":
        return String(localDayOfWeek);
      case "cc":
        return addLeadingZeros(localDayOfWeek, token.length);
      case "co":
        return localize3.ordinalNumber(localDayOfWeek, {
          unit: "day"
        });
      case "ccc":
        return localize3.day(dayOfWeek, {
          width: "abbreviated",
          context: "standalone"
        });
      case "ccccc":
        return localize3.day(dayOfWeek, {
          width: "narrow",
          context: "standalone"
        });
      case "cccccc":
        return localize3.day(dayOfWeek, {
          width: "short",
          context: "standalone"
        });
      case "cccc":
      default:
        return localize3.day(dayOfWeek, {
          width: "wide",
          context: "standalone"
        });
    }
  },
  i: function(date2, token, localize3) {
    var dayOfWeek = date2.getUTCDay();
    var isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
    switch (token) {
      case "i":
        return String(isoDayOfWeek);
      case "ii":
        return addLeadingZeros(isoDayOfWeek, token.length);
      case "io":
        return localize3.ordinalNumber(isoDayOfWeek, {
          unit: "day"
        });
      case "iii":
        return localize3.day(dayOfWeek, {
          width: "abbreviated",
          context: "formatting"
        });
      case "iiiii":
        return localize3.day(dayOfWeek, {
          width: "narrow",
          context: "formatting"
        });
      case "iiiiii":
        return localize3.day(dayOfWeek, {
          width: "short",
          context: "formatting"
        });
      case "iiii":
      default:
        return localize3.day(dayOfWeek, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  a: function(date2, token, localize3) {
    var hours = date2.getUTCHours();
    var dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    switch (token) {
      case "a":
      case "aa":
      case "aaa":
        return localize3.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "aaaaa":
        return localize3.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return localize3.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  b: function(date2, token, localize3) {
    var hours = date2.getUTCHours();
    var dayPeriodEnumValue;
    if (hours === 12) {
      dayPeriodEnumValue = dayPeriodEnum.noon;
    } else if (hours === 0) {
      dayPeriodEnumValue = dayPeriodEnum.midnight;
    } else {
      dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
    }
    switch (token) {
      case "b":
      case "bb":
      case "bbb":
        return localize3.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "bbbbb":
        return localize3.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return localize3.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  B: function(date2, token, localize3) {
    var hours = date2.getUTCHours();
    var dayPeriodEnumValue;
    if (hours >= 17) {
      dayPeriodEnumValue = dayPeriodEnum.evening;
    } else if (hours >= 12) {
      dayPeriodEnumValue = dayPeriodEnum.afternoon;
    } else if (hours >= 4) {
      dayPeriodEnumValue = dayPeriodEnum.morning;
    } else {
      dayPeriodEnumValue = dayPeriodEnum.night;
    }
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return localize3.dayPeriod(dayPeriodEnumValue, {
          width: "abbreviated",
          context: "formatting"
        });
      case "BBBBB":
        return localize3.dayPeriod(dayPeriodEnumValue, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return localize3.dayPeriod(dayPeriodEnumValue, {
          width: "wide",
          context: "formatting"
        });
    }
  },
  h: function(date2, token, localize3) {
    if (token === "ho") {
      var hours = date2.getUTCHours() % 12;
      if (hours === 0)
        hours = 12;
      return localize3.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return lightFormatters_default.h(date2, token);
  },
  H: function(date2, token, localize3) {
    if (token === "Ho") {
      return localize3.ordinalNumber(date2.getUTCHours(), {
        unit: "hour"
      });
    }
    return lightFormatters_default.H(date2, token);
  },
  K: function(date2, token, localize3) {
    var hours = date2.getUTCHours() % 12;
    if (token === "Ko") {
      return localize3.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  k: function(date2, token, localize3) {
    var hours = date2.getUTCHours();
    if (hours === 0)
      hours = 24;
    if (token === "ko") {
      return localize3.ordinalNumber(hours, {
        unit: "hour"
      });
    }
    return addLeadingZeros(hours, token.length);
  },
  m: function(date2, token, localize3) {
    if (token === "mo") {
      return localize3.ordinalNumber(date2.getUTCMinutes(), {
        unit: "minute"
      });
    }
    return lightFormatters_default.m(date2, token);
  },
  s: function(date2, token, localize3) {
    if (token === "so") {
      return localize3.ordinalNumber(date2.getUTCSeconds(), {
        unit: "second"
      });
    }
    return lightFormatters_default.s(date2, token);
  },
  S: function(date2, token) {
    return lightFormatters_default.S(date2, token);
  },
  X: function(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timezoneOffset = originalDate.getTimezoneOffset();
    if (timezoneOffset === 0) {
      return "Z";
    }
    switch (token) {
      case "X":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "XXXX":
      case "XX":
        return formatTimezone(timezoneOffset);
      case "XXXXX":
      case "XXX":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  x: function(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "x":
        return formatTimezoneWithOptionalMinutes(timezoneOffset);
      case "xxxx":
      case "xx":
        return formatTimezone(timezoneOffset);
      case "xxxxx":
      case "xxx":
      default:
        return formatTimezone(timezoneOffset, ":");
    }
  },
  O: function(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "O":
      case "OO":
      case "OOO":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "OOOO":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  z: function(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timezoneOffset = originalDate.getTimezoneOffset();
    switch (token) {
      case "z":
      case "zz":
      case "zzz":
        return "GMT" + formatTimezoneShort(timezoneOffset, ":");
      case "zzzz":
      default:
        return "GMT" + formatTimezone(timezoneOffset, ":");
    }
  },
  t: function(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timestamp = Math.floor(originalDate.getTime() / 1e3);
    return addLeadingZeros(timestamp, token.length);
  },
  T: function(date2, token, _localize, options) {
    var originalDate = options._originalDate || date2;
    var timestamp = originalDate.getTime();
    return addLeadingZeros(timestamp, token.length);
  }
};
function formatTimezoneShort(offset, dirtyDelimiter) {
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = Math.floor(absOffset / 60);
  var minutes = absOffset % 60;
  if (minutes === 0) {
    return sign + String(hours);
  }
  var delimiter = dirtyDelimiter || "";
  return sign + String(hours) + delimiter + addLeadingZeros(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, dirtyDelimiter) {
  if (offset % 60 === 0) {
    var sign = offset > 0 ? "-" : "+";
    return sign + addLeadingZeros(Math.abs(offset) / 60, 2);
  }
  return formatTimezone(offset, dirtyDelimiter);
}
function formatTimezone(offset, dirtyDelimiter) {
  var delimiter = dirtyDelimiter || "";
  var sign = offset > 0 ? "-" : "+";
  var absOffset = Math.abs(offset);
  var hours = addLeadingZeros(Math.floor(absOffset / 60), 2);
  var minutes = addLeadingZeros(absOffset % 60, 2);
  return sign + hours + delimiter + minutes;
}
const formatters_default = formatters;

// node_modules/date-fns/esm/_lib/format/longFormatters/index.js
function dateLongFormatter(pattern, formatLong3) {
  switch (pattern) {
    case "P":
      return formatLong3.date({
        width: "short"
      });
    case "PP":
      return formatLong3.date({
        width: "medium"
      });
    case "PPP":
      return formatLong3.date({
        width: "long"
      });
    case "PPPP":
    default:
      return formatLong3.date({
        width: "full"
      });
  }
}
function timeLongFormatter(pattern, formatLong3) {
  switch (pattern) {
    case "p":
      return formatLong3.time({
        width: "short"
      });
    case "pp":
      return formatLong3.time({
        width: "medium"
      });
    case "ppp":
      return formatLong3.time({
        width: "long"
      });
    case "pppp":
    default:
      return formatLong3.time({
        width: "full"
      });
  }
}
function dateTimeLongFormatter(pattern, formatLong3) {
  var matchResult = pattern.match(/(P+)(p+)?/);
  var datePattern = matchResult[1];
  var timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong3);
  }
  var dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong3.dateTime({
        width: "short"
      });
      break;
    case "PP":
      dateTimeFormat = formatLong3.dateTime({
        width: "medium"
      });
      break;
    case "PPP":
      dateTimeFormat = formatLong3.dateTime({
        width: "long"
      });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong3.dateTime({
        width: "full"
      });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong3)).replace("{{time}}", timeLongFormatter(timePattern, formatLong3));
}
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};
const longFormatters_default = longFormatters;

// node_modules/date-fns/esm/_lib/protectedTokens/index.js
var protectedDayOfYearTokens = ["D", "DD"];
var protectedWeekYearTokens = ["YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return protectedDayOfYearTokens.indexOf(token) !== -1;
}
function isProtectedWeekYearToken(token) {
  return protectedWeekYearTokens.indexOf(token) !== -1;
}
function throwProtectedError(token) {
  if (token === "YYYY") {
    throw new RangeError("Use `yyyy` instead of `YYYY` for formatting years; see: https://git.io/fxCyr");
  } else if (token === "YY") {
    throw new RangeError("Use `yy` instead of `YY` for formatting years; see: https://git.io/fxCyr");
  } else if (token === "D") {
    throw new RangeError("Use `d` instead of `D` for formatting days of the month; see: https://git.io/fxCyr");
  } else if (token === "DD") {
    throw new RangeError("Use `dd` instead of `DD` for formatting days of the month; see: https://git.io/fxCyr");
  }
}

// node_modules/date-fns/esm/format/index.js
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function format(dirtyDate, dirtyFormatStr, dirtyOptions) {
  requiredArgs2(2, arguments);
  var formatStr = String(dirtyFormatStr);
  var options = dirtyOptions || {};
  var locale2 = options.locale || en_US_default;
  var localeFirstWeekContainsDate = locale2.options && locale2.options.firstWeekContainsDate;
  var defaultFirstWeekContainsDate = localeFirstWeekContainsDate == null ? 1 : toInteger2(localeFirstWeekContainsDate);
  var firstWeekContainsDate = options.firstWeekContainsDate == null ? defaultFirstWeekContainsDate : toInteger2(options.firstWeekContainsDate);
  if (!(firstWeekContainsDate >= 1 && firstWeekContainsDate <= 7)) {
    throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  }
  var localeWeekStartsOn = locale2.options && locale2.options.weekStartsOn;
  var defaultWeekStartsOn = localeWeekStartsOn == null ? 0 : toInteger2(localeWeekStartsOn);
  var weekStartsOn = options.weekStartsOn == null ? defaultWeekStartsOn : toInteger2(options.weekStartsOn);
  if (!(weekStartsOn >= 0 && weekStartsOn <= 6)) {
    throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  }
  if (!locale2.localize) {
    throw new RangeError("locale must contain localize property");
  }
  if (!locale2.formatLong) {
    throw new RangeError("locale must contain formatLong property");
  }
  var originalDate = toDate2(dirtyDate);
  if (!isValid2(originalDate)) {
    throw new RangeError("Invalid time value");
  }
  var timezoneOffset = getTimezoneOffsetInMilliseconds(originalDate);
  var utcDate = subMilliseconds2(originalDate, timezoneOffset);
  var formatterOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale: locale2,
    _originalDate: originalDate
  };
  var result = formatStr.match(longFormattingTokensRegExp).map(function(substring) {
    var firstCharacter = substring[0];
    if (firstCharacter === "p" || firstCharacter === "P") {
      var longFormatter = longFormatters_default[firstCharacter];
      return longFormatter(substring, locale2.formatLong, formatterOptions);
    }
    return substring;
  }).join("").match(formattingTokensRegExp).map(function(substring) {
    if (substring === "''") {
      return "'";
    }
    var firstCharacter = substring[0];
    if (firstCharacter === "'") {
      return cleanEscapedString(substring);
    }
    var formatter = formatters_default[firstCharacter];
    if (formatter) {
      if (!options.useAdditionalWeekYearTokens && isProtectedWeekYearToken(substring)) {
        throwProtectedError(substring);
      }
      if (!options.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(substring)) {
        throwProtectedError(substring);
      }
      return formatter(utcDate, substring, locale2.localize, formatterOptions);
    }
    if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
      throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
    }
    return substring;
  }).join("");
  return result;
}
function cleanEscapedString(input) {
  return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}

// src/Mock/fakeIt.ts
const sequence = {};
function getDistribution(...distribution) {
  const num = Math.floor(Math.random() * 100) + 1;
  let start = 1;
  let outcome;
  const d = distribution.map((i) => {
    const [percentage, value] = i;
    const end = start + percentage - 1;
    const val = {start, end, value};
    start = start + percentage;
    return val;
  });
  d.forEach((i) => {
    if (num >= i.start && num <= i.end) {
      outcome = i.value;
    }
  });
  if (!outcome) {
    throw new Error(`The mock distribution's random number [ ${num} ] fell outside the range of probability; make sure that your percentages add up to 100 [ ${distribution.map((i) => i[0]).join(", ")} ]`);
  }
  return outcome;
}
function fakeIt(helper, type, ...rest) {
  function getNumber(numOptions) {
    return numOptions && typeof numOptions === "object" ? helper.faker.random.number(numOptions) : helper.faker.random.number({min: 1, max: 100});
  }
  function options(defaultValue2 = {}) {
    return rest[0] ? {...defaultValue2, ...rest[0]} : void 0;
  }
  switch (type) {
    case "id":
    case "fbKey":
      return key();
    case "String":
      return helper.faker.lorem.words(5);
    case "number":
    case "Number":
      return getNumber(options({min: 0, max: 1e3}));
    case "price":
      const price = options({
        symbol: "$",
        min: 1,
        max: 100,
        precision: 2,
        variableCents: false
      });
      let cents;
      if (price.variableCents) {
        cents = getDistribution([40, "00"], [30, "99"], [30, String(getNumber({min: 1, max: 98}))]);
        if (cents.length === 1) {
          cents = cents + "0";
        }
      }
      const priceAmt = helper.faker.commerce.price(price.min, price.max, price.precision, price.symbol);
      return price.variableCents ? priceAmt.replace(".00", "." + cents) : priceAmt;
    case "Boolean":
      return Math.random() > 0.49 ? true : false;
    case "Object":
      return {};
    case "name":
      return helper.faker.name.firstName() + " " + helper.faker.name.lastName();
    case "firstName":
      return helper.faker.name.firstName();
    case "lastName":
      return helper.faker.name.lastName();
    case "company":
    case "companyName":
      return helper.faker.company.companyName();
    case "address":
      return helper.faker.address.secondaryAddress() + ", " + helper.faker.address.city() + ", " + helper.faker.address.stateAbbr() + "  " + helper.faker.address.zipCode();
    case "streetAddress":
      return helper.faker.address.streetAddress(false);
    case "fullAddress":
      return helper.faker.address.streetAddress(true);
    case "city":
      return helper.faker.address.city();
    case "state":
      return helper.faker.address.state();
    case "zipCode":
      return helper.faker.address.zipCode();
    case "stateAbbr":
      return helper.faker.address.stateAbbr();
    case "country":
      return helper.faker.address.country();
    case "countryCode":
      return helper.faker.address.countryCode();
    case "latitude":
      return helper.faker.address.latitude();
    case "longitude":
      return helper.faker.address.longitude();
    case "coordinate":
      return {
        latitude: Number(helper.faker.address.latitude()),
        longitude: Number(helper.faker.address.longitude())
      };
    case "gender":
      return helper.faker.helpers.shuffle([
        "male",
        "female",
        "male",
        "female",
        "male",
        "female",
        "other"
      ]);
    case "age":
      return helper.faker.random.number({min: 1, max: 99});
    case "ageChild":
      return helper.faker.random.number({min: 1, max: 10});
    case "ageAdult":
      return helper.faker.random.number({min: 21, max: 99});
    case "ageOlder":
      return helper.faker.random.number({min: 60, max: 99});
    case "jobTitle":
      return helper.faker.name.jobTitle;
    case "date":
    case "dateRecent":
      return helper.faker.date.recent();
    case "dateRecentString":
      return format(helper.faker.date.recent(), "yyyy-MM-dd");
    case "dateMiliseconds":
    case "dateRecentMiliseconds":
      return helper.faker.date.recent().getTime();
    case "datePast":
      return helper.faker.date.past();
    case "datePastString":
      return format(helper.faker.date.past(), "yyyy-MM-dd");
    case "datePastMiliseconds":
      return helper.faker.date.past().getTime();
    case "dateFuture":
      return helper.faker.date.future();
    case "dateFutureString":
      return format(helper.faker.date.future(), "yyyy-MM-dd");
    case "dateFutureMiliseconds":
      return helper.faker.date.future().getTime();
    case "dateSoon":
      return helper.faker.date.between(new Date(), new Date(new Date().getTime() + 5 * 24 * 60 * 1e3));
    case "dateSoonString":
      return format(helper.faker.date.between(new Date(), new Date(new Date().getTime() + 5 * 24 * 60 * 1e3)), "yyyy-MM-dd");
    case "dateSoonMiliseconds":
      return helper.faker.date.between(new Date(), new Date(new Date().getTime() + 5 * 24 * 60 * 1e3)).getTime();
    case "imageAvatar":
      return helper.faker.image.avatar();
    case "imageAnimal":
      return helper.faker.image.animals();
    case "imagePeople":
      return helper.faker.image.people();
    case "imageNature":
      return helper.faker.image.nature();
    case "imageTransport":
      return helper.faker.image.transport();
    case "phoneNumber":
      return helper.faker.phone.phoneNumber();
    case "email":
      return helper.faker.internet.email;
    case "word":
      return helper.faker.lorem.word();
    case "words":
      return helper.faker.lorem.words();
    case "sentence":
      return helper.faker.lorem.sentence();
    case "slug":
      return helper.faker.lorem.slug();
    case "paragraph":
      return helper.faker.lorem.paragraph();
    case "paragraphs":
      return helper.faker.lorem.paragraphs();
    case "url":
      return helper.faker.internet.url();
    case "uuid":
      return helper.faker.random.uuid();
    case "random":
      return helper.faker.random.arrayElement(rest);
    case "distribution":
      return getDistribution(...rest);
    case "sequence":
      const prop = helper.context.property;
      const items = rest;
      if (typeof sequence[prop] === "undefined") {
        sequence[prop] = 0;
      } else {
        if (sequence[prop] >= items.length - 1) {
          sequence[prop] = 0;
        } else {
          sequence[prop]++;
        }
      }
      return items[sequence[prop]];
    case "placeImage":
      const [width, height, imgType] = rest;
      return `https://placeimg.com/${width}/${height}/${imgType ? imgType : "all"}`;
    case "placeHolder":
      const [size, backgroundColor, textColor] = rest;
      let url = `https://via.placeholder.com/${size}`;
      if (backgroundColor) {
        url += `/${backgroundColor}`;
        if (textColor) {
          url += `/${textColor}`;
        }
      }
      return url;
    default:
      return helper.faker.lorem.slug();
  }
}

// src/Mock/mockProperties.ts
const firemock4 = __toModule(require_es4());
function mockProperties(db2, config = {relationshipBehavior: "ignore"}, exceptions3) {
  return async (record) => {
    const meta2 = getModelMeta(record);
    const props2 = meta2.properties;
    const recProps = {};
    const mh = await firemock4.getMockHelper(db2);
    for (const prop of props2) {
      const p = prop.property;
      recProps[p] = await mockValue(db2, prop, mh);
    }
    const finalized = {...recProps, ...exceptions3};
    record = await Record2.add(record.modelConstructor, finalized, {
      silent: true
    });
    return record;
  };
}

// src/Mock/mockValue.ts
function mockValue(db2, propMeta, mockHelper, ...rest) {
  mockHelper.context = propMeta;
  const {type, mockType, mockParameters} = propMeta;
  if (mockType) {
    return typeof mockType === "function" ? mockType(mockHelper) : fakeIt(mockHelper, mockType, ...mockParameters || []);
  } else {
    const fakedMockType = Object.keys(NamedFakes).includes(propMeta.property) ? PropertyNamePatterns[propMeta.property] : type;
    return fakeIt(mockHelper, fakedMockType, ...mockParameters || []);
  }
}

// src/Mock/types.ts

// src/Mock/index.ts

// src/Mock/api.ts
const firemock2 = __toModule(require_es4());
let mockPrepared = false;
function API(db2, modelConstructor) {
  const config = {
    relationshipBehavior: "ignore",
    exceptionPassthrough: false
  };
  const MockApi = {
    async generate(count, exceptions3 = {}) {
      if (!mockPrepared) {
        await firemock2.Mock.prepare();
        mockPrepared = true;
      }
      const props2 = mockProperties(db2, config, exceptions3);
      const relns = addRelationships(db2, config, exceptions3);
      const record = Record2.createWith(modelConstructor, exceptions3, {db: this.db});
      if (record.hasDynamicPath) {
        const notCovered = record.dynamicPathComponents.filter((key2) => !Object.keys(exceptions3).includes(key2));
        const validMocks = ["sequence", "random", "distribution"];
        notCovered.forEach((key2) => {
          const prop = record.META.property(key2) || {};
          const mock3 = prop.mockType;
          if (!mock3 || typeof mock3 !== "function" && !validMocks.includes(mock3)) {
            throw new FireModelError2(`The mock for the "${record.modelName}" model has dynamic segments and "${key2}" was neither set as a fixed value in the exception parameter [ ${Object.keys(exceptions3 || {})} ] of generate() nor was the model constrained by a @mock type ${mock3 ? `[ ${mock3} ]` : ""} which is deemed valid. Valid named mocks are ${JSON.stringify(validMocks)}; all bespoke mocks are accepted as valid.`, `firemodel/mock-not-ready`);
          }
        });
      }
      let mocks = [];
      for (const i of Array(count)) {
        mocks = mocks.concat(await relns(await props2(record)));
      }
      return mocks;
    },
    createRelationshipLinks(cardinality) {
      config.relationshipBehavior = "link";
      return MockApi;
    },
    dynamicPathBehavior(options) {
      return MockApi;
    },
    overridesPassThrough() {
      config.exceptionPassthrough = true;
      return MockApi;
    },
    followRelationshipLinks(cardinality) {
      config.relationshipBehavior = "follow";
      if (cardinality) {
        config.cardinality = cardinality;
      }
      return MockApi;
    }
  };
  return MockApi;
}

// src/Mock.ts
function Mock2(modelConstructor, db2) {
  if (!db2) {
    if (FireModel2.defaultDb) {
      db2 = FireModel2.defaultDb;
    } else {
      throw new FireModelError2(`You must either explicitly add a database on call to Mock() or ensure that the default database for Firemodel is set!`, "mock/no-database");
    }
  }
  if (!db2.isMockDb) {
    console.warn("You are using Mock() with a real database; typically a mock database is preferred");
  }
  return API(db2, modelConstructor);
}

// src/watchers/types.ts

// src/@types/audit-types.ts

// src/@types/firemodel-types.ts

// src/@types/general.ts
var RelationshipPolicy;
(function(RelationshipPolicy2) {
  RelationshipPolicy2["keys"] = "keys";
  RelationshipPolicy2["lazy"] = "lazy";
  RelationshipPolicy2["inline"] = "inline";
})(RelationshipPolicy || (RelationshipPolicy = {}));
var RelationshipCardinality;
(function(RelationshipCardinality2) {
  RelationshipCardinality2["hasMany"] = "hasMany";
  RelationshipCardinality2["belongsTo"] = "belongsTo";
})(RelationshipCardinality || (RelationshipCardinality = {}));

// src/@types/record-types.ts

// src/@types/relationships.ts

// src/@types/optional/dexie.ts

// src/@types/index.ts

// src/record/createCompositeKey.ts
function createCompositeKey(rec) {
  const model3 = rec.data;
  if (!rec.id) {
    throw new FireModelError2(`You can not create a composite key without first setting the 'id' property!`, "firemodel/not-ready");
  }
  const dynamicPathComponents = rec.dynamicPathComponents.reduce((prev, key2) => {
    if (!model3[key2]) {
      throw new FireModelError2(`You can not create a composite key on a ${capitalize(rec.modelName)} without first setting the '${key2}' property!`, "firemodel/not-ready");
    }
    return {
      ...prev,
      ...{[key2]: model3[key2]}
    };
  }, {});
  return rec.dynamicPathComponents.reduce((prev, key2) => ({
    ...prev,
    ...dynamicPathComponents
  }), {id: rec.id});
}

// node_modules/dexie/dist/dexie.mjs
var __assign = function() {
  __assign = Object.assign || function __assign3(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
var keys = Object.keys;
var isArray = Array.isArray;
var _global = typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
if (typeof Promise !== "undefined" && !_global.Promise) {
  _global.Promise = Promise;
}
function extend(obj, extension) {
  if (typeof extension !== "object")
    return obj;
  keys(extension).forEach(function(key2) {
    obj[key2] = extension[key2];
  });
  return obj;
}
var getProto = Object.getPrototypeOf;
var _hasOwn = {}.hasOwnProperty;
function hasOwn(obj, prop) {
  return _hasOwn.call(obj, prop);
}
function props(proto, extension) {
  if (typeof extension === "function")
    extension = extension(getProto(proto));
  keys(extension).forEach(function(key2) {
    setProp(proto, key2, extension[key2]);
  });
}
var defineProperty = Object.defineProperty;
function setProp(obj, prop, functionOrGetSet, options) {
  defineProperty(obj, prop, extend(functionOrGetSet && hasOwn(functionOrGetSet, "get") && typeof functionOrGetSet.get === "function" ? {get: functionOrGetSet.get, set: functionOrGetSet.set, configurable: true} : {value: functionOrGetSet, configurable: true, writable: true}, options));
}
function derive(Child) {
  return {
    from: function(Parent) {
      Child.prototype = Object.create(Parent.prototype);
      setProp(Child.prototype, "constructor", Child);
      return {
        extend: props.bind(null, Child.prototype)
      };
    }
  };
}
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
function getPropertyDescriptor(obj, prop) {
  var pd = getOwnPropertyDescriptor(obj, prop);
  var proto;
  return pd || (proto = getProto(obj)) && getPropertyDescriptor(proto, prop);
}
var _slice = [].slice;
function slice(args, start, end) {
  return _slice.call(args, start, end);
}
function override(origFunc, overridedFactory) {
  return overridedFactory(origFunc);
}
function assert(b) {
  if (!b)
    throw new Error("Assertion Failed");
}
function asap(fn2) {
  if (_global.setImmediate)
    setImmediate(fn2);
  else
    setTimeout(fn2, 0);
}
function arrayToObject(array, extractor) {
  return array.reduce(function(result, item, i) {
    var nameAndValue = extractor(item, i);
    if (nameAndValue)
      result[nameAndValue[0]] = nameAndValue[1];
    return result;
  }, {});
}
function tryCatch(fn2, onerror, args) {
  try {
    fn2.apply(null, args);
  } catch (ex) {
    onerror && onerror(ex);
  }
}
function getByKeyPath(obj, keyPath) {
  if (hasOwn(obj, keyPath))
    return obj[keyPath];
  if (!keyPath)
    return obj;
  if (typeof keyPath !== "string") {
    var rv = [];
    for (var i = 0, l = keyPath.length; i < l; ++i) {
      var val = getByKeyPath(obj, keyPath[i]);
      rv.push(val);
    }
    return rv;
  }
  var period = keyPath.indexOf(".");
  if (period !== -1) {
    var innerObj = obj[keyPath.substr(0, period)];
    return innerObj === void 0 ? void 0 : getByKeyPath(innerObj, keyPath.substr(period + 1));
  }
  return void 0;
}
function setByKeyPath(obj, keyPath, value) {
  if (!obj || keyPath === void 0)
    return;
  if ("isFrozen" in Object && Object.isFrozen(obj))
    return;
  if (typeof keyPath !== "string" && "length" in keyPath) {
    assert(typeof value !== "string" && "length" in value);
    for (var i = 0, l = keyPath.length; i < l; ++i) {
      setByKeyPath(obj, keyPath[i], value[i]);
    }
  } else {
    var period = keyPath.indexOf(".");
    if (period !== -1) {
      var currentKeyPath = keyPath.substr(0, period);
      var remainingKeyPath = keyPath.substr(period + 1);
      if (remainingKeyPath === "")
        if (value === void 0) {
          if (isArray(obj) && !isNaN(parseInt(currentKeyPath)))
            obj.splice(currentKeyPath, 1);
          else
            delete obj[currentKeyPath];
        } else
          obj[currentKeyPath] = value;
      else {
        var innerObj = obj[currentKeyPath];
        if (!innerObj)
          innerObj = obj[currentKeyPath] = {};
        setByKeyPath(innerObj, remainingKeyPath, value);
      }
    } else {
      if (value === void 0) {
        if (isArray(obj) && !isNaN(parseInt(keyPath)))
          obj.splice(keyPath, 1);
        else
          delete obj[keyPath];
      } else
        obj[keyPath] = value;
    }
  }
}
function delByKeyPath(obj, keyPath) {
  if (typeof keyPath === "string")
    setByKeyPath(obj, keyPath, void 0);
  else if ("length" in keyPath)
    [].map.call(keyPath, function(kp) {
      setByKeyPath(obj, kp, void 0);
    });
}
function shallowClone(obj) {
  var rv = {};
  for (var m in obj) {
    if (hasOwn(obj, m))
      rv[m] = obj[m];
  }
  return rv;
}
var concat = [].concat;
function flatten(a) {
  return concat.apply([], a);
}
var intrinsicTypeNames = "Boolean,String,Date,RegExp,Blob,File,FileList,ArrayBuffer,DataView,Uint8ClampedArray,ImageData,Map,Set".split(",").concat(flatten([8, 16, 32, 64].map(function(num) {
  return ["Int", "Uint", "Float"].map(function(t) {
    return t + num + "Array";
  });
}))).filter(function(t) {
  return _global[t];
});
var intrinsicTypes = intrinsicTypeNames.map(function(t) {
  return _global[t];
});
var intrinsicTypeNameSet = arrayToObject(intrinsicTypeNames, function(x) {
  return [x, true];
});
function deepClone(any) {
  if (!any || typeof any !== "object")
    return any;
  var rv;
  if (isArray(any)) {
    rv = [];
    for (var i = 0, l = any.length; i < l; ++i) {
      rv.push(deepClone(any[i]));
    }
  } else if (intrinsicTypes.indexOf(any.constructor) >= 0) {
    rv = any;
  } else {
    rv = any.constructor ? Object.create(any.constructor.prototype) : {};
    for (var prop in any) {
      if (hasOwn(any, prop)) {
        rv[prop] = deepClone(any[prop]);
      }
    }
  }
  return rv;
}
var toString = {}.toString;
function toStringTag(o) {
  return toString.call(o).slice(8, -1);
}
var getValueOf = function(val, type) {
  return type === "Array" ? "" + val.map(function(v) {
    return getValueOf(v, toStringTag(v));
  }) : type === "ArrayBuffer" ? "" + new Uint8Array(val) : type === "Date" ? val.getTime() : ArrayBuffer.isView(val) ? "" + new Uint8Array(val.buffer) : val;
};
function getObjectDiff(a, b, rv, prfx) {
  rv = rv || {};
  prfx = prfx || "";
  keys(a).forEach(function(prop) {
    if (!hasOwn(b, prop))
      rv[prfx + prop] = void 0;
    else {
      var ap = a[prop], bp = b[prop];
      if (typeof ap === "object" && typeof bp === "object" && ap && bp) {
        var apTypeName = toStringTag(ap);
        var bpTypeName = toStringTag(bp);
        if (apTypeName === bpTypeName) {
          if (intrinsicTypeNameSet[apTypeName]) {
            if (getValueOf(ap, apTypeName) !== getValueOf(bp, bpTypeName)) {
              rv[prfx + prop] = b[prop];
            }
          } else {
            getObjectDiff(ap, bp, rv, prfx + prop + ".");
          }
        } else {
          rv[prfx + prop] = b[prop];
        }
      } else if (ap !== bp)
        rv[prfx + prop] = b[prop];
    }
  });
  keys(b).forEach(function(prop) {
    if (!hasOwn(a, prop)) {
      rv[prfx + prop] = b[prop];
    }
  });
  return rv;
}
var iteratorSymbol = typeof Symbol !== "undefined" && Symbol.iterator;
var getIteratorOf = iteratorSymbol ? function(x) {
  var i;
  return x != null && (i = x[iteratorSymbol]) && i.apply(x);
} : function() {
  return null;
};
var NO_CHAR_ARRAY = {};
function getArrayOf(arrayLike) {
  var i, a, x, it;
  if (arguments.length === 1) {
    if (isArray(arrayLike))
      return arrayLike.slice();
    if (this === NO_CHAR_ARRAY && typeof arrayLike === "string")
      return [arrayLike];
    if (it = getIteratorOf(arrayLike)) {
      a = [];
      while (x = it.next(), !x.done)
        a.push(x.value);
      return a;
    }
    if (arrayLike == null)
      return [arrayLike];
    i = arrayLike.length;
    if (typeof i === "number") {
      a = new Array(i);
      while (i--)
        a[i] = arrayLike[i];
      return a;
    }
    return [arrayLike];
  }
  i = arguments.length;
  a = new Array(i);
  while (i--)
    a[i] = arguments[i];
  return a;
}
var isAsyncFunction = typeof Symbol !== "undefined" ? function(fn2) {
  return fn2[Symbol.toStringTag] === "AsyncFunction";
} : function() {
  return false;
};
var debug2 = typeof location !== "undefined" && /^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);
function setDebug(value, filter) {
  debug2 = value;
  libraryFilter = filter;
}
var libraryFilter = function() {
  return true;
};
var NEEDS_THROW_FOR_STACK = !new Error("").stack;
function getErrorWithStack() {
  if (NEEDS_THROW_FOR_STACK)
    try {
      throw new Error();
    } catch (e) {
      return e;
    }
  return new Error();
}
function prettyStack(exception, numIgnoredFrames) {
  var stack = exception.stack;
  if (!stack)
    return "";
  numIgnoredFrames = numIgnoredFrames || 0;
  if (stack.indexOf(exception.name) === 0)
    numIgnoredFrames += (exception.name + exception.message).split("\n").length;
  return stack.split("\n").slice(numIgnoredFrames).filter(libraryFilter).map(function(frame) {
    return "\n" + frame;
  }).join("");
}
var dexieErrorNames = [
  "Modify",
  "Bulk",
  "OpenFailed",
  "VersionChange",
  "Schema",
  "Upgrade",
  "InvalidTable",
  "MissingAPI",
  "NoSuchDatabase",
  "InvalidArgument",
  "SubTransaction",
  "Unsupported",
  "Internal",
  "DatabaseClosed",
  "PrematureCommit",
  "ForeignAwait"
];
var idbDomErrorNames = [
  "Unknown",
  "Constraint",
  "Data",
  "TransactionInactive",
  "ReadOnly",
  "Version",
  "NotFound",
  "InvalidState",
  "InvalidAccess",
  "Abort",
  "Timeout",
  "QuotaExceeded",
  "Syntax",
  "DataClone"
];
var errorList = dexieErrorNames.concat(idbDomErrorNames);
var defaultTexts = {
  VersionChanged: "Database version changed by other database connection",
  DatabaseClosed: "Database has been closed",
  Abort: "Transaction aborted",
  TransactionInactive: "Transaction has already completed or failed"
};
function DexieError(name2, msg) {
  this._e = getErrorWithStack();
  this.name = name2;
  this.message = msg;
}
derive(DexieError).from(Error).extend({
  stack: {
    get: function() {
      return this._stack || (this._stack = this.name + ": " + this.message + prettyStack(this._e, 2));
    }
  },
  toString: function() {
    return this.name + ": " + this.message;
  }
});
function getMultiErrorMessage(msg, failures) {
  return msg + ". Errors: " + Object.keys(failures).map(function(key2) {
    return failures[key2].toString();
  }).filter(function(v, i, s) {
    return s.indexOf(v) === i;
  }).join("\n");
}
function ModifyError(msg, failures, successCount, failedKeys) {
  this._e = getErrorWithStack();
  this.failures = failures;
  this.failedKeys = failedKeys;
  this.successCount = successCount;
  this.message = getMultiErrorMessage(msg, failures);
}
derive(ModifyError).from(DexieError);
function BulkError(msg, failures) {
  this._e = getErrorWithStack();
  this.name = "BulkError";
  this.failures = failures;
  this.message = getMultiErrorMessage(msg, failures);
}
derive(BulkError).from(DexieError);
var errnames = errorList.reduce(function(obj, name2) {
  return obj[name2] = name2 + "Error", obj;
}, {});
var BaseException = DexieError;
var exceptions = errorList.reduce(function(obj, name2) {
  var fullName = name2 + "Error";
  function DexieError3(msgOrInner, inner) {
    this._e = getErrorWithStack();
    this.name = fullName;
    if (!msgOrInner) {
      this.message = defaultTexts[name2] || fullName;
      this.inner = null;
    } else if (typeof msgOrInner === "string") {
      this.message = "" + msgOrInner + (!inner ? "" : "\n " + inner);
      this.inner = inner || null;
    } else if (typeof msgOrInner === "object") {
      this.message = msgOrInner.name + " " + msgOrInner.message;
      this.inner = msgOrInner;
    }
  }
  derive(DexieError3).from(BaseException);
  obj[name2] = DexieError3;
  return obj;
}, {});
exceptions.Syntax = SyntaxError;
exceptions.Type = TypeError;
exceptions.Range = RangeError;
var exceptionMap = idbDomErrorNames.reduce(function(obj, name2) {
  obj[name2 + "Error"] = exceptions[name2];
  return obj;
}, {});
function mapError(domError, message) {
  if (!domError || domError instanceof DexieError || domError instanceof TypeError || domError instanceof SyntaxError || !domError.name || !exceptionMap[domError.name])
    return domError;
  var rv = new exceptionMap[domError.name](message || domError.message, domError);
  if ("stack" in domError) {
    setProp(rv, "stack", {get: function() {
      return this.inner.stack;
    }});
  }
  return rv;
}
var fullNameExceptions = errorList.reduce(function(obj, name2) {
  if (["Syntax", "Type", "Range"].indexOf(name2) === -1)
    obj[name2 + "Error"] = exceptions[name2];
  return obj;
}, {});
fullNameExceptions.ModifyError = ModifyError;
fullNameExceptions.DexieError = DexieError;
fullNameExceptions.BulkError = BulkError;
function nop() {
}
function mirror(val) {
  return val;
}
function pureFunctionChain(f1, f2) {
  if (f1 == null || f1 === mirror)
    return f2;
  return function(val) {
    return f2(f1(val));
  };
}
function callBoth(on1, on2) {
  return function() {
    on1.apply(this, arguments);
    on2.apply(this, arguments);
  };
}
function hookCreatingChain(f1, f2) {
  if (f1 === nop)
    return f2;
  return function() {
    var res = f1.apply(this, arguments);
    if (res !== void 0)
      arguments[0] = res;
    var onsuccess = this.onsuccess, onerror = this.onerror;
    this.onsuccess = null;
    this.onerror = null;
    var res2 = f2.apply(this, arguments);
    if (onsuccess)
      this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
    if (onerror)
      this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
    return res2 !== void 0 ? res2 : res;
  };
}
function hookDeletingChain(f1, f2) {
  if (f1 === nop)
    return f2;
  return function() {
    f1.apply(this, arguments);
    var onsuccess = this.onsuccess, onerror = this.onerror;
    this.onsuccess = this.onerror = null;
    f2.apply(this, arguments);
    if (onsuccess)
      this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
    if (onerror)
      this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
  };
}
function hookUpdatingChain(f1, f2) {
  if (f1 === nop)
    return f2;
  return function(modifications) {
    var res = f1.apply(this, arguments);
    extend(modifications, res);
    var onsuccess = this.onsuccess, onerror = this.onerror;
    this.onsuccess = null;
    this.onerror = null;
    var res2 = f2.apply(this, arguments);
    if (onsuccess)
      this.onsuccess = this.onsuccess ? callBoth(onsuccess, this.onsuccess) : onsuccess;
    if (onerror)
      this.onerror = this.onerror ? callBoth(onerror, this.onerror) : onerror;
    return res === void 0 ? res2 === void 0 ? void 0 : res2 : extend(res, res2);
  };
}
function reverseStoppableEventChain(f1, f2) {
  if (f1 === nop)
    return f2;
  return function() {
    if (f2.apply(this, arguments) === false)
      return false;
    return f1.apply(this, arguments);
  };
}
function promisableChain(f1, f2) {
  if (f1 === nop)
    return f2;
  return function() {
    var res = f1.apply(this, arguments);
    if (res && typeof res.then === "function") {
      var thiz = this, i = arguments.length, args = new Array(i);
      while (i--)
        args[i] = arguments[i];
      return res.then(function() {
        return f2.apply(thiz, args);
      });
    }
    return f2.apply(this, arguments);
  };
}
var INTERNAL = {};
var LONG_STACKS_CLIP_LIMIT = 100;
var MAX_LONG_STACKS = 20;
var ZONE_ECHO_LIMIT = 100;
var _a = typeof Promise === "undefined" ? [] : function() {
  var globalP = Promise.resolve();
  if (typeof crypto === "undefined" || !crypto.subtle)
    return [globalP, globalP.__proto__, globalP];
  var nativeP = crypto.subtle.digest("SHA-512", new Uint8Array([0]));
  return [
    nativeP,
    nativeP.__proto__,
    globalP
  ];
}();
var resolvedNativePromise = _a[0];
var nativePromiseProto = _a[1];
var resolvedGlobalPromise = _a[2];
var nativePromiseThen = nativePromiseProto && nativePromiseProto.then;
var NativePromise = resolvedNativePromise && resolvedNativePromise.constructor;
var patchGlobalPromise = !!resolvedGlobalPromise;
var stack_being_generated = false;
var schedulePhysicalTick = resolvedGlobalPromise ? function() {
  resolvedGlobalPromise.then(physicalTick);
} : _global.setImmediate ? setImmediate.bind(null, physicalTick) : _global.MutationObserver ? function() {
  var hiddenDiv = document.createElement("div");
  new MutationObserver(function() {
    physicalTick();
    hiddenDiv = null;
  }).observe(hiddenDiv, {attributes: true});
  hiddenDiv.setAttribute("i", "1");
} : function() {
  setTimeout(physicalTick, 0);
};
var asap$1 = function(callback, args) {
  microtickQueue.push([callback, args]);
  if (needsNewPhysicalTick) {
    schedulePhysicalTick();
    needsNewPhysicalTick = false;
  }
};
var isOutsideMicroTick = true;
var needsNewPhysicalTick = true;
var unhandledErrors = [];
var rejectingErrors = [];
var currentFulfiller = null;
var rejectionMapper = mirror;
var globalPSD = {
  id: "global",
  global: true,
  ref: 0,
  unhandleds: [],
  onunhandled: globalError,
  pgp: false,
  env: {},
  finalize: function() {
    this.unhandleds.forEach(function(uh) {
      try {
        globalError(uh[0], uh[1]);
      } catch (e) {
      }
    });
  }
};
var PSD = globalPSD;
var microtickQueue = [];
var numScheduledCalls = 0;
var tickFinalizers = [];
function DexiePromise(fn2) {
  if (typeof this !== "object")
    throw new TypeError("Promises must be constructed via new");
  this._listeners = [];
  this.onuncatched = nop;
  this._lib = false;
  var psd = this._PSD = PSD;
  if (debug2) {
    this._stackHolder = getErrorWithStack();
    this._prev = null;
    this._numPrev = 0;
  }
  if (typeof fn2 !== "function") {
    if (fn2 !== INTERNAL)
      throw new TypeError("Not a function");
    this._state = arguments[1];
    this._value = arguments[2];
    if (this._state === false)
      handleRejection(this, this._value);
    return;
  }
  this._state = null;
  this._value = null;
  ++psd.ref;
  executePromiseTask(this, fn2);
}
var thenProp = {
  get: function() {
    var psd = PSD, microTaskId = totalEchoes;
    function then(onFulfilled, onRejected) {
      var _this = this;
      var possibleAwait = !psd.global && (psd !== PSD || microTaskId !== totalEchoes);
      if (possibleAwait)
        decrementExpectedAwaits();
      var rv = new DexiePromise(function(resolve, reject) {
        propagateToListener(_this, new Listener(nativeAwaitCompatibleWrap(onFulfilled, psd, possibleAwait), nativeAwaitCompatibleWrap(onRejected, psd, possibleAwait), resolve, reject, psd));
      });
      debug2 && linkToPreviousPromise(rv, this);
      return rv;
    }
    then.prototype = INTERNAL;
    return then;
  },
  set: function(value) {
    setProp(this, "then", value && value.prototype === INTERNAL ? thenProp : {
      get: function() {
        return value;
      },
      set: thenProp.set
    });
  }
};
props(DexiePromise.prototype, {
  then: thenProp,
  _then: function(onFulfilled, onRejected) {
    propagateToListener(this, new Listener(null, null, onFulfilled, onRejected, PSD));
  },
  catch: function(onRejected) {
    if (arguments.length === 1)
      return this.then(null, onRejected);
    var type = arguments[0], handler = arguments[1];
    return typeof type === "function" ? this.then(null, function(err) {
      return err instanceof type ? handler(err) : PromiseReject(err);
    }) : this.then(null, function(err) {
      return err && err.name === type ? handler(err) : PromiseReject(err);
    });
  },
  finally: function(onFinally) {
    return this.then(function(value) {
      onFinally();
      return value;
    }, function(err) {
      onFinally();
      return PromiseReject(err);
    });
  },
  stack: {
    get: function() {
      if (this._stack)
        return this._stack;
      try {
        stack_being_generated = true;
        var stacks = getStack(this, [], MAX_LONG_STACKS);
        var stack = stacks.join("\nFrom previous: ");
        if (this._state !== null)
          this._stack = stack;
        return stack;
      } finally {
        stack_being_generated = false;
      }
    }
  },
  timeout: function(ms, msg) {
    var _this = this;
    return ms < Infinity ? new DexiePromise(function(resolve, reject) {
      var handle = setTimeout(function() {
        return reject(new exceptions.Timeout(msg));
      }, ms);
      _this.then(resolve, reject).finally(clearTimeout.bind(null, handle));
    }) : this;
  }
});
if (typeof Symbol !== "undefined" && Symbol.toStringTag)
  setProp(DexiePromise.prototype, Symbol.toStringTag, "Dexie.Promise");
globalPSD.env = snapShot();
function Listener(onFulfilled, onRejected, resolve, reject, zone) {
  this.onFulfilled = typeof onFulfilled === "function" ? onFulfilled : null;
  this.onRejected = typeof onRejected === "function" ? onRejected : null;
  this.resolve = resolve;
  this.reject = reject;
  this.psd = zone;
}
props(DexiePromise, {
  all: function() {
    var values = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
    return new DexiePromise(function(resolve, reject) {
      if (values.length === 0)
        resolve([]);
      var remaining = values.length;
      values.forEach(function(a, i) {
        return DexiePromise.resolve(a).then(function(x) {
          values[i] = x;
          if (!--remaining)
            resolve(values);
        }, reject);
      });
    });
  },
  resolve: function(value) {
    if (value instanceof DexiePromise)
      return value;
    if (value && typeof value.then === "function")
      return new DexiePromise(function(resolve, reject) {
        value.then(resolve, reject);
      });
    var rv = new DexiePromise(INTERNAL, true, value);
    linkToPreviousPromise(rv, currentFulfiller);
    return rv;
  },
  reject: PromiseReject,
  race: function() {
    var values = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
    return new DexiePromise(function(resolve, reject) {
      values.map(function(value) {
        return DexiePromise.resolve(value).then(resolve, reject);
      });
    });
  },
  PSD: {
    get: function() {
      return PSD;
    },
    set: function(value) {
      return PSD = value;
    }
  },
  newPSD: newScope,
  usePSD,
  scheduler: {
    get: function() {
      return asap$1;
    },
    set: function(value) {
      asap$1 = value;
    }
  },
  rejectionMapper: {
    get: function() {
      return rejectionMapper;
    },
    set: function(value) {
      rejectionMapper = value;
    }
  },
  follow: function(fn2, zoneProps) {
    return new DexiePromise(function(resolve, reject) {
      return newScope(function(resolve2, reject2) {
        var psd = PSD;
        psd.unhandleds = [];
        psd.onunhandled = reject2;
        psd.finalize = callBoth(function() {
          var _this = this;
          run_at_end_of_this_or_next_physical_tick(function() {
            _this.unhandleds.length === 0 ? resolve2() : reject2(_this.unhandleds[0]);
          });
        }, psd.finalize);
        fn2();
      }, zoneProps, resolve, reject);
    });
  }
});
if (NativePromise) {
  if (NativePromise.allSettled)
    setProp(DexiePromise, "allSettled", function() {
      var possiblePromises = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
      return new DexiePromise(function(resolve) {
        if (possiblePromises.length === 0)
          resolve([]);
        var remaining = possiblePromises.length;
        var results = new Array(remaining);
        possiblePromises.forEach(function(p, i) {
          return DexiePromise.resolve(p).then(function(value) {
            return results[i] = {status: "fulfilled", value};
          }, function(reason) {
            return results[i] = {status: "rejected", reason};
          }).then(function() {
            return --remaining || resolve(results);
          });
        });
      });
    });
  if (NativePromise.any && typeof AggregateError !== "undefined")
    setProp(DexiePromise, "any", function() {
      var possiblePromises = getArrayOf.apply(null, arguments).map(onPossibleParallellAsync);
      return new DexiePromise(function(resolve, reject) {
        if (possiblePromises.length === 0)
          reject(new AggregateError([]));
        var remaining = possiblePromises.length;
        var failures = new Array(remaining);
        possiblePromises.forEach(function(p, i) {
          return DexiePromise.resolve(p).then(function(value) {
            return resolve(value);
          }, function(failure) {
            failures[i] = failure;
            if (!--remaining)
              reject(new AggregateError(failures));
          });
        });
      });
    });
}
function executePromiseTask(promise, fn2) {
  try {
    fn2(function(value) {
      if (promise._state !== null)
        return;
      if (value === promise)
        throw new TypeError("A promise cannot be resolved with itself.");
      var shouldExecuteTick = promise._lib && beginMicroTickScope();
      if (value && typeof value.then === "function") {
        executePromiseTask(promise, function(resolve, reject) {
          value instanceof DexiePromise ? value._then(resolve, reject) : value.then(resolve, reject);
        });
      } else {
        promise._state = true;
        promise._value = value;
        propagateAllListeners(promise);
      }
      if (shouldExecuteTick)
        endMicroTickScope();
    }, handleRejection.bind(null, promise));
  } catch (ex) {
    handleRejection(promise, ex);
  }
}
function handleRejection(promise, reason) {
  rejectingErrors.push(reason);
  if (promise._state !== null)
    return;
  var shouldExecuteTick = promise._lib && beginMicroTickScope();
  reason = rejectionMapper(reason);
  promise._state = false;
  promise._value = reason;
  debug2 && reason !== null && typeof reason === "object" && !reason._promise && tryCatch(function() {
    var origProp = getPropertyDescriptor(reason, "stack");
    reason._promise = promise;
    setProp(reason, "stack", {
      get: function() {
        return stack_being_generated ? origProp && (origProp.get ? origProp.get.apply(reason) : origProp.value) : promise.stack;
      }
    });
  });
  addPossiblyUnhandledError(promise);
  propagateAllListeners(promise);
  if (shouldExecuteTick)
    endMicroTickScope();
}
function propagateAllListeners(promise) {
  var listeners = promise._listeners;
  promise._listeners = [];
  for (var i = 0, len = listeners.length; i < len; ++i) {
    propagateToListener(promise, listeners[i]);
  }
  var psd = promise._PSD;
  --psd.ref || psd.finalize();
  if (numScheduledCalls === 0) {
    ++numScheduledCalls;
    asap$1(function() {
      if (--numScheduledCalls === 0)
        finalizePhysicalTick();
    }, []);
  }
}
function propagateToListener(promise, listener) {
  if (promise._state === null) {
    promise._listeners.push(listener);
    return;
  }
  var cb = promise._state ? listener.onFulfilled : listener.onRejected;
  if (cb === null) {
    return (promise._state ? listener.resolve : listener.reject)(promise._value);
  }
  ++listener.psd.ref;
  ++numScheduledCalls;
  asap$1(callListener, [cb, promise, listener]);
}
function callListener(cb, promise, listener) {
  try {
    currentFulfiller = promise;
    var ret, value = promise._value;
    if (promise._state) {
      ret = cb(value);
    } else {
      if (rejectingErrors.length)
        rejectingErrors = [];
      ret = cb(value);
      if (rejectingErrors.indexOf(value) === -1)
        markErrorAsHandled(promise);
    }
    listener.resolve(ret);
  } catch (e) {
    listener.reject(e);
  } finally {
    currentFulfiller = null;
    if (--numScheduledCalls === 0)
      finalizePhysicalTick();
    --listener.psd.ref || listener.psd.finalize();
  }
}
function getStack(promise, stacks, limit) {
  if (stacks.length === limit)
    return stacks;
  var stack = "";
  if (promise._state === false) {
    var failure = promise._value, errorName, message;
    if (failure != null) {
      errorName = failure.name || "Error";
      message = failure.message || failure;
      stack = prettyStack(failure, 0);
    } else {
      errorName = failure;
      message = "";
    }
    stacks.push(errorName + (message ? ": " + message : "") + stack);
  }
  if (debug2) {
    stack = prettyStack(promise._stackHolder, 2);
    if (stack && stacks.indexOf(stack) === -1)
      stacks.push(stack);
    if (promise._prev)
      getStack(promise._prev, stacks, limit);
  }
  return stacks;
}
function linkToPreviousPromise(promise, prev) {
  var numPrev = prev ? prev._numPrev + 1 : 0;
  if (numPrev < LONG_STACKS_CLIP_LIMIT) {
    promise._prev = prev;
    promise._numPrev = numPrev;
  }
}
function physicalTick() {
  beginMicroTickScope() && endMicroTickScope();
}
function beginMicroTickScope() {
  var wasRootExec = isOutsideMicroTick;
  isOutsideMicroTick = false;
  needsNewPhysicalTick = false;
  return wasRootExec;
}
function endMicroTickScope() {
  var callbacks, i, l;
  do {
    while (microtickQueue.length > 0) {
      callbacks = microtickQueue;
      microtickQueue = [];
      l = callbacks.length;
      for (i = 0; i < l; ++i) {
        var item = callbacks[i];
        item[0].apply(null, item[1]);
      }
    }
  } while (microtickQueue.length > 0);
  isOutsideMicroTick = true;
  needsNewPhysicalTick = true;
}
function finalizePhysicalTick() {
  var unhandledErrs = unhandledErrors;
  unhandledErrors = [];
  unhandledErrs.forEach(function(p) {
    p._PSD.onunhandled.call(null, p._value, p);
  });
  var finalizers = tickFinalizers.slice(0);
  var i = finalizers.length;
  while (i)
    finalizers[--i]();
}
function run_at_end_of_this_or_next_physical_tick(fn2) {
  function finalizer() {
    fn2();
    tickFinalizers.splice(tickFinalizers.indexOf(finalizer), 1);
  }
  tickFinalizers.push(finalizer);
  ++numScheduledCalls;
  asap$1(function() {
    if (--numScheduledCalls === 0)
      finalizePhysicalTick();
  }, []);
}
function addPossiblyUnhandledError(promise) {
  if (!unhandledErrors.some(function(p) {
    return p._value === promise._value;
  }))
    unhandledErrors.push(promise);
}
function markErrorAsHandled(promise) {
  var i = unhandledErrors.length;
  while (i)
    if (unhandledErrors[--i]._value === promise._value) {
      unhandledErrors.splice(i, 1);
      return;
    }
}
function PromiseReject(reason) {
  return new DexiePromise(INTERNAL, false, reason);
}
function wrap(fn2, errorCatcher) {
  var psd = PSD;
  return function() {
    var wasRootExec = beginMicroTickScope(), outerScope = PSD;
    try {
      switchToZone(psd, true);
      return fn2.apply(this, arguments);
    } catch (e) {
      errorCatcher && errorCatcher(e);
    } finally {
      switchToZone(outerScope, false);
      if (wasRootExec)
        endMicroTickScope();
    }
  };
}
var task = {awaits: 0, echoes: 0, id: 0};
var taskCounter = 0;
var zoneStack = [];
var zoneEchoes = 0;
var totalEchoes = 0;
var zone_id_counter = 0;
function newScope(fn2, props$$1, a1, a2) {
  var parent = PSD, psd = Object.create(parent);
  psd.parent = parent;
  psd.ref = 0;
  psd.global = false;
  psd.id = ++zone_id_counter;
  var globalEnv = globalPSD.env;
  psd.env = patchGlobalPromise ? {
    Promise: DexiePromise,
    PromiseProp: {value: DexiePromise, configurable: true, writable: true},
    all: DexiePromise.all,
    race: DexiePromise.race,
    allSettled: DexiePromise.allSettled,
    any: DexiePromise.any,
    resolve: DexiePromise.resolve,
    reject: DexiePromise.reject,
    nthen: getPatchedPromiseThen(globalEnv.nthen, psd),
    gthen: getPatchedPromiseThen(globalEnv.gthen, psd)
  } : {};
  if (props$$1)
    extend(psd, props$$1);
  ++parent.ref;
  psd.finalize = function() {
    --this.parent.ref || this.parent.finalize();
  };
  var rv = usePSD(psd, fn2, a1, a2);
  if (psd.ref === 0)
    psd.finalize();
  return rv;
}
function incrementExpectedAwaits() {
  if (!task.id)
    task.id = ++taskCounter;
  ++task.awaits;
  task.echoes += ZONE_ECHO_LIMIT;
  return task.id;
}
function decrementExpectedAwaits(sourceTaskId) {
  if (!task.awaits || sourceTaskId && sourceTaskId !== task.id)
    return;
  if (--task.awaits === 0)
    task.id = 0;
  task.echoes = task.awaits * ZONE_ECHO_LIMIT;
}
if (("" + nativePromiseThen).indexOf("[native code]") === -1) {
  incrementExpectedAwaits = decrementExpectedAwaits = nop;
}
function onPossibleParallellAsync(possiblePromise) {
  if (task.echoes && possiblePromise && possiblePromise.constructor === NativePromise) {
    incrementExpectedAwaits();
    return possiblePromise.then(function(x) {
      decrementExpectedAwaits();
      return x;
    }, function(e) {
      decrementExpectedAwaits();
      return rejection(e);
    });
  }
  return possiblePromise;
}
function zoneEnterEcho(targetZone) {
  ++totalEchoes;
  if (!task.echoes || --task.echoes === 0) {
    task.echoes = task.id = 0;
  }
  zoneStack.push(PSD);
  switchToZone(targetZone, true);
}
function zoneLeaveEcho() {
  var zone = zoneStack[zoneStack.length - 1];
  zoneStack.pop();
  switchToZone(zone, false);
}
function switchToZone(targetZone, bEnteringZone) {
  var currentZone = PSD;
  if (bEnteringZone ? task.echoes && (!zoneEchoes++ || targetZone !== PSD) : zoneEchoes && (!--zoneEchoes || targetZone !== PSD)) {
    enqueueNativeMicroTask(bEnteringZone ? zoneEnterEcho.bind(null, targetZone) : zoneLeaveEcho);
  }
  if (targetZone === PSD)
    return;
  PSD = targetZone;
  if (currentZone === globalPSD)
    globalPSD.env = snapShot();
  if (patchGlobalPromise) {
    var GlobalPromise_1 = globalPSD.env.Promise;
    var targetEnv = targetZone.env;
    nativePromiseProto.then = targetEnv.nthen;
    GlobalPromise_1.prototype.then = targetEnv.gthen;
    if (currentZone.global || targetZone.global) {
      Object.defineProperty(_global, "Promise", targetEnv.PromiseProp);
      GlobalPromise_1.all = targetEnv.all;
      GlobalPromise_1.race = targetEnv.race;
      GlobalPromise_1.resolve = targetEnv.resolve;
      GlobalPromise_1.reject = targetEnv.reject;
      if (targetEnv.allSettled)
        GlobalPromise_1.allSettled = targetEnv.allSettled;
      if (targetEnv.any)
        GlobalPromise_1.any = targetEnv.any;
    }
  }
}
function snapShot() {
  var GlobalPromise = _global.Promise;
  return patchGlobalPromise ? {
    Promise: GlobalPromise,
    PromiseProp: Object.getOwnPropertyDescriptor(_global, "Promise"),
    all: GlobalPromise.all,
    race: GlobalPromise.race,
    allSettled: GlobalPromise.allSettled,
    any: GlobalPromise.any,
    resolve: GlobalPromise.resolve,
    reject: GlobalPromise.reject,
    nthen: nativePromiseProto.then,
    gthen: GlobalPromise.prototype.then
  } : {};
}
function usePSD(psd, fn2, a1, a2, a3) {
  var outerScope = PSD;
  try {
    switchToZone(psd, true);
    return fn2(a1, a2, a3);
  } finally {
    switchToZone(outerScope, false);
  }
}
function enqueueNativeMicroTask(job) {
  nativePromiseThen.call(resolvedNativePromise, job);
}
function nativeAwaitCompatibleWrap(fn2, zone, possibleAwait) {
  return typeof fn2 !== "function" ? fn2 : function() {
    var outerZone = PSD;
    if (possibleAwait)
      incrementExpectedAwaits();
    switchToZone(zone, true);
    try {
      return fn2.apply(this, arguments);
    } finally {
      switchToZone(outerZone, false);
    }
  };
}
function getPatchedPromiseThen(origThen, zone) {
  return function(onResolved, onRejected) {
    return origThen.call(this, nativeAwaitCompatibleWrap(onResolved, zone, false), nativeAwaitCompatibleWrap(onRejected, zone, false));
  };
}
var UNHANDLEDREJECTION = "unhandledrejection";
function globalError(err, promise) {
  var rv;
  try {
    rv = promise.onuncatched(err);
  } catch (e) {
  }
  if (rv !== false)
    try {
      var event, eventData = {promise, reason: err};
      if (_global.document && document.createEvent) {
        event = document.createEvent("Event");
        event.initEvent(UNHANDLEDREJECTION, true, true);
        extend(event, eventData);
      } else if (_global.CustomEvent) {
        event = new CustomEvent(UNHANDLEDREJECTION, {detail: eventData});
        extend(event, eventData);
      }
      if (event && _global.dispatchEvent) {
        dispatchEvent(event);
        if (!_global.PromiseRejectionEvent && _global.onunhandledrejection)
          try {
            _global.onunhandledrejection(event);
          } catch (_27) {
          }
      }
      if (debug2 && event && !event.defaultPrevented) {
        console.warn("Unhandled rejection: " + (err.stack || err));
      }
    } catch (e) {
    }
}
var rejection = DexiePromise.reject;
function tempTransaction(db2, mode, storeNames, fn2) {
  if (!db2._state.openComplete && !PSD.letThrough) {
    if (!db2._state.isBeingOpened) {
      if (!db2._options.autoOpen)
        return rejection(new exceptions.DatabaseClosed());
      db2.open().catch(nop);
    }
    return db2._state.dbReadyPromise.then(function() {
      return tempTransaction(db2, mode, storeNames, fn2);
    });
  } else {
    var trans = db2._createTransaction(mode, storeNames, db2._dbSchema);
    try {
      trans.create();
    } catch (ex) {
      return rejection(ex);
    }
    return trans._promise(mode, function(resolve, reject) {
      return newScope(function() {
        PSD.trans = trans;
        return fn2(resolve, reject, trans);
      });
    }).then(function(result) {
      return trans._completion.then(function() {
        return result;
      });
    });
  }
}
var DEXIE_VERSION = "3.0.1";
var maxString = String.fromCharCode(65535);
var minKey = -Infinity;
var INVALID_KEY_ARGUMENT = "Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.";
var STRING_EXPECTED = "String expected.";
var connections = [];
var isIEOrEdge = typeof navigator !== "undefined" && /(MSIE|Trident|Edge)/.test(navigator.userAgent);
var hasIEDeleteObjectStoreBug = isIEOrEdge;
var hangsOnDeleteLargeKeyRange = isIEOrEdge;
var dexieStackFrameFilter = function(frame) {
  return !/(dexie\.js|dexie\.min\.js)/.test(frame);
};
var DBNAMES_DB = "__dbnames";
var READONLY = "readonly";
var READWRITE = "readwrite";
function combine(filter1, filter2) {
  return filter1 ? filter2 ? function() {
    return filter1.apply(this, arguments) && filter2.apply(this, arguments);
  } : filter1 : filter2;
}
var AnyRange = {
  type: 3,
  lower: -Infinity,
  lowerOpen: false,
  upper: [[]],
  upperOpen: false
};
var Table = function() {
  function Table4() {
  }
  Table4.prototype._trans = function(mode, fn2, writeLocked) {
    var trans = this._tx || PSD.trans;
    var tableName = this.name;
    function checkTableInTransaction(resolve, reject, trans2) {
      if (!trans2.schema[tableName])
        throw new exceptions.NotFound("Table " + tableName + " not part of transaction");
      return fn2(trans2.idbtrans, trans2);
    }
    var wasRootExec = beginMicroTickScope();
    try {
      return trans && trans.db === this.db ? trans === PSD.trans ? trans._promise(mode, checkTableInTransaction, writeLocked) : newScope(function() {
        return trans._promise(mode, checkTableInTransaction, writeLocked);
      }, {trans, transless: PSD.transless || PSD}) : tempTransaction(this.db, mode, [this.name], checkTableInTransaction);
    } finally {
      if (wasRootExec)
        endMicroTickScope();
    }
  };
  Table4.prototype.get = function(keyOrCrit, cb) {
    var _this = this;
    if (keyOrCrit && keyOrCrit.constructor === Object)
      return this.where(keyOrCrit).first(cb);
    return this._trans("readonly", function(trans) {
      return _this.core.get({trans, key: keyOrCrit}).then(function(res) {
        return _this.hook.reading.fire(res);
      });
    }).then(cb);
  };
  Table4.prototype.where = function(indexOrCrit) {
    if (typeof indexOrCrit === "string")
      return new this.db.WhereClause(this, indexOrCrit);
    if (isArray(indexOrCrit))
      return new this.db.WhereClause(this, "[" + indexOrCrit.join("+") + "]");
    var keyPaths = keys(indexOrCrit);
    if (keyPaths.length === 1)
      return this.where(keyPaths[0]).equals(indexOrCrit[keyPaths[0]]);
    var compoundIndex = this.schema.indexes.concat(this.schema.primKey).filter(function(ix) {
      return ix.compound && keyPaths.every(function(keyPath) {
        return ix.keyPath.indexOf(keyPath) >= 0;
      }) && ix.keyPath.every(function(keyPath) {
        return keyPaths.indexOf(keyPath) >= 0;
      });
    })[0];
    if (compoundIndex && this.db._maxKey !== maxString)
      return this.where(compoundIndex.name).equals(compoundIndex.keyPath.map(function(kp) {
        return indexOrCrit[kp];
      }));
    if (!compoundIndex && debug2)
      console.warn("The query " + JSON.stringify(indexOrCrit) + " on " + this.name + " would benefit of a " + ("compound index [" + keyPaths.join("+") + "]"));
    var idxByName = this.schema.idxByName;
    var idb = this.db._deps.indexedDB;
    function equals(a, b) {
      try {
        return idb.cmp(a, b) === 0;
      } catch (e) {
        return false;
      }
    }
    var _a2 = keyPaths.reduce(function(_a3, keyPath) {
      var prevIndex = _a3[0], prevFilterFn = _a3[1];
      var index15 = idxByName[keyPath];
      var value = indexOrCrit[keyPath];
      return [
        prevIndex || index15,
        prevIndex || !index15 ? combine(prevFilterFn, index15 && index15.multi ? function(x) {
          var prop = getByKeyPath(x, keyPath);
          return isArray(prop) && prop.some(function(item) {
            return equals(value, item);
          });
        } : function(x) {
          return equals(value, getByKeyPath(x, keyPath));
        }) : prevFilterFn
      ];
    }, [null, null]), idx = _a2[0], filterFunction = _a2[1];
    return idx ? this.where(idx.name).equals(indexOrCrit[idx.keyPath]).filter(filterFunction) : compoundIndex ? this.filter(filterFunction) : this.where(keyPaths).equals("");
  };
  Table4.prototype.filter = function(filterFunction) {
    return this.toCollection().and(filterFunction);
  };
  Table4.prototype.count = function(thenShortcut) {
    return this.toCollection().count(thenShortcut);
  };
  Table4.prototype.offset = function(offset) {
    return this.toCollection().offset(offset);
  };
  Table4.prototype.limit = function(numRows) {
    return this.toCollection().limit(numRows);
  };
  Table4.prototype.each = function(callback) {
    return this.toCollection().each(callback);
  };
  Table4.prototype.toArray = function(thenShortcut) {
    return this.toCollection().toArray(thenShortcut);
  };
  Table4.prototype.toCollection = function() {
    return new this.db.Collection(new this.db.WhereClause(this));
  };
  Table4.prototype.orderBy = function(index15) {
    return new this.db.Collection(new this.db.WhereClause(this, isArray(index15) ? "[" + index15.join("+") + "]" : index15));
  };
  Table4.prototype.reverse = function() {
    return this.toCollection().reverse();
  };
  Table4.prototype.mapToClass = function(constructor) {
    this.schema.mappedClass = constructor;
    var readHook = function(obj) {
      if (!obj)
        return obj;
      var res = Object.create(constructor.prototype);
      for (var m in obj)
        if (hasOwn(obj, m))
          try {
            res[m] = obj[m];
          } catch (_27) {
          }
      return res;
    };
    if (this.schema.readHook) {
      this.hook.reading.unsubscribe(this.schema.readHook);
    }
    this.schema.readHook = readHook;
    this.hook("reading", readHook);
    return constructor;
  };
  Table4.prototype.defineClass = function() {
    function Class(content) {
      extend(this, content);
    }
    return this.mapToClass(Class);
  };
  Table4.prototype.add = function(obj, key2) {
    var _this = this;
    return this._trans("readwrite", function(trans) {
      return _this.core.mutate({trans, type: "add", keys: key2 != null ? [key2] : null, values: [obj]});
    }).then(function(res) {
      return res.numFailures ? DexiePromise.reject(res.failures[0]) : res.lastResult;
    }).then(function(lastResult) {
      if (!_this.core.schema.primaryKey.outbound) {
        try {
          setByKeyPath(obj, _this.core.schema.primaryKey.keyPath, lastResult);
        } catch (_27) {
        }
      }
      return lastResult;
    });
  };
  Table4.prototype.update = function(keyOrObject, modifications) {
    if (typeof modifications !== "object" || isArray(modifications))
      throw new exceptions.InvalidArgument("Modifications must be an object.");
    if (typeof keyOrObject === "object" && !isArray(keyOrObject)) {
      keys(modifications).forEach(function(keyPath) {
        setByKeyPath(keyOrObject, keyPath, modifications[keyPath]);
      });
      var key2 = getByKeyPath(keyOrObject, this.schema.primKey.keyPath);
      if (key2 === void 0)
        return rejection(new exceptions.InvalidArgument("Given object does not contain its primary key"));
      return this.where(":id").equals(key2).modify(modifications);
    } else {
      return this.where(":id").equals(keyOrObject).modify(modifications);
    }
  };
  Table4.prototype.put = function(obj, key2) {
    var _this = this;
    return this._trans("readwrite", function(trans) {
      return _this.core.mutate({trans, type: "put", values: [obj], keys: key2 != null ? [key2] : null});
    }).then(function(res) {
      return res.numFailures ? DexiePromise.reject(res.failures[0]) : res.lastResult;
    }).then(function(lastResult) {
      if (!_this.core.schema.primaryKey.outbound) {
        try {
          setByKeyPath(obj, _this.core.schema.primaryKey.keyPath, lastResult);
        } catch (_27) {
        }
      }
      return lastResult;
    });
  };
  Table4.prototype.delete = function(key2) {
    var _this = this;
    return this._trans("readwrite", function(trans) {
      return _this.core.mutate({trans, type: "delete", keys: [key2]});
    }).then(function(res) {
      return res.numFailures ? DexiePromise.reject(res.failures[0]) : void 0;
    });
  };
  Table4.prototype.clear = function() {
    var _this = this;
    return this._trans("readwrite", function(trans) {
      return _this.core.mutate({trans, type: "deleteRange", range: AnyRange});
    }).then(function(res) {
      return res.numFailures ? DexiePromise.reject(res.failures[0]) : void 0;
    });
  };
  Table4.prototype.bulkGet = function(keys$$1) {
    var _this = this;
    return this._trans("readonly", function(trans) {
      return _this.core.getMany({
        keys: keys$$1,
        trans
      });
    });
  };
  Table4.prototype.bulkAdd = function(objects, keysOrOptions, options) {
    var _this = this;
    var keys$$1 = Array.isArray(keysOrOptions) ? keysOrOptions : void 0;
    options = options || (keys$$1 ? void 0 : keysOrOptions);
    var wantResults = options ? options.allKeys : void 0;
    return this._trans("readwrite", function(trans) {
      var outbound = _this.core.schema.primaryKey.outbound;
      if (!outbound && keys$$1)
        throw new exceptions.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");
      if (keys$$1 && keys$$1.length !== objects.length)
        throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
      var numObjects = objects.length;
      return _this.core.mutate({trans, type: "add", keys: keys$$1, values: objects, wantResults}).then(function(_a2) {
        var numFailures = _a2.numFailures, results = _a2.results, lastResult = _a2.lastResult, failures = _a2.failures;
        var result = wantResults ? results : lastResult;
        if (numFailures === 0)
          return result;
        throw new BulkError(_this.name + ".bulkAdd(): " + numFailures + " of " + numObjects + " operations failed", Object.keys(failures).map(function(pos) {
          return failures[pos];
        }));
      });
    });
  };
  Table4.prototype.bulkPut = function(objects, keysOrOptions, options) {
    var _this = this;
    var keys$$1 = Array.isArray(keysOrOptions) ? keysOrOptions : void 0;
    options = options || (keys$$1 ? void 0 : keysOrOptions);
    var wantResults = options ? options.allKeys : void 0;
    return this._trans("readwrite", function(trans) {
      var outbound = _this.core.schema.primaryKey.outbound;
      if (!outbound && keys$$1)
        throw new exceptions.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");
      if (keys$$1 && keys$$1.length !== objects.length)
        throw new exceptions.InvalidArgument("Arguments objects and keys must have the same length");
      var numObjects = objects.length;
      return _this.core.mutate({trans, type: "put", keys: keys$$1, values: objects, wantResults}).then(function(_a2) {
        var numFailures = _a2.numFailures, results = _a2.results, lastResult = _a2.lastResult, failures = _a2.failures;
        var result = wantResults ? results : lastResult;
        if (numFailures === 0)
          return result;
        throw new BulkError(_this.name + ".bulkPut(): " + numFailures + " of " + numObjects + " operations failed", Object.keys(failures).map(function(pos) {
          return failures[pos];
        }));
      });
    });
  };
  Table4.prototype.bulkDelete = function(keys$$1) {
    var _this = this;
    var numKeys = keys$$1.length;
    return this._trans("readwrite", function(trans) {
      return _this.core.mutate({trans, type: "delete", keys: keys$$1});
    }).then(function(_a2) {
      var numFailures = _a2.numFailures, lastResult = _a2.lastResult, failures = _a2.failures;
      if (numFailures === 0)
        return lastResult;
      throw new BulkError(_this.name + ".bulkDelete(): " + numFailures + " of " + numKeys + " operations failed", failures);
    });
  };
  return Table4;
}();
function Events(ctx) {
  var evs = {};
  var rv = function(eventName, subscriber) {
    if (subscriber) {
      var i2 = arguments.length, args = new Array(i2 - 1);
      while (--i2)
        args[i2 - 1] = arguments[i2];
      evs[eventName].subscribe.apply(null, args);
      return ctx;
    } else if (typeof eventName === "string") {
      return evs[eventName];
    }
  };
  rv.addEventType = add3;
  for (var i = 1, l = arguments.length; i < l; ++i) {
    add3(arguments[i]);
  }
  return rv;
  function add3(eventName, chainFunction, defaultFunction) {
    if (typeof eventName === "object")
      return addConfiguredEvents(eventName);
    if (!chainFunction)
      chainFunction = reverseStoppableEventChain;
    if (!defaultFunction)
      defaultFunction = nop;
    var context = {
      subscribers: [],
      fire: defaultFunction,
      subscribe: function(cb) {
        if (context.subscribers.indexOf(cb) === -1) {
          context.subscribers.push(cb);
          context.fire = chainFunction(context.fire, cb);
        }
      },
      unsubscribe: function(cb) {
        context.subscribers = context.subscribers.filter(function(fn2) {
          return fn2 !== cb;
        });
        context.fire = context.subscribers.reduce(chainFunction, defaultFunction);
      }
    };
    evs[eventName] = rv[eventName] = context;
    return context;
  }
  function addConfiguredEvents(cfg) {
    keys(cfg).forEach(function(eventName) {
      var args = cfg[eventName];
      if (isArray(args)) {
        add3(eventName, cfg[eventName][0], cfg[eventName][1]);
      } else if (args === "asap") {
        var context = add3(eventName, mirror, function fire() {
          var i2 = arguments.length, args2 = new Array(i2);
          while (i2--)
            args2[i2] = arguments[i2];
          context.subscribers.forEach(function(fn2) {
            asap(function fireEvent() {
              fn2.apply(null, args2);
            });
          });
        });
      } else
        throw new exceptions.InvalidArgument("Invalid event config");
    });
  }
}
function makeClassConstructor(prototype, constructor) {
  derive(constructor).from({prototype});
  return constructor;
}
function createTableConstructor(db2) {
  return makeClassConstructor(Table.prototype, function Table$$1(name2, tableSchema, trans) {
    this.db = db2;
    this._tx = trans;
    this.name = name2;
    this.schema = tableSchema;
    this.hook = db2._allTables[name2] ? db2._allTables[name2].hook : Events(null, {
      creating: [hookCreatingChain, nop],
      reading: [pureFunctionChain, mirror],
      updating: [hookUpdatingChain, nop],
      deleting: [hookDeletingChain, nop]
    });
  });
}
function isPlainKeyRange(ctx, ignoreLimitFilter) {
  return !(ctx.filter || ctx.algorithm || ctx.or) && (ignoreLimitFilter ? ctx.justLimit : !ctx.replayFilter);
}
function addFilter(ctx, fn2) {
  ctx.filter = combine(ctx.filter, fn2);
}
function addReplayFilter(ctx, factory, isLimitFilter) {
  var curr = ctx.replayFilter;
  ctx.replayFilter = curr ? function() {
    return combine(curr(), factory());
  } : factory;
  ctx.justLimit = isLimitFilter && !curr;
}
function addMatchFilter(ctx, fn2) {
  ctx.isMatch = combine(ctx.isMatch, fn2);
}
function getIndexOrStore(ctx, coreSchema) {
  if (ctx.isPrimKey)
    return coreSchema.primaryKey;
  var index15 = coreSchema.getIndexByKeyPath(ctx.index);
  if (!index15)
    throw new exceptions.Schema("KeyPath " + ctx.index + " on object store " + coreSchema.name + " is not indexed");
  return index15;
}
function openCursor(ctx, coreTable, trans) {
  var index15 = getIndexOrStore(ctx, coreTable.schema);
  return coreTable.openCursor({
    trans,
    values: !ctx.keysOnly,
    reverse: ctx.dir === "prev",
    unique: !!ctx.unique,
    query: {
      index: index15,
      range: ctx.range
    }
  });
}
function iter(ctx, fn2, coreTrans, coreTable) {
  var filter = ctx.replayFilter ? combine(ctx.filter, ctx.replayFilter()) : ctx.filter;
  if (!ctx.or) {
    return iterate(openCursor(ctx, coreTable, coreTrans), combine(ctx.algorithm, filter), fn2, !ctx.keysOnly && ctx.valueMapper);
  } else {
    var set_1 = {};
    var union = function(item, cursor, advance) {
      if (!filter || filter(cursor, advance, function(result) {
        return cursor.stop(result);
      }, function(err) {
        return cursor.fail(err);
      })) {
        var primaryKey = cursor.primaryKey;
        var key2 = "" + primaryKey;
        if (key2 === "[object ArrayBuffer]")
          key2 = "" + new Uint8Array(primaryKey);
        if (!hasOwn(set_1, key2)) {
          set_1[key2] = true;
          fn2(item, cursor, advance);
        }
      }
    };
    return Promise.all([
      ctx.or._iterate(union, coreTrans),
      iterate(openCursor(ctx, coreTable, coreTrans), ctx.algorithm, union, !ctx.keysOnly && ctx.valueMapper)
    ]);
  }
}
function iterate(cursorPromise, filter, fn2, valueMapper) {
  var mappedFn = valueMapper ? function(x, c, a) {
    return fn2(valueMapper(x), c, a);
  } : fn2;
  var wrappedFn = wrap(mappedFn);
  return cursorPromise.then(function(cursor) {
    if (cursor) {
      return cursor.start(function() {
        var c = function() {
          return cursor.continue();
        };
        if (!filter || filter(cursor, function(advancer) {
          return c = advancer;
        }, function(val) {
          cursor.stop(val);
          c = nop;
        }, function(e) {
          cursor.fail(e);
          c = nop;
        }))
          wrappedFn(cursor.value, cursor, function(advancer) {
            return c = advancer;
          });
        c();
      });
    }
  });
}
var Collection = function() {
  function Collection2() {
  }
  Collection2.prototype._read = function(fn2, cb) {
    var ctx = this._ctx;
    return ctx.error ? ctx.table._trans(null, rejection.bind(null, ctx.error)) : ctx.table._trans("readonly", fn2).then(cb);
  };
  Collection2.prototype._write = function(fn2) {
    var ctx = this._ctx;
    return ctx.error ? ctx.table._trans(null, rejection.bind(null, ctx.error)) : ctx.table._trans("readwrite", fn2, "locked");
  };
  Collection2.prototype._addAlgorithm = function(fn2) {
    var ctx = this._ctx;
    ctx.algorithm = combine(ctx.algorithm, fn2);
  };
  Collection2.prototype._iterate = function(fn2, coreTrans) {
    return iter(this._ctx, fn2, coreTrans, this._ctx.table.core);
  };
  Collection2.prototype.clone = function(props$$1) {
    var rv = Object.create(this.constructor.prototype), ctx = Object.create(this._ctx);
    if (props$$1)
      extend(ctx, props$$1);
    rv._ctx = ctx;
    return rv;
  };
  Collection2.prototype.raw = function() {
    this._ctx.valueMapper = null;
    return this;
  };
  Collection2.prototype.each = function(fn2) {
    var ctx = this._ctx;
    return this._read(function(trans) {
      return iter(ctx, fn2, trans, ctx.table.core);
    });
  };
  Collection2.prototype.count = function(cb) {
    var _this = this;
    return this._read(function(trans) {
      var ctx = _this._ctx;
      var coreTable = ctx.table.core;
      if (isPlainKeyRange(ctx, true)) {
        return coreTable.count({
          trans,
          query: {
            index: getIndexOrStore(ctx, coreTable.schema),
            range: ctx.range
          }
        }).then(function(count2) {
          return Math.min(count2, ctx.limit);
        });
      } else {
        var count = 0;
        return iter(ctx, function() {
          ++count;
          return false;
        }, trans, coreTable).then(function() {
          return count;
        });
      }
    }).then(cb);
  };
  Collection2.prototype.sortBy = function(keyPath, cb) {
    var parts2 = keyPath.split(".").reverse(), lastPart = parts2[0], lastIndex = parts2.length - 1;
    function getval(obj, i) {
      if (i)
        return getval(obj[parts2[i]], i - 1);
      return obj[lastPart];
    }
    var order = this._ctx.dir === "next" ? 1 : -1;
    function sorter(a, b) {
      var aVal = getval(a, lastIndex), bVal = getval(b, lastIndex);
      return aVal < bVal ? -order : aVal > bVal ? order : 0;
    }
    return this.toArray(function(a) {
      return a.sort(sorter);
    }).then(cb);
  };
  Collection2.prototype.toArray = function(cb) {
    var _this = this;
    return this._read(function(trans) {
      var ctx = _this._ctx;
      if (ctx.dir === "next" && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
        var valueMapper_1 = ctx.valueMapper;
        var index15 = getIndexOrStore(ctx, ctx.table.core.schema);
        return ctx.table.core.query({
          trans,
          limit: ctx.limit,
          values: true,
          query: {
            index: index15,
            range: ctx.range
          }
        }).then(function(_a2) {
          var result = _a2.result;
          return valueMapper_1 ? result.map(valueMapper_1) : result;
        });
      } else {
        var a_1 = [];
        return iter(ctx, function(item) {
          return a_1.push(item);
        }, trans, ctx.table.core).then(function() {
          return a_1;
        });
      }
    }, cb);
  };
  Collection2.prototype.offset = function(offset) {
    var ctx = this._ctx;
    if (offset <= 0)
      return this;
    ctx.offset += offset;
    if (isPlainKeyRange(ctx)) {
      addReplayFilter(ctx, function() {
        var offsetLeft = offset;
        return function(cursor, advance) {
          if (offsetLeft === 0)
            return true;
          if (offsetLeft === 1) {
            --offsetLeft;
            return false;
          }
          advance(function() {
            cursor.advance(offsetLeft);
            offsetLeft = 0;
          });
          return false;
        };
      });
    } else {
      addReplayFilter(ctx, function() {
        var offsetLeft = offset;
        return function() {
          return --offsetLeft < 0;
        };
      });
    }
    return this;
  };
  Collection2.prototype.limit = function(numRows) {
    this._ctx.limit = Math.min(this._ctx.limit, numRows);
    addReplayFilter(this._ctx, function() {
      var rowsLeft = numRows;
      return function(cursor, advance, resolve) {
        if (--rowsLeft <= 0)
          advance(resolve);
        return rowsLeft >= 0;
      };
    }, true);
    return this;
  };
  Collection2.prototype.until = function(filterFunction, bIncludeStopEntry) {
    addFilter(this._ctx, function(cursor, advance, resolve) {
      if (filterFunction(cursor.value)) {
        advance(resolve);
        return bIncludeStopEntry;
      } else {
        return true;
      }
    });
    return this;
  };
  Collection2.prototype.first = function(cb) {
    return this.limit(1).toArray(function(a) {
      return a[0];
    }).then(cb);
  };
  Collection2.prototype.last = function(cb) {
    return this.reverse().first(cb);
  };
  Collection2.prototype.filter = function(filterFunction) {
    addFilter(this._ctx, function(cursor) {
      return filterFunction(cursor.value);
    });
    addMatchFilter(this._ctx, filterFunction);
    return this;
  };
  Collection2.prototype.and = function(filter) {
    return this.filter(filter);
  };
  Collection2.prototype.or = function(indexName) {
    return new this.db.WhereClause(this._ctx.table, indexName, this);
  };
  Collection2.prototype.reverse = function() {
    this._ctx.dir = this._ctx.dir === "prev" ? "next" : "prev";
    if (this._ondirectionchange)
      this._ondirectionchange(this._ctx.dir);
    return this;
  };
  Collection2.prototype.desc = function() {
    return this.reverse();
  };
  Collection2.prototype.eachKey = function(cb) {
    var ctx = this._ctx;
    ctx.keysOnly = !ctx.isMatch;
    return this.each(function(val, cursor) {
      cb(cursor.key, cursor);
    });
  };
  Collection2.prototype.eachUniqueKey = function(cb) {
    this._ctx.unique = "unique";
    return this.eachKey(cb);
  };
  Collection2.prototype.eachPrimaryKey = function(cb) {
    var ctx = this._ctx;
    ctx.keysOnly = !ctx.isMatch;
    return this.each(function(val, cursor) {
      cb(cursor.primaryKey, cursor);
    });
  };
  Collection2.prototype.keys = function(cb) {
    var ctx = this._ctx;
    ctx.keysOnly = !ctx.isMatch;
    var a = [];
    return this.each(function(item, cursor) {
      a.push(cursor.key);
    }).then(function() {
      return a;
    }).then(cb);
  };
  Collection2.prototype.primaryKeys = function(cb) {
    var ctx = this._ctx;
    if (ctx.dir === "next" && isPlainKeyRange(ctx, true) && ctx.limit > 0) {
      return this._read(function(trans) {
        var index15 = getIndexOrStore(ctx, ctx.table.core.schema);
        return ctx.table.core.query({
          trans,
          values: false,
          limit: ctx.limit,
          query: {
            index: index15,
            range: ctx.range
          }
        });
      }).then(function(_a2) {
        var result = _a2.result;
        return result;
      }).then(cb);
    }
    ctx.keysOnly = !ctx.isMatch;
    var a = [];
    return this.each(function(item, cursor) {
      a.push(cursor.primaryKey);
    }).then(function() {
      return a;
    }).then(cb);
  };
  Collection2.prototype.uniqueKeys = function(cb) {
    this._ctx.unique = "unique";
    return this.keys(cb);
  };
  Collection2.prototype.firstKey = function(cb) {
    return this.limit(1).keys(function(a) {
      return a[0];
    }).then(cb);
  };
  Collection2.prototype.lastKey = function(cb) {
    return this.reverse().firstKey(cb);
  };
  Collection2.prototype.distinct = function() {
    var ctx = this._ctx, idx = ctx.index && ctx.table.schema.idxByName[ctx.index];
    if (!idx || !idx.multi)
      return this;
    var set7 = {};
    addFilter(this._ctx, function(cursor) {
      var strKey = cursor.primaryKey.toString();
      var found = hasOwn(set7, strKey);
      set7[strKey] = true;
      return !found;
    });
    return this;
  };
  Collection2.prototype.modify = function(changes) {
    var _this = this;
    var ctx = this._ctx;
    return this._write(function(trans) {
      var modifyer;
      if (typeof changes === "function") {
        modifyer = changes;
      } else {
        var keyPaths = keys(changes);
        var numKeys = keyPaths.length;
        modifyer = function(item) {
          var anythingModified = false;
          for (var i = 0; i < numKeys; ++i) {
            var keyPath = keyPaths[i], val = changes[keyPath];
            if (getByKeyPath(item, keyPath) !== val) {
              setByKeyPath(item, keyPath, val);
              anythingModified = true;
            }
          }
          return anythingModified;
        };
      }
      var coreTable = ctx.table.core;
      var _a2 = coreTable.schema.primaryKey, outbound = _a2.outbound, extractKey = _a2.extractKey;
      var limit = "testmode" in Dexie ? 1 : 2e3;
      var cmp = _this.db.core.cmp;
      var totalFailures = [];
      var successCount = 0;
      var failedKeys = [];
      var applyMutateResult = function(expectedCount, res) {
        var failures = res.failures, numFailures = res.numFailures;
        successCount += expectedCount - numFailures;
        for (var _i = 0, _a3 = keys(failures); _i < _a3.length; _i++) {
          var pos = _a3[_i];
          totalFailures.push(failures[pos]);
        }
      };
      return _this.clone().primaryKeys().then(function(keys$$1) {
        var nextChunk = function(offset) {
          var count = Math.min(limit, keys$$1.length - offset);
          return coreTable.getMany({trans, keys: keys$$1.slice(offset, offset + count)}).then(function(values) {
            var addValues = [];
            var putValues = [];
            var putKeys = outbound ? [] : null;
            var deleteKeys = [];
            for (var i = 0; i < count; ++i) {
              var origValue = values[i];
              var ctx_1 = {
                value: deepClone(origValue),
                primKey: keys$$1[offset + i]
              };
              if (modifyer.call(ctx_1, ctx_1.value, ctx_1) !== false) {
                if (ctx_1.value == null) {
                  deleteKeys.push(keys$$1[offset + i]);
                } else if (!outbound && cmp(extractKey(origValue), extractKey(ctx_1.value)) !== 0) {
                  deleteKeys.push(keys$$1[offset + i]);
                  addValues.push(ctx_1.value);
                } else {
                  putValues.push(ctx_1.value);
                  if (outbound)
                    putKeys.push(keys$$1[offset + i]);
                }
              }
            }
            return Promise.resolve(addValues.length > 0 && coreTable.mutate({trans, type: "add", values: addValues}).then(function(res) {
              for (var pos in res.failures) {
                deleteKeys.splice(parseInt(pos), 1);
              }
              applyMutateResult(addValues.length, res);
            })).then(function(res) {
              return putValues.length > 0 && coreTable.mutate({trans, type: "put", keys: putKeys, values: putValues}).then(function(res2) {
                return applyMutateResult(putValues.length, res2);
              });
            }).then(function() {
              return deleteKeys.length > 0 && coreTable.mutate({trans, type: "delete", keys: deleteKeys}).then(function(res) {
                return applyMutateResult(deleteKeys.length, res);
              });
            }).then(function() {
              return keys$$1.length > offset + count && nextChunk(offset + limit);
            });
          });
        };
        return nextChunk(0).then(function() {
          if (totalFailures.length > 0)
            throw new ModifyError("Error modifying one or more objects", totalFailures, successCount, failedKeys);
          return keys$$1.length;
        });
      });
    });
  };
  Collection2.prototype.delete = function() {
    var ctx = this._ctx, range = ctx.range;
    if (isPlainKeyRange(ctx) && (ctx.isPrimKey && !hangsOnDeleteLargeKeyRange || range.type === 3)) {
      return this._write(function(trans) {
        var primaryKey = ctx.table.core.schema.primaryKey;
        var coreRange = range;
        return ctx.table.core.count({trans, query: {index: primaryKey, range: coreRange}}).then(function(count) {
          return ctx.table.core.mutate({trans, type: "deleteRange", range: coreRange}).then(function(_a2) {
            var failures = _a2.failures, lastResult = _a2.lastResult, results = _a2.results, numFailures = _a2.numFailures;
            if (numFailures)
              throw new ModifyError("Could not delete some values", Object.keys(failures).map(function(pos) {
                return failures[pos];
              }), count - numFailures);
            return count - numFailures;
          });
        });
      });
    }
    return this.modify(function(value, ctx2) {
      return ctx2.value = null;
    });
  };
  return Collection2;
}();
function createCollectionConstructor(db2) {
  return makeClassConstructor(Collection.prototype, function Collection$$1(whereClause, keyRangeGenerator) {
    this.db = db2;
    var keyRange = AnyRange, error = null;
    if (keyRangeGenerator)
      try {
        keyRange = keyRangeGenerator();
      } catch (ex) {
        error = ex;
      }
    var whereCtx = whereClause._ctx;
    var table = whereCtx.table;
    var readingHook = table.hook.reading.fire;
    this._ctx = {
      table,
      index: whereCtx.index,
      isPrimKey: !whereCtx.index || table.schema.primKey.keyPath && whereCtx.index === table.schema.primKey.name,
      range: keyRange,
      keysOnly: false,
      dir: "next",
      unique: "",
      algorithm: null,
      filter: null,
      replayFilter: null,
      justLimit: true,
      isMatch: null,
      offset: 0,
      limit: Infinity,
      error,
      or: whereCtx.or,
      valueMapper: readingHook !== mirror ? readingHook : null
    };
  });
}
function simpleCompare(a, b) {
  return a < b ? -1 : a === b ? 0 : 1;
}
function simpleCompareReverse(a, b) {
  return a > b ? -1 : a === b ? 0 : 1;
}
function fail(collectionOrWhereClause, err, T) {
  var collection = collectionOrWhereClause instanceof WhereClause ? new collectionOrWhereClause.Collection(collectionOrWhereClause) : collectionOrWhereClause;
  collection._ctx.error = T ? new T(err) : new TypeError(err);
  return collection;
}
function emptyCollection(whereClause) {
  return new whereClause.Collection(whereClause, function() {
    return rangeEqual("");
  }).limit(0);
}
function upperFactory(dir) {
  return dir === "next" ? function(s) {
    return s.toUpperCase();
  } : function(s) {
    return s.toLowerCase();
  };
}
function lowerFactory(dir) {
  return dir === "next" ? function(s) {
    return s.toLowerCase();
  } : function(s) {
    return s.toUpperCase();
  };
}
function nextCasing(key2, lowerKey, upperNeedle, lowerNeedle, cmp, dir) {
  var length2 = Math.min(key2.length, lowerNeedle.length);
  var llp = -1;
  for (var i = 0; i < length2; ++i) {
    var lwrKeyChar = lowerKey[i];
    if (lwrKeyChar !== lowerNeedle[i]) {
      if (cmp(key2[i], upperNeedle[i]) < 0)
        return key2.substr(0, i) + upperNeedle[i] + upperNeedle.substr(i + 1);
      if (cmp(key2[i], lowerNeedle[i]) < 0)
        return key2.substr(0, i) + lowerNeedle[i] + upperNeedle.substr(i + 1);
      if (llp >= 0)
        return key2.substr(0, llp) + lowerKey[llp] + upperNeedle.substr(llp + 1);
      return null;
    }
    if (cmp(key2[i], lwrKeyChar) < 0)
      llp = i;
  }
  if (length2 < lowerNeedle.length && dir === "next")
    return key2 + upperNeedle.substr(key2.length);
  if (length2 < key2.length && dir === "prev")
    return key2.substr(0, upperNeedle.length);
  return llp < 0 ? null : key2.substr(0, llp) + lowerNeedle[llp] + upperNeedle.substr(llp + 1);
}
function addIgnoreCaseAlgorithm(whereClause, match3, needles, suffix) {
  var upper, lower, compare, upperNeedles, lowerNeedles, direction, nextKeySuffix, needlesLen = needles.length;
  if (!needles.every(function(s) {
    return typeof s === "string";
  })) {
    return fail(whereClause, STRING_EXPECTED);
  }
  function initDirection(dir) {
    upper = upperFactory(dir);
    lower = lowerFactory(dir);
    compare = dir === "next" ? simpleCompare : simpleCompareReverse;
    var needleBounds = needles.map(function(needle) {
      return {lower: lower(needle), upper: upper(needle)};
    }).sort(function(a, b) {
      return compare(a.lower, b.lower);
    });
    upperNeedles = needleBounds.map(function(nb) {
      return nb.upper;
    });
    lowerNeedles = needleBounds.map(function(nb) {
      return nb.lower;
    });
    direction = dir;
    nextKeySuffix = dir === "next" ? "" : suffix;
  }
  initDirection("next");
  var c = new whereClause.Collection(whereClause, function() {
    return createRange(upperNeedles[0], lowerNeedles[needlesLen - 1] + suffix);
  });
  c._ondirectionchange = function(direction2) {
    initDirection(direction2);
  };
  var firstPossibleNeedle = 0;
  c._addAlgorithm(function(cursor, advance, resolve) {
    var key2 = cursor.key;
    if (typeof key2 !== "string")
      return false;
    var lowerKey = lower(key2);
    if (match3(lowerKey, lowerNeedles, firstPossibleNeedle)) {
      return true;
    } else {
      var lowestPossibleCasing = null;
      for (var i = firstPossibleNeedle; i < needlesLen; ++i) {
        var casing = nextCasing(key2, lowerKey, upperNeedles[i], lowerNeedles[i], compare, direction);
        if (casing === null && lowestPossibleCasing === null)
          firstPossibleNeedle = i + 1;
        else if (lowestPossibleCasing === null || compare(lowestPossibleCasing, casing) > 0) {
          lowestPossibleCasing = casing;
        }
      }
      if (lowestPossibleCasing !== null) {
        advance(function() {
          cursor.continue(lowestPossibleCasing + nextKeySuffix);
        });
      } else {
        advance(resolve);
      }
      return false;
    }
  });
  return c;
}
function createRange(lower, upper, lowerOpen, upperOpen) {
  return {
    type: 2,
    lower,
    upper,
    lowerOpen,
    upperOpen
  };
}
function rangeEqual(value) {
  return {
    type: 1,
    lower: value,
    upper: value
  };
}
var WhereClause = function() {
  function WhereClause2() {
  }
  Object.defineProperty(WhereClause2.prototype, "Collection", {
    get: function() {
      return this._ctx.table.db.Collection;
    },
    enumerable: true,
    configurable: true
  });
  WhereClause2.prototype.between = function(lower, upper, includeLower, includeUpper) {
    includeLower = includeLower !== false;
    includeUpper = includeUpper === true;
    try {
      if (this._cmp(lower, upper) > 0 || this._cmp(lower, upper) === 0 && (includeLower || includeUpper) && !(includeLower && includeUpper))
        return emptyCollection(this);
      return new this.Collection(this, function() {
        return createRange(lower, upper, !includeLower, !includeUpper);
      });
    } catch (e) {
      return fail(this, INVALID_KEY_ARGUMENT);
    }
  };
  WhereClause2.prototype.equals = function(value) {
    return new this.Collection(this, function() {
      return rangeEqual(value);
    });
  };
  WhereClause2.prototype.above = function(value) {
    if (value == null)
      return fail(this, INVALID_KEY_ARGUMENT);
    return new this.Collection(this, function() {
      return createRange(value, void 0, true);
    });
  };
  WhereClause2.prototype.aboveOrEqual = function(value) {
    if (value == null)
      return fail(this, INVALID_KEY_ARGUMENT);
    return new this.Collection(this, function() {
      return createRange(value, void 0, false);
    });
  };
  WhereClause2.prototype.below = function(value) {
    if (value == null)
      return fail(this, INVALID_KEY_ARGUMENT);
    return new this.Collection(this, function() {
      return createRange(void 0, value, false, true);
    });
  };
  WhereClause2.prototype.belowOrEqual = function(value) {
    if (value == null)
      return fail(this, INVALID_KEY_ARGUMENT);
    return new this.Collection(this, function() {
      return createRange(void 0, value);
    });
  };
  WhereClause2.prototype.startsWith = function(str) {
    if (typeof str !== "string")
      return fail(this, STRING_EXPECTED);
    return this.between(str, str + maxString, true, true);
  };
  WhereClause2.prototype.startsWithIgnoreCase = function(str) {
    if (str === "")
      return this.startsWith(str);
    return addIgnoreCaseAlgorithm(this, function(x, a) {
      return x.indexOf(a[0]) === 0;
    }, [str], maxString);
  };
  WhereClause2.prototype.equalsIgnoreCase = function(str) {
    return addIgnoreCaseAlgorithm(this, function(x, a) {
      return x === a[0];
    }, [str], "");
  };
  WhereClause2.prototype.anyOfIgnoreCase = function() {
    var set7 = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
    if (set7.length === 0)
      return emptyCollection(this);
    return addIgnoreCaseAlgorithm(this, function(x, a) {
      return a.indexOf(x) !== -1;
    }, set7, "");
  };
  WhereClause2.prototype.startsWithAnyOfIgnoreCase = function() {
    var set7 = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
    if (set7.length === 0)
      return emptyCollection(this);
    return addIgnoreCaseAlgorithm(this, function(x, a) {
      return a.some(function(n) {
        return x.indexOf(n) === 0;
      });
    }, set7, maxString);
  };
  WhereClause2.prototype.anyOf = function() {
    var _this = this;
    var set7 = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
    var compare = this._cmp;
    try {
      set7.sort(compare);
    } catch (e) {
      return fail(this, INVALID_KEY_ARGUMENT);
    }
    if (set7.length === 0)
      return emptyCollection(this);
    var c = new this.Collection(this, function() {
      return createRange(set7[0], set7[set7.length - 1]);
    });
    c._ondirectionchange = function(direction) {
      compare = direction === "next" ? _this._ascending : _this._descending;
      set7.sort(compare);
    };
    var i = 0;
    c._addAlgorithm(function(cursor, advance, resolve) {
      var key2 = cursor.key;
      while (compare(key2, set7[i]) > 0) {
        ++i;
        if (i === set7.length) {
          advance(resolve);
          return false;
        }
      }
      if (compare(key2, set7[i]) === 0) {
        return true;
      } else {
        advance(function() {
          cursor.continue(set7[i]);
        });
        return false;
      }
    });
    return c;
  };
  WhereClause2.prototype.notEqual = function(value) {
    return this.inAnyRange([[minKey, value], [value, this.db._maxKey]], {includeLowers: false, includeUppers: false});
  };
  WhereClause2.prototype.noneOf = function() {
    var set7 = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
    if (set7.length === 0)
      return new this.Collection(this);
    try {
      set7.sort(this._ascending);
    } catch (e) {
      return fail(this, INVALID_KEY_ARGUMENT);
    }
    var ranges = set7.reduce(function(res, val) {
      return res ? res.concat([[res[res.length - 1][1], val]]) : [[minKey, val]];
    }, null);
    ranges.push([set7[set7.length - 1], this.db._maxKey]);
    return this.inAnyRange(ranges, {includeLowers: false, includeUppers: false});
  };
  WhereClause2.prototype.inAnyRange = function(ranges, options) {
    var _this = this;
    var cmp = this._cmp, ascending = this._ascending, descending = this._descending, min4 = this._min, max4 = this._max;
    if (ranges.length === 0)
      return emptyCollection(this);
    if (!ranges.every(function(range) {
      return range[0] !== void 0 && range[1] !== void 0 && ascending(range[0], range[1]) <= 0;
    })) {
      return fail(this, "First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower", exceptions.InvalidArgument);
    }
    var includeLowers = !options || options.includeLowers !== false;
    var includeUppers = options && options.includeUppers === true;
    function addRange(ranges2, newRange) {
      var i = 0, l = ranges2.length;
      for (; i < l; ++i) {
        var range = ranges2[i];
        if (cmp(newRange[0], range[1]) < 0 && cmp(newRange[1], range[0]) > 0) {
          range[0] = min4(range[0], newRange[0]);
          range[1] = max4(range[1], newRange[1]);
          break;
        }
      }
      if (i === l)
        ranges2.push(newRange);
      return ranges2;
    }
    var sortDirection = ascending;
    function rangeSorter(a, b) {
      return sortDirection(a[0], b[0]);
    }
    var set7;
    try {
      set7 = ranges.reduce(addRange, []);
      set7.sort(rangeSorter);
    } catch (ex) {
      return fail(this, INVALID_KEY_ARGUMENT);
    }
    var rangePos = 0;
    var keyIsBeyondCurrentEntry = includeUppers ? function(key2) {
      return ascending(key2, set7[rangePos][1]) > 0;
    } : function(key2) {
      return ascending(key2, set7[rangePos][1]) >= 0;
    };
    var keyIsBeforeCurrentEntry = includeLowers ? function(key2) {
      return descending(key2, set7[rangePos][0]) > 0;
    } : function(key2) {
      return descending(key2, set7[rangePos][0]) >= 0;
    };
    function keyWithinCurrentRange(key2) {
      return !keyIsBeyondCurrentEntry(key2) && !keyIsBeforeCurrentEntry(key2);
    }
    var checkKey = keyIsBeyondCurrentEntry;
    var c = new this.Collection(this, function() {
      return createRange(set7[0][0], set7[set7.length - 1][1], !includeLowers, !includeUppers);
    });
    c._ondirectionchange = function(direction) {
      if (direction === "next") {
        checkKey = keyIsBeyondCurrentEntry;
        sortDirection = ascending;
      } else {
        checkKey = keyIsBeforeCurrentEntry;
        sortDirection = descending;
      }
      set7.sort(rangeSorter);
    };
    c._addAlgorithm(function(cursor, advance, resolve) {
      var key2 = cursor.key;
      while (checkKey(key2)) {
        ++rangePos;
        if (rangePos === set7.length) {
          advance(resolve);
          return false;
        }
      }
      if (keyWithinCurrentRange(key2)) {
        return true;
      } else if (_this._cmp(key2, set7[rangePos][1]) === 0 || _this._cmp(key2, set7[rangePos][0]) === 0) {
        return false;
      } else {
        advance(function() {
          if (sortDirection === ascending)
            cursor.continue(set7[rangePos][0]);
          else
            cursor.continue(set7[rangePos][1]);
        });
        return false;
      }
    });
    return c;
  };
  WhereClause2.prototype.startsWithAnyOf = function() {
    var set7 = getArrayOf.apply(NO_CHAR_ARRAY, arguments);
    if (!set7.every(function(s) {
      return typeof s === "string";
    })) {
      return fail(this, "startsWithAnyOf() only works with strings");
    }
    if (set7.length === 0)
      return emptyCollection(this);
    return this.inAnyRange(set7.map(function(str) {
      return [str, str + maxString];
    }));
  };
  return WhereClause2;
}();
function createWhereClauseConstructor(db2) {
  return makeClassConstructor(WhereClause.prototype, function WhereClause$$1(table, index15, orCollection) {
    this.db = db2;
    this._ctx = {
      table,
      index: index15 === ":id" ? null : index15,
      or: orCollection
    };
    var indexedDB = db2._deps.indexedDB;
    if (!indexedDB)
      throw new exceptions.MissingAPI("indexedDB API missing");
    this._cmp = this._ascending = indexedDB.cmp.bind(indexedDB);
    this._descending = function(a, b) {
      return indexedDB.cmp(b, a);
    };
    this._max = function(a, b) {
      return indexedDB.cmp(a, b) > 0 ? a : b;
    };
    this._min = function(a, b) {
      return indexedDB.cmp(a, b) < 0 ? a : b;
    };
    this._IDBKeyRange = db2._deps.IDBKeyRange;
  });
}
function safariMultiStoreFix(storeNames) {
  return storeNames.length === 1 ? storeNames[0] : storeNames;
}
function getMaxKey(IdbKeyRange) {
  try {
    IdbKeyRange.only([[]]);
    return [[]];
  } catch (e) {
    return maxString;
  }
}
function eventRejectHandler(reject) {
  return wrap(function(event) {
    preventDefault(event);
    reject(event.target.error);
    return false;
  });
}
function preventDefault(event) {
  if (event.stopPropagation)
    event.stopPropagation();
  if (event.preventDefault)
    event.preventDefault();
}
var Transaction = function() {
  function Transaction3() {
  }
  Transaction3.prototype._lock = function() {
    assert(!PSD.global);
    ++this._reculock;
    if (this._reculock === 1 && !PSD.global)
      PSD.lockOwnerFor = this;
    return this;
  };
  Transaction3.prototype._unlock = function() {
    assert(!PSD.global);
    if (--this._reculock === 0) {
      if (!PSD.global)
        PSD.lockOwnerFor = null;
      while (this._blockedFuncs.length > 0 && !this._locked()) {
        var fnAndPSD = this._blockedFuncs.shift();
        try {
          usePSD(fnAndPSD[1], fnAndPSD[0]);
        } catch (e) {
        }
      }
    }
    return this;
  };
  Transaction3.prototype._locked = function() {
    return this._reculock && PSD.lockOwnerFor !== this;
  };
  Transaction3.prototype.create = function(idbtrans) {
    var _this = this;
    if (!this.mode)
      return this;
    var idbdb = this.db.idbdb;
    var dbOpenError = this.db._state.dbOpenError;
    assert(!this.idbtrans);
    if (!idbtrans && !idbdb) {
      switch (dbOpenError && dbOpenError.name) {
        case "DatabaseClosedError":
          throw new exceptions.DatabaseClosed(dbOpenError);
        case "MissingAPIError":
          throw new exceptions.MissingAPI(dbOpenError.message, dbOpenError);
        default:
          throw new exceptions.OpenFailed(dbOpenError);
      }
    }
    if (!this.active)
      throw new exceptions.TransactionInactive();
    assert(this._completion._state === null);
    idbtrans = this.idbtrans = idbtrans || idbdb.transaction(safariMultiStoreFix(this.storeNames), this.mode);
    idbtrans.onerror = wrap(function(ev) {
      preventDefault(ev);
      _this._reject(idbtrans.error);
    });
    idbtrans.onabort = wrap(function(ev) {
      preventDefault(ev);
      _this.active && _this._reject(new exceptions.Abort(idbtrans.error));
      _this.active = false;
      _this.on("abort").fire(ev);
    });
    idbtrans.oncomplete = wrap(function() {
      _this.active = false;
      _this._resolve();
    });
    return this;
  };
  Transaction3.prototype._promise = function(mode, fn2, bWriteLock) {
    var _this = this;
    if (mode === "readwrite" && this.mode !== "readwrite")
      return rejection(new exceptions.ReadOnly("Transaction is readonly"));
    if (!this.active)
      return rejection(new exceptions.TransactionInactive());
    if (this._locked()) {
      return new DexiePromise(function(resolve, reject) {
        _this._blockedFuncs.push([function() {
          _this._promise(mode, fn2, bWriteLock).then(resolve, reject);
        }, PSD]);
      });
    } else if (bWriteLock) {
      return newScope(function() {
        var p2 = new DexiePromise(function(resolve, reject) {
          _this._lock();
          var rv = fn2(resolve, reject, _this);
          if (rv && rv.then)
            rv.then(resolve, reject);
        });
        p2.finally(function() {
          return _this._unlock();
        });
        p2._lib = true;
        return p2;
      });
    } else {
      var p = new DexiePromise(function(resolve, reject) {
        var rv = fn2(resolve, reject, _this);
        if (rv && rv.then)
          rv.then(resolve, reject);
      });
      p._lib = true;
      return p;
    }
  };
  Transaction3.prototype._root = function() {
    return this.parent ? this.parent._root() : this;
  };
  Transaction3.prototype.waitFor = function(promiseLike) {
    var root = this._root();
    var promise = DexiePromise.resolve(promiseLike);
    if (root._waitingFor) {
      root._waitingFor = root._waitingFor.then(function() {
        return promise;
      });
    } else {
      root._waitingFor = promise;
      root._waitingQueue = [];
      var store2 = root.idbtrans.objectStore(root.storeNames[0]);
      (function spin() {
        ++root._spinCount;
        while (root._waitingQueue.length)
          root._waitingQueue.shift()();
        if (root._waitingFor)
          store2.get(-Infinity).onsuccess = spin;
      })();
    }
    var currentWaitPromise = root._waitingFor;
    return new DexiePromise(function(resolve, reject) {
      promise.then(function(res) {
        return root._waitingQueue.push(wrap(resolve.bind(null, res)));
      }, function(err) {
        return root._waitingQueue.push(wrap(reject.bind(null, err)));
      }).finally(function() {
        if (root._waitingFor === currentWaitPromise) {
          root._waitingFor = null;
        }
      });
    });
  };
  Transaction3.prototype.abort = function() {
    this.active && this._reject(new exceptions.Abort());
    this.active = false;
  };
  Transaction3.prototype.table = function(tableName) {
    var memoizedTables = this._memoizedTables || (this._memoizedTables = {});
    if (hasOwn(memoizedTables, tableName))
      return memoizedTables[tableName];
    var tableSchema = this.schema[tableName];
    if (!tableSchema) {
      throw new exceptions.NotFound("Table " + tableName + " not part of transaction");
    }
    var transactionBoundTable = new this.db.Table(tableName, tableSchema, this);
    transactionBoundTable.core = this.db.core.table(tableName);
    memoizedTables[tableName] = transactionBoundTable;
    return transactionBoundTable;
  };
  return Transaction3;
}();
function createTransactionConstructor(db2) {
  return makeClassConstructor(Transaction.prototype, function Transaction$$1(mode, storeNames, dbschema, parent) {
    var _this = this;
    this.db = db2;
    this.mode = mode;
    this.storeNames = storeNames;
    this.schema = dbschema;
    this.idbtrans = null;
    this.on = Events(this, "complete", "error", "abort");
    this.parent = parent || null;
    this.active = true;
    this._reculock = 0;
    this._blockedFuncs = [];
    this._resolve = null;
    this._reject = null;
    this._waitingFor = null;
    this._waitingQueue = null;
    this._spinCount = 0;
    this._completion = new DexiePromise(function(resolve, reject) {
      _this._resolve = resolve;
      _this._reject = reject;
    });
    this._completion.then(function() {
      _this.active = false;
      _this.on.complete.fire();
    }, function(e) {
      var wasActive = _this.active;
      _this.active = false;
      _this.on.error.fire(e);
      _this.parent ? _this.parent._reject(e) : wasActive && _this.idbtrans && _this.idbtrans.abort();
      return rejection(e);
    });
  });
}
function createIndexSpec(name2, keyPath, unique, multi, auto, compound, isPrimKey) {
  return {
    name: name2,
    keyPath,
    unique,
    multi,
    auto,
    compound,
    src: (unique && !isPrimKey ? "&" : "") + (multi ? "*" : "") + (auto ? "++" : "") + nameFromKeyPath(keyPath)
  };
}
function nameFromKeyPath(keyPath) {
  return typeof keyPath === "string" ? keyPath : keyPath ? "[" + [].join.call(keyPath, "+") + "]" : "";
}
function createTableSchema(name2, primKey, indexes) {
  return {
    name: name2,
    primKey,
    indexes,
    mappedClass: null,
    idxByName: arrayToObject(indexes, function(index15) {
      return [index15.name, index15];
    })
  };
}
function getKeyExtractor(keyPath) {
  if (keyPath == null) {
    return function() {
      return void 0;
    };
  } else if (typeof keyPath === "string") {
    return getSinglePathKeyExtractor(keyPath);
  } else {
    return function(obj) {
      return getByKeyPath(obj, keyPath);
    };
  }
}
function getSinglePathKeyExtractor(keyPath) {
  var split = keyPath.split(".");
  if (split.length === 1) {
    return function(obj) {
      return obj[keyPath];
    };
  } else {
    return function(obj) {
      return getByKeyPath(obj, keyPath);
    };
  }
}
function getEffectiveKeys(primaryKey, req) {
  if (req.type === "delete")
    return req.keys;
  return req.keys || req.values.map(primaryKey.extractKey);
}
function getExistingValues(table, req, effectiveKeys) {
  return req.type === "add" ? Promise.resolve(new Array(req.values.length)) : table.getMany({trans: req.trans, keys: effectiveKeys});
}
function arrayify(arrayLike) {
  return [].slice.call(arrayLike);
}
var _id_counter = 0;
function getKeyPathAlias(keyPath) {
  return keyPath == null ? ":id" : typeof keyPath === "string" ? keyPath : "[" + keyPath.join("+") + "]";
}
function createDBCore(db2, indexedDB, IdbKeyRange, tmpTrans) {
  var cmp = indexedDB.cmp.bind(indexedDB);
  function extractSchema(db3, trans) {
    var tables2 = arrayify(db3.objectStoreNames);
    return {
      schema: {
        name: db3.name,
        tables: tables2.map(function(table) {
          return trans.objectStore(table);
        }).map(function(store2) {
          var keyPath = store2.keyPath, autoIncrement = store2.autoIncrement;
          var compound = isArray(keyPath);
          var outbound = keyPath == null;
          var indexByKeyPath = {};
          var result = {
            name: store2.name,
            primaryKey: {
              name: null,
              isPrimaryKey: true,
              outbound,
              compound,
              keyPath,
              autoIncrement,
              unique: true,
              extractKey: getKeyExtractor(keyPath)
            },
            indexes: arrayify(store2.indexNames).map(function(indexName) {
              return store2.index(indexName);
            }).map(function(index15) {
              var name2 = index15.name, unique = index15.unique, multiEntry = index15.multiEntry, keyPath2 = index15.keyPath;
              var compound2 = isArray(keyPath2);
              var result2 = {
                name: name2,
                compound: compound2,
                keyPath: keyPath2,
                unique,
                multiEntry,
                extractKey: getKeyExtractor(keyPath2)
              };
              indexByKeyPath[getKeyPathAlias(keyPath2)] = result2;
              return result2;
            }),
            getIndexByKeyPath: function(keyPath2) {
              return indexByKeyPath[getKeyPathAlias(keyPath2)];
            }
          };
          indexByKeyPath[":id"] = result.primaryKey;
          if (keyPath != null) {
            indexByKeyPath[getKeyPathAlias(keyPath)] = result.primaryKey;
          }
          return result;
        })
      },
      hasGetAll: tables2.length > 0 && "getAll" in trans.objectStore(tables2[0]) && !(typeof navigator !== "undefined" && /Safari/.test(navigator.userAgent) && !/(Chrome\/|Edge\/)/.test(navigator.userAgent) && [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604)
    };
  }
  function makeIDBKeyRange(range) {
    if (range.type === 3)
      return null;
    if (range.type === 4)
      throw new Error("Cannot convert never type to IDBKeyRange");
    var lower = range.lower, upper = range.upper, lowerOpen = range.lowerOpen, upperOpen = range.upperOpen;
    var idbRange = lower === void 0 ? upper === void 0 ? null : IdbKeyRange.upperBound(upper, !!upperOpen) : upper === void 0 ? IdbKeyRange.lowerBound(lower, !!lowerOpen) : IdbKeyRange.bound(lower, upper, !!lowerOpen, !!upperOpen);
    return idbRange;
  }
  function createDbCoreTable(tableSchema) {
    var tableName = tableSchema.name;
    function mutate(_a3) {
      var trans = _a3.trans, type = _a3.type, keys$$1 = _a3.keys, values = _a3.values, range = _a3.range, wantResults = _a3.wantResults;
      return new Promise(function(resolve, reject) {
        resolve = wrap(resolve);
        var store2 = trans.objectStore(tableName);
        var outbound = store2.keyPath == null;
        var isAddOrPut = type === "put" || type === "add";
        if (!isAddOrPut && type !== "delete" && type !== "deleteRange")
          throw new Error("Invalid operation type: " + type);
        var length2 = (keys$$1 || values || {length: 1}).length;
        if (keys$$1 && values && keys$$1.length !== values.length) {
          throw new Error("Given keys array must have same length as given values array.");
        }
        if (length2 === 0)
          return resolve({numFailures: 0, failures: {}, results: [], lastResult: void 0});
        var results = wantResults && __spreadArrays(keys$$1 ? keys$$1 : getEffectiveKeys(tableSchema.primaryKey, {type, keys: keys$$1, values}));
        var req;
        var failures = [];
        var numFailures = 0;
        var errorHandler = function(event) {
          ++numFailures;
          preventDefault(event);
          if (results)
            results[event.target._reqno] = void 0;
          failures[event.target._reqno] = event.target.error;
        };
        var setResult = function(_a5) {
          var target = _a5.target;
          results[target._reqno] = target.result;
        };
        if (type === "deleteRange") {
          if (range.type === 4)
            return resolve({numFailures, failures, results, lastResult: void 0});
          if (range.type === 3)
            req = store2.clear();
          else
            req = store2.delete(makeIDBKeyRange(range));
        } else {
          var _a4 = isAddOrPut ? outbound ? [values, keys$$1] : [values, null] : [keys$$1, null], args1 = _a4[0], args2 = _a4[1];
          if (isAddOrPut) {
            for (var i = 0; i < length2; ++i) {
              req = args2 && args2[i] !== void 0 ? store2[type](args1[i], args2[i]) : store2[type](args1[i]);
              req._reqno = i;
              if (results && results[i] === void 0) {
                req.onsuccess = setResult;
              }
              req.onerror = errorHandler;
            }
          } else {
            for (var i = 0; i < length2; ++i) {
              req = store2[type](args1[i]);
              req._reqno = i;
              req.onerror = errorHandler;
            }
          }
        }
        var done = function(event) {
          var lastResult = event.target.result;
          if (results)
            results[length2 - 1] = lastResult;
          resolve({
            numFailures,
            failures,
            results,
            lastResult
          });
        };
        req.onerror = function(event) {
          errorHandler(event);
          done(event);
        };
        req.onsuccess = done;
      });
    }
    function openCursor2(_a3) {
      var trans = _a3.trans, values = _a3.values, query2 = _a3.query, reverse = _a3.reverse, unique = _a3.unique;
      return new Promise(function(resolve, reject) {
        resolve = wrap(resolve);
        var index15 = query2.index, range = query2.range;
        var store2 = trans.objectStore(tableName);
        var source = index15.isPrimaryKey ? store2 : store2.index(index15.name);
        var direction = reverse ? unique ? "prevunique" : "prev" : unique ? "nextunique" : "next";
        var req = values || !("openKeyCursor" in source) ? source.openCursor(makeIDBKeyRange(range), direction) : source.openKeyCursor(makeIDBKeyRange(range), direction);
        req.onerror = eventRejectHandler(reject);
        req.onsuccess = wrap(function(ev) {
          var cursor = req.result;
          if (!cursor) {
            resolve(null);
            return;
          }
          cursor.___id = ++_id_counter;
          cursor.done = false;
          var _cursorContinue = cursor.continue.bind(cursor);
          var _cursorContinuePrimaryKey = cursor.continuePrimaryKey;
          if (_cursorContinuePrimaryKey)
            _cursorContinuePrimaryKey = _cursorContinuePrimaryKey.bind(cursor);
          var _cursorAdvance = cursor.advance.bind(cursor);
          var doThrowCursorIsNotStarted = function() {
            throw new Error("Cursor not started");
          };
          var doThrowCursorIsStopped = function() {
            throw new Error("Cursor not stopped");
          };
          cursor.trans = trans;
          cursor.stop = cursor.continue = cursor.continuePrimaryKey = cursor.advance = doThrowCursorIsNotStarted;
          cursor.fail = wrap(reject);
          cursor.next = function() {
            var _this = this;
            var gotOne = 1;
            return this.start(function() {
              return gotOne-- ? _this.continue() : _this.stop();
            }).then(function() {
              return _this;
            });
          };
          cursor.start = function(callback) {
            var iterationPromise = new Promise(function(resolveIteration, rejectIteration) {
              resolveIteration = wrap(resolveIteration);
              req.onerror = eventRejectHandler(rejectIteration);
              cursor.fail = rejectIteration;
              cursor.stop = function(value) {
                cursor.stop = cursor.continue = cursor.continuePrimaryKey = cursor.advance = doThrowCursorIsStopped;
                resolveIteration(value);
              };
            });
            var guardedCallback = function() {
              if (req.result) {
                try {
                  callback();
                } catch (err) {
                  cursor.fail(err);
                }
              } else {
                cursor.done = true;
                cursor.start = function() {
                  throw new Error("Cursor behind last entry");
                };
                cursor.stop();
              }
            };
            req.onsuccess = wrap(function(ev2) {
              req.onsuccess = guardedCallback;
              guardedCallback();
            });
            cursor.continue = _cursorContinue;
            cursor.continuePrimaryKey = _cursorContinuePrimaryKey;
            cursor.advance = _cursorAdvance;
            guardedCallback();
            return iterationPromise;
          };
          resolve(cursor);
        }, reject);
      });
    }
    function query(hasGetAll2) {
      return function(request) {
        return new Promise(function(resolve, reject) {
          resolve = wrap(resolve);
          var trans = request.trans, values = request.values, limit = request.limit, query2 = request.query;
          var nonInfinitLimit = limit === Infinity ? void 0 : limit;
          var index15 = query2.index, range = query2.range;
          var store2 = trans.objectStore(tableName);
          var source = index15.isPrimaryKey ? store2 : store2.index(index15.name);
          var idbKeyRange = makeIDBKeyRange(range);
          if (limit === 0)
            return resolve({result: []});
          if (hasGetAll2) {
            var req = values ? source.getAll(idbKeyRange, nonInfinitLimit) : source.getAllKeys(idbKeyRange, nonInfinitLimit);
            req.onsuccess = function(event) {
              return resolve({result: event.target.result});
            };
            req.onerror = eventRejectHandler(reject);
          } else {
            var count_1 = 0;
            var req_1 = values || !("openKeyCursor" in source) ? source.openCursor(idbKeyRange) : source.openKeyCursor(idbKeyRange);
            var result_1 = [];
            req_1.onsuccess = function(event) {
              var cursor = req_1.result;
              if (!cursor)
                return resolve({result: result_1});
              result_1.push(values ? cursor.value : cursor.primaryKey);
              if (++count_1 === limit)
                return resolve({result: result_1});
              cursor.continue();
            };
            req_1.onerror = eventRejectHandler(reject);
          }
        });
      };
    }
    return {
      name: tableName,
      schema: tableSchema,
      mutate,
      getMany: function(_a3) {
        var trans = _a3.trans, keys$$1 = _a3.keys;
        return new Promise(function(resolve, reject) {
          resolve = wrap(resolve);
          var store2 = trans.objectStore(tableName);
          var length2 = keys$$1.length;
          var result = new Array(length2);
          var keyCount = 0;
          var callbackCount = 0;
          var valueCount = 0;
          var req;
          var successHandler = function(event) {
            var req2 = event.target;
            if ((result[req2._pos] = req2.result) != null)
              ++valueCount;
            if (++callbackCount === keyCount)
              resolve(result);
          };
          var errorHandler = eventRejectHandler(reject);
          for (var i = 0; i < length2; ++i) {
            var key2 = keys$$1[i];
            if (key2 != null) {
              req = store2.get(keys$$1[i]);
              req._pos = i;
              req.onsuccess = successHandler;
              req.onerror = errorHandler;
              ++keyCount;
            }
          }
          if (keyCount === 0)
            resolve(result);
        });
      },
      get: function(_a3) {
        var trans = _a3.trans, key2 = _a3.key;
        return new Promise(function(resolve, reject) {
          resolve = wrap(resolve);
          var store2 = trans.objectStore(tableName);
          var req = store2.get(key2);
          req.onsuccess = function(event) {
            return resolve(event.target.result);
          };
          req.onerror = eventRejectHandler(reject);
        });
      },
      query: query(hasGetAll),
      openCursor: openCursor2,
      count: function(_a3) {
        var query2 = _a3.query, trans = _a3.trans;
        var index15 = query2.index, range = query2.range;
        return new Promise(function(resolve, reject) {
          var store2 = trans.objectStore(tableName);
          var source = index15.isPrimaryKey ? store2 : store2.index(index15.name);
          var idbKeyRange = makeIDBKeyRange(range);
          var req = idbKeyRange ? source.count(idbKeyRange) : source.count();
          req.onsuccess = wrap(function(ev) {
            return resolve(ev.target.result);
          });
          req.onerror = eventRejectHandler(reject);
        });
      }
    };
  }
  var _a2 = extractSchema(db2, tmpTrans), schema = _a2.schema, hasGetAll = _a2.hasGetAll;
  var tables = schema.tables.map(function(tableSchema) {
    return createDbCoreTable(tableSchema);
  });
  var tableMap = {};
  tables.forEach(function(table) {
    return tableMap[table.name] = table;
  });
  return {
    stack: "dbcore",
    transaction: db2.transaction.bind(db2),
    table: function(name2) {
      var result = tableMap[name2];
      if (!result)
        throw new Error("Table '" + name2 + "' not found");
      return tableMap[name2];
    },
    cmp,
    MIN_KEY: -Infinity,
    MAX_KEY: getMaxKey(IdbKeyRange),
    schema
  };
}
function createMiddlewareStack(stackImpl, middlewares) {
  return middlewares.reduce(function(down, _a2) {
    var create = _a2.create;
    return __assign(__assign({}, down), create(down));
  }, stackImpl);
}
function createMiddlewareStacks(middlewares, idbdb, _a2, tmpTrans) {
  var IDBKeyRange = _a2.IDBKeyRange, indexedDB = _a2.indexedDB;
  var dbcore = createMiddlewareStack(createDBCore(idbdb, indexedDB, IDBKeyRange, tmpTrans), middlewares.dbcore);
  return {
    dbcore
  };
}
function generateMiddlewareStacks(db2, tmpTrans) {
  var idbdb = tmpTrans.db;
  var stacks = createMiddlewareStacks(db2._middlewares, idbdb, db2._deps, tmpTrans);
  db2.core = stacks.dbcore;
  db2.tables.forEach(function(table) {
    var tableName = table.name;
    if (db2.core.schema.tables.some(function(tbl) {
      return tbl.name === tableName;
    })) {
      table.core = db2.core.table(tableName);
      if (db2[tableName] instanceof db2.Table) {
        db2[tableName].core = table.core;
      }
    }
  });
}
function setApiOnPlace(db2, objs, tableNames, dbschema) {
  tableNames.forEach(function(tableName) {
    var schema = dbschema[tableName];
    objs.forEach(function(obj) {
      if (!(tableName in obj)) {
        if (obj === db2.Transaction.prototype || obj instanceof db2.Transaction) {
          setProp(obj, tableName, {
            get: function() {
              return this.table(tableName);
            },
            set: function(value) {
              defineProperty(this, tableName, {value, writable: true, configurable: true, enumerable: true});
            }
          });
        } else {
          obj[tableName] = new db2.Table(tableName, schema);
        }
      }
    });
  });
}
function removeTablesApi(db2, objs) {
  objs.forEach(function(obj) {
    for (var key2 in obj) {
      if (obj[key2] instanceof db2.Table)
        delete obj[key2];
    }
  });
}
function lowerVersionFirst(a, b) {
  return a._cfg.version - b._cfg.version;
}
function runUpgraders(db2, oldVersion, idbUpgradeTrans, reject) {
  var globalSchema = db2._dbSchema;
  var trans = db2._createTransaction("readwrite", db2._storeNames, globalSchema);
  trans.create(idbUpgradeTrans);
  trans._completion.catch(reject);
  var rejectTransaction = trans._reject.bind(trans);
  var transless = PSD.transless || PSD;
  newScope(function() {
    PSD.trans = trans;
    PSD.transless = transless;
    if (oldVersion === 0) {
      keys(globalSchema).forEach(function(tableName) {
        createTable(idbUpgradeTrans, tableName, globalSchema[tableName].primKey, globalSchema[tableName].indexes);
      });
      generateMiddlewareStacks(db2, idbUpgradeTrans);
      DexiePromise.follow(function() {
        return db2.on.populate.fire(trans);
      }).catch(rejectTransaction);
    } else
      updateTablesAndIndexes(db2, oldVersion, trans, idbUpgradeTrans).catch(rejectTransaction);
  });
}
function updateTablesAndIndexes(db2, oldVersion, trans, idbUpgradeTrans) {
  var queue = [];
  var versions = db2._versions;
  var globalSchema = db2._dbSchema = buildGlobalSchema(db2, db2.idbdb, idbUpgradeTrans);
  var anyContentUpgraderHasRun = false;
  var versToRun = versions.filter(function(v) {
    return v._cfg.version >= oldVersion;
  });
  versToRun.forEach(function(version) {
    queue.push(function() {
      var oldSchema = globalSchema;
      var newSchema = version._cfg.dbschema;
      adjustToExistingIndexNames(db2, oldSchema, idbUpgradeTrans);
      adjustToExistingIndexNames(db2, newSchema, idbUpgradeTrans);
      globalSchema = db2._dbSchema = newSchema;
      var diff = getSchemaDiff(oldSchema, newSchema);
      diff.add.forEach(function(tuple) {
        createTable(idbUpgradeTrans, tuple[0], tuple[1].primKey, tuple[1].indexes);
      });
      diff.change.forEach(function(change) {
        if (change.recreate) {
          throw new exceptions.Upgrade("Not yet support for changing primary key");
        } else {
          var store_1 = idbUpgradeTrans.objectStore(change.name);
          change.add.forEach(function(idx) {
            return addIndex(store_1, idx);
          });
          change.change.forEach(function(idx) {
            store_1.deleteIndex(idx.name);
            addIndex(store_1, idx);
          });
          change.del.forEach(function(idxName) {
            return store_1.deleteIndex(idxName);
          });
        }
      });
      var contentUpgrade = version._cfg.contentUpgrade;
      if (contentUpgrade && version._cfg.version > oldVersion) {
        generateMiddlewareStacks(db2, idbUpgradeTrans);
        anyContentUpgraderHasRun = true;
        var upgradeSchema_1 = shallowClone(newSchema);
        diff.del.forEach(function(table) {
          upgradeSchema_1[table] = oldSchema[table];
        });
        removeTablesApi(db2, [db2.Transaction.prototype]);
        setApiOnPlace(db2, [db2.Transaction.prototype], keys(upgradeSchema_1), upgradeSchema_1);
        trans.schema = upgradeSchema_1;
        var contentUpgradeIsAsync_1 = isAsyncFunction(contentUpgrade);
        if (contentUpgradeIsAsync_1) {
          incrementExpectedAwaits();
        }
        var returnValue_1;
        var promiseFollowed = DexiePromise.follow(function() {
          returnValue_1 = contentUpgrade(trans);
          if (returnValue_1) {
            if (contentUpgradeIsAsync_1) {
              var decrementor = decrementExpectedAwaits.bind(null, null);
              returnValue_1.then(decrementor, decrementor);
            }
          }
        });
        return returnValue_1 && typeof returnValue_1.then === "function" ? DexiePromise.resolve(returnValue_1) : promiseFollowed.then(function() {
          return returnValue_1;
        });
      }
    });
    queue.push(function(idbtrans) {
      if (!anyContentUpgraderHasRun || !hasIEDeleteObjectStoreBug) {
        var newSchema = version._cfg.dbschema;
        deleteRemovedTables(newSchema, idbtrans);
      }
      removeTablesApi(db2, [db2.Transaction.prototype]);
      setApiOnPlace(db2, [db2.Transaction.prototype], db2._storeNames, db2._dbSchema);
      trans.schema = db2._dbSchema;
    });
  });
  function runQueue() {
    return queue.length ? DexiePromise.resolve(queue.shift()(trans.idbtrans)).then(runQueue) : DexiePromise.resolve();
  }
  return runQueue().then(function() {
    createMissingTables(globalSchema, idbUpgradeTrans);
  });
}
function getSchemaDiff(oldSchema, newSchema) {
  var diff = {
    del: [],
    add: [],
    change: []
  };
  var table;
  for (table in oldSchema) {
    if (!newSchema[table])
      diff.del.push(table);
  }
  for (table in newSchema) {
    var oldDef = oldSchema[table], newDef = newSchema[table];
    if (!oldDef) {
      diff.add.push([table, newDef]);
    } else {
      var change = {
        name: table,
        def: newDef,
        recreate: false,
        del: [],
        add: [],
        change: []
      };
      if (oldDef.primKey.src !== newDef.primKey.src && !isIEOrEdge) {
        change.recreate = true;
        diff.change.push(change);
      } else {
        var oldIndexes = oldDef.idxByName;
        var newIndexes = newDef.idxByName;
        var idxName = void 0;
        for (idxName in oldIndexes) {
          if (!newIndexes[idxName])
            change.del.push(idxName);
        }
        for (idxName in newIndexes) {
          var oldIdx = oldIndexes[idxName], newIdx = newIndexes[idxName];
          if (!oldIdx)
            change.add.push(newIdx);
          else if (oldIdx.src !== newIdx.src)
            change.change.push(newIdx);
        }
        if (change.del.length > 0 || change.add.length > 0 || change.change.length > 0) {
          diff.change.push(change);
        }
      }
    }
  }
  return diff;
}
function createTable(idbtrans, tableName, primKey, indexes) {
  var store2 = idbtrans.db.createObjectStore(tableName, primKey.keyPath ? {keyPath: primKey.keyPath, autoIncrement: primKey.auto} : {autoIncrement: primKey.auto});
  indexes.forEach(function(idx) {
    return addIndex(store2, idx);
  });
  return store2;
}
function createMissingTables(newSchema, idbtrans) {
  keys(newSchema).forEach(function(tableName) {
    if (!idbtrans.db.objectStoreNames.contains(tableName)) {
      createTable(idbtrans, tableName, newSchema[tableName].primKey, newSchema[tableName].indexes);
    }
  });
}
function deleteRemovedTables(newSchema, idbtrans) {
  for (var i = 0; i < idbtrans.db.objectStoreNames.length; ++i) {
    var storeName = idbtrans.db.objectStoreNames[i];
    if (newSchema[storeName] == null) {
      idbtrans.db.deleteObjectStore(storeName);
    }
  }
}
function addIndex(store2, idx) {
  store2.createIndex(idx.name, idx.keyPath, {unique: idx.unique, multiEntry: idx.multi});
}
function buildGlobalSchema(db2, idbdb, tmpTrans) {
  var globalSchema = {};
  var dbStoreNames = slice(idbdb.objectStoreNames, 0);
  dbStoreNames.forEach(function(storeName) {
    var store2 = tmpTrans.objectStore(storeName);
    var keyPath = store2.keyPath;
    var primKey = createIndexSpec(nameFromKeyPath(keyPath), keyPath || "", false, false, !!store2.autoIncrement, keyPath && typeof keyPath !== "string", true);
    var indexes = [];
    for (var j = 0; j < store2.indexNames.length; ++j) {
      var idbindex = store2.index(store2.indexNames[j]);
      keyPath = idbindex.keyPath;
      var index15 = createIndexSpec(idbindex.name, keyPath, !!idbindex.unique, !!idbindex.multiEntry, false, keyPath && typeof keyPath !== "string", false);
      indexes.push(index15);
    }
    globalSchema[storeName] = createTableSchema(storeName, primKey, indexes);
  });
  return globalSchema;
}
function readGlobalSchema(db2, idbdb, tmpTrans) {
  db2.verno = idbdb.version / 10;
  var globalSchema = db2._dbSchema = buildGlobalSchema(db2, idbdb, tmpTrans);
  db2._storeNames = slice(idbdb.objectStoreNames, 0);
  setApiOnPlace(db2, [db2._allTables], keys(globalSchema), globalSchema);
}
function adjustToExistingIndexNames(db2, schema, idbtrans) {
  var storeNames = idbtrans.db.objectStoreNames;
  for (var i = 0; i < storeNames.length; ++i) {
    var storeName = storeNames[i];
    var store2 = idbtrans.objectStore(storeName);
    db2._hasGetAll = "getAll" in store2;
    for (var j = 0; j < store2.indexNames.length; ++j) {
      var indexName = store2.indexNames[j];
      var keyPath = store2.index(indexName).keyPath;
      var dexieName = typeof keyPath === "string" ? keyPath : "[" + slice(keyPath).join("+") + "]";
      if (schema[storeName]) {
        var indexSpec = schema[storeName].idxByName[dexieName];
        if (indexSpec) {
          indexSpec.name = indexName;
          delete schema[storeName].idxByName[dexieName];
          schema[storeName].idxByName[indexName] = indexSpec;
        }
      }
    }
  }
  if (typeof navigator !== "undefined" && /Safari/.test(navigator.userAgent) && !/(Chrome\/|Edge\/)/.test(navigator.userAgent) && _global.WorkerGlobalScope && _global instanceof _global.WorkerGlobalScope && [].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1] < 604) {
    db2._hasGetAll = false;
  }
}
function parseIndexSyntax(primKeyAndIndexes) {
  return primKeyAndIndexes.split(",").map(function(index15, indexNum) {
    index15 = index15.trim();
    var name2 = index15.replace(/([&*]|\+\+)/g, "");
    var keyPath = /^\[/.test(name2) ? name2.match(/^\[(.*)\]$/)[1].split("+") : name2;
    return createIndexSpec(name2, keyPath || null, /\&/.test(index15), /\*/.test(index15), /\+\+/.test(index15), isArray(keyPath), indexNum === 0);
  });
}
var Version = function() {
  function Version2() {
  }
  Version2.prototype._parseStoresSpec = function(stores, outSchema) {
    keys(stores).forEach(function(tableName) {
      if (stores[tableName] !== null) {
        var indexes = parseIndexSyntax(stores[tableName]);
        var primKey = indexes.shift();
        if (primKey.multi)
          throw new exceptions.Schema("Primary key cannot be multi-valued");
        indexes.forEach(function(idx) {
          if (idx.auto)
            throw new exceptions.Schema("Only primary key can be marked as autoIncrement (++)");
          if (!idx.keyPath)
            throw new exceptions.Schema("Index must have a name and cannot be an empty string");
        });
        outSchema[tableName] = createTableSchema(tableName, primKey, indexes);
      }
    });
  };
  Version2.prototype.stores = function(stores) {
    var db2 = this.db;
    this._cfg.storesSource = this._cfg.storesSource ? extend(this._cfg.storesSource, stores) : stores;
    var versions = db2._versions;
    var storesSpec = {};
    var dbschema = {};
    versions.forEach(function(version) {
      extend(storesSpec, version._cfg.storesSource);
      dbschema = version._cfg.dbschema = {};
      version._parseStoresSpec(storesSpec, dbschema);
    });
    db2._dbSchema = dbschema;
    removeTablesApi(db2, [db2._allTables, db2, db2.Transaction.prototype]);
    setApiOnPlace(db2, [db2._allTables, db2, db2.Transaction.prototype, this._cfg.tables], keys(dbschema), dbschema);
    db2._storeNames = keys(dbschema);
    return this;
  };
  Version2.prototype.upgrade = function(upgradeFunction) {
    this._cfg.contentUpgrade = upgradeFunction;
    return this;
  };
  return Version2;
}();
function createVersionConstructor(db2) {
  return makeClassConstructor(Version.prototype, function Version$$1(versionNumber) {
    this.db = db2;
    this._cfg = {
      version: versionNumber,
      storesSource: null,
      dbschema: {},
      tables: {},
      contentUpgrade: null
    };
  });
}
var databaseEnumerator;
function DatabaseEnumerator(indexedDB) {
  var hasDatabasesNative = indexedDB && typeof indexedDB.databases === "function";
  var dbNamesTable;
  if (!hasDatabasesNative) {
    var db2 = new Dexie(DBNAMES_DB, {addons: []});
    db2.version(1).stores({dbnames: "name"});
    dbNamesTable = db2.table("dbnames");
  }
  return {
    getDatabaseNames: function() {
      return hasDatabasesNative ? DexiePromise.resolve(indexedDB.databases()).then(function(infos) {
        return infos.map(function(info) {
          return info.name;
        }).filter(function(name2) {
          return name2 !== DBNAMES_DB;
        });
      }) : dbNamesTable.toCollection().primaryKeys();
    },
    add: function(name2) {
      return !hasDatabasesNative && name2 !== DBNAMES_DB && dbNamesTable.put({name: name2}).catch(nop);
    },
    remove: function(name2) {
      return !hasDatabasesNative && name2 !== DBNAMES_DB && dbNamesTable.delete(name2).catch(nop);
    }
  };
}
function initDatabaseEnumerator(indexedDB) {
  try {
    databaseEnumerator = DatabaseEnumerator(indexedDB);
  } catch (e) {
  }
}
function vip(fn2) {
  return newScope(function() {
    PSD.letThrough = true;
    return fn2();
  });
}
function dexieOpen(db2) {
  var state = db2._state;
  var indexedDB = db2._deps.indexedDB;
  if (state.isBeingOpened || db2.idbdb)
    return state.dbReadyPromise.then(function() {
      return state.dbOpenError ? rejection(state.dbOpenError) : db2;
    });
  debug2 && (state.openCanceller._stackHolder = getErrorWithStack());
  state.isBeingOpened = true;
  state.dbOpenError = null;
  state.openComplete = false;
  var resolveDbReady = state.dbReadyResolve, upgradeTransaction = null;
  return DexiePromise.race([state.openCanceller, new DexiePromise(function(resolve, reject) {
    if (!indexedDB)
      throw new exceptions.MissingAPI("indexedDB API not found. If using IE10+, make sure to run your code on a server URL (not locally). If using old Safari versions, make sure to include indexedDB polyfill.");
    var dbName = db2.name;
    var req = state.autoSchema ? indexedDB.open(dbName) : indexedDB.open(dbName, Math.round(db2.verno * 10));
    if (!req)
      throw new exceptions.MissingAPI("IndexedDB API not available");
    req.onerror = eventRejectHandler(reject);
    req.onblocked = wrap(db2._fireOnBlocked);
    req.onupgradeneeded = wrap(function(e) {
      upgradeTransaction = req.transaction;
      if (state.autoSchema && !db2._options.allowEmptyDB) {
        req.onerror = preventDefault;
        upgradeTransaction.abort();
        req.result.close();
        var delreq = indexedDB.deleteDatabase(dbName);
        delreq.onsuccess = delreq.onerror = wrap(function() {
          reject(new exceptions.NoSuchDatabase("Database " + dbName + " doesnt exist"));
        });
      } else {
        upgradeTransaction.onerror = eventRejectHandler(reject);
        var oldVer = e.oldVersion > Math.pow(2, 62) ? 0 : e.oldVersion;
        db2.idbdb = req.result;
        runUpgraders(db2, oldVer / 10, upgradeTransaction, reject);
      }
    }, reject);
    req.onsuccess = wrap(function() {
      upgradeTransaction = null;
      var idbdb = db2.idbdb = req.result;
      var objectStoreNames = slice(idbdb.objectStoreNames);
      if (objectStoreNames.length > 0)
        try {
          var tmpTrans = idbdb.transaction(safariMultiStoreFix(objectStoreNames), "readonly");
          if (state.autoSchema)
            readGlobalSchema(db2, idbdb, tmpTrans);
          else
            adjustToExistingIndexNames(db2, db2._dbSchema, tmpTrans);
          generateMiddlewareStacks(db2, tmpTrans);
        } catch (e) {
        }
      connections.push(db2);
      idbdb.onversionchange = wrap(function(ev) {
        state.vcFired = true;
        db2.on("versionchange").fire(ev);
      });
      databaseEnumerator.add(dbName);
      resolve();
    }, reject);
  })]).then(function() {
    state.onReadyBeingFired = [];
    return DexiePromise.resolve(vip(db2.on.ready.fire)).then(function fireRemainders() {
      if (state.onReadyBeingFired.length > 0) {
        var remainders = state.onReadyBeingFired.reduce(promisableChain, nop);
        state.onReadyBeingFired = [];
        return DexiePromise.resolve(vip(remainders)).then(fireRemainders);
      }
    });
  }).finally(function() {
    state.onReadyBeingFired = null;
  }).then(function() {
    state.isBeingOpened = false;
    return db2;
  }).catch(function(err) {
    try {
      upgradeTransaction && upgradeTransaction.abort();
    } catch (e) {
    }
    state.isBeingOpened = false;
    db2.close();
    state.dbOpenError = err;
    return rejection(state.dbOpenError);
  }).finally(function() {
    state.openComplete = true;
    resolveDbReady();
  });
}
function awaitIterator(iterator) {
  var callNext = function(result) {
    return iterator.next(result);
  }, doThrow = function(error) {
    return iterator.throw(error);
  }, onSuccess = step(callNext), onError = step(doThrow);
  function step(getNext) {
    return function(val) {
      var next = getNext(val), value = next.value;
      return next.done ? value : !value || typeof value.then !== "function" ? isArray(value) ? Promise.all(value).then(onSuccess, onError) : onSuccess(value) : value.then(onSuccess, onError);
    };
  }
  return step(callNext)();
}
function extractTransactionArgs(mode, _tableArgs_, scopeFunc) {
  var i = arguments.length;
  if (i < 2)
    throw new exceptions.InvalidArgument("Too few arguments");
  var args = new Array(i - 1);
  while (--i)
    args[i - 1] = arguments[i];
  scopeFunc = args.pop();
  var tables = flatten(args);
  return [mode, tables, scopeFunc];
}
function enterTransactionScope(db2, mode, storeNames, parentTransaction, scopeFunc) {
  return DexiePromise.resolve().then(function() {
    var transless = PSD.transless || PSD;
    var trans = db2._createTransaction(mode, storeNames, db2._dbSchema, parentTransaction);
    var zoneProps = {
      trans,
      transless
    };
    if (parentTransaction) {
      trans.idbtrans = parentTransaction.idbtrans;
    } else {
      trans.create();
    }
    var scopeFuncIsAsync = isAsyncFunction(scopeFunc);
    if (scopeFuncIsAsync) {
      incrementExpectedAwaits();
    }
    var returnValue;
    var promiseFollowed = DexiePromise.follow(function() {
      returnValue = scopeFunc.call(trans, trans);
      if (returnValue) {
        if (scopeFuncIsAsync) {
          var decrementor = decrementExpectedAwaits.bind(null, null);
          returnValue.then(decrementor, decrementor);
        } else if (typeof returnValue.next === "function" && typeof returnValue.throw === "function") {
          returnValue = awaitIterator(returnValue);
        }
      }
    }, zoneProps);
    return (returnValue && typeof returnValue.then === "function" ? DexiePromise.resolve(returnValue).then(function(x) {
      return trans.active ? x : rejection(new exceptions.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn"));
    }) : promiseFollowed.then(function() {
      return returnValue;
    })).then(function(x) {
      if (parentTransaction)
        trans._resolve();
      return trans._completion.then(function() {
        return x;
      });
    }).catch(function(e) {
      trans._reject(e);
      return rejection(e);
    });
  });
}
function pad(a, value, count) {
  var result = isArray(a) ? a.slice() : [a];
  for (var i = 0; i < count; ++i)
    result.push(value);
  return result;
}
function createVirtualIndexMiddleware(down) {
  return __assign(__assign({}, down), {table: function(tableName) {
    var table = down.table(tableName);
    var schema = table.schema;
    var indexLookup = {};
    var allVirtualIndexes = [];
    function addVirtualIndexes(keyPath, keyTail, lowLevelIndex) {
      var keyPathAlias = getKeyPathAlias(keyPath);
      var indexList = indexLookup[keyPathAlias] = indexLookup[keyPathAlias] || [];
      var keyLength = keyPath == null ? 0 : typeof keyPath === "string" ? 1 : keyPath.length;
      var isVirtual = keyTail > 0;
      var virtualIndex = __assign(__assign({}, lowLevelIndex), {
        isVirtual,
        isPrimaryKey: !isVirtual && lowLevelIndex.isPrimaryKey,
        keyTail,
        keyLength,
        extractKey: getKeyExtractor(keyPath),
        unique: !isVirtual && lowLevelIndex.unique
      });
      indexList.push(virtualIndex);
      if (!virtualIndex.isPrimaryKey) {
        allVirtualIndexes.push(virtualIndex);
      }
      if (keyLength > 1) {
        var virtualKeyPath = keyLength === 2 ? keyPath[0] : keyPath.slice(0, keyLength - 1);
        addVirtualIndexes(virtualKeyPath, keyTail + 1, lowLevelIndex);
      }
      indexList.sort(function(a, b) {
        return a.keyTail - b.keyTail;
      });
      return virtualIndex;
    }
    var primaryKey = addVirtualIndexes(schema.primaryKey.keyPath, 0, schema.primaryKey);
    indexLookup[":id"] = [primaryKey];
    for (var _i = 0, _a2 = schema.indexes; _i < _a2.length; _i++) {
      var index15 = _a2[_i];
      addVirtualIndexes(index15.keyPath, 0, index15);
    }
    function findBestIndex(keyPath) {
      var result2 = indexLookup[getKeyPathAlias(keyPath)];
      return result2 && result2[0];
    }
    function translateRange(range, keyTail) {
      return {
        type: range.type === 1 ? 2 : range.type,
        lower: pad(range.lower, range.lowerOpen ? down.MAX_KEY : down.MIN_KEY, keyTail),
        lowerOpen: true,
        upper: pad(range.upper, range.upperOpen ? down.MIN_KEY : down.MAX_KEY, keyTail),
        upperOpen: true
      };
    }
    function translateRequest(req) {
      var index16 = req.query.index;
      return index16.isVirtual ? __assign(__assign({}, req), {query: {
        index: index16,
        range: translateRange(req.query.range, index16.keyTail)
      }}) : req;
    }
    var result = __assign(__assign({}, table), {
      schema: __assign(__assign({}, schema), {primaryKey, indexes: allVirtualIndexes, getIndexByKeyPath: findBestIndex}),
      count: function(req) {
        return table.count(translateRequest(req));
      },
      query: function(req) {
        return table.query(translateRequest(req));
      },
      openCursor: function(req) {
        var _a3 = req.query.index, keyTail = _a3.keyTail, isVirtual = _a3.isVirtual, keyLength = _a3.keyLength;
        if (!isVirtual)
          return table.openCursor(req);
        function createVirtualCursor(cursor) {
          function _continue(key2) {
            key2 != null ? cursor.continue(pad(key2, req.reverse ? down.MAX_KEY : down.MIN_KEY, keyTail)) : req.unique ? cursor.continue(pad(cursor.key, req.reverse ? down.MIN_KEY : down.MAX_KEY, keyTail)) : cursor.continue();
          }
          var virtualCursor = Object.create(cursor, {
            continue: {value: _continue},
            continuePrimaryKey: {
              value: function(key2, primaryKey2) {
                cursor.continuePrimaryKey(pad(key2, down.MAX_KEY, keyTail), primaryKey2);
              }
            },
            key: {
              get: function() {
                var key2 = cursor.key;
                return keyLength === 1 ? key2[0] : key2.slice(0, keyLength);
              }
            },
            value: {
              get: function() {
                return cursor.value;
              }
            }
          });
          return virtualCursor;
        }
        return table.openCursor(translateRequest(req)).then(function(cursor) {
          return cursor && createVirtualCursor(cursor);
        });
      }
    });
    return result;
  }});
}
var virtualIndexMiddleware = {
  stack: "dbcore",
  name: "VirtualIndexMiddleware",
  level: 1,
  create: createVirtualIndexMiddleware
};
var hooksMiddleware = {
  stack: "dbcore",
  name: "HooksMiddleware",
  level: 2,
  create: function(downCore) {
    return __assign(__assign({}, downCore), {table: function(tableName) {
      var downTable = downCore.table(tableName);
      var primaryKey = downTable.schema.primaryKey;
      var tableMiddleware = __assign(__assign({}, downTable), {mutate: function(req) {
        var dxTrans = PSD.trans;
        var _a2 = dxTrans.table(tableName).hook, deleting = _a2.deleting, creating = _a2.creating, updating = _a2.updating;
        switch (req.type) {
          case "add":
            if (creating.fire === nop)
              break;
            return dxTrans._promise("readwrite", function() {
              return addPutOrDelete(req);
            }, true);
          case "put":
            if (creating.fire === nop && updating.fire === nop)
              break;
            return dxTrans._promise("readwrite", function() {
              return addPutOrDelete(req);
            }, true);
          case "delete":
            if (deleting.fire === nop)
              break;
            return dxTrans._promise("readwrite", function() {
              return addPutOrDelete(req);
            }, true);
          case "deleteRange":
            if (deleting.fire === nop)
              break;
            return dxTrans._promise("readwrite", function() {
              return deleteRange(req);
            }, true);
        }
        return downTable.mutate(req);
        function addPutOrDelete(req2) {
          var dxTrans2 = PSD.trans;
          var keys$$1 = req2.keys || getEffectiveKeys(primaryKey, req2);
          if (!keys$$1)
            throw new Error("Keys missing");
          req2 = req2.type === "add" || req2.type === "put" ? __assign(__assign({}, req2), {keys: keys$$1, wantResults: true}) : __assign({}, req2);
          if (req2.type !== "delete")
            req2.values = __spreadArrays(req2.values);
          if (req2.keys)
            req2.keys = __spreadArrays(req2.keys);
          return getExistingValues(downTable, req2, keys$$1).then(function(existingValues) {
            var contexts = keys$$1.map(function(key2, i) {
              var existingValue = existingValues[i];
              var ctx = {onerror: null, onsuccess: null};
              if (req2.type === "delete") {
                deleting.fire.call(ctx, key2, existingValue, dxTrans2);
              } else if (req2.type === "add" || existingValue === void 0) {
                var generatedPrimaryKey = creating.fire.call(ctx, key2, req2.values[i], dxTrans2);
                if (key2 == null && generatedPrimaryKey != null) {
                  key2 = generatedPrimaryKey;
                  req2.keys[i] = key2;
                  if (!primaryKey.outbound) {
                    setByKeyPath(req2.values[i], primaryKey.keyPath, key2);
                  }
                }
              } else {
                var objectDiff = getObjectDiff(existingValue, req2.values[i]);
                var additionalChanges_1 = updating.fire.call(ctx, objectDiff, key2, existingValue, dxTrans2);
                if (additionalChanges_1) {
                  var requestedValue_1 = req2.values[i];
                  Object.keys(additionalChanges_1).forEach(function(keyPath) {
                    setByKeyPath(requestedValue_1, keyPath, additionalChanges_1[keyPath]);
                  });
                }
              }
              return ctx;
            });
            return downTable.mutate(req2).then(function(_a3) {
              var failures = _a3.failures, results = _a3.results, numFailures = _a3.numFailures, lastResult = _a3.lastResult;
              for (var i = 0; i < keys$$1.length; ++i) {
                var primKey = results ? results[i] : keys$$1[i];
                var ctx = contexts[i];
                if (primKey == null) {
                  ctx.onerror && ctx.onerror(failures[i]);
                } else {
                  ctx.onsuccess && ctx.onsuccess(req2.type === "put" && existingValues[i] ? req2.values[i] : primKey);
                }
              }
              return {failures, results, numFailures, lastResult};
            }).catch(function(error) {
              contexts.forEach(function(ctx) {
                return ctx.onerror && ctx.onerror(error);
              });
              return Promise.reject(error);
            });
          });
        }
        function deleteRange(req2) {
          return deleteNextChunk(req2.trans, req2.range, 1e4);
        }
        function deleteNextChunk(trans, range, limit) {
          return downTable.query({trans, values: false, query: {index: primaryKey, range}, limit}).then(function(_a3) {
            var result = _a3.result;
            return addPutOrDelete({type: "delete", keys: result, trans}).then(function(res) {
              if (res.numFailures > 0)
                return Promise.reject(res.failures[0]);
              if (result.length < limit) {
                return {failures: [], numFailures: 0, lastResult: void 0};
              } else {
                return deleteNextChunk(trans, __assign(__assign({}, range), {lower: result[result.length - 1], lowerOpen: true}), limit);
              }
            });
          });
        }
      }});
      return tableMiddleware;
    }});
  }
};
var Dexie = function() {
  function Dexie5(name2, options) {
    var _this = this;
    this._middlewares = {};
    this.verno = 0;
    var deps = Dexie5.dependencies;
    this._options = options = __assign({
      addons: Dexie5.addons,
      autoOpen: true,
      indexedDB: deps.indexedDB,
      IDBKeyRange: deps.IDBKeyRange
    }, options);
    this._deps = {
      indexedDB: options.indexedDB,
      IDBKeyRange: options.IDBKeyRange
    };
    var addons = options.addons;
    this._dbSchema = {};
    this._versions = [];
    this._storeNames = [];
    this._allTables = {};
    this.idbdb = null;
    var state = {
      dbOpenError: null,
      isBeingOpened: false,
      onReadyBeingFired: null,
      openComplete: false,
      dbReadyResolve: nop,
      dbReadyPromise: null,
      cancelOpen: nop,
      openCanceller: null,
      autoSchema: true
    };
    state.dbReadyPromise = new DexiePromise(function(resolve) {
      state.dbReadyResolve = resolve;
    });
    state.openCanceller = new DexiePromise(function(_27, reject) {
      state.cancelOpen = reject;
    });
    this._state = state;
    this.name = name2;
    this.on = Events(this, "populate", "blocked", "versionchange", {ready: [promisableChain, nop]});
    this.on.ready.subscribe = override(this.on.ready.subscribe, function(subscribe) {
      return function(subscriber, bSticky) {
        Dexie5.vip(function() {
          var state2 = _this._state;
          if (state2.openComplete) {
            if (!state2.dbOpenError)
              DexiePromise.resolve().then(subscriber);
            if (bSticky)
              subscribe(subscriber);
          } else if (state2.onReadyBeingFired) {
            state2.onReadyBeingFired.push(subscriber);
            if (bSticky)
              subscribe(subscriber);
          } else {
            subscribe(subscriber);
            var db_1 = _this;
            if (!bSticky)
              subscribe(function unsubscribe() {
                db_1.on.ready.unsubscribe(subscriber);
                db_1.on.ready.unsubscribe(unsubscribe);
              });
          }
        });
      };
    });
    this.Collection = createCollectionConstructor(this);
    this.Table = createTableConstructor(this);
    this.Transaction = createTransactionConstructor(this);
    this.Version = createVersionConstructor(this);
    this.WhereClause = createWhereClauseConstructor(this);
    this.on("versionchange", function(ev) {
      if (ev.newVersion > 0)
        console.warn("Another connection wants to upgrade database '" + _this.name + "'. Closing db now to resume the upgrade.");
      else
        console.warn("Another connection wants to delete database '" + _this.name + "'. Closing db now to resume the delete request.");
      _this.close();
    });
    this.on("blocked", function(ev) {
      if (!ev.newVersion || ev.newVersion < ev.oldVersion)
        console.warn("Dexie.delete('" + _this.name + "') was blocked");
      else
        console.warn("Upgrade '" + _this.name + "' blocked by other connection holding version " + ev.oldVersion / 10);
    });
    this._maxKey = getMaxKey(options.IDBKeyRange);
    this._createTransaction = function(mode, storeNames, dbschema, parentTransaction) {
      return new _this.Transaction(mode, storeNames, dbschema, parentTransaction);
    };
    this._fireOnBlocked = function(ev) {
      _this.on("blocked").fire(ev);
      connections.filter(function(c) {
        return c.name === _this.name && c !== _this && !c._state.vcFired;
      }).map(function(c) {
        return c.on("versionchange").fire(ev);
      });
    };
    this.use(virtualIndexMiddleware);
    this.use(hooksMiddleware);
    addons.forEach(function(addon) {
      return addon(_this);
    });
  }
  Dexie5.prototype.version = function(versionNumber) {
    if (isNaN(versionNumber) || versionNumber < 0.1)
      throw new exceptions.Type("Given version is not a positive number");
    versionNumber = Math.round(versionNumber * 10) / 10;
    if (this.idbdb || this._state.isBeingOpened)
      throw new exceptions.Schema("Cannot add version when database is open");
    this.verno = Math.max(this.verno, versionNumber);
    var versions = this._versions;
    var versionInstance = versions.filter(function(v) {
      return v._cfg.version === versionNumber;
    })[0];
    if (versionInstance)
      return versionInstance;
    versionInstance = new this.Version(versionNumber);
    versions.push(versionInstance);
    versions.sort(lowerVersionFirst);
    versionInstance.stores({});
    this._state.autoSchema = false;
    return versionInstance;
  };
  Dexie5.prototype._whenReady = function(fn2) {
    var _this = this;
    return this._state.openComplete || PSD.letThrough ? fn2() : new DexiePromise(function(resolve, reject) {
      if (!_this._state.isBeingOpened) {
        if (!_this._options.autoOpen) {
          reject(new exceptions.DatabaseClosed());
          return;
        }
        _this.open().catch(nop);
      }
      _this._state.dbReadyPromise.then(resolve, reject);
    }).then(fn2);
  };
  Dexie5.prototype.use = function(_a2) {
    var stack = _a2.stack, create = _a2.create, level = _a2.level, name2 = _a2.name;
    if (name2)
      this.unuse({stack, name: name2});
    var middlewares = this._middlewares[stack] || (this._middlewares[stack] = []);
    middlewares.push({stack, create, level: level == null ? 10 : level, name: name2});
    middlewares.sort(function(a, b) {
      return a.level - b.level;
    });
    return this;
  };
  Dexie5.prototype.unuse = function(_a2) {
    var stack = _a2.stack, name2 = _a2.name, create = _a2.create;
    if (stack && this._middlewares[stack]) {
      this._middlewares[stack] = this._middlewares[stack].filter(function(mw) {
        return create ? mw.create !== create : name2 ? mw.name !== name2 : false;
      });
    }
    return this;
  };
  Dexie5.prototype.open = function() {
    return dexieOpen(this);
  };
  Dexie5.prototype.close = function() {
    var idx = connections.indexOf(this), state = this._state;
    if (idx >= 0)
      connections.splice(idx, 1);
    if (this.idbdb) {
      try {
        this.idbdb.close();
      } catch (e) {
      }
      this.idbdb = null;
    }
    this._options.autoOpen = false;
    state.dbOpenError = new exceptions.DatabaseClosed();
    if (state.isBeingOpened)
      state.cancelOpen(state.dbOpenError);
    state.dbReadyPromise = new DexiePromise(function(resolve) {
      state.dbReadyResolve = resolve;
    });
    state.openCanceller = new DexiePromise(function(_27, reject) {
      state.cancelOpen = reject;
    });
  };
  Dexie5.prototype.delete = function() {
    var _this = this;
    var hasArguments = arguments.length > 0;
    var state = this._state;
    return new DexiePromise(function(resolve, reject) {
      var doDelete = function() {
        _this.close();
        var req = _this._deps.indexedDB.deleteDatabase(_this.name);
        req.onsuccess = wrap(function() {
          databaseEnumerator.remove(_this.name);
          resolve();
        });
        req.onerror = eventRejectHandler(reject);
        req.onblocked = _this._fireOnBlocked;
      };
      if (hasArguments)
        throw new exceptions.InvalidArgument("Arguments not allowed in db.delete()");
      if (state.isBeingOpened) {
        state.dbReadyPromise.then(doDelete);
      } else {
        doDelete();
      }
    });
  };
  Dexie5.prototype.backendDB = function() {
    return this.idbdb;
  };
  Dexie5.prototype.isOpen = function() {
    return this.idbdb !== null;
  };
  Dexie5.prototype.hasBeenClosed = function() {
    var dbOpenError = this._state.dbOpenError;
    return dbOpenError && dbOpenError.name === "DatabaseClosed";
  };
  Dexie5.prototype.hasFailed = function() {
    return this._state.dbOpenError !== null;
  };
  Dexie5.prototype.dynamicallyOpened = function() {
    return this._state.autoSchema;
  };
  Object.defineProperty(Dexie5.prototype, "tables", {
    get: function() {
      var _this = this;
      return keys(this._allTables).map(function(name2) {
        return _this._allTables[name2];
      });
    },
    enumerable: true,
    configurable: true
  });
  Dexie5.prototype.transaction = function() {
    var args = extractTransactionArgs.apply(this, arguments);
    return this._transaction.apply(this, args);
  };
  Dexie5.prototype._transaction = function(mode, tables, scopeFunc) {
    var _this = this;
    var parentTransaction = PSD.trans;
    if (!parentTransaction || parentTransaction.db !== this || mode.indexOf("!") !== -1)
      parentTransaction = null;
    var onlyIfCompatible = mode.indexOf("?") !== -1;
    mode = mode.replace("!", "").replace("?", "");
    var idbMode, storeNames;
    try {
      storeNames = tables.map(function(table) {
        var storeName = table instanceof _this.Table ? table.name : table;
        if (typeof storeName !== "string")
          throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");
        return storeName;
      });
      if (mode == "r" || mode === READONLY)
        idbMode = READONLY;
      else if (mode == "rw" || mode == READWRITE)
        idbMode = READWRITE;
      else
        throw new exceptions.InvalidArgument("Invalid transaction mode: " + mode);
      if (parentTransaction) {
        if (parentTransaction.mode === READONLY && idbMode === READWRITE) {
          if (onlyIfCompatible) {
            parentTransaction = null;
          } else
            throw new exceptions.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");
        }
        if (parentTransaction) {
          storeNames.forEach(function(storeName) {
            if (parentTransaction && parentTransaction.storeNames.indexOf(storeName) === -1) {
              if (onlyIfCompatible) {
                parentTransaction = null;
              } else
                throw new exceptions.SubTransaction("Table " + storeName + " not included in parent transaction.");
            }
          });
        }
        if (onlyIfCompatible && parentTransaction && !parentTransaction.active) {
          parentTransaction = null;
        }
      }
    } catch (e) {
      return parentTransaction ? parentTransaction._promise(null, function(_27, reject) {
        reject(e);
      }) : rejection(e);
    }
    var enterTransaction = enterTransactionScope.bind(null, this, idbMode, storeNames, parentTransaction, scopeFunc);
    return parentTransaction ? parentTransaction._promise(idbMode, enterTransaction, "lock") : PSD.trans ? usePSD(PSD.transless, function() {
      return _this._whenReady(enterTransaction);
    }) : this._whenReady(enterTransaction);
  };
  Dexie5.prototype.table = function(tableName) {
    if (!hasOwn(this._allTables, tableName)) {
      throw new exceptions.InvalidTable("Table " + tableName + " does not exist");
    }
    return this._allTables[tableName];
  };
  return Dexie5;
}();
var Dexie$1 = Dexie;
props(Dexie$1, __assign(__assign({}, fullNameExceptions), {
  delete: function(databaseName) {
    var db2 = new Dexie$1(databaseName);
    return db2.delete();
  },
  exists: function(name2) {
    return new Dexie$1(name2, {addons: []}).open().then(function(db2) {
      db2.close();
      return true;
    }).catch("NoSuchDatabaseError", function() {
      return false;
    });
  },
  getDatabaseNames: function(cb) {
    return databaseEnumerator ? databaseEnumerator.getDatabaseNames().then(cb) : DexiePromise.resolve([]);
  },
  defineClass: function() {
    function Class(content) {
      extend(this, content);
    }
    return Class;
  },
  ignoreTransaction: function(scopeFunc) {
    return PSD.trans ? usePSD(PSD.transless, scopeFunc) : scopeFunc();
  },
  vip,
  async: function(generatorFn) {
    return function() {
      try {
        var rv = awaitIterator(generatorFn.apply(this, arguments));
        if (!rv || typeof rv.then !== "function")
          return DexiePromise.resolve(rv);
        return rv;
      } catch (e) {
        return rejection(e);
      }
    };
  },
  spawn: function(generatorFn, args, thiz) {
    try {
      var rv = awaitIterator(generatorFn.apply(thiz, args || []));
      if (!rv || typeof rv.then !== "function")
        return DexiePromise.resolve(rv);
      return rv;
    } catch (e) {
      return rejection(e);
    }
  },
  currentTransaction: {
    get: function() {
      return PSD.trans || null;
    }
  },
  waitFor: function(promiseOrFunction, optionalTimeout) {
    var promise = DexiePromise.resolve(typeof promiseOrFunction === "function" ? Dexie$1.ignoreTransaction(promiseOrFunction) : promiseOrFunction).timeout(optionalTimeout || 6e4);
    return PSD.trans ? PSD.trans.waitFor(promise) : promise;
  },
  Promise: DexiePromise,
  debug: {
    get: function() {
      return debug2;
    },
    set: function(value) {
      setDebug(value, value === "dexie" ? function() {
        return true;
      } : dexieStackFrameFilter);
    }
  },
  derive,
  extend,
  props,
  override,
  Events,
  getByKeyPath,
  setByKeyPath,
  delByKeyPath,
  shallowClone,
  deepClone,
  getObjectDiff,
  asap,
  minKey,
  addons: [],
  connections,
  errnames,
  dependencies: function() {
    try {
      return {
        indexedDB: _global.indexedDB || _global.mozIndexedDB || _global.webkitIndexedDB || _global.msIndexedDB,
        IDBKeyRange: _global.IDBKeyRange || _global.webkitIDBKeyRange
      };
    } catch (e) {
      return {indexedDB: null, IDBKeyRange: null};
    }
  }(),
  semVer: DEXIE_VERSION,
  version: DEXIE_VERSION.split(".").map(function(n) {
    return parseInt(n);
  }).reduce(function(p, c, i) {
    return p + c / Math.pow(10, i * 2);
  }),
  default: Dexie$1,
  Dexie: Dexie$1
}));
Dexie$1.maxKey = getMaxKey(Dexie$1.dependencies.IDBKeyRange);
initDatabaseEnumerator(Dexie.dependencies.indexedDB);
DexiePromise.rejectionMapper = mapError;
setDebug(debug2, dexieStackFrameFilter);
const dexie_default = Dexie;

// src/dexie/DexieRecord.ts
class DexieRecord2 {
  constructor(modelConstructor, table, meta2) {
    this.modelConstructor = modelConstructor;
    this.table = table;
    this.meta = meta2;
  }
  async get(pk6) {
    return this.table.get(pk6).catch((e) => {
      throw new DexieError2(`DexieRecord: problem getting record ${JSON.stringify(pk6)} of model ${capitalize(this.meta.modelName)}: ${e.message}`, `dexie/${e.code || e.name || "get"}`);
    });
  }
  async add(record) {
    if (this.meta.hasDynamicPath) {
      if (!this.meta.dynamicPathComponents.every((i) => record[i])) {
        throw new DexieError2(`The model ${capitalize(this.meta.modelName)} is based on a dynamic path [ ${this.meta.dynamicPathComponents.join(", ")} ] and every part of this path is therefore a required field but the record hash passed in did not define values for all these properties. The properties which WERE pass in included: ${Object.keys(record).join(", ")}`, "dexie/missing-property");
      }
    }
    if (!record.id) {
      record.id = key();
    }
    const now = new Date().getTime();
    record.createdAt = now;
    record.lastUpdated = now;
    const pk6 = await this.table.add(record).catch((e) => {
      throw new DexieError2(`DexieRecord: Problem adding record to ${capitalize(this.meta.modelName)}: ${e.message}`, `dexie/${e.code || e.name || "add"}`);
    });
    return this.get(pk6);
  }
  async update(pk6, updateHash) {
    const now = new Date().getTime();
    updateHash.lastUpdated = now;
    const result = await this.table.update(pk6, updateHash).catch((e) => {
      throw new DexieError2(`DexieRecord: Problem updating ${capitalize(this.meta.modelName)}.${typeof pk6 === "string" ? pk6 : pk6.id}: ${e.message}`, `dexie/${e.code || e.name || "update"}`);
    });
    if (result === 0) {
      throw new DexieError2(`The primary key passed in to record.update(${JSON.stringify(pk6)}) was NOT found in the IndexedDB!`, "dexie/record-not-found");
    }
    if (result > 1) {
      throw new DexieError2(`While calling record.update(${JSON.stringify(pk6)}) MORE than one record was updated!`, "dexie/unexpected-error");
    }
  }
  async remove(id) {
    return this.table.delete(id).catch((e) => {
      throw new DexieError2(`Problem removing record ${JSON.stringify(id)} from the ${capitalize(this.meta.modelName)}: ${e.message}`, `dexie/${e.code || e.name || "remove"}`);
    });
  }
}

// src/dexie/DexieList.ts
class DexieList2 {
  constructor(modelConstructor, table, meta2) {
    this.modelConstructor = modelConstructor;
    this.table = table;
    this.meta = meta2;
  }
  async all(options = {
    orderBy: "lastUpdated"
  }) {
    const c = this.meta.hasDynamicPath ? this.table : this.table.orderBy(options.orderBy);
    if (options.limit) {
      c.limit(options.limit);
    }
    if (options.offset) {
      c.offset(options.offset);
    }
    const results = c.toArray().catch((e) => {
      if (e.code === "NotFoundError" || e.name === "NotFoundError") {
        console.info(`No records for model ${capitalize(this.meta.modelName)} found!`);
        return [];
      } else {
        throw new DexieError2(`Problem with list(${capitalize(this.meta.modelName)}).all(${JSON.stringify(options)}): ${e.message}`, `dexie/${e.code || e.name || "list.all"}`);
      }
    });
    return results || [];
  }
  async where(prop, value, options = {}) {
    const [op, val] = Array.isArray(value) && ["=", ">", "<"].includes(value[0]) ? value : ["=", value];
    let query = op === "=" ? this.table.where(prop).equals(val) : op === ">" ? this.table.where(prop).above(val) : this.table.where(prop).below(val);
    if (options.limit) {
      query = query.limit(options.limit);
    }
    if (options.offset) {
      query = query.offset(options.offset);
    }
    const results = query.toArray().catch((e) => {
      if (e.code === "NotFoundError" || e.name === "NotFoundError") {
        console.info(`No records for model ${capitalize(this.meta.modelName)} found!`);
        return [];
      } else {
        throw new DexieError2(`list.where("${prop}", ${JSON.stringify(value)}, ${JSON.stringify(options)}) failed to execute: ${e.message}`, `dexie/${e.code || e.name || "list.where"}`);
      }
    });
    return results || [];
  }
  async recent(limit, skip) {
    const c = skip ? this.table.orderBy("lastUpdated").reverse().limit(limit).offset(skip) : this.table.orderBy("lastUpdated").reverse().limit(limit);
    return c.toArray();
  }
  async since(datetime2, options = {}) {
    return this.where("lastUpdated", [">", datetime2]);
  }
  async last(limit, skip) {
    const c = skip ? this.table.orderBy("createdAt").reverse().limit(limit).offset(skip) : this.table.orderBy("createdAt").reverse().limit(limit);
    return c.toArray().catch((e) => {
      if (e.code === "NotFoundError" || e.name === "NotFoundError") {
        console.info(`No records for model ${capitalize(this.meta.modelName)} found!`);
        return [];
      } else {
        throw new DexieError2(`list.last(${limit}${skip ? `, skip: ${skip}` : ""}) failed to execute: ${e.message}`, `dexie/${e.code || e.name || "list.last"}`);
      }
    });
  }
  async first(limit, skip) {
    const c = skip ? this.table.orderBy("createdAt").limit(limit).offset(skip) : this.table.orderBy("createdAt").limit(limit);
    return c.toArray().catch((e) => {
      if (e.code === "NotFoundError" || e.name === "NotFoundError") {
        console.info(`No records for model ${capitalize(this.meta.modelName)} found!`);
        return [];
      } else {
        throw new DexieError2(`list.first(${limit}${skip ? `, skip: ${skip}` : ""}) failed to execute: ${e.message}`, `dexie/${e.code || e.name || "list.first"}`);
      }
    });
  }
}

// src/dexie/DexieDb.ts
class DexieDb {
  constructor(_name, ...models2) {
    this._name = _name;
    this._models = {};
    this._constructors = {};
    this._meta = {};
    this._singularToPlural = {};
    this._currentVersion = 1;
    this._priors = [];
    this._isMapped = false;
    this._status = "initialized";
    this._models = DexieDb.modelConversion(...models2);
    this._db = DexieDb._indexedDb ? new dexie_default(this._name, {indexedDB: DexieDb._indexedDb}) : new dexie_default(this._name);
    this._db.on("blocked", () => {
      this._status = "blocked";
    });
    this._db.on("populate", () => {
      this._status = "populate";
    });
    this._db.on("ready", () => {
      this._status = "ready";
    });
    models2.forEach((m) => {
      const r = Record2.create(m);
      this._constructors[r.pluralName] = m;
      this._meta[r.pluralName] = {
        ...r.META,
        modelName: r.modelName,
        hasDynamicPath: r.hasDynamicPath,
        dynamicPathComponents: r.dynamicPathComponents,
        pluralName: r.pluralName
      };
      this._singularToPlural[r.modelName] = r.pluralName;
    });
  }
  static modelConversion(...modelConstructors) {
    if (modelConstructors.length === 0) {
      throw new FireModelError2(`A call to DexieModel.models() was made without passing in ANY firemodel models into it! You must at least provide one model`, "firemodel/no-models");
    }
    return modelConstructors.reduce((agg, curr) => {
      const dexieModel = [];
      const r = Record2.createWith(curr, new curr());
      const compoundIndex = r.hasDynamicPath ? ["id"].concat(r.dynamicPathComponents) : "";
      if (compoundIndex) {
        dexieModel.push(`[${compoundIndex.join("+")}]`);
      }
      (r.hasDynamicPath ? [] : ["id"]).concat((r.META.dbIndexes || []).filter((i) => i.isUniqueIndex).map((i) => i.property)).forEach((i) => dexieModel.push(`&${i}`));
      const indexes = [].concat((r.META.dbIndexes || []).filter((i) => i.isIndex && !i.isUniqueIndex).map((i) => i.property)).concat(r.hasDynamicPath ? r.dynamicPathComponents.filter((i) => !r.META.dbIndexes.map((idx) => idx.property).includes(i)) : []).forEach((i) => dexieModel.push(i));
      const multiEntryIndex = [].concat(r.META.dbIndexes.filter((i) => i.isMultiEntryIndex).map((i) => i.property)).forEach((i) => dexieModel.push(`*${i}`));
      agg[r.pluralName] = dexieModel.join(",").trim();
      return agg;
    }, {});
  }
  static indexedDB(indexedDB, idbKeyRange) {
    DexieDb._indexedDb = indexedDB;
    if (idbKeyRange) {
      dexie_default.dependencies.IDBKeyRange = idbKeyRange;
    }
  }
  get models() {
    return this._models;
  }
  get dbName() {
    return this._name;
  }
  get version() {
    return this._currentVersion;
  }
  get modelNames() {
    return Object.keys(this._singularToPlural);
  }
  get pluralNames() {
    return Object.keys(this._models);
  }
  get db() {
    return this._db;
  }
  get status() {
    return this._status;
  }
  get isMapped() {
    return this._isMapped;
  }
  get dexieTables() {
    return this.db.tables.map((t) => ({
      name: t.name,
      schema: t.schema
    }));
  }
  addPriorVersion(version) {
    this._priors.push(version);
    this._currentVersion++;
    return this;
  }
  modelIsManagedByDexie(model3) {
    const r = Record2.create(model3);
    return this.modelNames.includes(r.modelName);
  }
  table(model3) {
    const r = Record2.create(model3);
    if (!this.isOpen()) {
      this.open();
    }
    if (!this.modelIsManagedByDexie(model3)) {
      throw new DexieError2(`Attempt to get a Dexie.Table for "${capitalize(r.modelName)}" Firemodel model but this model is not being managed by Dexie! Models being managed are: ${this.modelNames.join(", ")}`, "dexie/table-does-not-exist");
    }
    const table = this._db.table(r.pluralName);
    table.mapToClass(model3);
    return table;
  }
  record(model3) {
    const r = Record2.create(model3);
    if (!this.modelNames.includes(r.modelName)) {
      const isPlural = this.pluralNames.includes(r.modelName);
      throw new DexieError2(`Attempt to reach the record API via DexieDb.record("${model3}") failed as there is no known Firemodel model of that name. ${isPlural ? "It looks like you may have accidentally used the plural name instead" : ""}. Known model types are: ${this.modelNames.join(", ")}`, "dexie/model-does-not-exist");
    }
    if (!this.isOpen()) {
      this.open();
    }
    return new DexieRecord2(model3, this.table(model3), this.meta(r.modelName));
  }
  list(model3) {
    const r = Record2.create(model3);
    if (!this.isOpen()) {
      this.open();
    }
    const table = r.hasDynamicPath ? this.table(model3) : this.table(model3);
    const meta2 = this.meta(r.modelName);
    return new DexieList2(model3, table, meta2);
  }
  meta(name2, _originated = "meta") {
    return this._checkPluralThenSingular(this._meta, name2, _originated);
  }
  modelConstructor(name2) {
    return this._checkPluralThenSingular(this._constructors, name2, "modelConstructor");
  }
  isOpen() {
    return this._db.isOpen();
  }
  mapModels() {
    this._mapVersionsToDexie();
    this._status = "mapped";
    this._isMapped = true;
  }
  async open() {
    if (this._db.isOpen()) {
      throw new DexieError2(`Attempt to call DexieDb.open() failed because the database is already open!`, `dexie/db-already-open`);
    }
    if (!this.isMapped) {
      this.mapModels();
    }
    return this._db.open();
  }
  close() {
    if (!this._db.isOpen()) {
      throw new DexieError2(`Attempt to call DexieDb.close() failed because the database is NOT open!`, `dexie/db-not-open`);
    }
    this._db.close();
  }
  _checkPluralThenSingular(obj, name2, fn2) {
    if (obj[name2]) {
      return obj[name2];
    } else if (this._singularToPlural[name2]) {
      return obj[this._singularToPlural[name2]];
    }
    throw new DexieError2(`Failed while calling DexieModel.${fn2}("${name2}") because "${name2}" is neither a singular or plural name of a known model!`, `firemodel/invalid-dexie-model`);
  }
  _mapVersionsToDexie() {
    this._priors.forEach((prior, idx) => {
      if (prior.upgrade) {
        this._db.version(idx + 1).stores(prior.models).upgrade(prior.upgrade);
      } else {
        this._db.version(idx).stores(prior.models);
      }
    });
    this._db.version(this._currentVersion).stores(this.models);
    this._isMapped = true;
  }
}

// src/dexie/index.ts

// src/index.ts
export {
  AuditLog,
  DexieDb,
  DexieList2 as DexieList,
  DexieRecord2 as DexieRecord,
  FireModel2 as FireModel,
  FmEvents,
  IFmCrudOperations,
  List,
  Mock2 as Mock,
  Model59 as Model,
  OneWay,
  Record2 as Record,
  RelationshipCardinality,
  RelationshipPolicy,
  VeuxWrapper,
  Watch,
  belongsTo,
  constrain,
  constrainedProperty,
  createCompositeKey,
  defaultValue,
  desc,
  encrypt,
  key as fbKey,
  hasMany,
  hasOne,
  index11 as index,
  isConstructable,
  length,
  listRegisteredModels,
  max3 as max,
  min3 as min,
  mock,
  model,
  modelConstructorLookup,
  modelNameLookup,
  modelRegister,
  modelRegistryLookup,
  ownedBy,
  pathJoin2 as pathJoin,
  property,
  pushKey,
  uniqueIndex
};
